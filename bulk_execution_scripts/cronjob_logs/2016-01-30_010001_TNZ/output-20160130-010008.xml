<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20160130 01:01:00.250">
<suite source="/opt/robot/robotworkspace/robot_testsuites" id="s1" name="Robot Testsuites">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic" id="s1-s1" name="Basic">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid" id="s1-s1-s1" name="PrePaid">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC" id="s1-s1-s1-s1" name="MFC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration" id="s1-s1-s1-s1-s1" name="MFC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/MFC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s1-s1-s1-s1-s1" name="MFC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160130 01:01:01.583" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:01:01.586" level="INFO">${date} = Sat Jan 30 01:01:01 CET 2016</msg>
<status status="PASS" endtime="20160130 01:01:01.585" starttime="20160130 01:01:01.567"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:01.590" level="INFO">Date and time: Sat Jan 30 01:01:01 CET 2016</msg>
<status status="PASS" endtime="20160130 01:01:01.591" starttime="20160130 01:01:01.587"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:01.594" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160130 01:01:01.595" starttime="20160130 01:01:01.592"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:01.651" starttime="20160130 01:01:01.650"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:01.845" starttime="20160130 01:01:01.664"></status>
</kw>
<msg timestamp="20160130 01:01:01.849" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160130 01:01:01.848" starttime="20160130 01:01:01.653"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:01:01.865" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:01:02.492" level="INFO">Read output: Last login: Fri Jan 29 02:38:44 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:01:02.494" starttime="20160130 01:01:01.861"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:02.495" starttime="20160130 01:01:01.852"></status>
</kw>
<msg timestamp="20160130 01:01:02.498" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160130 01:01:02.497" starttime="20160130 01:01:01.638"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:01:02.504" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:01:02.504" starttime="20160130 01:01:02.500"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:01:02.507" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160130 01:01:02.988" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:01:02.990" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:01:02.989" starttime="20160130 01:01:02.505"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:02.997" starttime="20160130 01:01:02.994"></status>
</kw>
<msg timestamp="20160130 01:01:02.998" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:01:02.999" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:01:02.997" starttime="20160130 01:01:02.991"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:03.006" starttime="20160130 01:01:03.005"></status>
</kw>
<msg timestamp="20160130 01:01:03.008" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:03.007" starttime="20160130 01:01:03.000"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160130 01:01:03.012" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:01:03.011" starttime="20160130 01:01:03.009"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:01:03.015" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:01:03.015" starttime="20160130 01:01:03.013"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:03.018" starttime="20160130 01:01:03.017"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:03.030" starttime="20160130 01:01:03.028"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:01:03.036" starttime="20160130 01:01:03.031"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:03.037" starttime="20160130 01:01:03.020"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:03.044" starttime="20160130 01:01:03.042"></status>
</kw>
<msg timestamp="20160130 01:01:03.045" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:01:03.045" starttime="20160130 01:01:03.038"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:03.048" starttime="20160130 01:01:03.046"></status>
</kw>
<msg timestamp="20160130 01:01:03.050" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160130 01:01:03.051" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:01:03.049" starttime="20160130 01:01:01.611"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:03.098" starttime="20160130 01:01:03.096"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:03.147" starttime="20160130 01:01:03.103"></status>
</kw>
<msg timestamp="20160130 01:01:03.149" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160130 01:01:03.148" starttime="20160130 01:01:03.099"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:01:03.158" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:01:04.008" level="INFO">Read output: Last login: Fri Jan 29 02:41:37 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:01:04.009" starttime="20160130 01:01:03.156"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:04.010" starttime="20160130 01:01:03.150"></status>
</kw>
<msg timestamp="20160130 01:01:04.013" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160130 01:01:04.012" starttime="20160130 01:01:03.086"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:01:04.019" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:01:04.019" starttime="20160130 01:01:04.014"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:01:04.022" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160130 01:01:04.951" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:01:04.953" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:01:04.952" starttime="20160130 01:01:04.020"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:04.959" starttime="20160130 01:01:04.956"></status>
</kw>
<msg timestamp="20160130 01:01:04.960" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:01:04.961" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:01:04.960" starttime="20160130 01:01:04.954"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:04.968" starttime="20160130 01:01:04.967"></status>
</kw>
<msg timestamp="20160130 01:01:04.969" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:04.969" starttime="20160130 01:01:04.962"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160130 01:01:04.973" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:01:04.972" starttime="20160130 01:01:04.970"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:01:04.976" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:01:04.975" starttime="20160130 01:01:04.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:04.978" starttime="20160130 01:01:04.977"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:04.990" starttime="20160130 01:01:04.988"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:01:04.994" starttime="20160130 01:01:04.991"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:04.997" starttime="20160130 01:01:04.979"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:05.015" starttime="20160130 01:01:05.012"></status>
</kw>
<msg timestamp="20160130 01:01:05.019" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:01:05.017" starttime="20160130 01:01:05.001"></status>
</kw>
<msg timestamp="20160130 01:01:05.025" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160130 01:01:05.026" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:01:05.022" starttime="20160130 01:01:03.064"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:05.125" starttime="20160130 01:01:05.121"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:05.197" starttime="20160130 01:01:05.137"></status>
</kw>
<msg timestamp="20160130 01:01:05.200" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160130 01:01:05.199" starttime="20160130 01:01:05.127"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:01:05.217" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:01:05.843" level="INFO">Read output: Last login: Fri Jan 29 02:38:46 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:01:05.848" starttime="20160130 01:01:05.213"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:05.850" starttime="20160130 01:01:05.202"></status>
</kw>
<msg timestamp="20160130 01:01:05.854" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160130 01:01:05.853" starttime="20160130 01:01:05.100"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:01:05.869" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:01:05.868" starttime="20160130 01:01:05.857"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:01:05.876" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160130 01:01:06.064" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:01:06.067" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:01:06.066" starttime="20160130 01:01:05.871"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:06.073" starttime="20160130 01:01:06.070"></status>
</kw>
<msg timestamp="20160130 01:01:06.074" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:01:06.075" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:01:06.074" starttime="20160130 01:01:06.068"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:06.082" starttime="20160130 01:01:06.081"></status>
</kw>
<msg timestamp="20160130 01:01:06.084" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:06.083" starttime="20160130 01:01:06.076"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:01:06.087" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:01:06.087" starttime="20160130 01:01:06.085"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:01:06.091" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:01:06.090" starttime="20160130 01:01:06.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:06.093" starttime="20160130 01:01:06.092"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:06.104" starttime="20160130 01:01:06.102"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:01:06.107" starttime="20160130 01:01:06.105"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:06.109" starttime="20160130 01:01:06.095"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:06.115" starttime="20160130 01:01:06.113"></status>
</kw>
<msg timestamp="20160130 01:01:06.116" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:01:06.116" starttime="20160130 01:01:06.110"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:06.119" starttime="20160130 01:01:06.118"></status>
</kw>
<msg timestamp="20160130 01:01:06.122" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160130 01:01:06.122" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:01:06.121" starttime="20160130 01:01:05.053"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:06.165" starttime="20160130 01:01:06.164"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:06.232" starttime="20160130 01:01:06.171"></status>
</kw>
<msg timestamp="20160130 01:01:06.234" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160130 01:01:06.233" starttime="20160130 01:01:06.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:01:06.242" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:01:07.056" level="INFO">Read output: Last login: Fri Jan 29 02:38:47 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:01:07.058" starttime="20160130 01:01:06.240"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:07.059" starttime="20160130 01:01:06.235"></status>
</kw>
<msg timestamp="20160130 01:01:07.062" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160130 01:01:07.061" starttime="20160130 01:01:06.155"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:01:07.068" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:01:07.067" starttime="20160130 01:01:07.063"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:01:07.070" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160130 01:01:07.772" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:01:07.774" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:01:07.773" starttime="20160130 01:01:07.069"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.780" starttime="20160130 01:01:07.777"></status>
</kw>
<msg timestamp="20160130 01:01:07.781" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:01:07.781" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:01:07.780" starttime="20160130 01:01:07.775"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.788" starttime="20160130 01:01:07.787"></status>
</kw>
<msg timestamp="20160130 01:01:07.790" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:07.789" starttime="20160130 01:01:07.783"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:01:07.793" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:01:07.792" starttime="20160130 01:01:07.791"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:01:07.796" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:01:07.796" starttime="20160130 01:01:07.794"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.798" starttime="20160130 01:01:07.797"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.808" starttime="20160130 01:01:07.807"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.813" starttime="20160130 01:01:07.809"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:07.814" starttime="20160130 01:01:07.799"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.821" starttime="20160130 01:01:07.819"></status>
</kw>
<msg timestamp="20160130 01:01:07.822" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:01:07.822" starttime="20160130 01:01:07.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.825" starttime="20160130 01:01:07.823"></status>
</kw>
<msg timestamp="20160130 01:01:07.828" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160130 01:01:07.828" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:01:07.827" starttime="20160130 01:01:06.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:07.831" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:01:07.832" starttime="20160130 01:01:07.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:07.835" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:01:07.836" starttime="20160130 01:01:07.833"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:07.839" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:01:07.839" starttime="20160130 01:01:07.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:07.842" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:01:07.843" starttime="20160130 01:01:07.840"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160130 01:01:07.845" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:07.846" starttime="20160130 01:01:07.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160130 01:01:07.849" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:07.849" starttime="20160130 01:01:07.847"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160130 01:01:07.852" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:07.852" starttime="20160130 01:01:07.850"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160130 01:01:07.855" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:07.856" starttime="20160130 01:01:07.853"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.864" starttime="20160130 01:01:07.861"></status>
</kw>
<msg timestamp="20160130 01:01:07.866" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:01:07.865" starttime="20160130 01:01:07.857"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160130 01:01:07.869" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:01:07.870" starttime="20160130 01:01:07.867"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:07.870" starttime="20160130 01:01:01.559"></status>
</kw>
<test id="s1-s1-s1-s1-s1-s1-t1" name="Run MFC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.882" starttime="20160130 01:01:07.880"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160130 01:01:07.884" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160130 01:01:07.884" starttime="20160130 01:01:07.883"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>3</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160130 01:01:07.898" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160130 01:01:07.899" starttime="20160130 01:01:07.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160130 01:01:07.901" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160130 01:01:07.902" starttime="20160130 01:01:07.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160130 01:01:07.904" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160130 01:01:07.905" starttime="20160130 01:01:07.903"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160130 01:01:07.907" level="INFO">msg=amount=3</msg>
<status status="PASS" endtime="20160130 01:01:07.908" starttime="20160130 01:01:07.906"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:01:07.910" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160130 01:01:07.911" starttime="20160130 01:01:07.909"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:01:07.913" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160130 01:01:07.914" starttime="20160130 01:01:07.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160130 01:01:07.916" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:07.917" starttime="20160130 01:01:07.915"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160130 01:01:07.919" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160130 01:01:07.920" starttime="20160130 01:01:07.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160130 01:01:07.922" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:01:07.922" starttime="20160130 01:01:07.920"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160130 01:01:07.925" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160130 01:01:07.926" starttime="20160130 01:01:07.923"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:07.938" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:07.938" starttime="20160130 01:01:07.935"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:07.939" starttime="20160130 01:01:07.933"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:07.943" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:07.944" starttime="20160130 01:01:07.942"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:07.945" starttime="20160130 01:01:07.940"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:07.949" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:07.950" starttime="20160130 01:01:07.948"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:07.951" starttime="20160130 01:01:07.946"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:07.952" starttime="20160130 01:01:07.928"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:01:07.955" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:01:07.956" starttime="20160130 01:01:07.952"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.958" starttime="20160130 01:01:07.957"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.961" starttime="20160130 01:01:07.959"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.964" starttime="20160130 01:01:07.962"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.966" starttime="20160130 01:01:07.964"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.968" starttime="20160130 01:01:07.967"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.971" starttime="20160130 01:01:07.969"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.973" starttime="20160130 01:01:07.971"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.976" starttime="20160130 01:01:07.974"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.978" starttime="20160130 01:01:07.977"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.981" starttime="20160130 01:01:07.979"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.984" starttime="20160130 01:01:07.982"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:07.986" starttime="20160130 01:01:07.985"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:01:07.990" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160130 01:01:13.216" level="INFO">01:01:08,164 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/ext] for external libraries
01:01:08,165 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
01:01:09,702 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
01:01:09,713 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.113.125]
01:01:09,713 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
01:01:09,713 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
01:01:09,714 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [3]
01:01:09,714 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [530052041010000]
01:01:09,714 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [642041010000]
01:01:09,714 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
01:01:09,714 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
01:01:09,714 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
01:01:09,714 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
01:01:09,715 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
01:01:09,715 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
01:01:09,724 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
01:01:09,730 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
01:01:10,160 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
01:01:10,221 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
01:01:10,409 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:10,409 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:01:10,444 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:10,451 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:10,684 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:10,684 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:10,685 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:10,685 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
01:01:10,830 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
01:01:11,260 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
01:01:11,307 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
01:01:11,310 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:11,312 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:11,312 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:01:11,477 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:11,477 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:11,485 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:11,485 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:11,485 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:11,485 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
01:01:11,570 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
01:01:11,576 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
01:01:11,659 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
01:01:11,664 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:11,666 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:11,666 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:01:11,685 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:11,686 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:11,692 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:11,692 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:11,692 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:11,692 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
01:01:11,764 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
01:01:11,776 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
01:01:11,821 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
01:01:11,824 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:11,826 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:11,826 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:01:11,882 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:11,882 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:11,889 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:11,889 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:11,889 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:11,889 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
01:01:11,958 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
01:01:11,964 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
01:01:12,007 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
01:01:12,010 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:12,011 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:12,011 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
01:01:12,027 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:12,027 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:12,033 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:12,033 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:12,033 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:12,033 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
01:01:12,064 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
01:01:12,074 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
01:01:12,095 INFO  [SoapUITestCaseRunner] running step [setBalance]
01:01:12,096 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:12,098 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:12,098 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
01:01:12,147 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:12,147 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:12,156 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:12,156 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:12,156 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:12,157 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
01:01:12,220 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
01:01:12,230 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
01:01:12,274 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
01:01:12,339 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
01:01:12,344 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
01:01:12,346 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:12,348 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:12,348 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:01:12,359 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:12,359 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:12,375 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:12,375 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:12,376 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:12,376 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
01:01:12,376 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
01:01:12,402 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
01:01:12,403 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
01:01:12,405 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:12,407 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:12,407 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:01:12,500 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:12,500 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:12,506 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:12,507 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:12,507 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:12,507 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
01:01:12,507 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
01:01:12,512 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
01:01:12,514 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
01:01:12,517 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:12,518 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:12,519 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:01:12,534 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:12,534 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:12,540 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:12,540 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:12,540 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:12,541 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
01:01:12,542 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
01:01:12,553 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
01:01:12,554 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
01:01:12,556 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:12,558 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:12,558 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:01:12,609 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:12,609 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:12,615 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:12,615 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:12,615 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:12,616 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
01:01:12,616 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
01:01:12,621 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
01:01:12,622 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
01:01:12,624 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:12,626 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:12,626 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
01:01:12,644 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:12,644 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:12,656 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:12,656 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:12,656 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:12,656 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
01:01:12,657 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
01:01:12,677 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
01:01:12,678 INFO  [SoapUITestCaseRunner] running step [setBalance]
01:01:12,680 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:12,682 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:12,682 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
01:01:12,721 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:12,721 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:12,732 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:12,733 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:12,733 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:12,733 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
01:01:12,733 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
01:01:12,742 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
01:01:12,743 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
01:01:12,745 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
01:01:12,748 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
01:01:12,750 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:12,752 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:12,752 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:01:12,763 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:12,764 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:12,780 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:12,780 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:12,782 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:12,783 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
01:01:12,783 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
01:01:12,805 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
01:01:12,806 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
01:01:12,808 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:12,810 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:12,810 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:01:12,889 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:12,889 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:12,896 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:12,896 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:12,896 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:12,896 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
01:01:12,897 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
01:01:12,902 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
01:01:12,903 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
01:01:12,905 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:12,907 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:12,907 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:01:12,921 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:12,921 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:12,927 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:12,927 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:12,927 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:12,927 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
01:01:12,927 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
01:01:12,937 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
01:01:12,937 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
01:01:12,939 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:12,941 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:12,941 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:01:12,995 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:12,995 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:13,002 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:13,002 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:13,002 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:13,002 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
01:01:13,003 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
01:01:13,008 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
01:01:13,009 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
01:01:13,011 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:13,013 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:13,013 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
01:01:13,030 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:13,030 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:13,041 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:13,041 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:13,042 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:13,042 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
01:01:13,042 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
01:01:13,059 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
01:01:13,060 INFO  [SoapUITestCaseRunner] running step [setBalance]
01:01:13,062 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:13,063 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:13,064 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
01:01:13,106 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:13,107 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:13,117 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:13,117 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:13,117 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:13,117 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
01:01:13,118 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
01:01:13,126 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
01:01:13,126 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
01:01:13,128 INFO  [SoapUITestCaseRunner] running step [finish_successful]
01:01:13,199 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
01:01:13,200 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 3392ms, status: FINISHED
01:01:13,201 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 3392ms</msg>
<status status="PASS" endtime="20160130 01:01:13.234" starttime="20160130 01:01:07.989"></status>
</kw>
<msg timestamp="20160130 01:01:13.240" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:13.242" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:01:13.237" starttime="20160130 01:01:07.987"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:13.269" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:01:13.268" starttime="20160130 01:01:13.264"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:13.272" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:13.272" starttime="20160130 01:01:13.270"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:13.276" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:13.275" starttime="20160130 01:01:13.273"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:13.281" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:13.285" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:13.286" starttime="20160130 01:01:13.279"></status>
</kw>
<msg timestamp="20160130 01:01:13.288" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:13.288" level="INFO">${return_log_entry} = 2016-01-30 01:01:13,199 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:13.287" starttime="20160130 01:01:13.277"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:13.297" starttime="20160130 01:01:13.295"></status>
</kw>
<msg timestamp="20160130 01:01:13.299" level="INFO">${return_log_entry} = 2016-01-30 01:01:13,199 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:13.298" starttime="20160130 01:01:13.290"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:13.307" starttime="20160130 01:01:13.305"></status>
</kw>
<msg timestamp="20160130 01:01:13.308" level="INFO">${return_log_entry} = 2016-01-30 01:01:13,199 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:13.307" starttime="20160130 01:01:13.300"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:13.316" starttime="20160130 01:01:13.314"></status>
</kw>
<msg timestamp="20160130 01:01:13.317" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:13.317" starttime="20160130 01:01:13.309"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:13.327" starttime="20160130 01:01:13.326"></status>
</kw>
<msg timestamp="20160130 01:01:13.329" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:13.328" starttime="20160130 01:01:13.318"></status>
</kw>
<msg timestamp="20160130 01:01:13.330" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:13.330" starttime="20160130 01:01:13.247"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:13.339" starttime="20160130 01:01:13.337"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:13.341" starttime="20160130 01:01:13.340"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:13.344" starttime="20160130 01:01:13.342"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:01:13.355" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:01:13.356" starttime="20160130 01:01:13.350"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:13.357" starttime="20160130 01:01:13.349"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:13.357" starttime="20160130 01:01:13.344"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:13.358" starttime="20160130 01:01:13.332"></status>
</kw>
<msg timestamp="20160130 01:01:13.360" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160130 01:01:13.359" starttime="20160130 01:01:07.887"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160130 01:01:13.363" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:13.363" starttime="20160130 01:01:13.361"></status>
</kw>
<kw type="kw" name="${b_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160130 01:01:13.369" level="INFO">${b_party_msisdn} = 642041010001</msg>
<status status="PASS" endtime="20160130 01:01:13.368" starttime="20160130 01:01:13.364"></status>
</kw>
<kw type="kw" name="${b_party_imsi} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}+1</arg>
</arguments>
<msg timestamp="20160130 01:01:13.373" level="INFO">${b_party_imsi} = 530052041010001</msg>
<status status="PASS" endtime="20160130 01:01:13.373" starttime="20160130 01:01:13.369"></status>
</kw>
<kw type="kw" name="${c_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+2</arg>
</arguments>
<msg timestamp="20160130 01:01:13.378" level="INFO">${c_party_msisdn} = 642041010002</msg>
<status status="PASS" endtime="20160130 01:01:13.377" starttime="20160130 01:01:13.374"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:13.380" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160130 01:01:13.380" starttime="20160130 01:01:13.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MFC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:13.382" starttime="20160130 01:01:13.381"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MFC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:13.384" level="INFO">Running the short MFC call...</msg>
<status status="PASS" endtime="20160130 01:01:13.385" starttime="20160130 01:01:13.383"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MFC 1s">
<doc>Runs a standard MFC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${b_party_imsi}</arg>
<arg>${b_party_msisdn}</arg>
<arg>${c_party_msisdn}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MFC CGS">
<doc>Runs a standard MFC session (meaning a session that needs only mscAddress, mfcAPartyMsisdn and mfcCPartyMsisdn paramters) for the passed cgs file</doc>
<arguments>
<arg>mfc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${rd_imsi}</arg>
<arg>${rd_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mfc_req}</arg>
<arg>${queue_mfc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160130 01:01:13.410" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160130 01:01:13.409" starttime="20160130 01:01:13.408"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160130 01:01:13.413" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160130 01:01:13.412" starttime="20160130 01:01:13.411"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160130 01:01:13.416" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini</msg>
<status status="PASS" endtime="20160130 01:01:13.415" starttime="20160130 01:01:13.414"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160130 01:01:13.419" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs</msg>
<status status="PASS" endtime="20160130 01:01:13.418" starttime="20160130 01:01:13.417"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:13.421" starttime="20160130 01:01:13.419"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${rd_imsi};${rd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:01:13.425" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:13.425" starttime="20160130 01:01:13.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:13.427" starttime="20160130 01:01:13.426"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;gmscAddress;mfcAPartyMsisdn;mfcCPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160130 01:01:13.431" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:13.431" starttime="20160130 01:01:13.428"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${msc_address};${cg_msisdn};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:01:13.435" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:13.436" starttime="20160130 01:01:13.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:13.438" starttime="20160130 01:01:13.437"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160130 01:01:13.441" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:13.442" starttime="20160130 01:01:13.439"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MFC;${queue_mfc_req};${queue_mfc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160130 01:01:13.446" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:13.447" starttime="20160130 01:01:13.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:13.449" starttime="20160130 01:01:13.448"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160130 01:01:13.459" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:01:18.705" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:01:18.703" starttime="20160130 01:01:13.450"></status>
</kw>
<msg timestamp="20160130 01:01:18.708" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:01:18.707" starttime="20160130 01:01:13.398"></status>
</kw>
<msg timestamp="20160130 01:01:18.710" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:01:18.709" starttime="20160130 01:01:13.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:18.712" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160130 01:01:18.713" starttime="20160130 01:01:18.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160130 01:01:18.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:18.716" starttime="20160130 01:01:18.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:18.718" starttime="20160130 01:01:18.717"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:18.736" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:18.737" starttime="20160130 01:01:18.734"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:18.737" starttime="20160130 01:01:18.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:18.742" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:18.742" starttime="20160130 01:01:18.740"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:18.743" starttime="20160130 01:01:18.738"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:18.747" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:18.748" starttime="20160130 01:01:18.745"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:18.749" starttime="20160130 01:01:18.744"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:18.749" starttime="20160130 01:01:18.728"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:01:18.752" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:01:18.753" starttime="20160130 01:01:18.750"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:18.755" starttime="20160130 01:01:18.753"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:18.758" starttime="20160130 01:01:18.756"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:18.760" starttime="20160130 01:01:18.758"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:18.762" starttime="20160130 01:01:18.761"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:18.764" starttime="20160130 01:01:18.763"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:18.767" starttime="20160130 01:01:18.765"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:01:18.771" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160130 01:01:19.141" level="INFO">01:01:19,133 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:01:19,133 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:01:19,134 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422358
01:01:19,135 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
01:01:19,136 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:01:19,137 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:01:19,138 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:01:19,139 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160130 01:01:19.142" starttime="20160130 01:01:18.769"></status>
</kw>
<msg timestamp="20160130 01:01:19.144" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:19.145" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:01:19.143" starttime="20160130 01:01:18.768"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:19.154" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:01:19.153" starttime="20160130 01:01:19.151"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.157" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:19.156" starttime="20160130 01:01:19.155"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.160" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:19.159" starttime="20160130 01:01:19.158"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.164" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:19.168" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:19.168" starttime="20160130 01:01:19.162"></status>
</kw>
<msg timestamp="20160130 01:01:19.169" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:19.170" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,133 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:19.169" starttime="20160130 01:01:19.161"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.177" starttime="20160130 01:01:19.175"></status>
</kw>
<msg timestamp="20160130 01:01:19.178" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,133 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:19.178" starttime="20160130 01:01:19.171"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.185" starttime="20160130 01:01:19.183"></status>
</kw>
<msg timestamp="20160130 01:01:19.186" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,133 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:19.185" starttime="20160130 01:01:19.179"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.193" starttime="20160130 01:01:19.191"></status>
</kw>
<msg timestamp="20160130 01:01:19.194" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:19.194" starttime="20160130 01:01:19.187"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.203" starttime="20160130 01:01:19.202"></status>
</kw>
<msg timestamp="20160130 01:01:19.204" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:19.204" starttime="20160130 01:01:19.195"></status>
</kw>
<msg timestamp="20160130 01:01:19.206" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:19.205" starttime="20160130 01:01:19.146"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:19.215" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160130 01:01:19.214" starttime="20160130 01:01:19.212"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.217" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:19.217" starttime="20160130 01:01:19.216"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.220" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:19.220" starttime="20160130 01:01:19.218"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.225" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:19.228" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:19.229" starttime="20160130 01:01:19.223"></status>
</kw>
<msg timestamp="20160130 01:01:19.230" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:19.230" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,133 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:01:19.229" starttime="20160130 01:01:19.221"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.237" starttime="20160130 01:01:19.235"></status>
</kw>
<msg timestamp="20160130 01:01:19.238" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,133 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:01:19.237" starttime="20160130 01:01:19.231"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.244" starttime="20160130 01:01:19.243"></status>
</kw>
<msg timestamp="20160130 01:01:19.245" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,133 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:01:19.245" starttime="20160130 01:01:19.239"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.252" starttime="20160130 01:01:19.250"></status>
</kw>
<msg timestamp="20160130 01:01:19.253" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:01:19.253" starttime="20160130 01:01:19.246"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.262" starttime="20160130 01:01:19.261"></status>
</kw>
<msg timestamp="20160130 01:01:19.263" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:01:19.263" starttime="20160130 01:01:19.254"></status>
</kw>
<msg timestamp="20160130 01:01:19.265" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160130 01:01:19.264" starttime="20160130 01:01:19.207"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:19.274" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160130 01:01:19.273" starttime="20160130 01:01:19.272"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.276" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:19.276" starttime="20160130 01:01:19.275"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.279" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:19.279" starttime="20160130 01:01:19.277"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.284" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:19.287" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:19.287" starttime="20160130 01:01:19.282"></status>
</kw>
<msg timestamp="20160130 01:01:19.288" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:19.289" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,135 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:01:19.288" starttime="20160130 01:01:19.280"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.295" starttime="20160130 01:01:19.294"></status>
</kw>
<msg timestamp="20160130 01:01:19.296" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,135 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:01:19.296" starttime="20160130 01:01:19.290"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.303" starttime="20160130 01:01:19.301"></status>
</kw>
<msg timestamp="20160130 01:01:19.304" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,135 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:01:19.303" starttime="20160130 01:01:19.297"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.311" starttime="20160130 01:01:19.309"></status>
</kw>
<msg timestamp="20160130 01:01:19.312" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:01:19.311" starttime="20160130 01:01:19.305"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.322" starttime="20160130 01:01:19.320"></status>
</kw>
<msg timestamp="20160130 01:01:19.323" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:01:19.323" starttime="20160130 01:01:19.313"></status>
</kw>
<msg timestamp="20160130 01:01:19.324" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:01:19.324" starttime="20160130 01:01:19.266"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:19.333" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160130 01:01:19.333" starttime="20160130 01:01:19.331"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.336" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:19.335" starttime="20160130 01:01:19.334"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.339" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:19.338" starttime="20160130 01:01:19.337"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.343" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:19.346" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:19.347" starttime="20160130 01:01:19.341"></status>
</kw>
<msg timestamp="20160130 01:01:19.348" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:19.348" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,134 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422358</msg>
<status status="PASS" endtime="20160130 01:01:19.347" starttime="20160130 01:01:19.339"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.355" starttime="20160130 01:01:19.353"></status>
</kw>
<msg timestamp="20160130 01:01:19.356" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,134 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422358</msg>
<status status="PASS" endtime="20160130 01:01:19.355" starttime="20160130 01:01:19.349"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.362" starttime="20160130 01:01:19.361"></status>
</kw>
<msg timestamp="20160130 01:01:19.364" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,134 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422358</msg>
<status status="PASS" endtime="20160130 01:01:19.363" starttime="20160130 01:01:19.357"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.371" starttime="20160130 01:01:19.369"></status>
</kw>
<msg timestamp="20160130 01:01:19.372" level="INFO">${resultCode} = 2422358</msg>
<status status="PASS" endtime="20160130 01:01:19.371" starttime="20160130 01:01:19.364"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.381" starttime="20160130 01:01:19.379"></status>
</kw>
<msg timestamp="20160130 01:01:19.382" level="INFO">${resultCode} = 2422358</msg>
<status status="PASS" endtime="20160130 01:01:19.381" starttime="20160130 01:01:19.373"></status>
</kw>
<msg timestamp="20160130 01:01:19.383" level="INFO">${id} = 2422358</msg>
<status status="PASS" endtime="20160130 01:01:19.383" starttime="20160130 01:01:19.326"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:19.392" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160130 01:01:19.392" starttime="20160130 01:01:19.390"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.395" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:19.395" starttime="20160130 01:01:19.393"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.398" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:19.397" starttime="20160130 01:01:19.396"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.402" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:19.405" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:19.406" starttime="20160130 01:01:19.400"></status>
</kw>
<msg timestamp="20160130 01:01:19.407" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:19.408" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,136 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:01:19.407" starttime="20160130 01:01:19.399"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.414" starttime="20160130 01:01:19.413"></status>
</kw>
<msg timestamp="20160130 01:01:19.415" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,136 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:01:19.415" starttime="20160130 01:01:19.409"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.422" starttime="20160130 01:01:19.420"></status>
</kw>
<msg timestamp="20160130 01:01:19.423" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,136 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:01:19.423" starttime="20160130 01:01:19.416"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.430" starttime="20160130 01:01:19.428"></status>
</kw>
<msg timestamp="20160130 01:01:19.431" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:01:19.431" starttime="20160130 01:01:19.424"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.440" starttime="20160130 01:01:19.438"></status>
</kw>
<msg timestamp="20160130 01:01:19.441" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:01:19.441" starttime="20160130 01:01:19.432"></status>
</kw>
<msg timestamp="20160130 01:01:19.442" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:01:19.442" starttime="20160130 01:01:19.385"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:19.451" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160130 01:01:19.450" starttime="20160130 01:01:19.448"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.454" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:19.453" starttime="20160130 01:01:19.452"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.456" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:19.456" starttime="20160130 01:01:19.454"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.461" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:19.464" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:19.464" starttime="20160130 01:01:19.459"></status>
</kw>
<msg timestamp="20160130 01:01:19.466" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:19.466" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,137 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:01:19.465" starttime="20160130 01:01:19.457"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.472" starttime="20160130 01:01:19.471"></status>
</kw>
<msg timestamp="20160130 01:01:19.473" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,137 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:01:19.473" starttime="20160130 01:01:19.467"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.480" starttime="20160130 01:01:19.478"></status>
</kw>
<msg timestamp="20160130 01:01:19.481" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,137 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:01:19.481" starttime="20160130 01:01:19.474"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.488" starttime="20160130 01:01:19.486"></status>
</kw>
<msg timestamp="20160130 01:01:19.489" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:01:19.489" starttime="20160130 01:01:19.482"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.498" starttime="20160130 01:01:19.496"></status>
</kw>
<msg timestamp="20160130 01:01:19.499" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:01:19.499" starttime="20160130 01:01:19.490"></status>
</kw>
<msg timestamp="20160130 01:01:19.501" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160130 01:01:19.500" starttime="20160130 01:01:19.444"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:19.509" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160130 01:01:19.508" starttime="20160130 01:01:19.506"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.511" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:19.511" starttime="20160130 01:01:19.510"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.514" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:19.514" starttime="20160130 01:01:19.512"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.520" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:19.523" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:19.523" starttime="20160130 01:01:19.517"></status>
</kw>
<msg timestamp="20160130 01:01:19.524" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:19.525" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,138 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:19.524" starttime="20160130 01:01:19.515"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.532" starttime="20160130 01:01:19.530"></status>
</kw>
<msg timestamp="20160130 01:01:19.533" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,138 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:19.533" starttime="20160130 01:01:19.526"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.540" starttime="20160130 01:01:19.538"></status>
</kw>
<msg timestamp="20160130 01:01:19.541" level="INFO">${return_log_entry} = 2016-01-30 01:01:19,138 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:19.540" starttime="20160130 01:01:19.534"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.548" starttime="20160130 01:01:19.546"></status>
</kw>
<msg timestamp="20160130 01:01:19.549" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:19.548" starttime="20160130 01:01:19.542"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.565" starttime="20160130 01:01:19.561"></status>
</kw>
<msg timestamp="20160130 01:01:19.567" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:19.566" starttime="20160130 01:01:19.550"></status>
</kw>
<msg timestamp="20160130 01:01:19.570" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:19.569" starttime="20160130 01:01:19.502"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.586" starttime="20160130 01:01:19.583"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.591" starttime="20160130 01:01:19.588"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.597" starttime="20160130 01:01:19.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:01:19.620" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:01:19.622" starttime="20160130 01:01:19.612"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:19.623" starttime="20160130 01:01:19.608"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:19.625" starttime="20160130 01:01:19.599"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:19.626" starttime="20160130 01:01:19.573"></status>
</kw>
<msg timestamp="20160130 01:01:19.632" level="INFO">${rc} = OK</msg>
<msg timestamp="20160130 01:01:19.633" level="INFO">${provId} = 1</msg>
<msg timestamp="20160130 01:01:19.634" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160130 01:01:19.635" level="INFO">${id} = 2422358</msg>
<msg timestamp="20160130 01:01:19.636" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160130 01:01:19.637" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160130 01:01:19.637" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:19.630" starttime="20160130 01:01:18.721"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.673" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:19.675" starttime="20160130 01:01:19.669"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:19.676" starttime="20160130 01:01:19.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.685" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:19.686" starttime="20160130 01:01:19.681"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:19.688" starttime="20160130 01:01:19.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.696" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:19.698" starttime="20160130 01:01:19.693"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:19.699" starttime="20160130 01:01:19.689"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:19.701" starttime="20160130 01:01:19.656"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:01:19.708" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:01:19.709" starttime="20160130 01:01:19.702"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.715" starttime="20160130 01:01:19.711"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.721" starttime="20160130 01:01:19.717"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.727" starttime="20160130 01:01:19.723"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.731" starttime="20160130 01:01:19.729"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.736" starttime="20160130 01:01:19.733"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:19.741" starttime="20160130 01:01:19.738"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:01:19.749" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2422358']</msg>
<msg timestamp="20160130 01:01:20.110" level="INFO">01:01:20,104 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:01:20,105 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422359
01:01:20,106 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
01:01:20,107 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:01:20,108 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:01:20.112" starttime="20160130 01:01:19.746"></status>
</kw>
<msg timestamp="20160130 01:01:20.116" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:20.117" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:01:20.115" starttime="20160130 01:01:19.743"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:20.134" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:01:20.133" starttime="20160130 01:01:20.129"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.140" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:20.139" starttime="20160130 01:01:20.136"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.144" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:20.143" starttime="20160130 01:01:20.142"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.148" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:20.151" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:20.151" starttime="20160130 01:01:20.146"></status>
</kw>
<msg timestamp="20160130 01:01:20.153" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:20.153" level="INFO">${return_log_entry} = 2016-01-30 01:01:20,104 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:20.152" starttime="20160130 01:01:20.145"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.160" starttime="20160130 01:01:20.158"></status>
</kw>
<msg timestamp="20160130 01:01:20.161" level="INFO">${return_log_entry} = 2016-01-30 01:01:20,104 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:20.160" starttime="20160130 01:01:20.154"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.167" starttime="20160130 01:01:20.166"></status>
</kw>
<msg timestamp="20160130 01:01:20.168" level="INFO">${return_log_entry} = 2016-01-30 01:01:20,104 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:20.168" starttime="20160130 01:01:20.162"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.175" starttime="20160130 01:01:20.173"></status>
</kw>
<msg timestamp="20160130 01:01:20.176" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:20.175" starttime="20160130 01:01:20.169"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.184" starttime="20160130 01:01:20.183"></status>
</kw>
<msg timestamp="20160130 01:01:20.185" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:20.185" starttime="20160130 01:01:20.177"></status>
</kw>
<msg timestamp="20160130 01:01:20.187" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:20.186" starttime="20160130 01:01:20.120"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:20.195" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160130 01:01:20.194" starttime="20160130 01:01:20.192"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.197" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:20.197" starttime="20160130 01:01:20.195"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.200" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:20.199" starttime="20160130 01:01:20.198"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.204" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:20.207" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:20.207" starttime="20160130 01:01:20.202"></status>
</kw>
<msg timestamp="20160130 01:01:20.208" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:20.209" level="INFO">${return_log_entry} = 2016-01-30 01:01:20,105 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422359</msg>
<status status="PASS" endtime="20160130 01:01:20.208" starttime="20160130 01:01:20.201"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.215" starttime="20160130 01:01:20.214"></status>
</kw>
<msg timestamp="20160130 01:01:20.216" level="INFO">${return_log_entry} = 2016-01-30 01:01:20,105 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422359</msg>
<status status="PASS" endtime="20160130 01:01:20.216" starttime="20160130 01:01:20.210"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.222" starttime="20160130 01:01:20.221"></status>
</kw>
<msg timestamp="20160130 01:01:20.223" level="INFO">${return_log_entry} = 2016-01-30 01:01:20,105 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422359</msg>
<status status="PASS" endtime="20160130 01:01:20.223" starttime="20160130 01:01:20.217"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.230" starttime="20160130 01:01:20.228"></status>
</kw>
<msg timestamp="20160130 01:01:20.231" level="INFO">${resultCode} = 2422359</msg>
<status status="PASS" endtime="20160130 01:01:20.231" starttime="20160130 01:01:20.224"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.240" starttime="20160130 01:01:20.239"></status>
</kw>
<msg timestamp="20160130 01:01:20.241" level="INFO">${resultCode} = 2422359</msg>
<status status="PASS" endtime="20160130 01:01:20.241" starttime="20160130 01:01:20.232"></status>
</kw>
<msg timestamp="20160130 01:01:20.243" level="INFO">${accountId} = 2422359</msg>
<status status="PASS" endtime="20160130 01:01:20.242" starttime="20160130 01:01:20.188"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:20.251" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160130 01:01:20.250" starttime="20160130 01:01:20.248"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.254" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:20.253" starttime="20160130 01:01:20.252"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.256" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:20.256" starttime="20160130 01:01:20.255"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.260" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:20.263" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:20.267" starttime="20160130 01:01:20.259"></status>
</kw>
<msg timestamp="20160130 01:01:20.268" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:20.269" level="INFO">${return_log_entry} = 2016-01-30 01:01:20,106 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160130 01:01:20.268" starttime="20160130 01:01:20.257"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.274" starttime="20160130 01:01:20.273"></status>
</kw>
<msg timestamp="20160130 01:01:20.276" level="INFO">${return_log_entry} = 2016-01-30 01:01:20,106 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160130 01:01:20.275" starttime="20160130 01:01:20.269"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.282" starttime="20160130 01:01:20.280"></status>
</kw>
<msg timestamp="20160130 01:01:20.283" level="INFO">${return_log_entry} = 2016-01-30 01:01:20,106 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160130 01:01:20.282" starttime="20160130 01:01:20.276"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.289" starttime="20160130 01:01:20.287"></status>
</kw>
<msg timestamp="20160130 01:01:20.290" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160130 01:01:20.290" starttime="20160130 01:01:20.283"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.299" starttime="20160130 01:01:20.298"></status>
</kw>
<msg timestamp="20160130 01:01:20.300" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160130 01:01:20.300" starttime="20160130 01:01:20.291"></status>
</kw>
<msg timestamp="20160130 01:01:20.302" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160130 01:01:20.301" starttime="20160130 01:01:20.244"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:20.311" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160130 01:01:20.310" starttime="20160130 01:01:20.308"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.313" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:20.313" starttime="20160130 01:01:20.311"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.316" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:20.315" starttime="20160130 01:01:20.314"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.320" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:20.322" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:20.323" starttime="20160130 01:01:20.318"></status>
</kw>
<msg timestamp="20160130 01:01:20.324" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:20.324" level="INFO">${return_log_entry} = 2016-01-30 01:01:20,107 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:01:20.324" starttime="20160130 01:01:20.316"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.330" starttime="20160130 01:01:20.329"></status>
</kw>
<msg timestamp="20160130 01:01:20.331" level="INFO">${return_log_entry} = 2016-01-30 01:01:20,107 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:01:20.331" starttime="20160130 01:01:20.325"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.337" starttime="20160130 01:01:20.336"></status>
</kw>
<msg timestamp="20160130 01:01:20.338" level="INFO">${return_log_entry} = 2016-01-30 01:01:20,107 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:01:20.338" starttime="20160130 01:01:20.332"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.345" starttime="20160130 01:01:20.343"></status>
</kw>
<msg timestamp="20160130 01:01:20.346" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160130 01:01:20.345" starttime="20160130 01:01:20.339"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.354" starttime="20160130 01:01:20.353"></status>
</kw>
<msg timestamp="20160130 01:01:20.355" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160130 01:01:20.355" starttime="20160130 01:01:20.347"></status>
</kw>
<msg timestamp="20160130 01:01:20.356" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160130 01:01:20.356" starttime="20160130 01:01:20.304"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:20.364" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160130 01:01:20.364" starttime="20160130 01:01:20.362"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.367" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:20.366" starttime="20160130 01:01:20.365"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.369" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:20.369" starttime="20160130 01:01:20.367"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.373" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:20.376" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:20.377" starttime="20160130 01:01:20.371"></status>
</kw>
<msg timestamp="20160130 01:01:20.378" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:20.378" level="INFO">${return_log_entry} = 2016-01-30 01:01:20,108 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:01:20.377" starttime="20160130 01:01:20.370"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.384" starttime="20160130 01:01:20.383"></status>
</kw>
<msg timestamp="20160130 01:01:20.385" level="INFO">${return_log_entry} = 2016-01-30 01:01:20,108 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:01:20.385" starttime="20160130 01:01:20.379"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.392" starttime="20160130 01:01:20.391"></status>
</kw>
<msg timestamp="20160130 01:01:20.394" level="INFO">${return_log_entry} = 2016-01-30 01:01:20,108 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:01:20.393" starttime="20160130 01:01:20.386"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.401" starttime="20160130 01:01:20.399"></status>
</kw>
<msg timestamp="20160130 01:01:20.402" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:01:20.401" starttime="20160130 01:01:20.395"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.410" starttime="20160130 01:01:20.408"></status>
</kw>
<msg timestamp="20160130 01:01:20.411" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:01:20.411" starttime="20160130 01:01:20.402"></status>
</kw>
<msg timestamp="20160130 01:01:20.413" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160130 01:01:20.412" starttime="20160130 01:01:20.358"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.428" starttime="20160130 01:01:20.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.432" starttime="20160130 01:01:20.429"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.437" starttime="20160130 01:01:20.434"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:01:20.458" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:01:20.459" starttime="20160130 01:01:20.449"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:20.461" starttime="20160130 01:01:20.446"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:20.463" starttime="20160130 01:01:20.438"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:20.464" starttime="20160130 01:01:20.416"></status>
</kw>
<msg timestamp="20160130 01:01:20.470" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160130 01:01:20.471" level="INFO">${accId} = 2422359</msg>
<msg timestamp="20160130 01:01:20.471" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160130 01:01:20.472" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160130 01:01:20.473" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160130 01:01:20.468" starttime="20160130 01:01:19.642"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.477" starttime="20160130 01:01:20.475"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.482" starttime="20160130 01:01:20.479"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:20.487" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160130 01:01:20.488" starttime="20160130 01:01:20.483"></status>
</kw>
<doc>Test will make a short MFC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MFC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:01:20.490" starttime="20160130 01:01:07.872"></status>
</test>
<doc>Testing the prepaid MFC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:01:20.502" starttime="20160130 01:01:00.639"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:01:20.526" starttime="20160130 01:01:00.615"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:01:20.545" starttime="20160130 01:01:00.594"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC" id="s1-s1-s1-s2" name="MOC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet" id="s1-s1-s1-s2-s1" name="OnNet">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Abandon" id="s1-s1-s1-s2-s1-s1" name="MOC PREPAID ONNET-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Abandon/MOC_PREPAID_ONNET-Abandon-robot-suite.txt" id="s1-s1-s1-s2-s1-s1-s1" name="MOC PREPAID ONNET-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160130 01:01:20.822" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:01:20.826" level="INFO">${date} = Sat Jan 30 01:01:20 CET 2016</msg>
<status status="PASS" endtime="20160130 01:01:20.825" starttime="20160130 01:01:20.817"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:20.831" level="INFO">Date and time: Sat Jan 30 01:01:20 CET 2016</msg>
<status status="PASS" endtime="20160130 01:01:20.832" starttime="20160130 01:01:20.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:20.837" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160130 01:01:20.838" starttime="20160130 01:01:20.834"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.905" starttime="20160130 01:01:20.902"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:20.973" starttime="20160130 01:01:20.916"></status>
</kw>
<msg timestamp="20160130 01:01:20.976" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160130 01:01:20.975" starttime="20160130 01:01:20.907"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:01:20.991" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:01:21.457" level="INFO">Read output: Last login: Sat Jan 30 00:01:02 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:01:21.460" starttime="20160130 01:01:20.987"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:21.462" starttime="20160130 01:01:20.978"></status>
</kw>
<msg timestamp="20160130 01:01:21.467" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160130 01:01:21.465" starttime="20160130 01:01:20.891"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:01:21.477" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:01:21.476" starttime="20160130 01:01:21.469"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:01:21.482" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160130 01:01:21.956" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:01:21.959" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:01:21.958" starttime="20160130 01:01:21.479"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:21.969" starttime="20160130 01:01:21.964"></status>
</kw>
<msg timestamp="20160130 01:01:21.971" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:01:21.972" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:01:21.970" starttime="20160130 01:01:21.960"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:21.984" starttime="20160130 01:01:21.982"></status>
</kw>
<msg timestamp="20160130 01:01:21.986" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:21.986" starttime="20160130 01:01:21.974"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160130 01:01:21.992" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:01:21.991" starttime="20160130 01:01:21.988"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:01:21.998" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:01:21.997" starttime="20160130 01:01:21.994"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:22.002" starttime="20160130 01:01:21.999"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:22.017" starttime="20160130 01:01:22.013"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:01:22.024" starttime="20160130 01:01:22.019"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:22.026" starttime="20160130 01:01:22.005"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:22.038" starttime="20160130 01:01:22.035"></status>
</kw>
<msg timestamp="20160130 01:01:22.040" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:01:22.039" starttime="20160130 01:01:22.028"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:22.045" starttime="20160130 01:01:22.042"></status>
</kw>
<msg timestamp="20160130 01:01:22.049" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160130 01:01:22.049" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:01:22.047" starttime="20160130 01:01:20.860"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:22.115" starttime="20160130 01:01:22.113"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:22.214" starttime="20160130 01:01:22.126"></status>
</kw>
<msg timestamp="20160130 01:01:22.217" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160130 01:01:22.216" starttime="20160130 01:01:22.117"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:01:22.231" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:01:22.826" level="INFO">Read output: Last login: Sat Jan 30 00:01:03 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:01:22.828" starttime="20160130 01:01:22.228"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:22.828" starttime="20160130 01:01:22.219"></status>
</kw>
<msg timestamp="20160130 01:01:22.830" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160130 01:01:22.830" starttime="20160130 01:01:22.102"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:01:22.836" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:01:22.836" starttime="20160130 01:01:22.831"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:01:22.839" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160130 01:01:23.245" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:01:23.247" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:01:23.246" starttime="20160130 01:01:22.837"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:23.252" starttime="20160130 01:01:23.250"></status>
</kw>
<msg timestamp="20160130 01:01:23.253" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:01:23.254" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:01:23.253" starttime="20160130 01:01:23.248"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:23.260" starttime="20160130 01:01:23.259"></status>
</kw>
<msg timestamp="20160130 01:01:23.261" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:23.260" starttime="20160130 01:01:23.255"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160130 01:01:23.263" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:01:23.263" starttime="20160130 01:01:23.262"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:01:23.266" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:01:23.266" starttime="20160130 01:01:23.264"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:23.268" starttime="20160130 01:01:23.267"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:23.275" starttime="20160130 01:01:23.273"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:01:23.277" starttime="20160130 01:01:23.276"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:23.284" starttime="20160130 01:01:23.270"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:23.290" starttime="20160130 01:01:23.289"></status>
</kw>
<msg timestamp="20160130 01:01:23.291" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:01:23.291" starttime="20160130 01:01:23.285"></status>
</kw>
<msg timestamp="20160130 01:01:23.293" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160130 01:01:23.294" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:01:23.292" starttime="20160130 01:01:22.070"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:23.324" starttime="20160130 01:01:23.322"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:23.381" starttime="20160130 01:01:23.328"></status>
</kw>
<msg timestamp="20160130 01:01:23.384" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160130 01:01:23.383" starttime="20160130 01:01:23.324"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:01:23.398" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:01:23.812" level="INFO">Read output: Last login: Sat Jan 30 00:01:05 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:01:23.813" starttime="20160130 01:01:23.395"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:23.813" starttime="20160130 01:01:23.386"></status>
</kw>
<msg timestamp="20160130 01:01:23.815" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160130 01:01:23.815" starttime="20160130 01:01:23.317"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:01:23.820" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:01:23.820" starttime="20160130 01:01:23.816"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:01:23.822" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160130 01:01:24.009" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:01:24.011" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:01:24.010" starttime="20160130 01:01:23.821"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.015" starttime="20160130 01:01:24.013"></status>
</kw>
<msg timestamp="20160130 01:01:24.016" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:01:24.017" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:01:24.016" starttime="20160130 01:01:24.012"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.022" starttime="20160130 01:01:24.021"></status>
</kw>
<msg timestamp="20160130 01:01:24.023" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:24.023" starttime="20160130 01:01:24.017"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:01:24.026" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:01:24.026" starttime="20160130 01:01:24.024"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:01:24.029" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:01:24.028" starttime="20160130 01:01:24.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.030" starttime="20160130 01:01:24.029"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.036" starttime="20160130 01:01:24.035"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.038" starttime="20160130 01:01:24.037"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:24.040" starttime="20160130 01:01:24.031"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.046" starttime="20160130 01:01:24.044"></status>
</kw>
<msg timestamp="20160130 01:01:24.046" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:01:24.046" starttime="20160130 01:01:24.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.048" starttime="20160130 01:01:24.047"></status>
</kw>
<msg timestamp="20160130 01:01:24.050" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160130 01:01:24.051" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:01:24.049" starttime="20160130 01:01:23.303"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.081" starttime="20160130 01:01:24.080"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.225" starttime="20160130 01:01:24.086"></status>
</kw>
<msg timestamp="20160130 01:01:24.228" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160130 01:01:24.227" starttime="20160130 01:01:24.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.242" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:01:24.671" level="INFO">Read output: Last login: Sat Jan 30 00:01:06 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:01:24.672" starttime="20160130 01:01:24.239"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:24.673" starttime="20160130 01:01:24.230"></status>
</kw>
<msg timestamp="20160130 01:01:24.675" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160130 01:01:24.674" starttime="20160130 01:01:24.074"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:01:24.680" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:01:24.679" starttime="20160130 01:01:24.675"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:01:24.682" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160130 01:01:24.760" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:01:24.761" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:01:24.761" starttime="20160130 01:01:24.680"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.765" starttime="20160130 01:01:24.763"></status>
</kw>
<msg timestamp="20160130 01:01:24.766" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:01:24.767" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:01:24.766" starttime="20160130 01:01:24.762"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.779" starttime="20160130 01:01:24.776"></status>
</kw>
<msg timestamp="20160130 01:01:24.781" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:24.780" starttime="20160130 01:01:24.769"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:01:24.786" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:01:24.785" starttime="20160130 01:01:24.782"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:01:24.791" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:01:24.790" starttime="20160130 01:01:24.788"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.795" starttime="20160130 01:01:24.793"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.808" starttime="20160130 01:01:24.805"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.814" starttime="20160130 01:01:24.809"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:24.815" starttime="20160130 01:01:24.797"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.827" starttime="20160130 01:01:24.824"></status>
</kw>
<msg timestamp="20160130 01:01:24.829" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:01:24.828" starttime="20160130 01:01:24.817"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.833" starttime="20160130 01:01:24.831"></status>
</kw>
<msg timestamp="20160130 01:01:24.836" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160130 01:01:24.837" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:01:24.835" starttime="20160130 01:01:24.060"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:24.842" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:01:24.843" starttime="20160130 01:01:24.839"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:24.848" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:01:24.849" starttime="20160130 01:01:24.845"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:24.854" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:01:24.855" starttime="20160130 01:01:24.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:24.860" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:01:24.861" starttime="20160130 01:01:24.857"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160130 01:01:24.866" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:24.867" starttime="20160130 01:01:24.863"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160130 01:01:24.871" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:24.872" starttime="20160130 01:01:24.868"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160130 01:01:24.877" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:24.878" starttime="20160130 01:01:24.874"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160130 01:01:24.882" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:24.883" starttime="20160130 01:01:24.879"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.895" starttime="20160130 01:01:24.892"></status>
</kw>
<msg timestamp="20160130 01:01:24.896" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:01:24.895" starttime="20160130 01:01:24.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.898" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:01:24.899" starttime="20160130 01:01:24.897"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:24.899" starttime="20160130 01:01:20.814"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s1-s1-t1" name="Run MOC Abandon Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.907" starttime="20160130 01:01:24.906"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160130 01:01:24.909" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160130 01:01:24.909" starttime="20160130 01:01:24.908"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.918" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160130 01:01:24.918" starttime="20160130 01:01:24.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.920" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160130 01:01:24.921" starttime="20160130 01:01:24.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.922" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160130 01:01:24.923" starttime="20160130 01:01:24.921"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.925" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160130 01:01:24.925" starttime="20160130 01:01:24.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.927" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160130 01:01:24.927" starttime="20160130 01:01:24.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.929" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160130 01:01:24.930" starttime="20160130 01:01:24.928"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.932" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:24.932" starttime="20160130 01:01:24.930"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.934" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160130 01:01:24.934" starttime="20160130 01:01:24.933"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.936" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:01:24.936" starttime="20160130 01:01:24.935"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.938" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160130 01:01:24.939" starttime="20160130 01:01:24.937"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.947" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:24.947" starttime="20160130 01:01:24.945"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:24.948" starttime="20160130 01:01:24.943"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.951" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:24.952" starttime="20160130 01:01:24.950"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:24.952" starttime="20160130 01:01:24.949"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.956" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:24.956" starttime="20160130 01:01:24.954"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:24.957" starttime="20160130 01:01:24.953"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:24.958" starttime="20160130 01:01:24.940"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:01:24.961" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:01:24.961" starttime="20160130 01:01:24.958"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.963" starttime="20160130 01:01:24.962"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.965" starttime="20160130 01:01:24.964"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.967" starttime="20160130 01:01:24.966"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.969" starttime="20160130 01:01:24.968"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.970" starttime="20160130 01:01:24.969"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.972" starttime="20160130 01:01:24.971"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.974" starttime="20160130 01:01:24.973"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.976" starttime="20160130 01:01:24.975"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.978" starttime="20160130 01:01:24.977"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.980" starttime="20160130 01:01:24.979"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.982" starttime="20160130 01:01:24.981"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:24.984" starttime="20160130 01:01:24.983"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:01:24.987" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160130 01:01:25.882" level="INFO">01:01:25,881 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:25.883" starttime="20160130 01:01:24.986"></status>
</kw>
<msg timestamp="20160130 01:01:25.885" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:25.885" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:01:25.884" starttime="20160130 01:01:24.985"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:25.894" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:01:25.893" starttime="20160130 01:01:25.890"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:25.896" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:25.896" starttime="20160130 01:01:25.894"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:25.899" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:25.899" starttime="20160130 01:01:25.897"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:25.903" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:25.904" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:25.904" starttime="20160130 01:01:25.901"></status>
</kw>
<msg timestamp="20160130 01:01:25.906" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:25.906" level="INFO">${return_log_entry} = 2016-01-30 01:01:25,881 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:25.905" starttime="20160130 01:01:25.900"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:25.913" starttime="20160130 01:01:25.911"></status>
</kw>
<msg timestamp="20160130 01:01:25.914" level="INFO">${return_log_entry} = 2016-01-30 01:01:25,881 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:25.913" starttime="20160130 01:01:25.907"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:25.920" starttime="20160130 01:01:25.919"></status>
</kw>
<msg timestamp="20160130 01:01:25.921" level="INFO">${return_log_entry} = 2016-01-30 01:01:25,881 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:25.921" starttime="20160130 01:01:25.915"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:25.928" starttime="20160130 01:01:25.926"></status>
</kw>
<msg timestamp="20160130 01:01:25.929" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:25.929" starttime="20160130 01:01:25.922"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:25.938" starttime="20160130 01:01:25.936"></status>
</kw>
<msg timestamp="20160130 01:01:25.939" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:25.939" starttime="20160130 01:01:25.930"></status>
</kw>
<msg timestamp="20160130 01:01:25.940" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:25.940" starttime="20160130 01:01:25.886"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:25.947" starttime="20160130 01:01:25.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:25.949" starttime="20160130 01:01:25.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:25.951" starttime="20160130 01:01:25.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:01:25.960" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:01:25.960" starttime="20160130 01:01:25.958"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:25.961" starttime="20160130 01:01:25.956"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:25.962" starttime="20160130 01:01:25.952"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:25.962" starttime="20160130 01:01:25.942"></status>
</kw>
<msg timestamp="20160130 01:01:25.964" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160130 01:01:25.963" starttime="20160130 01:01:24.911"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160130 01:01:25.967" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:25.967" starttime="20160130 01:01:25.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:25.969" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160130 01:01:25.970" starttime="20160130 01:01:25.968"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC Abandon *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:25.972" starttime="20160130 01:01:25.971"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC abandon call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:25.974" level="INFO">Running the MOC abandon call...</msg>
<status status="PASS" endtime="20160130 01:01:25.974" starttime="20160130 01:01:25.973"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC Abandon">
<doc>Runs an abandoned MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-abandon</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160130 01:01:25.995" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv</msg>
<status status="PASS" endtime="20160130 01:01:25.994" starttime="20160130 01:01:25.993"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160130 01:01:25.998" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv</msg>
<status status="PASS" endtime="20160130 01:01:25.997" starttime="20160130 01:01:25.996"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160130 01:01:26.001" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini</msg>
<status status="PASS" endtime="20160130 01:01:26.000" starttime="20160130 01:01:25.998"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160130 01:01:26.004" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-abandon.cgs</msg>
<status status="PASS" endtime="20160130 01:01:26.003" starttime="20160130 01:01:26.002"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:26.006" starttime="20160130 01:01:26.005"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:01:26.009" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:26.010" starttime="20160130 01:01:26.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:26.012" starttime="20160130 01:01:26.011"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160130 01:01:26.015" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:26.015" starttime="20160130 01:01:26.013"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:01:26.019" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:26.019" starttime="20160130 01:01:26.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:26.021" starttime="20160130 01:01:26.020"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160130 01:01:26.023" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:26.024" starttime="20160130 01:01:26.021"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160130 01:01:26.027" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:26.027" starttime="20160130 01:01:26.024"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:26.029" starttime="20160130 01:01:26.028"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160130 01:01:26.040" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-abandon.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:01:48.075" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:01:48.070" starttime="20160130 01:01:26.029"></status>
</kw>
<msg timestamp="20160130 01:01:48.081" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:01:48.079" starttime="20160130 01:01:25.985"></status>
</kw>
<msg timestamp="20160130 01:01:48.084" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:01:48.082" starttime="20160130 01:01:25.976"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:48.091" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160130 01:01:48.092" starttime="20160130 01:01:48.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.097" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:48.098" starttime="20160130 01:01:48.094"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.102" starttime="20160130 01:01:48.100"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.130" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:48.131" starttime="20160130 01:01:48.127"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:48.132" starttime="20160130 01:01:48.124"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.139" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:48.140" starttime="20160130 01:01:48.136"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:48.142" starttime="20160130 01:01:48.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.149" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:48.150" starttime="20160130 01:01:48.146"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:48.151" starttime="20160130 01:01:48.143"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:48.152" starttime="20160130 01:01:48.118"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.157" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:01:48.158" starttime="20160130 01:01:48.154"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.162" starttime="20160130 01:01:48.160"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.167" starttime="20160130 01:01:48.164"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.171" starttime="20160130 01:01:48.168"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.174" starttime="20160130 01:01:48.172"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.177" starttime="20160130 01:01:48.176"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.182" starttime="20160130 01:01:48.179"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:01:48.188" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160130 01:01:48.432" level="INFO">01:01:48,426 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:01:48,427 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:01:48,427 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422364
01:01:48,428 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
01:01:48,429 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:01:48,429 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:01:48,430 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:01:48,431 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160130 01:01:48.432" starttime="20160130 01:01:48.186"></status>
</kw>
<msg timestamp="20160130 01:01:48.433" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:48.434" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:01:48.433" starttime="20160130 01:01:48.183"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:48.440" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:01:48.440" starttime="20160130 01:01:48.438"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.443" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:48.442" starttime="20160130 01:01:48.441"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.445" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:48.444" starttime="20160130 01:01:48.443"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.448" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:48.449" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:48.449" starttime="20160130 01:01:48.447"></status>
</kw>
<msg timestamp="20160130 01:01:48.450" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:48.450" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,426 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:48.450" starttime="20160130 01:01:48.445"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.455" starttime="20160130 01:01:48.454"></status>
</kw>
<msg timestamp="20160130 01:01:48.456" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,426 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:48.456" starttime="20160130 01:01:48.451"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.461" starttime="20160130 01:01:48.460"></status>
</kw>
<msg timestamp="20160130 01:01:48.462" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,426 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:48.462" starttime="20160130 01:01:48.457"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.468" starttime="20160130 01:01:48.466"></status>
</kw>
<msg timestamp="20160130 01:01:48.469" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:48.468" starttime="20160130 01:01:48.463"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.477" starttime="20160130 01:01:48.475"></status>
</kw>
<msg timestamp="20160130 01:01:48.478" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:48.477" starttime="20160130 01:01:48.469"></status>
</kw>
<msg timestamp="20160130 01:01:48.479" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:48.478" starttime="20160130 01:01:48.435"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:48.485" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160130 01:01:48.485" starttime="20160130 01:01:48.483"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.487" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:48.487" starttime="20160130 01:01:48.486"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.489" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:48.489" starttime="20160130 01:01:48.488"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.492" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:48.494" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:48.494" starttime="20160130 01:01:48.491"></status>
</kw>
<msg timestamp="20160130 01:01:48.495" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:48.495" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,427 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:01:48.495" starttime="20160130 01:01:48.490"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.500" starttime="20160130 01:01:48.499"></status>
</kw>
<msg timestamp="20160130 01:01:48.501" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,427 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:01:48.501" starttime="20160130 01:01:48.496"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.506" starttime="20160130 01:01:48.505"></status>
</kw>
<msg timestamp="20160130 01:01:48.507" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,427 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:01:48.507" starttime="20160130 01:01:48.502"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.513" starttime="20160130 01:01:48.511"></status>
</kw>
<msg timestamp="20160130 01:01:48.514" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:01:48.513" starttime="20160130 01:01:48.508"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.521" starttime="20160130 01:01:48.520"></status>
</kw>
<msg timestamp="20160130 01:01:48.522" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:01:48.521" starttime="20160130 01:01:48.514"></status>
</kw>
<msg timestamp="20160130 01:01:48.523" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160130 01:01:48.522" starttime="20160130 01:01:48.480"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:48.529" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160130 01:01:48.529" starttime="20160130 01:01:48.527"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.531" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:48.531" starttime="20160130 01:01:48.530"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.533" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:48.533" starttime="20160130 01:01:48.532"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.537" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:48.537" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:48.538" starttime="20160130 01:01:48.535"></status>
</kw>
<msg timestamp="20160130 01:01:48.539" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:48.539" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,428 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:01:48.538" starttime="20160130 01:01:48.534"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.544" starttime="20160130 01:01:48.543"></status>
</kw>
<msg timestamp="20160130 01:01:48.545" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,428 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:01:48.545" starttime="20160130 01:01:48.540"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.551" starttime="20160130 01:01:48.550"></status>
</kw>
<msg timestamp="20160130 01:01:48.552" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,428 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:01:48.552" starttime="20160130 01:01:48.546"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.557" starttime="20160130 01:01:48.556"></status>
</kw>
<msg timestamp="20160130 01:01:48.558" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:01:48.558" starttime="20160130 01:01:48.553"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.565" starttime="20160130 01:01:48.564"></status>
</kw>
<msg timestamp="20160130 01:01:48.566" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:01:48.566" starttime="20160130 01:01:48.559"></status>
</kw>
<msg timestamp="20160130 01:01:48.567" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:01:48.567" starttime="20160130 01:01:48.524"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:48.574" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160130 01:01:48.573" starttime="20160130 01:01:48.572"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.576" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:48.575" starttime="20160130 01:01:48.574"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.578" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:48.577" starttime="20160130 01:01:48.576"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.581" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:48.582" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:48.582" starttime="20160130 01:01:48.580"></status>
</kw>
<msg timestamp="20160130 01:01:48.583" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:48.583" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,427 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422364</msg>
<status status="PASS" endtime="20160130 01:01:48.583" starttime="20160130 01:01:48.578"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.589" starttime="20160130 01:01:48.587"></status>
</kw>
<msg timestamp="20160130 01:01:48.589" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,427 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422364</msg>
<status status="PASS" endtime="20160130 01:01:48.589" starttime="20160130 01:01:48.584"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.594" starttime="20160130 01:01:48.593"></status>
</kw>
<msg timestamp="20160130 01:01:48.595" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,427 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422364</msg>
<status status="PASS" endtime="20160130 01:01:48.595" starttime="20160130 01:01:48.590"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.600" starttime="20160130 01:01:48.599"></status>
</kw>
<msg timestamp="20160130 01:01:48.601" level="INFO">${resultCode} = 2422364</msg>
<status status="PASS" endtime="20160130 01:01:48.601" starttime="20160130 01:01:48.596"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.608" starttime="20160130 01:01:48.607"></status>
</kw>
<msg timestamp="20160130 01:01:48.609" level="INFO">${resultCode} = 2422364</msg>
<status status="PASS" endtime="20160130 01:01:48.609" starttime="20160130 01:01:48.602"></status>
</kw>
<msg timestamp="20160130 01:01:48.610" level="INFO">${id} = 2422364</msg>
<status status="PASS" endtime="20160130 01:01:48.610" starttime="20160130 01:01:48.568"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:48.617" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160130 01:01:48.616" starttime="20160130 01:01:48.615"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.619" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:48.618" starttime="20160130 01:01:48.617"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.621" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:48.620" starttime="20160130 01:01:48.619"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.624" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:48.625" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:48.625" starttime="20160130 01:01:48.623"></status>
</kw>
<msg timestamp="20160130 01:01:48.626" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:48.626" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,429 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:01:48.626" starttime="20160130 01:01:48.621"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.631" starttime="20160130 01:01:48.630"></status>
</kw>
<msg timestamp="20160130 01:01:48.632" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,429 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:01:48.632" starttime="20160130 01:01:48.627"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.637" starttime="20160130 01:01:48.636"></status>
</kw>
<msg timestamp="20160130 01:01:48.638" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,429 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:01:48.638" starttime="20160130 01:01:48.633"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.644" starttime="20160130 01:01:48.643"></status>
</kw>
<msg timestamp="20160130 01:01:48.645" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:01:48.645" starttime="20160130 01:01:48.639"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.652" starttime="20160130 01:01:48.651"></status>
</kw>
<msg timestamp="20160130 01:01:48.653" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:01:48.653" starttime="20160130 01:01:48.646"></status>
</kw>
<msg timestamp="20160130 01:01:48.654" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:01:48.654" starttime="20160130 01:01:48.611"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:48.660" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160130 01:01:48.660" starttime="20160130 01:01:48.659"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.662" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:48.662" starttime="20160130 01:01:48.661"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.664" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:48.664" starttime="20160130 01:01:48.663"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.668" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:48.668" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:48.669" starttime="20160130 01:01:48.666"></status>
</kw>
<msg timestamp="20160130 01:01:48.670" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:48.670" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,429 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:01:48.669" starttime="20160130 01:01:48.665"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.675" starttime="20160130 01:01:48.674"></status>
</kw>
<msg timestamp="20160130 01:01:48.676" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,429 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:01:48.675" starttime="20160130 01:01:48.671"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.680" starttime="20160130 01:01:48.679"></status>
</kw>
<msg timestamp="20160130 01:01:48.681" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,429 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:01:48.681" starttime="20160130 01:01:48.676"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.686" starttime="20160130 01:01:48.685"></status>
</kw>
<msg timestamp="20160130 01:01:48.687" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:01:48.687" starttime="20160130 01:01:48.682"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.694" starttime="20160130 01:01:48.693"></status>
</kw>
<msg timestamp="20160130 01:01:48.695" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:01:48.695" starttime="20160130 01:01:48.688"></status>
</kw>
<msg timestamp="20160130 01:01:48.696" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160130 01:01:48.696" starttime="20160130 01:01:48.655"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:48.702" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160130 01:01:48.702" starttime="20160130 01:01:48.701"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.704" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:48.704" starttime="20160130 01:01:48.703"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.706" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:48.706" starttime="20160130 01:01:48.705"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.710" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:48.710" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:48.711" starttime="20160130 01:01:48.708"></status>
</kw>
<msg timestamp="20160130 01:01:48.712" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:48.712" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,430 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:48.711" starttime="20160130 01:01:48.707"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.717" starttime="20160130 01:01:48.715"></status>
</kw>
<msg timestamp="20160130 01:01:48.717" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,430 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:48.717" starttime="20160130 01:01:48.713"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.722" starttime="20160130 01:01:48.721"></status>
</kw>
<msg timestamp="20160130 01:01:48.723" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,430 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:48.723" starttime="20160130 01:01:48.718"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.728" starttime="20160130 01:01:48.727"></status>
</kw>
<msg timestamp="20160130 01:01:48.729" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:48.729" starttime="20160130 01:01:48.724"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.736" starttime="20160130 01:01:48.735"></status>
</kw>
<msg timestamp="20160130 01:01:48.737" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:48.736" starttime="20160130 01:01:48.730"></status>
</kw>
<msg timestamp="20160130 01:01:48.738" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:48.738" starttime="20160130 01:01:48.697"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.743" starttime="20160130 01:01:48.742"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.745" starttime="20160130 01:01:48.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.746" starttime="20160130 01:01:48.745"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:01:48.753" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:01:48.753" starttime="20160130 01:01:48.751"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:48.754" starttime="20160130 01:01:48.750"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:48.754" starttime="20160130 01:01:48.747"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:48.755" starttime="20160130 01:01:48.739"></status>
</kw>
<msg timestamp="20160130 01:01:48.757" level="INFO">${rc} = OK</msg>
<msg timestamp="20160130 01:01:48.757" level="INFO">${provId} = 1</msg>
<msg timestamp="20160130 01:01:48.757" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160130 01:01:48.758" level="INFO">${id} = 2422364</msg>
<msg timestamp="20160130 01:01:48.758" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160130 01:01:48.758" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160130 01:01:48.759" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:48.756" starttime="20160130 01:01:48.106"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.771" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:48.771" starttime="20160130 01:01:48.769"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:48.772" starttime="20160130 01:01:48.768"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.775" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:48.775" starttime="20160130 01:01:48.773"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:48.776" starttime="20160130 01:01:48.772"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.779" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:48.779" starttime="20160130 01:01:48.777"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:48.780" starttime="20160130 01:01:48.776"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:48.780" starttime="20160130 01:01:48.765"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.782" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:01:48.782" starttime="20160130 01:01:48.781"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.784" starttime="20160130 01:01:48.783"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.786" starttime="20160130 01:01:48.785"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.788" starttime="20160130 01:01:48.787"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.789" starttime="20160130 01:01:48.788"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.791" starttime="20160130 01:01:48.790"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.793" starttime="20160130 01:01:48.791"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:01:48.795" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2422364']</msg>
<msg timestamp="20160130 01:01:48.943" level="INFO">01:01:48,939 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:01:48,939 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422365
01:01:48,940 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
01:01:48,941 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:01:48,942 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:01:48.943" starttime="20160130 01:01:48.794"></status>
</kw>
<msg timestamp="20160130 01:01:48.944" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:48.945" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:01:48.944" starttime="20160130 01:01:48.793"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:48.951" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:01:48.951" starttime="20160130 01:01:48.949"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.953" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:48.953" starttime="20160130 01:01:48.952"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.955" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:48.955" starttime="20160130 01:01:48.954"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.958" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:48.959" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:48.960" starttime="20160130 01:01:48.957"></status>
</kw>
<msg timestamp="20160130 01:01:48.960" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:48.961" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,939 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:48.960" starttime="20160130 01:01:48.956"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.966" starttime="20160130 01:01:48.965"></status>
</kw>
<msg timestamp="20160130 01:01:48.967" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,939 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:48.966" starttime="20160130 01:01:48.961"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.971" starttime="20160130 01:01:48.970"></status>
</kw>
<msg timestamp="20160130 01:01:48.972" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,939 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:48.972" starttime="20160130 01:01:48.967"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.978" starttime="20160130 01:01:48.976"></status>
</kw>
<msg timestamp="20160130 01:01:48.978" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:48.978" starttime="20160130 01:01:48.973"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:48.985" starttime="20160130 01:01:48.984"></status>
</kw>
<msg timestamp="20160130 01:01:48.986" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:48.986" starttime="20160130 01:01:48.979"></status>
</kw>
<msg timestamp="20160130 01:01:48.987" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:48.987" starttime="20160130 01:01:48.946"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:48.994" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160130 01:01:48.993" starttime="20160130 01:01:48.992"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.996" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:48.996" starttime="20160130 01:01:48.995"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:48.998" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:48.998" starttime="20160130 01:01:48.997"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:49.002" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:49.002" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:49.003" starttime="20160130 01:01:49.000"></status>
</kw>
<msg timestamp="20160130 01:01:49.004" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:49.004" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,939 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422365</msg>
<status status="PASS" endtime="20160130 01:01:49.003" starttime="20160130 01:01:48.999"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.009" starttime="20160130 01:01:49.008"></status>
</kw>
<msg timestamp="20160130 01:01:49.010" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,939 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422365</msg>
<status status="PASS" endtime="20160130 01:01:49.010" starttime="20160130 01:01:49.005"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.015" starttime="20160130 01:01:49.014"></status>
</kw>
<msg timestamp="20160130 01:01:49.016" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,939 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422365</msg>
<status status="PASS" endtime="20160130 01:01:49.016" starttime="20160130 01:01:49.011"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.021" starttime="20160130 01:01:49.020"></status>
</kw>
<msg timestamp="20160130 01:01:49.022" level="INFO">${resultCode} = 2422365</msg>
<status status="PASS" endtime="20160130 01:01:49.022" starttime="20160130 01:01:49.017"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.029" starttime="20160130 01:01:49.028"></status>
</kw>
<msg timestamp="20160130 01:01:49.030" level="INFO">${resultCode} = 2422365</msg>
<status status="PASS" endtime="20160130 01:01:49.030" starttime="20160130 01:01:49.023"></status>
</kw>
<msg timestamp="20160130 01:01:49.031" level="INFO">${accountId} = 2422365</msg>
<status status="PASS" endtime="20160130 01:01:49.031" starttime="20160130 01:01:48.988"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:49.038" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160130 01:01:49.037" starttime="20160130 01:01:49.036"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:49.040" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:49.039" starttime="20160130 01:01:49.038"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:49.042" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:49.041" starttime="20160130 01:01:49.040"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:49.045" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:49.046" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:49.046" starttime="20160130 01:01:49.043"></status>
</kw>
<msg timestamp="20160130 01:01:49.047" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:49.047" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,940 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160130 01:01:49.046" starttime="20160130 01:01:49.042"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.052" starttime="20160130 01:01:49.051"></status>
</kw>
<msg timestamp="20160130 01:01:49.053" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,940 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160130 01:01:49.052" starttime="20160130 01:01:49.048"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.058" starttime="20160130 01:01:49.057"></status>
</kw>
<msg timestamp="20160130 01:01:49.059" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,940 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160130 01:01:49.058" starttime="20160130 01:01:49.053"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.064" starttime="20160130 01:01:49.062"></status>
</kw>
<msg timestamp="20160130 01:01:49.065" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160130 01:01:49.064" starttime="20160130 01:01:49.059"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.072" starttime="20160130 01:01:49.071"></status>
</kw>
<msg timestamp="20160130 01:01:49.073" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160130 01:01:49.073" starttime="20160130 01:01:49.065"></status>
</kw>
<msg timestamp="20160130 01:01:49.074" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160130 01:01:49.074" starttime="20160130 01:01:49.033"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:49.081" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160130 01:01:49.080" starttime="20160130 01:01:49.079"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:49.083" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:49.082" starttime="20160130 01:01:49.081"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:49.085" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:49.084" starttime="20160130 01:01:49.083"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:49.088" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:49.089" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:49.089" starttime="20160130 01:01:49.086"></status>
</kw>
<msg timestamp="20160130 01:01:49.090" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:49.090" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,941 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:01:49.089" starttime="20160130 01:01:49.085"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.095" starttime="20160130 01:01:49.094"></status>
</kw>
<msg timestamp="20160130 01:01:49.096" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,941 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:01:49.096" starttime="20160130 01:01:49.091"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.101" starttime="20160130 01:01:49.100"></status>
</kw>
<msg timestamp="20160130 01:01:49.102" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,941 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:01:49.101" starttime="20160130 01:01:49.097"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.107" starttime="20160130 01:01:49.106"></status>
</kw>
<msg timestamp="20160130 01:01:49.108" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160130 01:01:49.107" starttime="20160130 01:01:49.102"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.115" starttime="20160130 01:01:49.113"></status>
</kw>
<msg timestamp="20160130 01:01:49.115" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160130 01:01:49.115" starttime="20160130 01:01:49.108"></status>
</kw>
<msg timestamp="20160130 01:01:49.117" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160130 01:01:49.116" starttime="20160130 01:01:49.075"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:49.123" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160130 01:01:49.122" starttime="20160130 01:01:49.121"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:49.125" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:49.124" starttime="20160130 01:01:49.123"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:49.127" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:49.126" starttime="20160130 01:01:49.125"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:49.130" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:49.131" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:49.131" starttime="20160130 01:01:49.129"></status>
</kw>
<msg timestamp="20160130 01:01:49.132" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:49.132" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,942 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:01:49.132" starttime="20160130 01:01:49.128"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.137" starttime="20160130 01:01:49.136"></status>
</kw>
<msg timestamp="20160130 01:01:49.138" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,942 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:01:49.137" starttime="20160130 01:01:49.133"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.143" starttime="20160130 01:01:49.142"></status>
</kw>
<msg timestamp="20160130 01:01:49.144" level="INFO">${return_log_entry} = 2016-01-30 01:01:48,942 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:01:49.143" starttime="20160130 01:01:49.138"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.151" starttime="20160130 01:01:49.149"></status>
</kw>
<msg timestamp="20160130 01:01:49.152" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:01:49.151" starttime="20160130 01:01:49.144"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.158" starttime="20160130 01:01:49.157"></status>
</kw>
<msg timestamp="20160130 01:01:49.159" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:01:49.159" starttime="20160130 01:01:49.152"></status>
</kw>
<msg timestamp="20160130 01:01:49.160" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160130 01:01:49.160" starttime="20160130 01:01:49.118"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.166" starttime="20160130 01:01:49.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.167" starttime="20160130 01:01:49.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.169" starttime="20160130 01:01:49.168"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:01:49.175" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:01:49.175" starttime="20160130 01:01:49.173"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:49.176" starttime="20160130 01:01:49.172"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:49.176" starttime="20160130 01:01:49.169"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:49.177" starttime="20160130 01:01:49.161"></status>
</kw>
<msg timestamp="20160130 01:01:49.179" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160130 01:01:49.179" level="INFO">${accId} = 2422365</msg>
<msg timestamp="20160130 01:01:49.180" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160130 01:01:49.180" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160130 01:01:49.180" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160130 01:01:49.178" starttime="20160130 01:01:48.760"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.182" starttime="20160130 01:01:49.181"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.183" starttime="20160130 01:01:49.182"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:49.185" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160130 01:01:49.186" starttime="20160130 01:01:49.184"></status>
</kw>
<doc>Test will make an abandoned MOC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:01:49.186" starttime="20160130 01:01:24.901"></status>
</test>
<doc>Testing the prepaid MOC call. Calling party abandons the call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:01:49.191" starttime="20160130 01:01:20.658"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:01:49.200" starttime="20160130 01:01:20.638"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Busy" id="s1-s1-s1-s2-s1-s2" name="MOC PREPAID ONNET-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Busy/MOC_PREPAID_ONNET-Busy-robot-suite.txt" id="s1-s1-s1-s2-s1-s2-s1" name="MOC PREPAID ONNET-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160130 01:01:49.373" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:01:49.378" level="INFO">${date} = Sat Jan 30 01:01:49 CET 2016</msg>
<status status="PASS" endtime="20160130 01:01:49.376" starttime="20160130 01:01:49.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:49.382" level="INFO">Date and time: Sat Jan 30 01:01:49 CET 2016</msg>
<status status="PASS" endtime="20160130 01:01:49.383" starttime="20160130 01:01:49.379"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:49.387" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160130 01:01:49.388" starttime="20160130 01:01:49.384"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.449" starttime="20160130 01:01:49.447"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:49.500" starttime="20160130 01:01:49.458"></status>
</kw>
<msg timestamp="20160130 01:01:49.501" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160130 01:01:49.500" starttime="20160130 01:01:49.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:01:49.507" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:01:49.936" level="INFO">Read output: Last login: Sat Jan 30 00:01:21 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:01:49.937" starttime="20160130 01:01:49.506"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:49.938" starttime="20160130 01:01:49.502"></status>
</kw>
<msg timestamp="20160130 01:01:49.940" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160130 01:01:49.939" starttime="20160130 01:01:49.437"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:01:49.945" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:01:49.945" starttime="20160130 01:01:49.941"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:01:49.947" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160130 01:01:50.284" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:01:50.286" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:01:50.285" starttime="20160130 01:01:49.946"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:50.290" starttime="20160130 01:01:50.288"></status>
</kw>
<msg timestamp="20160130 01:01:50.291" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:01:50.291" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:01:50.290" starttime="20160130 01:01:50.286"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:50.296" starttime="20160130 01:01:50.295"></status>
</kw>
<msg timestamp="20160130 01:01:50.297" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:50.297" starttime="20160130 01:01:50.292"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160130 01:01:50.299" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:01:50.299" starttime="20160130 01:01:50.298"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:01:50.301" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:01:50.301" starttime="20160130 01:01:50.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:50.303" starttime="20160130 01:01:50.302"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:50.309" starttime="20160130 01:01:50.307"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:01:50.312" starttime="20160130 01:01:50.310"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:50.312" starttime="20160130 01:01:50.304"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:50.317" starttime="20160130 01:01:50.316"></status>
</kw>
<msg timestamp="20160130 01:01:50.318" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:01:50.317" starttime="20160130 01:01:50.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:50.319" starttime="20160130 01:01:50.319"></status>
</kw>
<msg timestamp="20160130 01:01:50.321" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160130 01:01:50.322" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:01:50.320" starttime="20160130 01:01:49.408"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:50.349" starttime="20160130 01:01:50.348"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:50.395" starttime="20160130 01:01:50.353"></status>
</kw>
<msg timestamp="20160130 01:01:50.396" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160130 01:01:50.396" starttime="20160130 01:01:50.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:01:50.402" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:01:50.865" level="INFO">Read output: Last login: Sat Jan 30 00:01:22 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:01:50.866" starttime="20160130 01:01:50.400"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:50.866" starttime="20160130 01:01:50.397"></status>
</kw>
<msg timestamp="20160130 01:01:50.867" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160130 01:01:50.867" starttime="20160130 01:01:50.343"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:01:50.872" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:01:50.871" starttime="20160130 01:01:50.868"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:01:50.873" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160130 01:01:51.254" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:01:51.258" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:01:51.256" starttime="20160130 01:01:50.872"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:51.265" starttime="20160130 01:01:51.262"></status>
</kw>
<msg timestamp="20160130 01:01:51.268" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:01:51.268" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:01:51.267" starttime="20160130 01:01:51.259"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:51.278" starttime="20160130 01:01:51.276"></status>
</kw>
<msg timestamp="20160130 01:01:51.279" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:51.279" starttime="20160130 01:01:51.270"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160130 01:01:51.284" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:01:51.283" starttime="20160130 01:01:51.281"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:01:51.288" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:01:51.287" starttime="20160130 01:01:51.285"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:51.291" starttime="20160130 01:01:51.289"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:51.301" starttime="20160130 01:01:51.299"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:01:51.305" starttime="20160130 01:01:51.303"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:51.309" starttime="20160130 01:01:51.292"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:51.318" starttime="20160130 01:01:51.316"></status>
</kw>
<msg timestamp="20160130 01:01:51.320" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:01:51.319" starttime="20160130 01:01:51.310"></status>
</kw>
<msg timestamp="20160130 01:01:51.323" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160130 01:01:51.324" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:01:51.322" starttime="20160130 01:01:50.331"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:51.379" starttime="20160130 01:01:51.377"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:51.431" starttime="20160130 01:01:51.387"></status>
</kw>
<msg timestamp="20160130 01:01:51.432" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160130 01:01:51.431" starttime="20160130 01:01:51.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:01:51.437" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:01:51.921" level="INFO">Read output: Last login: Sat Jan 30 00:01:23 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:01:51.922" starttime="20160130 01:01:51.436"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:51.923" starttime="20160130 01:01:51.433"></status>
</kw>
<msg timestamp="20160130 01:01:51.924" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160130 01:01:51.924" starttime="20160130 01:01:51.368"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:01:51.929" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:01:51.929" starttime="20160130 01:01:51.925"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:01:51.931" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160130 01:01:52.118" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:01:52.120" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:01:52.119" starttime="20160130 01:01:51.930"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.124" starttime="20160130 01:01:52.122"></status>
</kw>
<msg timestamp="20160130 01:01:52.125" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:01:52.125" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:01:52.124" starttime="20160130 01:01:52.121"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.129" starttime="20160130 01:01:52.129"></status>
</kw>
<msg timestamp="20160130 01:01:52.130" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:52.130" starttime="20160130 01:01:52.125"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:01:52.132" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:01:52.132" starttime="20160130 01:01:52.131"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:01:52.134" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:01:52.134" starttime="20160130 01:01:52.133"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.136" starttime="20160130 01:01:52.135"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.141" starttime="20160130 01:01:52.140"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.145" starttime="20160130 01:01:52.142"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:52.146" starttime="20160130 01:01:52.137"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.150" starttime="20160130 01:01:52.149"></status>
</kw>
<msg timestamp="20160130 01:01:52.151" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:01:52.151" starttime="20160130 01:01:52.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.153" starttime="20160130 01:01:52.152"></status>
</kw>
<msg timestamp="20160130 01:01:52.154" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160130 01:01:52.155" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:01:52.154" starttime="20160130 01:01:51.344"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.180" starttime="20160130 01:01:52.179"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.237" starttime="20160130 01:01:52.184"></status>
</kw>
<msg timestamp="20160130 01:01:52.240" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160130 01:01:52.239" starttime="20160130 01:01:52.181"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:01:52.252" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:01:52.711" level="INFO">Read output: Last login: Sat Jan 30 00:01:24 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:01:52.713" starttime="20160130 01:01:52.249"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:52.714" starttime="20160130 01:01:52.242"></status>
</kw>
<msg timestamp="20160130 01:01:52.717" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160130 01:01:52.716" starttime="20160130 01:01:52.175"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:01:52.726" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:01:52.725" starttime="20160130 01:01:52.718"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:01:52.730" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160130 01:01:52.807" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:01:52.809" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:01:52.808" starttime="20160130 01:01:52.727"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.816" starttime="20160130 01:01:52.813"></status>
</kw>
<msg timestamp="20160130 01:01:52.818" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:01:52.819" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:01:52.817" starttime="20160130 01:01:52.810"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.829" starttime="20160130 01:01:52.827"></status>
</kw>
<msg timestamp="20160130 01:01:52.830" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:52.830" starttime="20160130 01:01:52.820"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:01:52.835" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:01:52.834" starttime="20160130 01:01:52.832"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:01:52.840" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:01:52.839" starttime="20160130 01:01:52.836"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.843" starttime="20160130 01:01:52.841"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.855" starttime="20160130 01:01:52.852"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.861" starttime="20160130 01:01:52.856"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:52.862" starttime="20160130 01:01:52.845"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.872" starttime="20160130 01:01:52.869"></status>
</kw>
<msg timestamp="20160130 01:01:52.874" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:01:52.873" starttime="20160130 01:01:52.863"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.877" starttime="20160130 01:01:52.875"></status>
</kw>
<msg timestamp="20160130 01:01:52.880" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160130 01:01:52.880" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:01:52.879" starttime="20160130 01:01:52.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:52.884" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:01:52.885" starttime="20160130 01:01:52.882"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:52.889" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:01:52.890" starttime="20160130 01:01:52.887"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:52.895" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:01:52.896" starttime="20160130 01:01:52.892"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:52.900" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:01:52.901" starttime="20160130 01:01:52.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160130 01:01:52.905" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:52.906" starttime="20160130 01:01:52.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160130 01:01:52.909" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:52.910" starttime="20160130 01:01:52.907"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160130 01:01:52.914" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:52.915" starttime="20160130 01:01:52.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160130 01:01:52.919" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:52.920" starttime="20160130 01:01:52.916"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.933" starttime="20160130 01:01:52.927"></status>
</kw>
<msg timestamp="20160130 01:01:52.935" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:01:52.934" starttime="20160130 01:01:52.921"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160130 01:01:52.940" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:01:52.940" starttime="20160130 01:01:52.936"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:52.942" starttime="20160130 01:01:49.367"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s2-s1-t1" name="Run MOC Busy Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:52.957" starttime="20160130 01:01:52.955"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160130 01:01:52.961" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160130 01:01:52.960" starttime="20160130 01:01:52.959"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160130 01:01:52.977" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160130 01:01:52.978" starttime="20160130 01:01:52.975"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160130 01:01:52.982" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160130 01:01:52.983" starttime="20160130 01:01:52.980"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160130 01:01:52.986" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160130 01:01:52.987" starttime="20160130 01:01:52.984"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160130 01:01:52.990" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160130 01:01:52.991" starttime="20160130 01:01:52.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:01:52.995" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160130 01:01:52.995" starttime="20160130 01:01:52.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:01:52.999" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160130 01:01:53.000" starttime="20160130 01:01:52.997"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160130 01:01:53.004" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:01:53.005" starttime="20160130 01:01:53.002"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160130 01:01:53.009" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160130 01:01:53.010" starttime="20160130 01:01:53.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160130 01:01:53.013" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:01:53.014" starttime="20160130 01:01:53.011"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160130 01:01:53.017" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160130 01:01:53.017" starttime="20160130 01:01:53.015"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:53.025" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:53.025" starttime="20160130 01:01:53.023"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:53.026" starttime="20160130 01:01:53.022"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:53.029" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:53.029" starttime="20160130 01:01:53.027"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:53.029" starttime="20160130 01:01:53.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:01:53.032" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:53.033" starttime="20160130 01:01:53.031"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:53.033" starttime="20160130 01:01:53.030"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:53.034" starttime="20160130 01:01:53.019"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:01:53.036" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:01:53.036" starttime="20160130 01:01:53.034"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.038" starttime="20160130 01:01:53.037"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.040" starttime="20160130 01:01:53.039"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.042" starttime="20160130 01:01:53.040"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.043" starttime="20160130 01:01:53.042"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.045" starttime="20160130 01:01:53.044"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.046" starttime="20160130 01:01:53.045"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.048" starttime="20160130 01:01:53.047"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.050" starttime="20160130 01:01:53.049"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.052" starttime="20160130 01:01:53.050"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.053" starttime="20160130 01:01:53.052"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.055" starttime="20160130 01:01:53.054"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.057" starttime="20160130 01:01:53.056"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:01:53.059" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160130 01:01:53.781" level="INFO">01:01:53,779 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:53.782" starttime="20160130 01:01:53.058"></status>
</kw>
<msg timestamp="20160130 01:01:53.783" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:53.783" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:01:53.782" starttime="20160130 01:01:53.057"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:01:53.789" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:01:53.789" starttime="20160130 01:01:53.787"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:53.791" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:01:53.791" starttime="20160130 01:01:53.790"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:01:53.793" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:01:53.793" starttime="20160130 01:01:53.792"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:01:53.796" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:01:53.797" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160130 01:01:53.797" starttime="20160130 01:01:53.795"></status>
</kw>
<msg timestamp="20160130 01:01:53.798" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:01:53.798" level="INFO">${return_log_entry} = 2016-01-30 01:01:53,779 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:53.798" starttime="20160130 01:01:53.794"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.803" starttime="20160130 01:01:53.802"></status>
</kw>
<msg timestamp="20160130 01:01:53.804" level="INFO">${return_log_entry} = 2016-01-30 01:01:53,779 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:53.804" starttime="20160130 01:01:53.799"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.809" starttime="20160130 01:01:53.808"></status>
</kw>
<msg timestamp="20160130 01:01:53.810" level="INFO">${return_log_entry} = 2016-01-30 01:01:53,779 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:01:53.809" starttime="20160130 01:01:53.805"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.815" starttime="20160130 01:01:53.813"></status>
</kw>
<msg timestamp="20160130 01:01:53.815" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:53.815" starttime="20160130 01:01:53.810"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.822" starttime="20160130 01:01:53.821"></status>
</kw>
<msg timestamp="20160130 01:01:53.823" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:53.822" starttime="20160130 01:01:53.816"></status>
</kw>
<msg timestamp="20160130 01:01:53.824" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:01:53.824" starttime="20160130 01:01:53.784"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.829" starttime="20160130 01:01:53.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.830" starttime="20160130 01:01:53.830"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.832" starttime="20160130 01:01:53.831"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:01:53.838" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:01:53.838" starttime="20160130 01:01:53.837"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:53.839" starttime="20160130 01:01:53.835"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:53.839" starttime="20160130 01:01:53.833"></status>
</kw>
<status status="PASS" endtime="20160130 01:01:53.840" starttime="20160130 01:01:53.825"></status>
</kw>
<msg timestamp="20160130 01:01:53.842" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160130 01:01:53.841" starttime="20160130 01:01:52.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160130 01:01:53.843" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:01:53.844" starttime="20160130 01:01:53.842"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:53.845" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160130 01:01:53.845" starttime="20160130 01:01:53.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC Busy *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.847" starttime="20160130 01:01:53.846"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC busy call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:01:53.848" level="INFO">Running the MOC busy call...</msg>
<status status="PASS" endtime="20160130 01:01:53.849" starttime="20160130 01:01:53.847"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC Busy">
<doc>Runs an busy MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-busy</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160130 01:01:53.863" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv</msg>
<status status="PASS" endtime="20160130 01:01:53.863" starttime="20160130 01:01:53.862"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160130 01:01:53.866" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv</msg>
<status status="PASS" endtime="20160130 01:01:53.865" starttime="20160130 01:01:53.864"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160130 01:01:53.868" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini</msg>
<status status="PASS" endtime="20160130 01:01:53.867" starttime="20160130 01:01:53.866"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160130 01:01:53.870" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-busy.cgs</msg>
<status status="PASS" endtime="20160130 01:01:53.869" starttime="20160130 01:01:53.868"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.871" starttime="20160130 01:01:53.870"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:01:53.874" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:53.874" starttime="20160130 01:01:53.872"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.876" starttime="20160130 01:01:53.875"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160130 01:01:53.878" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:53.878" starttime="20160130 01:01:53.876"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:01:53.881" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:53.881" starttime="20160130 01:01:53.879"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.883" starttime="20160130 01:01:53.882"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160130 01:01:53.885" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:53.885" starttime="20160130 01:01:53.883"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160130 01:01:53.888" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:01:53.889" starttime="20160130 01:01:53.886"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:01:53.890" starttime="20160130 01:01:53.889"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160130 01:01:53.898" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-busy.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:02:07.153" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:02:07.150" starttime="20160130 01:01:53.891"></status>
</kw>
<msg timestamp="20160130 01:02:07.157" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:02:07.155" starttime="20160130 01:01:53.857"></status>
</kw>
<msg timestamp="20160130 01:02:07.160" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:02:07.158" starttime="20160130 01:01:53.850"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:02:07.163" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160130 01:02:07.164" starttime="20160130 01:02:07.161"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.169" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:02:07.170" starttime="20160130 01:02:07.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.173" starttime="20160130 01:02:07.171"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.199" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:02:07.200" starttime="20160130 01:02:07.196"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:07.201" starttime="20160130 01:02:07.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.208" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:02:07.209" starttime="20160130 01:02:07.205"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:07.210" starttime="20160130 01:02:07.203"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.216" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:02:07.217" starttime="20160130 01:02:07.213"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:07.218" starttime="20160130 01:02:07.211"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:07.219" starttime="20160130 01:02:07.187"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.224" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:02:07.224" starttime="20160130 01:02:07.221"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.228" starttime="20160130 01:02:07.226"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.232" starttime="20160130 01:02:07.230"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.236" starttime="20160130 01:02:07.233"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.239" starttime="20160130 01:02:07.237"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.242" starttime="20160130 01:02:07.240"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.246" starttime="20160130 01:02:07.244"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:02:07.252" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160130 01:02:07.407" level="INFO">01:02:07,400 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:02:07,401 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:02:07,402 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422367
01:02:07,403 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
01:02:07,403 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:02:07,404 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:02:07,405 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:02:07,406 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160130 01:02:07.408" starttime="20160130 01:02:07.250"></status>
</kw>
<msg timestamp="20160130 01:02:07.409" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:07.409" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:02:07.409" starttime="20160130 01:02:07.247"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:02:07.416" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:02:07.416" starttime="20160130 01:02:07.414"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.418" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:02:07.418" starttime="20160130 01:02:07.417"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.420" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:02:07.419" starttime="20160130 01:02:07.418"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.423" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:02:07.423" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:02:07.424" starttime="20160130 01:02:07.422"></status>
</kw>
<msg timestamp="20160130 01:02:07.425" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:07.425" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,400 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:02:07.424" starttime="20160130 01:02:07.420"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.430" starttime="20160130 01:02:07.429"></status>
</kw>
<msg timestamp="20160130 01:02:07.431" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,400 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:02:07.430" starttime="20160130 01:02:07.426"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.435" starttime="20160130 01:02:07.434"></status>
</kw>
<msg timestamp="20160130 01:02:07.436" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,400 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:02:07.436" starttime="20160130 01:02:07.431"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.441" starttime="20160130 01:02:07.440"></status>
</kw>
<msg timestamp="20160130 01:02:07.442" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:02:07.442" starttime="20160130 01:02:07.437"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.448" starttime="20160130 01:02:07.447"></status>
</kw>
<msg timestamp="20160130 01:02:07.449" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:02:07.449" starttime="20160130 01:02:07.443"></status>
</kw>
<msg timestamp="20160130 01:02:07.451" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:02:07.450" starttime="20160130 01:02:07.411"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:02:07.457" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160130 01:02:07.456" starttime="20160130 01:02:07.455"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.458" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:02:07.458" starttime="20160130 01:02:07.457"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.460" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:02:07.460" starttime="20160130 01:02:07.459"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.463" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:02:07.464" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:02:07.464" starttime="20160130 01:02:07.462"></status>
</kw>
<msg timestamp="20160130 01:02:07.465" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:07.466" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,401 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:02:07.465" starttime="20160130 01:02:07.461"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.470" starttime="20160130 01:02:07.469"></status>
</kw>
<msg timestamp="20160130 01:02:07.471" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,401 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:02:07.471" starttime="20160130 01:02:07.466"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.523" starttime="20160130 01:02:07.522"></status>
</kw>
<msg timestamp="20160130 01:02:07.524" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,401 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:02:07.523" starttime="20160130 01:02:07.517"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.529" starttime="20160130 01:02:07.527"></status>
</kw>
<msg timestamp="20160130 01:02:07.530" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:02:07.529" starttime="20160130 01:02:07.524"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.536" starttime="20160130 01:02:07.535"></status>
</kw>
<msg timestamp="20160130 01:02:07.537" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:02:07.537" starttime="20160130 01:02:07.530"></status>
</kw>
<msg timestamp="20160130 01:02:07.538" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160130 01:02:07.538" starttime="20160130 01:02:07.452"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:02:07.544" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160130 01:02:07.544" starttime="20160130 01:02:07.543"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.546" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:02:07.546" starttime="20160130 01:02:07.545"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.548" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:02:07.548" starttime="20160130 01:02:07.547"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.551" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:02:07.552" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:02:07.552" starttime="20160130 01:02:07.550"></status>
</kw>
<msg timestamp="20160130 01:02:07.553" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:07.554" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,403 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:02:07.553" starttime="20160130 01:02:07.549"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.558" starttime="20160130 01:02:07.557"></status>
</kw>
<msg timestamp="20160130 01:02:07.559" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,403 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:02:07.559" starttime="20160130 01:02:07.554"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.564" starttime="20160130 01:02:07.563"></status>
</kw>
<msg timestamp="20160130 01:02:07.565" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,403 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:02:07.565" starttime="20160130 01:02:07.560"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.570" starttime="20160130 01:02:07.569"></status>
</kw>
<msg timestamp="20160130 01:02:07.571" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:02:07.570" starttime="20160130 01:02:07.566"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.577" starttime="20160130 01:02:07.576"></status>
</kw>
<msg timestamp="20160130 01:02:07.578" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:02:07.578" starttime="20160130 01:02:07.571"></status>
</kw>
<msg timestamp="20160130 01:02:07.579" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:02:07.579" starttime="20160130 01:02:07.539"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:02:07.585" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160130 01:02:07.585" starttime="20160130 01:02:07.584"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.587" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:02:07.587" starttime="20160130 01:02:07.586"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.589" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:02:07.589" starttime="20160130 01:02:07.588"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.592" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:02:07.593" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:02:07.593" starttime="20160130 01:02:07.591"></status>
</kw>
<msg timestamp="20160130 01:02:07.594" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:07.594" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,402 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422367</msg>
<status status="PASS" endtime="20160130 01:02:07.594" starttime="20160130 01:02:07.590"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.599" starttime="20160130 01:02:07.598"></status>
</kw>
<msg timestamp="20160130 01:02:07.600" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,402 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422367</msg>
<status status="PASS" endtime="20160130 01:02:07.599" starttime="20160130 01:02:07.595"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.604" starttime="20160130 01:02:07.603"></status>
</kw>
<msg timestamp="20160130 01:02:07.605" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,402 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422367</msg>
<status status="PASS" endtime="20160130 01:02:07.605" starttime="20160130 01:02:07.600"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.610" starttime="20160130 01:02:07.609"></status>
</kw>
<msg timestamp="20160130 01:02:07.611" level="INFO">${resultCode} = 2422367</msg>
<status status="PASS" endtime="20160130 01:02:07.611" starttime="20160130 01:02:07.606"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.617" starttime="20160130 01:02:07.616"></status>
</kw>
<msg timestamp="20160130 01:02:07.618" level="INFO">${resultCode} = 2422367</msg>
<status status="PASS" endtime="20160130 01:02:07.618" starttime="20160130 01:02:07.611"></status>
</kw>
<msg timestamp="20160130 01:02:07.619" level="INFO">${id} = 2422367</msg>
<status status="PASS" endtime="20160130 01:02:07.619" starttime="20160130 01:02:07.580"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:02:07.625" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160130 01:02:07.625" starttime="20160130 01:02:07.624"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.627" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:02:07.627" starttime="20160130 01:02:07.626"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.629" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:02:07.629" starttime="20160130 01:02:07.628"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.632" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:02:07.633" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:02:07.633" starttime="20160130 01:02:07.631"></status>
</kw>
<msg timestamp="20160130 01:02:07.634" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:07.634" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,403 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:02:07.633" starttime="20160130 01:02:07.630"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.639" starttime="20160130 01:02:07.638"></status>
</kw>
<msg timestamp="20160130 01:02:07.640" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,403 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:02:07.639" starttime="20160130 01:02:07.635"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.645" starttime="20160130 01:02:07.644"></status>
</kw>
<msg timestamp="20160130 01:02:07.646" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,403 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:02:07.645" starttime="20160130 01:02:07.640"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.650" starttime="20160130 01:02:07.649"></status>
</kw>
<msg timestamp="20160130 01:02:07.651" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:02:07.651" starttime="20160130 01:02:07.646"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.658" starttime="20160130 01:02:07.657"></status>
</kw>
<msg timestamp="20160130 01:02:07.659" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:02:07.659" starttime="20160130 01:02:07.652"></status>
</kw>
<msg timestamp="20160130 01:02:07.660" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:02:07.660" starttime="20160130 01:02:07.620"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:02:07.666" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160130 01:02:07.666" starttime="20160130 01:02:07.664"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.668" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:02:07.668" starttime="20160130 01:02:07.667"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.670" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:02:07.670" starttime="20160130 01:02:07.669"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.673" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:02:07.674" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:02:07.674" starttime="20160130 01:02:07.672"></status>
</kw>
<msg timestamp="20160130 01:02:07.675" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:07.675" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,404 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:02:07.674" starttime="20160130 01:02:07.671"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.680" starttime="20160130 01:02:07.679"></status>
</kw>
<msg timestamp="20160130 01:02:07.681" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,404 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:02:07.680" starttime="20160130 01:02:07.676"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.685" starttime="20160130 01:02:07.684"></status>
</kw>
<msg timestamp="20160130 01:02:07.686" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,404 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:02:07.686" starttime="20160130 01:02:07.681"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.691" starttime="20160130 01:02:07.690"></status>
</kw>
<msg timestamp="20160130 01:02:07.692" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:02:07.692" starttime="20160130 01:02:07.687"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.699" starttime="20160130 01:02:07.698"></status>
</kw>
<msg timestamp="20160130 01:02:07.700" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:02:07.699" starttime="20160130 01:02:07.693"></status>
</kw>
<msg timestamp="20160130 01:02:07.701" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160130 01:02:07.700" starttime="20160130 01:02:07.661"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:02:07.707" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160130 01:02:07.706" starttime="20160130 01:02:07.705"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.709" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:02:07.708" starttime="20160130 01:02:07.707"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.711" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:02:07.710" starttime="20160130 01:02:07.709"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.714" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:02:07.714" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:02:07.715" starttime="20160130 01:02:07.712"></status>
</kw>
<msg timestamp="20160130 01:02:07.716" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:07.716" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,405 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:02:07.715" starttime="20160130 01:02:07.711"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.720" starttime="20160130 01:02:07.719"></status>
</kw>
<msg timestamp="20160130 01:02:07.721" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,405 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:02:07.721" starttime="20160130 01:02:07.716"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.726" starttime="20160130 01:02:07.725"></status>
</kw>
<msg timestamp="20160130 01:02:07.727" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,405 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:02:07.726" starttime="20160130 01:02:07.722"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.731" starttime="20160130 01:02:07.730"></status>
</kw>
<msg timestamp="20160130 01:02:07.732" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:02:07.732" starttime="20160130 01:02:07.727"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.739" starttime="20160130 01:02:07.738"></status>
</kw>
<msg timestamp="20160130 01:02:07.740" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:02:07.739" starttime="20160130 01:02:07.733"></status>
</kw>
<msg timestamp="20160130 01:02:07.741" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:02:07.740" starttime="20160130 01:02:07.702"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.746" starttime="20160130 01:02:07.745"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.747" starttime="20160130 01:02:07.746"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.748" starttime="20160130 01:02:07.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:02:07.754" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:02:07.755" starttime="20160130 01:02:07.753"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:07.755" starttime="20160130 01:02:07.752"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:07.756" starttime="20160130 01:02:07.749"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:07.756" starttime="20160130 01:02:07.742"></status>
</kw>
<msg timestamp="20160130 01:02:07.758" level="INFO">${rc} = OK</msg>
<msg timestamp="20160130 01:02:07.759" level="INFO">${provId} = 1</msg>
<msg timestamp="20160130 01:02:07.759" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160130 01:02:07.759" level="INFO">${id} = 2422367</msg>
<msg timestamp="20160130 01:02:07.760" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160130 01:02:07.760" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160130 01:02:07.760" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:02:07.758" starttime="20160130 01:02:07.177"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.772" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:02:07.772" starttime="20160130 01:02:07.770"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:07.773" starttime="20160130 01:02:07.769"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.776" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:02:07.776" starttime="20160130 01:02:07.775"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:07.777" starttime="20160130 01:02:07.774"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.780" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:02:07.780" starttime="20160130 01:02:07.778"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:07.780" starttime="20160130 01:02:07.777"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:07.781" starttime="20160130 01:02:07.766"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.783" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:02:07.783" starttime="20160130 01:02:07.782"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.785" starttime="20160130 01:02:07.784"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.787" starttime="20160130 01:02:07.786"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.788" starttime="20160130 01:02:07.787"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.790" starttime="20160130 01:02:07.789"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.791" starttime="20160130 01:02:07.790"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.793" starttime="20160130 01:02:07.792"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:02:07.796" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2422367']</msg>
<msg timestamp="20160130 01:02:07.924" level="INFO">01:02:07,919 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:02:07,920 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422368
01:02:07,921 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
01:02:07,922 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:02:07,923 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:02:07.925" starttime="20160130 01:02:07.795"></status>
</kw>
<msg timestamp="20160130 01:02:07.926" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:07.926" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:02:07.925" starttime="20160130 01:02:07.794"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:02:07.932" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:02:07.932" starttime="20160130 01:02:07.931"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.934" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:02:07.934" starttime="20160130 01:02:07.933"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.936" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:02:07.936" starttime="20160130 01:02:07.935"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.939" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:02:07.940" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:02:07.940" starttime="20160130 01:02:07.938"></status>
</kw>
<msg timestamp="20160130 01:02:07.941" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:07.942" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,919 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:02:07.941" starttime="20160130 01:02:07.937"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.946" starttime="20160130 01:02:07.945"></status>
</kw>
<msg timestamp="20160130 01:02:07.947" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,919 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:02:07.947" starttime="20160130 01:02:07.942"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.952" starttime="20160130 01:02:07.951"></status>
</kw>
<msg timestamp="20160130 01:02:07.953" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,919 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:02:07.952" starttime="20160130 01:02:07.948"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.957" starttime="20160130 01:02:07.956"></status>
</kw>
<msg timestamp="20160130 01:02:07.958" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:02:07.958" starttime="20160130 01:02:07.953"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.965" starttime="20160130 01:02:07.964"></status>
</kw>
<msg timestamp="20160130 01:02:07.966" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:02:07.965" starttime="20160130 01:02:07.959"></status>
</kw>
<msg timestamp="20160130 01:02:07.967" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:02:07.966" starttime="20160130 01:02:07.927"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:02:07.973" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160130 01:02:07.973" starttime="20160130 01:02:07.971"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.975" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:02:07.975" starttime="20160130 01:02:07.974"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.977" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:02:07.977" starttime="20160130 01:02:07.976"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:02:07.980" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:02:07.981" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:02:07.981" starttime="20160130 01:02:07.979"></status>
</kw>
<msg timestamp="20160130 01:02:07.982" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:07.982" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,920 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422368</msg>
<status status="PASS" endtime="20160130 01:02:07.982" starttime="20160130 01:02:07.978"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.987" starttime="20160130 01:02:07.986"></status>
</kw>
<msg timestamp="20160130 01:02:07.988" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,920 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422368</msg>
<status status="PASS" endtime="20160130 01:02:07.988" starttime="20160130 01:02:07.983"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.992" starttime="20160130 01:02:07.991"></status>
</kw>
<msg timestamp="20160130 01:02:07.993" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,920 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422368</msg>
<status status="PASS" endtime="20160130 01:02:07.993" starttime="20160130 01:02:07.989"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:07.998" starttime="20160130 01:02:07.997"></status>
</kw>
<msg timestamp="20160130 01:02:07.999" level="INFO">${resultCode} = 2422368</msg>
<status status="PASS" endtime="20160130 01:02:07.999" starttime="20160130 01:02:07.994"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.006" starttime="20160130 01:02:08.005"></status>
</kw>
<msg timestamp="20160130 01:02:08.007" level="INFO">${resultCode} = 2422368</msg>
<status status="PASS" endtime="20160130 01:02:08.007" starttime="20160130 01:02:08.000"></status>
</kw>
<msg timestamp="20160130 01:02:08.009" level="INFO">${accountId} = 2422368</msg>
<status status="PASS" endtime="20160130 01:02:08.008" starttime="20160130 01:02:07.968"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:02:08.015" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160130 01:02:08.015" starttime="20160130 01:02:08.014"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:08.018" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:02:08.017" starttime="20160130 01:02:08.016"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:08.019" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:02:08.019" starttime="20160130 01:02:08.018"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:02:08.022" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:02:08.023" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:02:08.024" starttime="20160130 01:02:08.021"></status>
</kw>
<msg timestamp="20160130 01:02:08.024" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:08.025" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,921 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160130 01:02:08.024" starttime="20160130 01:02:08.020"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.029" starttime="20160130 01:02:08.028"></status>
</kw>
<msg timestamp="20160130 01:02:08.030" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,921 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160130 01:02:08.030" starttime="20160130 01:02:08.025"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.035" starttime="20160130 01:02:08.034"></status>
</kw>
<msg timestamp="20160130 01:02:08.036" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,921 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160130 01:02:08.035" starttime="20160130 01:02:08.031"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.041" starttime="20160130 01:02:08.040"></status>
</kw>
<msg timestamp="20160130 01:02:08.042" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160130 01:02:08.041" starttime="20160130 01:02:08.036"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.048" starttime="20160130 01:02:08.047"></status>
</kw>
<msg timestamp="20160130 01:02:08.049" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160130 01:02:08.049" starttime="20160130 01:02:08.042"></status>
</kw>
<msg timestamp="20160130 01:02:08.050" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160130 01:02:08.050" starttime="20160130 01:02:08.010"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:02:08.057" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160130 01:02:08.057" starttime="20160130 01:02:08.056"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:08.059" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:02:08.059" starttime="20160130 01:02:08.058"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:08.061" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:02:08.061" starttime="20160130 01:02:08.060"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:02:08.064" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:02:08.065" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:02:08.065" starttime="20160130 01:02:08.063"></status>
</kw>
<msg timestamp="20160130 01:02:08.066" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:08.066" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,922 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:02:08.066" starttime="20160130 01:02:08.062"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.071" starttime="20160130 01:02:08.070"></status>
</kw>
<msg timestamp="20160130 01:02:08.072" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,922 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:02:08.071" starttime="20160130 01:02:08.067"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.076" starttime="20160130 01:02:08.075"></status>
</kw>
<msg timestamp="20160130 01:02:08.077" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,922 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:02:08.077" starttime="20160130 01:02:08.072"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.082" starttime="20160130 01:02:08.081"></status>
</kw>
<msg timestamp="20160130 01:02:08.083" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160130 01:02:08.082" starttime="20160130 01:02:08.078"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.089" starttime="20160130 01:02:08.088"></status>
</kw>
<msg timestamp="20160130 01:02:08.090" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160130 01:02:08.090" starttime="20160130 01:02:08.083"></status>
</kw>
<msg timestamp="20160130 01:02:08.091" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160130 01:02:08.091" starttime="20160130 01:02:08.052"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:02:08.097" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160130 01:02:08.097" starttime="20160130 01:02:08.096"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:08.099" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:02:08.099" starttime="20160130 01:02:08.098"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:08.101" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:02:08.101" starttime="20160130 01:02:08.100"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:02:08.104" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:02:08.104" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:02:08.105" starttime="20160130 01:02:08.103"></status>
</kw>
<msg timestamp="20160130 01:02:08.106" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:08.106" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,923 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:02:08.105" starttime="20160130 01:02:08.102"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.110" starttime="20160130 01:02:08.109"></status>
</kw>
<msg timestamp="20160130 01:02:08.111" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,923 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:02:08.111" starttime="20160130 01:02:08.107"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.116" starttime="20160130 01:02:08.115"></status>
</kw>
<msg timestamp="20160130 01:02:08.117" level="INFO">${return_log_entry} = 2016-01-30 01:02:07,923 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:02:08.116" starttime="20160130 01:02:08.112"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.121" starttime="20160130 01:02:08.120"></status>
</kw>
<msg timestamp="20160130 01:02:08.122" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:02:08.122" starttime="20160130 01:02:08.117"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.128" starttime="20160130 01:02:08.127"></status>
</kw>
<msg timestamp="20160130 01:02:08.129" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:02:08.129" starttime="20160130 01:02:08.123"></status>
</kw>
<msg timestamp="20160130 01:02:08.130" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160130 01:02:08.130" starttime="20160130 01:02:08.092"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.135" starttime="20160130 01:02:08.135"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.137" starttime="20160130 01:02:08.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.138" starttime="20160130 01:02:08.137"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:02:08.145" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:02:08.145" starttime="20160130 01:02:08.143"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:08.145" starttime="20160130 01:02:08.142"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:08.146" starttime="20160130 01:02:08.139"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:08.147" starttime="20160130 01:02:08.131"></status>
</kw>
<msg timestamp="20160130 01:02:08.149" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160130 01:02:08.149" level="INFO">${accId} = 2422368</msg>
<msg timestamp="20160130 01:02:08.149" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160130 01:02:08.150" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160130 01:02:08.150" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160130 01:02:08.148" starttime="20160130 01:02:07.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.151" starttime="20160130 01:02:08.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.153" starttime="20160130 01:02:08.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:02:08.154" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160130 01:02:08.155" starttime="20160130 01:02:08.153"></status>
</kw>
<doc>Test will make a MOC call to the busy B party.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:02:08.156" starttime="20160130 01:01:52.944"></status>
</test>
<doc>Testing the prepaid MOC call to the busy called party (called party in another call)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:02:08.160" starttime="20160130 01:01:49.224"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:02:08.168" starttime="20160130 01:01:49.207"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-LongDuration136s" id="s1-s1-s1-s2-s1-s3" name="MOC PREPAID ONNET-LongDuration136s">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-LongDuration136s/MOC_PREPAID_ONNET-LongDuration136s-robot-suite.txt" id="s1-s1-s1-s2-s1-s3-s1" name="MOC PREPAID ONNET-LongDuration136s-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160130 01:02:08.335" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:02:08.341" level="INFO">${date} = Sat Jan 30 01:02:08 CET 2016</msg>
<status status="PASS" endtime="20160130 01:02:08.339" starttime="20160130 01:02:08.329"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:02:08.345" level="INFO">Date and time: Sat Jan 30 01:02:08 CET 2016</msg>
<status status="PASS" endtime="20160130 01:02:08.346" starttime="20160130 01:02:08.342"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:02:08.350" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160130 01:02:08.351" starttime="20160130 01:02:08.347"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.405" starttime="20160130 01:02:08.403"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:08.455" starttime="20160130 01:02:08.413"></status>
</kw>
<msg timestamp="20160130 01:02:08.456" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160130 01:02:08.456" starttime="20160130 01:02:08.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:02:08.462" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:02:08.924" level="INFO">Read output: Last login: Sat Jan 30 00:01:49 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:02:08.924" starttime="20160130 01:02:08.461"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:08.925" starttime="20160130 01:02:08.457"></status>
</kw>
<msg timestamp="20160130 01:02:08.926" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160130 01:02:08.926" starttime="20160130 01:02:08.394"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:02:08.930" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:02:08.930" starttime="20160130 01:02:08.927"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:02:08.932" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160130 01:02:09.493" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:02:09.496" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:02:09.494" starttime="20160130 01:02:08.931"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:09.499" starttime="20160130 01:02:09.498"></status>
</kw>
<msg timestamp="20160130 01:02:09.500" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:02:09.501" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:02:09.500" starttime="20160130 01:02:09.496"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:09.506" starttime="20160130 01:02:09.505"></status>
</kw>
<msg timestamp="20160130 01:02:09.507" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:02:09.506" starttime="20160130 01:02:09.501"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160130 01:02:09.509" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:02:09.508" starttime="20160130 01:02:09.507"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:02:09.511" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:02:09.510" starttime="20160130 01:02:09.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:09.512" starttime="20160130 01:02:09.511"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:09.518" starttime="20160130 01:02:09.517"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:02:09.520" starttime="20160130 01:02:09.519"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:09.521" starttime="20160130 01:02:09.513"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:09.526" starttime="20160130 01:02:09.525"></status>
</kw>
<msg timestamp="20160130 01:02:09.527" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:02:09.526" starttime="20160130 01:02:09.522"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:09.528" starttime="20160130 01:02:09.527"></status>
</kw>
<msg timestamp="20160130 01:02:09.530" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160130 01:02:09.530" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:02:09.529" starttime="20160130 01:02:08.368"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:09.555" starttime="20160130 01:02:09.554"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:09.600" starttime="20160130 01:02:09.558"></status>
</kw>
<msg timestamp="20160130 01:02:09.601" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160130 01:02:09.600" starttime="20160130 01:02:09.555"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:02:09.606" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:02:10.080" level="INFO">Read output: Last login: Sat Jan 30 00:01:50 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:02:10.081" starttime="20160130 01:02:09.605"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:10.082" starttime="20160130 01:02:09.601"></status>
</kw>
<msg timestamp="20160130 01:02:10.084" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160130 01:02:10.083" starttime="20160130 01:02:09.550"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:02:10.088" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:02:10.087" starttime="20160130 01:02:10.084"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:02:10.089" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160130 01:02:10.464" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:02:10.465" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:02:10.464" starttime="20160130 01:02:10.088"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:10.468" starttime="20160130 01:02:10.467"></status>
</kw>
<msg timestamp="20160130 01:02:10.469" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:02:10.469" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:02:10.469" starttime="20160130 01:02:10.466"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:10.474" starttime="20160130 01:02:10.473"></status>
</kw>
<msg timestamp="20160130 01:02:10.475" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:02:10.474" starttime="20160130 01:02:10.470"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160130 01:02:10.477" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:02:10.476" starttime="20160130 01:02:10.475"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:02:10.479" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:02:10.478" starttime="20160130 01:02:10.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:10.480" starttime="20160130 01:02:10.479"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:10.485" starttime="20160130 01:02:10.484"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:02:10.487" starttime="20160130 01:02:10.486"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:10.489" starttime="20160130 01:02:10.481"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:10.494" starttime="20160130 01:02:10.493"></status>
</kw>
<msg timestamp="20160130 01:02:10.495" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:02:10.494" starttime="20160130 01:02:10.490"></status>
</kw>
<msg timestamp="20160130 01:02:10.496" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160130 01:02:10.497" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:02:10.496" starttime="20160130 01:02:09.538"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:10.522" starttime="20160130 01:02:10.521"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:10.578" starttime="20160130 01:02:10.526"></status>
</kw>
<msg timestamp="20160130 01:02:10.580" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160130 01:02:10.579" starttime="20160130 01:02:10.523"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:02:10.592" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:02:11.082" level="INFO">Read output: Last login: Sat Jan 30 00:01:51 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:02:11.083" starttime="20160130 01:02:10.589"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:11.084" starttime="20160130 01:02:10.582"></status>
</kw>
<msg timestamp="20160130 01:02:11.086" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160130 01:02:11.085" starttime="20160130 01:02:10.517"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:02:11.090" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:02:11.090" starttime="20160130 01:02:11.087"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:02:11.092" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160130 01:02:11.277" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:02:11.279" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:02:11.278" starttime="20160130 01:02:11.091"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:11.287" starttime="20160130 01:02:11.283"></status>
</kw>
<msg timestamp="20160130 01:02:11.288" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:02:11.289" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:02:11.288" starttime="20160130 01:02:11.281"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:11.299" starttime="20160130 01:02:11.297"></status>
</kw>
<msg timestamp="20160130 01:02:11.301" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:02:11.300" starttime="20160130 01:02:11.290"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:02:11.305" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:02:11.304" starttime="20160130 01:02:11.302"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:02:11.309" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:02:11.309" starttime="20160130 01:02:11.306"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:11.312" starttime="20160130 01:02:11.310"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:11.323" starttime="20160130 01:02:11.321"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:02:11.329" starttime="20160130 01:02:11.325"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:11.330" starttime="20160130 01:02:11.314"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:11.340" starttime="20160130 01:02:11.338"></status>
</kw>
<msg timestamp="20160130 01:02:11.342" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:02:11.341" starttime="20160130 01:02:11.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:11.345" starttime="20160130 01:02:11.343"></status>
</kw>
<msg timestamp="20160130 01:02:11.349" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160130 01:02:11.349" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:02:11.347" starttime="20160130 01:02:10.505"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:11.398" starttime="20160130 01:02:11.397"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:11.440" starttime="20160130 01:02:11.401"></status>
</kw>
<msg timestamp="20160130 01:02:11.441" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160130 01:02:11.441" starttime="20160130 01:02:11.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:02:11.448" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:02:11.906" level="INFO">Read output: Last login: Sat Jan 30 00:01:52 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:02:11.906" starttime="20160130 01:02:11.446"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:11.907" starttime="20160130 01:02:11.442"></status>
</kw>
<msg timestamp="20160130 01:02:11.908" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160130 01:02:11.908" starttime="20160130 01:02:11.392"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:02:11.913" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:02:11.912" starttime="20160130 01:02:11.909"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:02:11.914" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160130 01:02:11.991" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:02:11.992" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:02:11.992" starttime="20160130 01:02:11.913"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:11.996" starttime="20160130 01:02:11.994"></status>
</kw>
<msg timestamp="20160130 01:02:11.997" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:02:11.997" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:02:11.996" starttime="20160130 01:02:11.993"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.002" starttime="20160130 01:02:12.001"></status>
</kw>
<msg timestamp="20160130 01:02:12.003" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:02:12.002" starttime="20160130 01:02:11.998"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:02:12.005" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:02:12.005" starttime="20160130 01:02:12.004"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:02:12.007" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:02:12.007" starttime="20160130 01:02:12.006"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.009" starttime="20160130 01:02:12.008"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.014" starttime="20160130 01:02:12.013"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.018" starttime="20160130 01:02:12.015"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:12.019" starttime="20160130 01:02:12.010"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.023" starttime="20160130 01:02:12.022"></status>
</kw>
<msg timestamp="20160130 01:02:12.024" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:02:12.023" starttime="20160130 01:02:12.019"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.025" starttime="20160130 01:02:12.024"></status>
</kw>
<msg timestamp="20160130 01:02:12.027" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160130 01:02:12.027" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:02:12.026" starttime="20160130 01:02:11.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:02:12.029" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:02:12.029" starttime="20160130 01:02:12.028"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:02:12.031" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:02:12.032" starttime="20160130 01:02:12.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:02:12.033" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:02:12.034" starttime="20160130 01:02:12.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:02:12.036" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:02:12.036" starttime="20160130 01:02:12.034"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160130 01:02:12.038" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:02:12.038" starttime="20160130 01:02:12.037"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160130 01:02:12.040" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:02:12.040" starttime="20160130 01:02:12.039"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160130 01:02:12.042" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:02:12.042" starttime="20160130 01:02:12.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160130 01:02:12.044" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:02:12.044" starttime="20160130 01:02:12.043"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.050" starttime="20160130 01:02:12.048"></status>
</kw>
<msg timestamp="20160130 01:02:12.051" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:02:12.051" starttime="20160130 01:02:12.045"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160130 01:02:12.053" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:02:12.053" starttime="20160130 01:02:12.052"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:12.054" starttime="20160130 01:02:08.327"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s3-s1-t1" name="Run MOC 136s Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.060" starttime="20160130 01:02:12.059"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>100000000</arg>
</arguments>
<msg timestamp="20160130 01:02:12.062" level="INFO">${INITIAL_BALANCE} = 100000000</msg>
<status status="PASS" endtime="20160130 01:02:12.061" starttime="20160130 01:02:12.061"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160130 01:02:12.069" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160130 01:02:12.069" starttime="20160130 01:02:12.068"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160130 01:02:12.071" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160130 01:02:12.071" starttime="20160130 01:02:12.070"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160130 01:02:12.073" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160130 01:02:12.073" starttime="20160130 01:02:12.072"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160130 01:02:12.075" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160130 01:02:12.075" starttime="20160130 01:02:12.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:02:12.077" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160130 01:02:12.077" starttime="20160130 01:02:12.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:02:12.079" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160130 01:02:12.079" starttime="20160130 01:02:12.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160130 01:02:12.080" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:02:12.081" starttime="20160130 01:02:12.079"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160130 01:02:12.082" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160130 01:02:12.083" starttime="20160130 01:02:12.081"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160130 01:02:12.084" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:02:12.085" starttime="20160130 01:02:12.083"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160130 01:02:12.086" level="INFO">msg=balance=100000000</msg>
<status status="PASS" endtime="20160130 01:02:12.086" starttime="20160130 01:02:12.085"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:02:12.094" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:02:12.095" starttime="20160130 01:02:12.092"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:12.095" starttime="20160130 01:02:12.091"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:02:12.099" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:02:12.099" starttime="20160130 01:02:12.097"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:12.100" starttime="20160130 01:02:12.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:02:12.102" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:02:12.103" starttime="20160130 01:02:12.101"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:12.103" starttime="20160130 01:02:12.100"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:12.104" starttime="20160130 01:02:12.088"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:02:12.106" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:02:12.106" starttime="20160130 01:02:12.104"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.108" starttime="20160130 01:02:12.107"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.110" starttime="20160130 01:02:12.109"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.112" starttime="20160130 01:02:12.110"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.113" starttime="20160130 01:02:12.112"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.115" starttime="20160130 01:02:12.114"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.116" starttime="20160130 01:02:12.115"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.118" starttime="20160130 01:02:12.117"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.120" starttime="20160130 01:02:12.119"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.121" starttime="20160130 01:02:12.120"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.123" starttime="20160130 01:02:12.122"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.125" starttime="20160130 01:02:12.124"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:12.126" starttime="20160130 01:02:12.125"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:02:12.129" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=100000000']</msg>
<msg timestamp="20160130 01:02:12.997" level="INFO">01:02:12,995 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:02:12.997" starttime="20160130 01:02:12.128"></status>
</kw>
<msg timestamp="20160130 01:02:12.998" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:12.998" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:02:12.998" starttime="20160130 01:02:12.127"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:02:13.004" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:02:13.004" starttime="20160130 01:02:13.003"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:13.006" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:02:13.006" starttime="20160130 01:02:13.005"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:02:13.008" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:02:13.008" starttime="20160130 01:02:13.007"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:02:13.011" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:02:13.012" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160130 01:02:13.012" starttime="20160130 01:02:13.010"></status>
</kw>
<msg timestamp="20160130 01:02:13.013" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:02:13.013" level="INFO">${return_log_entry} = 2016-01-30 01:02:12,995 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:02:13.013" starttime="20160130 01:02:13.009"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:13.018" starttime="20160130 01:02:13.017"></status>
</kw>
<msg timestamp="20160130 01:02:13.019" level="INFO">${return_log_entry} = 2016-01-30 01:02:12,995 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:02:13.019" starttime="20160130 01:02:13.014"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:13.024" starttime="20160130 01:02:13.023"></status>
</kw>
<msg timestamp="20160130 01:02:13.025" level="INFO">${return_log_entry} = 2016-01-30 01:02:12,995 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:02:13.024" starttime="20160130 01:02:13.020"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:13.030" starttime="20160130 01:02:13.028"></status>
</kw>
<msg timestamp="20160130 01:02:13.030" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:02:13.030" starttime="20160130 01:02:13.025"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:13.037" starttime="20160130 01:02:13.036"></status>
</kw>
<msg timestamp="20160130 01:02:13.038" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:02:13.037" starttime="20160130 01:02:13.031"></status>
</kw>
<msg timestamp="20160130 01:02:13.039" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:02:13.038" starttime="20160130 01:02:12.999"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:13.044" starttime="20160130 01:02:13.043"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:13.045" starttime="20160130 01:02:13.045"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:13.047" starttime="20160130 01:02:13.046"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:02:13.053" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:02:13.053" starttime="20160130 01:02:13.051"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:13.054" starttime="20160130 01:02:13.050"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:13.054" starttime="20160130 01:02:13.047"></status>
</kw>
<status status="PASS" endtime="20160130 01:02:13.055" starttime="20160130 01:02:13.040"></status>
</kw>
<msg timestamp="20160130 01:02:13.056" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160130 01:02:13.055" starttime="20160130 01:02:12.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160130 01:02:13.058" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:02:13.058" starttime="20160130 01:02:13.057"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:02:13.059" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160130 01:02:13.060" starttime="20160130 01:02:13.059"></status>
</kw>
<kw type="kw" name="${calling_int} = BuiltIn.Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<msg timestamp="20160130 01:02:13.061" level="INFO">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160130 01:02:13.062" level="INFO">${calling_int} = 642041010000</msg>
<status status="PASS" endtime="20160130 01:02:13.062" starttime="20160130 01:02:13.061"></status>
</kw>
<kw type="kw" name="${called_party} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${calling_int}+1</arg>
</arguments>
<msg timestamp="20160130 01:02:13.066" level="INFO">${called_party} = 642041010001</msg>
<status status="PASS" endtime="20160130 01:02:13.065" starttime="20160130 01:02:13.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:13.067" starttime="20160130 01:02:13.066"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:02:13.068" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20160130 01:02:13.069" starttime="20160130 01:02:13.068"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 136s">
<doc>Runs a standard MOC 136s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${called_party}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc136s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160130 01:02:13.083" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv</msg>
<status status="PASS" endtime="20160130 01:02:13.083" starttime="20160130 01:02:13.082"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160130 01:02:13.086" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv</msg>
<status status="PASS" endtime="20160130 01:02:13.085" starttime="20160130 01:02:13.084"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160130 01:02:13.088" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini</msg>
<status status="PASS" endtime="20160130 01:02:13.087" starttime="20160130 01:02:13.086"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160130 01:02:13.090" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc136s.cgs</msg>
<status status="PASS" endtime="20160130 01:02:13.089" starttime="20160130 01:02:13.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:13.091" starttime="20160130 01:02:13.090"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:02:13.094" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:02:13.094" starttime="20160130 01:02:13.092"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:13.096" starttime="20160130 01:02:13.095"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160130 01:02:13.098" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:02:13.098" starttime="20160130 01:02:13.096"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:02:13.101" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:02:13.101" starttime="20160130 01:02:13.099"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:13.103" starttime="20160130 01:02:13.102"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160130 01:02:13.105" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:02:13.105" starttime="20160130 01:02:13.103"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160130 01:02:13.108" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:02:13.108" starttime="20160130 01:02:13.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:02:13.110" starttime="20160130 01:02:13.109"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160130 01:02:13.118" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc136s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:04:33.322" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:04:33.313" starttime="20160130 01:02:13.110"></status>
</kw>
<msg timestamp="20160130 01:04:33.331" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:04:33.330" starttime="20160130 01:02:13.076"></status>
</kw>
<msg timestamp="20160130 01:04:33.335" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:04:33.333" starttime="20160130 01:02:13.070"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:33.339" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160130 01:04:33.340" starttime="20160130 01:04:33.336"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.345" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:33.346" starttime="20160130 01:04:33.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.349" starttime="20160130 01:04:33.347"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.378" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:33.379" starttime="20160130 01:04:33.374"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:33.380" starttime="20160130 01:04:33.371"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.386" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:33.387" starttime="20160130 01:04:33.383"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:33.388" starttime="20160130 01:04:33.381"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.396" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:33.397" starttime="20160130 01:04:33.393"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:33.398" starttime="20160130 01:04:33.390"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:33.399" starttime="20160130 01:04:33.365"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.404" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:04:33.405" starttime="20160130 01:04:33.401"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.410" starttime="20160130 01:04:33.406"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.414" starttime="20160130 01:04:33.411"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.418" starttime="20160130 01:04:33.415"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.421" starttime="20160130 01:04:33.419"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.425" starttime="20160130 01:04:33.422"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.429" starttime="20160130 01:04:33.426"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:04:33.434" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=100000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160130 01:04:33.705" level="INFO">01:04:33,684 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:04:33,687 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:04:33,689 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422370
01:04:33,692 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
01:04:33,694 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:04:33,697 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:04:33,699 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:04:33,701 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160130 01:04:33.706" starttime="20160130 01:04:33.432"></status>
</kw>
<msg timestamp="20160130 01:04:33.708" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:33.709" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:04:33.707" starttime="20160130 01:04:33.430"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:33.722" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:04:33.722" starttime="20160130 01:04:33.719"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.727" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:33.726" starttime="20160130 01:04:33.724"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.731" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:33.730" starttime="20160130 01:04:33.728"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.737" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:33.739" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:33.740" starttime="20160130 01:04:33.734"></status>
</kw>
<msg timestamp="20160130 01:04:33.741" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:33.742" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,684 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:33.741" starttime="20160130 01:04:33.732"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.754" starttime="20160130 01:04:33.751"></status>
</kw>
<msg timestamp="20160130 01:04:33.756" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,684 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:33.755" starttime="20160130 01:04:33.744"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.765" starttime="20160130 01:04:33.763"></status>
</kw>
<msg timestamp="20160130 01:04:33.767" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,684 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:33.767" starttime="20160130 01:04:33.757"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.772" starttime="20160130 01:04:33.771"></status>
</kw>
<msg timestamp="20160130 01:04:33.773" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:33.772" starttime="20160130 01:04:33.768"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.779" starttime="20160130 01:04:33.778"></status>
</kw>
<msg timestamp="20160130 01:04:33.780" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:33.780" starttime="20160130 01:04:33.773"></status>
</kw>
<msg timestamp="20160130 01:04:33.781" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:33.781" starttime="20160130 01:04:33.712"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:33.787" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160130 01:04:33.787" starttime="20160130 01:04:33.785"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.789" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:33.788" starttime="20160130 01:04:33.787"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.791" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:33.790" starttime="20160130 01:04:33.789"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.794" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:33.794" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:33.795" starttime="20160130 01:04:33.792"></status>
</kw>
<msg timestamp="20160130 01:04:33.796" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:33.796" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,687 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:04:33.795" starttime="20160130 01:04:33.791"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.800" starttime="20160130 01:04:33.799"></status>
</kw>
<msg timestamp="20160130 01:04:33.801" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,687 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:04:33.801" starttime="20160130 01:04:33.797"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.806" starttime="20160130 01:04:33.805"></status>
</kw>
<msg timestamp="20160130 01:04:33.807" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,687 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:04:33.806" starttime="20160130 01:04:33.802"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.811" starttime="20160130 01:04:33.810"></status>
</kw>
<msg timestamp="20160130 01:04:33.812" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:04:33.812" starttime="20160130 01:04:33.807"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.819" starttime="20160130 01:04:33.818"></status>
</kw>
<msg timestamp="20160130 01:04:33.820" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:04:33.819" starttime="20160130 01:04:33.813"></status>
</kw>
<msg timestamp="20160130 01:04:33.821" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160130 01:04:33.820" starttime="20160130 01:04:33.782"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:33.826" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160130 01:04:33.826" starttime="20160130 01:04:33.825"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.828" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:33.828" starttime="20160130 01:04:33.827"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.830" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:33.830" starttime="20160130 01:04:33.829"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.833" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:33.834" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:33.834" starttime="20160130 01:04:33.832"></status>
</kw>
<msg timestamp="20160130 01:04:33.835" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:33.835" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,692 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:04:33.835" starttime="20160130 01:04:33.831"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.840" starttime="20160130 01:04:33.839"></status>
</kw>
<msg timestamp="20160130 01:04:33.841" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,692 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:04:33.840" starttime="20160130 01:04:33.836"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.845" starttime="20160130 01:04:33.844"></status>
</kw>
<msg timestamp="20160130 01:04:33.846" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,692 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:04:33.846" starttime="20160130 01:04:33.841"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.851" starttime="20160130 01:04:33.849"></status>
</kw>
<msg timestamp="20160130 01:04:33.852" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:04:33.851" starttime="20160130 01:04:33.847"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.858" starttime="20160130 01:04:33.857"></status>
</kw>
<msg timestamp="20160130 01:04:33.859" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:04:33.858" starttime="20160130 01:04:33.852"></status>
</kw>
<msg timestamp="20160130 01:04:33.860" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:04:33.859" starttime="20160130 01:04:33.822"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:33.866" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160130 01:04:33.866" starttime="20160130 01:04:33.864"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.868" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:33.868" starttime="20160130 01:04:33.867"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.870" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:33.870" starttime="20160130 01:04:33.869"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.873" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:33.874" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:33.874" starttime="20160130 01:04:33.872"></status>
</kw>
<msg timestamp="20160130 01:04:33.875" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:33.875" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,689 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422370</msg>
<status status="PASS" endtime="20160130 01:04:33.875" starttime="20160130 01:04:33.871"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.880" starttime="20160130 01:04:33.879"></status>
</kw>
<msg timestamp="20160130 01:04:33.881" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,689 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422370</msg>
<status status="PASS" endtime="20160130 01:04:33.880" starttime="20160130 01:04:33.876"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.885" starttime="20160130 01:04:33.884"></status>
</kw>
<msg timestamp="20160130 01:04:33.886" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,689 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422370</msg>
<status status="PASS" endtime="20160130 01:04:33.885" starttime="20160130 01:04:33.881"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.891" starttime="20160130 01:04:33.889"></status>
</kw>
<msg timestamp="20160130 01:04:33.892" level="INFO">${resultCode} = 2422370</msg>
<status status="PASS" endtime="20160130 01:04:33.891" starttime="20160130 01:04:33.886"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.898" starttime="20160130 01:04:33.897"></status>
</kw>
<msg timestamp="20160130 01:04:33.899" level="INFO">${resultCode} = 2422370</msg>
<status status="PASS" endtime="20160130 01:04:33.899" starttime="20160130 01:04:33.892"></status>
</kw>
<msg timestamp="20160130 01:04:33.900" level="INFO">${id} = 2422370</msg>
<status status="PASS" endtime="20160130 01:04:33.900" starttime="20160130 01:04:33.861"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:33.906" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160130 01:04:33.906" starttime="20160130 01:04:33.905"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.908" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:33.908" starttime="20160130 01:04:33.907"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.910" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:33.910" starttime="20160130 01:04:33.909"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.913" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:33.913" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:33.914" starttime="20160130 01:04:33.912"></status>
</kw>
<msg timestamp="20160130 01:04:33.915" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:33.915" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,694 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:04:33.914" starttime="20160130 01:04:33.911"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.920" starttime="20160130 01:04:33.918"></status>
</kw>
<msg timestamp="20160130 01:04:33.920" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,694 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:04:33.920" starttime="20160130 01:04:33.916"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.925" starttime="20160130 01:04:33.924"></status>
</kw>
<msg timestamp="20160130 01:04:33.926" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,694 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:04:33.925" starttime="20160130 01:04:33.921"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.931" starttime="20160130 01:04:33.930"></status>
</kw>
<msg timestamp="20160130 01:04:33.932" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:04:33.931" starttime="20160130 01:04:33.926"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.938" starttime="20160130 01:04:33.937"></status>
</kw>
<msg timestamp="20160130 01:04:33.939" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:04:33.939" starttime="20160130 01:04:33.932"></status>
</kw>
<msg timestamp="20160130 01:04:33.940" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:04:33.940" starttime="20160130 01:04:33.901"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:33.946" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160130 01:04:33.946" starttime="20160130 01:04:33.944"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.949" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:33.949" starttime="20160130 01:04:33.947"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.951" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:33.951" starttime="20160130 01:04:33.950"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.955" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:33.956" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:33.956" starttime="20160130 01:04:33.953"></status>
</kw>
<msg timestamp="20160130 01:04:33.957" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:33.958" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,697 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:04:33.957" starttime="20160130 01:04:33.952"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.963" starttime="20160130 01:04:33.962"></status>
</kw>
<msg timestamp="20160130 01:04:33.964" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,697 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:04:33.964" starttime="20160130 01:04:33.958"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.968" starttime="20160130 01:04:33.967"></status>
</kw>
<msg timestamp="20160130 01:04:33.969" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,697 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:04:33.969" starttime="20160130 01:04:33.964"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.974" starttime="20160130 01:04:33.973"></status>
</kw>
<msg timestamp="20160130 01:04:33.975" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:04:33.974" starttime="20160130 01:04:33.970"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:33.981" starttime="20160130 01:04:33.980"></status>
</kw>
<msg timestamp="20160130 01:04:33.982" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:04:33.981" starttime="20160130 01:04:33.975"></status>
</kw>
<msg timestamp="20160130 01:04:33.983" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160130 01:04:33.982" starttime="20160130 01:04:33.941"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:33.989" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160130 01:04:33.989" starttime="20160130 01:04:33.988"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.992" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:33.991" starttime="20160130 01:04:33.990"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.994" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:33.993" starttime="20160130 01:04:33.992"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:33.997" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:33.997" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:33.998" starttime="20160130 01:04:33.995"></status>
</kw>
<msg timestamp="20160130 01:04:33.999" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:33.999" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,699 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:33.998" starttime="20160130 01:04:33.994"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.004" starttime="20160130 01:04:34.003"></status>
</kw>
<msg timestamp="20160130 01:04:34.005" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,699 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:34.004" starttime="20160130 01:04:34.000"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.010" starttime="20160130 01:04:34.009"></status>
</kw>
<msg timestamp="20160130 01:04:34.011" level="INFO">${return_log_entry} = 2016-01-30 01:04:33,699 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:34.010" starttime="20160130 01:04:34.005"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.015" starttime="20160130 01:04:34.014"></status>
</kw>
<msg timestamp="20160130 01:04:34.016" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:34.016" starttime="20160130 01:04:34.011"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.023" starttime="20160130 01:04:34.022"></status>
</kw>
<msg timestamp="20160130 01:04:34.024" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:34.023" starttime="20160130 01:04:34.017"></status>
</kw>
<msg timestamp="20160130 01:04:34.025" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:34.025" starttime="20160130 01:04:33.984"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.031" starttime="20160130 01:04:34.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.032" starttime="20160130 01:04:34.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.033" starttime="20160130 01:04:34.033"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:04:34.039" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:04:34.040" starttime="20160130 01:04:34.038"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:34.040" starttime="20160130 01:04:34.037"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:34.041" starttime="20160130 01:04:34.034"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:34.041" starttime="20160130 01:04:34.026"></status>
</kw>
<msg timestamp="20160130 01:04:34.043" level="INFO">${rc} = OK</msg>
<msg timestamp="20160130 01:04:34.044" level="INFO">${provId} = 1</msg>
<msg timestamp="20160130 01:04:34.044" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160130 01:04:34.044" level="INFO">${id} = 2422370</msg>
<msg timestamp="20160130 01:04:34.045" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160130 01:04:34.045" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160130 01:04:34.045" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:34.043" starttime="20160130 01:04:33.354"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.057" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:34.058" starttime="20160130 01:04:34.056"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:34.058" starttime="20160130 01:04:34.055"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.061" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:34.062" starttime="20160130 01:04:34.060"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:34.062" starttime="20160130 01:04:34.059"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.065" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:34.066" starttime="20160130 01:04:34.064"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:34.066" starttime="20160130 01:04:34.063"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:34.067" starttime="20160130 01:04:34.051"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.068" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:04:34.069" starttime="20160130 01:04:34.067"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.071" starttime="20160130 01:04:34.069"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.072" starttime="20160130 01:04:34.071"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.074" starttime="20160130 01:04:34.073"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.075" starttime="20160130 01:04:34.074"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.077" starttime="20160130 01:04:34.076"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.078" starttime="20160130 01:04:34.077"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:04:34.081" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=100000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2422370']</msg>
<msg timestamp="20160130 01:04:34.208" level="INFO">01:04:34,201 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:04:34,202 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422371
01:04:34,203 INFO  [log] LowLevelOps.getMainAccount.output.balance=99940000
01:04:34,204 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:04:34,206 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:04:34.208" starttime="20160130 01:04:34.080"></status>
</kw>
<msg timestamp="20160130 01:04:34.209" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:34.210" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:04:34.209" starttime="20160130 01:04:34.079"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:34.216" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:04:34.216" starttime="20160130 01:04:34.214"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.218" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:34.218" starttime="20160130 01:04:34.217"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.220" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:34.220" starttime="20160130 01:04:34.219"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.224" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:34.224" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:34.225" starttime="20160130 01:04:34.222"></status>
</kw>
<msg timestamp="20160130 01:04:34.226" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:34.226" level="INFO">${return_log_entry} = 2016-01-30 01:04:34,201 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:34.225" starttime="20160130 01:04:34.221"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.231" starttime="20160130 01:04:34.230"></status>
</kw>
<msg timestamp="20160130 01:04:34.232" level="INFO">${return_log_entry} = 2016-01-30 01:04:34,201 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:34.232" starttime="20160130 01:04:34.227"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.237" starttime="20160130 01:04:34.236"></status>
</kw>
<msg timestamp="20160130 01:04:34.238" level="INFO">${return_log_entry} = 2016-01-30 01:04:34,201 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:34.237" starttime="20160130 01:04:34.233"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.243" starttime="20160130 01:04:34.241"></status>
</kw>
<msg timestamp="20160130 01:04:34.244" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:34.243" starttime="20160130 01:04:34.238"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.250" starttime="20160130 01:04:34.249"></status>
</kw>
<msg timestamp="20160130 01:04:34.251" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:34.251" starttime="20160130 01:04:34.244"></status>
</kw>
<msg timestamp="20160130 01:04:34.252" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:34.252" starttime="20160130 01:04:34.211"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:34.259" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160130 01:04:34.258" starttime="20160130 01:04:34.257"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.261" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:34.260" starttime="20160130 01:04:34.259"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.263" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:34.262" starttime="20160130 01:04:34.261"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.266" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:34.267" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:34.267" starttime="20160130 01:04:34.264"></status>
</kw>
<msg timestamp="20160130 01:04:34.268" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:34.268" level="INFO">${return_log_entry} = 2016-01-30 01:04:34,202 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422371</msg>
<status status="PASS" endtime="20160130 01:04:34.268" starttime="20160130 01:04:34.263"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.273" starttime="20160130 01:04:34.272"></status>
</kw>
<msg timestamp="20160130 01:04:34.274" level="INFO">${return_log_entry} = 2016-01-30 01:04:34,202 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422371</msg>
<status status="PASS" endtime="20160130 01:04:34.273" starttime="20160130 01:04:34.269"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.278" starttime="20160130 01:04:34.277"></status>
</kw>
<msg timestamp="20160130 01:04:34.279" level="INFO">${return_log_entry} = 2016-01-30 01:04:34,202 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422371</msg>
<status status="PASS" endtime="20160130 01:04:34.279" starttime="20160130 01:04:34.274"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.284" starttime="20160130 01:04:34.283"></status>
</kw>
<msg timestamp="20160130 01:04:34.285" level="INFO">${resultCode} = 2422371</msg>
<status status="PASS" endtime="20160130 01:04:34.285" starttime="20160130 01:04:34.280"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.291" starttime="20160130 01:04:34.290"></status>
</kw>
<msg timestamp="20160130 01:04:34.292" level="INFO">${resultCode} = 2422371</msg>
<status status="PASS" endtime="20160130 01:04:34.292" starttime="20160130 01:04:34.286"></status>
</kw>
<msg timestamp="20160130 01:04:34.293" level="INFO">${accountId} = 2422371</msg>
<status status="PASS" endtime="20160130 01:04:34.293" starttime="20160130 01:04:34.253"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:34.299" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160130 01:04:34.299" starttime="20160130 01:04:34.298"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.301" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:34.301" starttime="20160130 01:04:34.300"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.303" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:34.303" starttime="20160130 01:04:34.302"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.306" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:34.306" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:34.307" starttime="20160130 01:04:34.305"></status>
</kw>
<msg timestamp="20160130 01:04:34.308" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:34.308" level="INFO">${return_log_entry} = 2016-01-30 01:04:34,203 INFO  [log] LowLevelOps.getMainAccount.output.balance=99940000</msg>
<status status="PASS" endtime="20160130 01:04:34.307" starttime="20160130 01:04:34.304"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.312" starttime="20160130 01:04:34.311"></status>
</kw>
<msg timestamp="20160130 01:04:34.314" level="INFO">${return_log_entry} = 2016-01-30 01:04:34,203 INFO  [log] LowLevelOps.getMainAccount.output.balance=99940000</msg>
<status status="PASS" endtime="20160130 01:04:34.314" starttime="20160130 01:04:34.309"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.319" starttime="20160130 01:04:34.318"></status>
</kw>
<msg timestamp="20160130 01:04:34.320" level="INFO">${return_log_entry} = 2016-01-30 01:04:34,203 INFO  [log] LowLevelOps.getMainAccount.output.balance=99940000</msg>
<status status="PASS" endtime="20160130 01:04:34.319" starttime="20160130 01:04:34.315"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.324" starttime="20160130 01:04:34.323"></status>
</kw>
<msg timestamp="20160130 01:04:34.325" level="INFO">${resultCode} = 99940000</msg>
<status status="PASS" endtime="20160130 01:04:34.325" starttime="20160130 01:04:34.320"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.331" starttime="20160130 01:04:34.330"></status>
</kw>
<msg timestamp="20160130 01:04:34.332" level="INFO">${resultCode} = 99940000</msg>
<status status="PASS" endtime="20160130 01:04:34.332" starttime="20160130 01:04:34.326"></status>
</kw>
<msg timestamp="20160130 01:04:34.334" level="INFO">${balance} = 99940000</msg>
<status status="PASS" endtime="20160130 01:04:34.333" starttime="20160130 01:04:34.294"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:34.340" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160130 01:04:34.340" starttime="20160130 01:04:34.339"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.342" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:34.342" starttime="20160130 01:04:34.341"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.344" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:34.344" starttime="20160130 01:04:34.343"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.347" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:34.347" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:34.348" starttime="20160130 01:04:34.345"></status>
</kw>
<msg timestamp="20160130 01:04:34.349" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:34.349" level="INFO">${return_log_entry} = 2016-01-30 01:04:34,204 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:04:34.348" starttime="20160130 01:04:34.344"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.353" starttime="20160130 01:04:34.352"></status>
</kw>
<msg timestamp="20160130 01:04:34.354" level="INFO">${return_log_entry} = 2016-01-30 01:04:34,204 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:04:34.354" starttime="20160130 01:04:34.349"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.359" starttime="20160130 01:04:34.358"></status>
</kw>
<msg timestamp="20160130 01:04:34.360" level="INFO">${return_log_entry} = 2016-01-30 01:04:34,204 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:04:34.360" starttime="20160130 01:04:34.355"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.365" starttime="20160130 01:04:34.364"></status>
</kw>
<msg timestamp="20160130 01:04:34.366" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160130 01:04:34.365" starttime="20160130 01:04:34.361"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.372" starttime="20160130 01:04:34.371"></status>
</kw>
<msg timestamp="20160130 01:04:34.373" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160130 01:04:34.373" starttime="20160130 01:04:34.366"></status>
</kw>
<msg timestamp="20160130 01:04:34.374" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160130 01:04:34.374" starttime="20160130 01:04:34.335"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:34.380" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160130 01:04:34.380" starttime="20160130 01:04:34.378"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.382" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:34.382" starttime="20160130 01:04:34.381"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.384" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:34.383" starttime="20160130 01:04:34.382"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.387" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:34.387" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:34.388" starttime="20160130 01:04:34.385"></status>
</kw>
<msg timestamp="20160130 01:04:34.389" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:34.389" level="INFO">${return_log_entry} = 2016-01-30 01:04:34,206 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:04:34.388" starttime="20160130 01:04:34.384"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.394" starttime="20160130 01:04:34.393"></status>
</kw>
<msg timestamp="20160130 01:04:34.395" level="INFO">${return_log_entry} = 2016-01-30 01:04:34,206 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:04:34.395" starttime="20160130 01:04:34.390"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.399" starttime="20160130 01:04:34.398"></status>
</kw>
<msg timestamp="20160130 01:04:34.400" level="INFO">${return_log_entry} = 2016-01-30 01:04:34,206 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:04:34.400" starttime="20160130 01:04:34.396"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.405" starttime="20160130 01:04:34.404"></status>
</kw>
<msg timestamp="20160130 01:04:34.406" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:04:34.405" starttime="20160130 01:04:34.401"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.412" starttime="20160130 01:04:34.411"></status>
</kw>
<msg timestamp="20160130 01:04:34.413" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:04:34.412" starttime="20160130 01:04:34.406"></status>
</kw>
<msg timestamp="20160130 01:04:34.414" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160130 01:04:34.414" starttime="20160130 01:04:34.375"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.419" starttime="20160130 01:04:34.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.420" starttime="20160130 01:04:34.419"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.422" starttime="20160130 01:04:34.421"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:04:34.427" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:04:34.428" starttime="20160130 01:04:34.426"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:34.428" starttime="20160130 01:04:34.425"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:34.429" starttime="20160130 01:04:34.422"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:34.429" starttime="20160130 01:04:34.415"></status>
</kw>
<msg timestamp="20160130 01:04:34.431" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160130 01:04:34.431" level="INFO">${accId} = 2422371</msg>
<msg timestamp="20160130 01:04:34.431" level="INFO">${bal} = 99940000</msg>
<msg timestamp="20160130 01:04:34.432" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160130 01:04:34.432" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160130 01:04:34.430" starttime="20160130 01:04:34.047"></status>
</kw>
<kw type="kw" name="${target_bal} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${INITIAL_BALANCE}-3*${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.435" level="INFO">${target_bal} = 99940000</msg>
<status status="PASS" endtime="20160130 01:04:34.435" starttime="20160130 01:04:34.432"></status>
</kw>
<kw type="kw" name="${target_bal_mex} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${INITIAL_BALANCE}-6*${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.439" level="INFO">${target_bal_mex} = 99880000</msg>
<status status="PASS" endtime="20160130 01:04:34.438" starttime="20160130 01:04:34.436"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='VIRGIN_COLUMBIA'</arg>
<arg>Should Be Equal As Numbers</arg>
<arg>${bal}</arg>
<arg>99920080</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
<arg>ELSE IF</arg>
<arg>'${SUT PROJECT TAG PREFIX}'=='MVNA_MEX'</arg>
<arg>Should Be Equal As Numbers</arg>
<arg>${bal}</arg>
<arg>${target_bal_mex}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<msg timestamp="20160130 01:04:34.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:34.445" starttime="20160130 01:04:34.444"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:34.446" starttime="20160130 01:04:34.439"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check OK!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:34.447" level="INFO">Account balance check OK!</msg>
<status status="PASS" endtime="20160130 01:04:34.448" starttime="20160130 01:04:34.446"></status>
</kw>
<doc>Test will make a MOC call, duration 136s.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:04:34.448" starttime="20160130 01:02:12.055"></status>
</test>
<doc>Testing the prepaid MOC call, duration is 136s - longer than one slice (more than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:04:34.452" starttime="20160130 01:02:08.190"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:04:34.460" starttime="20160130 01:02:08.174"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoAnswer" id="s1-s1-s1-s2-s1-s4" name="MOC PREPAID ONNET-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoAnswer/MOC_PREPAID_ONNET-NoAnswer-robot-suite.txt" id="s1-s1-s1-s2-s1-s4-s1" name="MOC PREPAID ONNET-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160130 01:04:34.629" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:04:34.631" level="INFO">${date} = Sat Jan 30 01:04:34 CET 2016</msg>
<status status="PASS" endtime="20160130 01:04:34.630" starttime="20160130 01:04:34.620"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:34.635" level="INFO">Date and time: Sat Jan 30 01:04:34 CET 2016</msg>
<status status="PASS" endtime="20160130 01:04:34.636" starttime="20160130 01:04:34.633"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:34.640" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160130 01:04:34.641" starttime="20160130 01:04:34.638"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.697" starttime="20160130 01:04:34.694"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:34.760" starttime="20160130 01:04:34.705"></status>
</kw>
<msg timestamp="20160130 01:04:34.762" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160130 01:04:34.762" starttime="20160130 01:04:34.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:04:34.774" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:04:35.245" level="INFO">Read output: Last login: Sat Jan 30 00:02:08 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:04:35.247" starttime="20160130 01:04:34.771"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:35.249" starttime="20160130 01:04:34.764"></status>
</kw>
<msg timestamp="20160130 01:04:35.254" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160130 01:04:35.252" starttime="20160130 01:04:34.685"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:04:35.262" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:04:35.261" starttime="20160130 01:04:35.255"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:04:35.265" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160130 01:04:35.696" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:04:35.698" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:04:35.697" starttime="20160130 01:04:35.263"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:35.705" starttime="20160130 01:04:35.702"></status>
</kw>
<msg timestamp="20160130 01:04:35.707" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:04:35.707" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:04:35.706" starttime="20160130 01:04:35.699"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:35.717" starttime="20160130 01:04:35.715"></status>
</kw>
<msg timestamp="20160130 01:04:35.719" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:35.718" starttime="20160130 01:04:35.709"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160130 01:04:35.723" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:04:35.722" starttime="20160130 01:04:35.720"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:04:35.727" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:04:35.726" starttime="20160130 01:04:35.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:35.730" starttime="20160130 01:04:35.728"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:35.741" starttime="20160130 01:04:35.738"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:04:35.744" starttime="20160130 01:04:35.742"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:35.747" starttime="20160130 01:04:35.731"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:35.756" starttime="20160130 01:04:35.754"></status>
</kw>
<msg timestamp="20160130 01:04:35.758" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:04:35.757" starttime="20160130 01:04:35.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:35.761" starttime="20160130 01:04:35.759"></status>
</kw>
<msg timestamp="20160130 01:04:35.764" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160130 01:04:35.765" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:04:35.763" starttime="20160130 01:04:34.660"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:35.819" starttime="20160130 01:04:35.817"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:35.870" starttime="20160130 01:04:35.827"></status>
</kw>
<msg timestamp="20160130 01:04:35.873" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160130 01:04:35.872" starttime="20160130 01:04:35.820"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:04:35.884" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:04:36.339" level="INFO">Read output: Last login: Sat Jan 30 00:02:09 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:04:36.340" starttime="20160130 01:04:35.881"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:36.341" starttime="20160130 01:04:35.874"></status>
</kw>
<msg timestamp="20160130 01:04:36.343" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160130 01:04:36.342" starttime="20160130 01:04:35.808"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:04:36.347" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:04:36.346" starttime="20160130 01:04:36.343"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:04:36.348" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160130 01:04:36.725" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:04:36.726" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:04:36.725" starttime="20160130 01:04:36.347"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:36.729" starttime="20160130 01:04:36.728"></status>
</kw>
<msg timestamp="20160130 01:04:36.730" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:04:36.730" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:04:36.730" starttime="20160130 01:04:36.726"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:36.735" starttime="20160130 01:04:36.734"></status>
</kw>
<msg timestamp="20160130 01:04:36.736" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:36.736" starttime="20160130 01:04:36.731"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160130 01:04:36.739" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:04:36.738" starttime="20160130 01:04:36.737"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:04:36.740" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:04:36.740" starttime="20160130 01:04:36.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:36.742" starttime="20160130 01:04:36.741"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:36.747" starttime="20160130 01:04:36.746"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:04:36.749" starttime="20160130 01:04:36.748"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:36.754" starttime="20160130 01:04:36.742"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:36.759" starttime="20160130 01:04:36.758"></status>
</kw>
<msg timestamp="20160130 01:04:36.759" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:04:36.759" starttime="20160130 01:04:36.755"></status>
</kw>
<msg timestamp="20160130 01:04:36.761" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160130 01:04:36.761" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:04:36.760" starttime="20160130 01:04:35.783"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:36.788" starttime="20160130 01:04:36.787"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:36.843" starttime="20160130 01:04:36.792"></status>
</kw>
<msg timestamp="20160130 01:04:36.845" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160130 01:04:36.844" starttime="20160130 01:04:36.788"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:04:36.857" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:04:37.487" level="INFO">Read output: Last login: Sat Jan 30 00:02:10 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:04:37.488" starttime="20160130 01:04:36.854"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:37.490" starttime="20160130 01:04:36.847"></status>
</kw>
<msg timestamp="20160130 01:04:37.495" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160130 01:04:37.493" starttime="20160130 01:04:36.782"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:04:37.503" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:04:37.502" starttime="20160130 01:04:37.496"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:04:37.506" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160130 01:04:37.688" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:04:37.690" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:04:37.689" starttime="20160130 01:04:37.504"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:37.697" starttime="20160130 01:04:37.694"></status>
</kw>
<msg timestamp="20160130 01:04:37.699" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:04:37.700" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:04:37.698" starttime="20160130 01:04:37.692"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:37.709" starttime="20160130 01:04:37.707"></status>
</kw>
<msg timestamp="20160130 01:04:37.711" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:37.710" starttime="20160130 01:04:37.701"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:04:37.715" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:04:37.714" starttime="20160130 01:04:37.712"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:04:37.719" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:04:37.718" starttime="20160130 01:04:37.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:37.722" starttime="20160130 01:04:37.720"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:37.733" starttime="20160130 01:04:37.730"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:04:37.736" starttime="20160130 01:04:37.734"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:37.739" starttime="20160130 01:04:37.723"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:37.749" starttime="20160130 01:04:37.746"></status>
</kw>
<msg timestamp="20160130 01:04:37.751" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:04:37.750" starttime="20160130 01:04:37.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:37.754" starttime="20160130 01:04:37.752"></status>
</kw>
<msg timestamp="20160130 01:04:37.758" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160130 01:04:37.759" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:04:37.756" starttime="20160130 01:04:36.771"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:37.817" starttime="20160130 01:04:37.814"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:37.878" starttime="20160130 01:04:37.824"></status>
</kw>
<msg timestamp="20160130 01:04:37.880" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20160130 01:04:37.880" starttime="20160130 01:04:37.818"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:04:37.892" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:04:38.343" level="INFO">Read output: Last login: Sat Jan 30 00:02:11 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:04:38.345" starttime="20160130 01:04:37.889"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:38.347" starttime="20160130 01:04:37.882"></status>
</kw>
<msg timestamp="20160130 01:04:38.352" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20160130 01:04:38.350" starttime="20160130 01:04:37.806"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:04:38.390" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:04:38.389" starttime="20160130 01:04:38.353"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:04:38.393" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160130 01:04:38.472" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:04:38.473" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:04:38.472" starttime="20160130 01:04:38.391"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.476" starttime="20160130 01:04:38.475"></status>
</kw>
<msg timestamp="20160130 01:04:38.477" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:04:38.477" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:04:38.477" starttime="20160130 01:04:38.473"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.482" starttime="20160130 01:04:38.481"></status>
</kw>
<msg timestamp="20160130 01:04:38.483" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:38.482" starttime="20160130 01:04:38.478"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:04:38.485" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:04:38.484" starttime="20160130 01:04:38.483"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:04:38.486" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:04:38.486" starttime="20160130 01:04:38.485"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.488" starttime="20160130 01:04:38.487"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.494" starttime="20160130 01:04:38.492"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.495" starttime="20160130 01:04:38.494"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:38.496" starttime="20160130 01:04:38.489"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.501" starttime="20160130 01:04:38.500"></status>
</kw>
<msg timestamp="20160130 01:04:38.502" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:04:38.501" starttime="20160130 01:04:38.497"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.503" starttime="20160130 01:04:38.502"></status>
</kw>
<msg timestamp="20160130 01:04:38.505" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160130 01:04:38.505" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:04:38.504" starttime="20160130 01:04:37.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:38.507" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:04:38.507" starttime="20160130 01:04:38.505"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:38.509" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:04:38.509" starttime="20160130 01:04:38.508"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:38.511" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:04:38.511" starttime="20160130 01:04:38.510"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:38.513" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:04:38.513" starttime="20160130 01:04:38.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160130 01:04:38.515" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:38.515" starttime="20160130 01:04:38.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160130 01:04:38.517" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:38.518" starttime="20160130 01:04:38.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160130 01:04:38.519" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:38.519" starttime="20160130 01:04:38.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160130 01:04:38.521" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:38.521" starttime="20160130 01:04:38.520"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.527" starttime="20160130 01:04:38.525"></status>
</kw>
<msg timestamp="20160130 01:04:38.528" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:04:38.527" starttime="20160130 01:04:38.522"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160130 01:04:38.530" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:04:38.530" starttime="20160130 01:04:38.528"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:38.531" starttime="20160130 01:04:34.617"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s4-s1-t1" name="Run MOC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.536" starttime="20160130 01:04:38.536"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160130 01:04:38.538" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160130 01:04:38.538" starttime="20160130 01:04:38.537"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160130 01:04:38.545" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160130 01:04:38.545" starttime="20160130 01:04:38.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160130 01:04:38.552" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160130 01:04:38.553" starttime="20160130 01:04:38.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160130 01:04:38.554" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160130 01:04:38.555" starttime="20160130 01:04:38.553"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160130 01:04:38.556" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160130 01:04:38.556" starttime="20160130 01:04:38.555"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:04:38.558" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160130 01:04:38.558" starttime="20160130 01:04:38.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:04:38.560" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160130 01:04:38.560" starttime="20160130 01:04:38.559"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160130 01:04:38.561" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:38.562" starttime="20160130 01:04:38.561"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160130 01:04:38.563" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160130 01:04:38.564" starttime="20160130 01:04:38.562"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160130 01:04:38.565" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:04:38.565" starttime="20160130 01:04:38.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160130 01:04:38.567" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160130 01:04:38.567" starttime="20160130 01:04:38.566"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:38.574" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:38.574" starttime="20160130 01:04:38.572"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:38.575" starttime="20160130 01:04:38.571"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:38.577" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:38.578" starttime="20160130 01:04:38.576"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:38.593" starttime="20160130 01:04:38.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:38.597" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:38.597" starttime="20160130 01:04:38.595"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:38.597" starttime="20160130 01:04:38.594"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:38.598" starttime="20160130 01:04:38.568"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:04:38.600" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:04:38.600" starttime="20160130 01:04:38.599"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.602" starttime="20160130 01:04:38.601"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.604" starttime="20160130 01:04:38.603"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.605" starttime="20160130 01:04:38.604"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.607" starttime="20160130 01:04:38.606"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.608" starttime="20160130 01:04:38.607"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.610" starttime="20160130 01:04:38.609"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.611" starttime="20160130 01:04:38.610"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.613" starttime="20160130 01:04:38.612"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.615" starttime="20160130 01:04:38.614"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.616" starttime="20160130 01:04:38.615"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.618" starttime="20160130 01:04:38.617"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:38.620" starttime="20160130 01:04:38.619"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:04:38.622" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160130 01:04:39.516" level="INFO">01:04:39,512 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:39.517" starttime="20160130 01:04:38.621"></status>
</kw>
<msg timestamp="20160130 01:04:39.519" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:39.519" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:04:39.518" starttime="20160130 01:04:38.620"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:39.526" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:04:39.526" starttime="20160130 01:04:39.524"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:39.528" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:39.527" starttime="20160130 01:04:39.526"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:39.529" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:39.529" starttime="20160130 01:04:39.528"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:39.532" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:39.533" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:39.533" starttime="20160130 01:04:39.531"></status>
</kw>
<msg timestamp="20160130 01:04:39.534" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:39.534" level="INFO">${return_log_entry} = 2016-01-30 01:04:39,512 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:39.534" starttime="20160130 01:04:39.530"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:39.539" starttime="20160130 01:04:39.538"></status>
</kw>
<msg timestamp="20160130 01:04:39.540" level="INFO">${return_log_entry} = 2016-01-30 01:04:39,512 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:39.539" starttime="20160130 01:04:39.535"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:39.544" starttime="20160130 01:04:39.543"></status>
</kw>
<msg timestamp="20160130 01:04:39.545" level="INFO">${return_log_entry} = 2016-01-30 01:04:39,512 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:39.544" starttime="20160130 01:04:39.540"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:39.549" starttime="20160130 01:04:39.548"></status>
</kw>
<msg timestamp="20160130 01:04:39.550" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:39.550" starttime="20160130 01:04:39.545"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:39.556" starttime="20160130 01:04:39.555"></status>
</kw>
<msg timestamp="20160130 01:04:39.557" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:39.557" starttime="20160130 01:04:39.551"></status>
</kw>
<msg timestamp="20160130 01:04:39.558" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:39.558" starttime="20160130 01:04:39.520"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:39.563" starttime="20160130 01:04:39.562"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:39.564" starttime="20160130 01:04:39.563"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:39.565" starttime="20160130 01:04:39.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:04:39.571" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:04:39.571" starttime="20160130 01:04:39.569"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:39.572" starttime="20160130 01:04:39.568"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:39.572" starttime="20160130 01:04:39.566"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:39.573" starttime="20160130 01:04:39.559"></status>
</kw>
<msg timestamp="20160130 01:04:39.574" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160130 01:04:39.573" starttime="20160130 01:04:38.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160130 01:04:39.576" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:39.576" starttime="20160130 01:04:39.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:39.577" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160130 01:04:39.578" starttime="20160130 01:04:39.576"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC NoAnswer *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:39.579" starttime="20160130 01:04:39.578"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC NoAnswer call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:39.580" level="INFO">Running the MOC NoAnswer call...</msg>
<status status="PASS" endtime="20160130 01:04:39.581" starttime="20160130 01:04:39.579"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC NoAnswer">
<doc>Runs an NoAnswer MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-noanswer</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160130 01:04:39.594" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20160130 01:04:39.594" starttime="20160130 01:04:39.593"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160130 01:04:39.596" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20160130 01:04:39.596" starttime="20160130 01:04:39.595"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160130 01:04:39.598" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20160130 01:04:39.598" starttime="20160130 01:04:39.597"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160130 01:04:39.600" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-noanswer.cgs</msg>
<status status="PASS" endtime="20160130 01:04:39.600" starttime="20160130 01:04:39.599"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:39.601" starttime="20160130 01:04:39.601"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:04:39.604" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:39.604" starttime="20160130 01:04:39.602"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:39.606" starttime="20160130 01:04:39.605"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160130 01:04:39.608" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:39.608" starttime="20160130 01:04:39.606"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:04:39.610" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:39.611" starttime="20160130 01:04:39.609"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:39.612" starttime="20160130 01:04:39.611"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160130 01:04:39.614" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:39.615" starttime="20160130 01:04:39.613"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160130 01:04:39.618" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:39.618" starttime="20160130 01:04:39.615"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:39.619" starttime="20160130 01:04:39.618"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160130 01:04:39.628" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-noanswer.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:04:42.689" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:04:42.687" starttime="20160130 01:04:39.620"></status>
</kw>
<msg timestamp="20160130 01:04:42.693" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:04:42.691" starttime="20160130 01:04:39.588"></status>
</kw>
<msg timestamp="20160130 01:04:42.696" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:04:42.694" starttime="20160130 01:04:39.582"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:42.698" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160130 01:04:42.699" starttime="20160130 01:04:42.697"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160130 01:04:42.701" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:42.702" starttime="20160130 01:04:42.700"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:42.703" starttime="20160130 01:04:42.702"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:42.715" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:42.715" starttime="20160130 01:04:42.713"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:42.716" starttime="20160130 01:04:42.712"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:42.718" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:42.719" starttime="20160130 01:04:42.717"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:42.719" starttime="20160130 01:04:42.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:42.722" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:42.722" starttime="20160130 01:04:42.721"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:42.723" starttime="20160130 01:04:42.720"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:42.723" starttime="20160130 01:04:42.710"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:04:42.725" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:04:42.726" starttime="20160130 01:04:42.724"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:42.727" starttime="20160130 01:04:42.726"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:42.729" starttime="20160130 01:04:42.728"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:42.731" starttime="20160130 01:04:42.730"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:42.732" starttime="20160130 01:04:42.731"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:42.734" starttime="20160130 01:04:42.733"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:42.736" starttime="20160130 01:04:42.735"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:04:42.738" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160130 01:04:42.947" level="INFO">01:04:42,923 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:04:42,926 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:04:42,929 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422377
01:04:42,932 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
01:04:42,934 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:04:42,937 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:04:42,940 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:04:42,943 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160130 01:04:42.948" starttime="20160130 01:04:42.738"></status>
</kw>
<msg timestamp="20160130 01:04:42.950" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:42.951" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:04:42.949" starttime="20160130 01:04:42.737"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:42.963" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:04:42.962" starttime="20160130 01:04:42.959"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:42.967" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:42.966" starttime="20160130 01:04:42.964"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:42.973" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:42.971" starttime="20160130 01:04:42.968"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:42.979" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:42.981" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:42.982" starttime="20160130 01:04:42.977"></status>
</kw>
<msg timestamp="20160130 01:04:42.984" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:42.984" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,923 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:42.983" starttime="20160130 01:04:42.974"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:42.995" starttime="20160130 01:04:42.993"></status>
</kw>
<msg timestamp="20160130 01:04:42.997" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,923 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:42.996" starttime="20160130 01:04:42.986"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.007" starttime="20160130 01:04:43.004"></status>
</kw>
<msg timestamp="20160130 01:04:43.009" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,923 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:43.008" starttime="20160130 01:04:42.998"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.018" starttime="20160130 01:04:43.017"></status>
</kw>
<msg timestamp="20160130 01:04:43.019" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:43.019" starttime="20160130 01:04:43.011"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.025" starttime="20160130 01:04:43.024"></status>
</kw>
<msg timestamp="20160130 01:04:43.026" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:43.026" starttime="20160130 01:04:43.019"></status>
</kw>
<msg timestamp="20160130 01:04:43.028" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:43.027" starttime="20160130 01:04:42.953"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:43.033" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160130 01:04:43.033" starttime="20160130 01:04:43.032"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.035" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:43.035" starttime="20160130 01:04:43.034"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.037" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:43.037" starttime="20160130 01:04:43.036"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.040" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:43.041" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:43.041" starttime="20160130 01:04:43.039"></status>
</kw>
<msg timestamp="20160130 01:04:43.042" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:43.042" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,926 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:04:43.041" starttime="20160130 01:04:43.038"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.047" starttime="20160130 01:04:43.046"></status>
</kw>
<msg timestamp="20160130 01:04:43.047" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,926 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:04:43.047" starttime="20160130 01:04:43.043"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.052" starttime="20160130 01:04:43.051"></status>
</kw>
<msg timestamp="20160130 01:04:43.053" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,926 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:04:43.052" starttime="20160130 01:04:43.048"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.057" starttime="20160130 01:04:43.056"></status>
</kw>
<msg timestamp="20160130 01:04:43.058" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:04:43.058" starttime="20160130 01:04:43.053"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.064" starttime="20160130 01:04:43.063"></status>
</kw>
<msg timestamp="20160130 01:04:43.065" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:04:43.065" starttime="20160130 01:04:43.059"></status>
</kw>
<msg timestamp="20160130 01:04:43.066" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160130 01:04:43.066" starttime="20160130 01:04:43.029"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:43.072" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160130 01:04:43.071" starttime="20160130 01:04:43.070"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.073" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:43.073" starttime="20160130 01:04:43.072"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.075" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:43.075" starttime="20160130 01:04:43.074"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.078" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:43.079" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:43.079" starttime="20160130 01:04:43.077"></status>
</kw>
<msg timestamp="20160130 01:04:43.080" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:43.080" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,932 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:04:43.080" starttime="20160130 01:04:43.076"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.085" starttime="20160130 01:04:43.084"></status>
</kw>
<msg timestamp="20160130 01:04:43.086" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,932 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:04:43.085" starttime="20160130 01:04:43.081"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.090" starttime="20160130 01:04:43.089"></status>
</kw>
<msg timestamp="20160130 01:04:43.091" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,932 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:04:43.091" starttime="20160130 01:04:43.086"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.096" starttime="20160130 01:04:43.095"></status>
</kw>
<msg timestamp="20160130 01:04:43.097" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:04:43.096" starttime="20160130 01:04:43.092"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.103" starttime="20160130 01:04:43.102"></status>
</kw>
<msg timestamp="20160130 01:04:43.104" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:04:43.103" starttime="20160130 01:04:43.097"></status>
</kw>
<msg timestamp="20160130 01:04:43.105" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:04:43.104" starttime="20160130 01:04:43.067"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:43.110" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160130 01:04:43.110" starttime="20160130 01:04:43.109"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.112" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:43.112" starttime="20160130 01:04:43.111"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.114" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:43.114" starttime="20160130 01:04:43.113"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.117" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:43.117" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:43.118" starttime="20160130 01:04:43.116"></status>
</kw>
<msg timestamp="20160130 01:04:43.119" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:43.119" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,929 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422377</msg>
<status status="PASS" endtime="20160130 01:04:43.118" starttime="20160130 01:04:43.115"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.124" starttime="20160130 01:04:43.123"></status>
</kw>
<msg timestamp="20160130 01:04:43.125" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,929 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422377</msg>
<status status="PASS" endtime="20160130 01:04:43.124" starttime="20160130 01:04:43.119"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.129" starttime="20160130 01:04:43.128"></status>
</kw>
<msg timestamp="20160130 01:04:43.130" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,929 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422377</msg>
<status status="PASS" endtime="20160130 01:04:43.130" starttime="20160130 01:04:43.125"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.135" starttime="20160130 01:04:43.133"></status>
</kw>
<msg timestamp="20160130 01:04:43.135" level="INFO">${resultCode} = 2422377</msg>
<status status="PASS" endtime="20160130 01:04:43.135" starttime="20160130 01:04:43.130"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.142" starttime="20160130 01:04:43.141"></status>
</kw>
<msg timestamp="20160130 01:04:43.143" level="INFO">${resultCode} = 2422377</msg>
<status status="PASS" endtime="20160130 01:04:43.143" starttime="20160130 01:04:43.136"></status>
</kw>
<msg timestamp="20160130 01:04:43.144" level="INFO">${id} = 2422377</msg>
<status status="PASS" endtime="20160130 01:04:43.144" starttime="20160130 01:04:43.106"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:43.150" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160130 01:04:43.149" starttime="20160130 01:04:43.148"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.152" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:43.151" starttime="20160130 01:04:43.150"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.153" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:43.153" starttime="20160130 01:04:43.152"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.156" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:43.157" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:43.157" starttime="20160130 01:04:43.155"></status>
</kw>
<msg timestamp="20160130 01:04:43.158" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:43.158" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,934 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:04:43.158" starttime="20160130 01:04:43.154"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.163" starttime="20160130 01:04:43.162"></status>
</kw>
<msg timestamp="20160130 01:04:43.163" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,934 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:04:43.163" starttime="20160130 01:04:43.159"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.168" starttime="20160130 01:04:43.167"></status>
</kw>
<msg timestamp="20160130 01:04:43.168" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,934 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:04:43.168" starttime="20160130 01:04:43.164"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.173" starttime="20160130 01:04:43.172"></status>
</kw>
<msg timestamp="20160130 01:04:43.174" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:04:43.173" starttime="20160130 01:04:43.169"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.180" starttime="20160130 01:04:43.179"></status>
</kw>
<msg timestamp="20160130 01:04:43.181" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:04:43.180" starttime="20160130 01:04:43.174"></status>
</kw>
<msg timestamp="20160130 01:04:43.182" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:04:43.181" starttime="20160130 01:04:43.145"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:43.187" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160130 01:04:43.187" starttime="20160130 01:04:43.186"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.189" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:43.189" starttime="20160130 01:04:43.188"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.191" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:43.191" starttime="20160130 01:04:43.190"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.194" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:43.194" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:43.195" starttime="20160130 01:04:43.193"></status>
</kw>
<msg timestamp="20160130 01:04:43.196" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:43.196" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,937 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:04:43.195" starttime="20160130 01:04:43.192"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.200" starttime="20160130 01:04:43.199"></status>
</kw>
<msg timestamp="20160130 01:04:43.201" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,937 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:04:43.201" starttime="20160130 01:04:43.196"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.205" starttime="20160130 01:04:43.204"></status>
</kw>
<msg timestamp="20160130 01:04:43.206" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,937 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:04:43.206" starttime="20160130 01:04:43.201"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.211" starttime="20160130 01:04:43.209"></status>
</kw>
<msg timestamp="20160130 01:04:43.211" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:04:43.211" starttime="20160130 01:04:43.207"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.219" starttime="20160130 01:04:43.218"></status>
</kw>
<msg timestamp="20160130 01:04:43.219" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:04:43.219" starttime="20160130 01:04:43.212"></status>
</kw>
<msg timestamp="20160130 01:04:43.220" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160130 01:04:43.220" starttime="20160130 01:04:43.183"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:43.226" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160130 01:04:43.226" starttime="20160130 01:04:43.225"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.228" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:43.228" starttime="20160130 01:04:43.227"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.230" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:43.229" starttime="20160130 01:04:43.228"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.232" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:43.233" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:43.234" starttime="20160130 01:04:43.231"></status>
</kw>
<msg timestamp="20160130 01:04:43.234" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:43.235" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,940 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:43.234" starttime="20160130 01:04:43.230"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.239" starttime="20160130 01:04:43.238"></status>
</kw>
<msg timestamp="20160130 01:04:43.240" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,940 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:43.239" starttime="20160130 01:04:43.235"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.244" starttime="20160130 01:04:43.243"></status>
</kw>
<msg timestamp="20160130 01:04:43.245" level="INFO">${return_log_entry} = 2016-01-30 01:04:42,940 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:43.245" starttime="20160130 01:04:43.240"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.261" starttime="20160130 01:04:43.260"></status>
</kw>
<msg timestamp="20160130 01:04:43.262" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:43.261" starttime="20160130 01:04:43.246"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.268" starttime="20160130 01:04:43.267"></status>
</kw>
<msg timestamp="20160130 01:04:43.269" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:43.268" starttime="20160130 01:04:43.262"></status>
</kw>
<msg timestamp="20160130 01:04:43.270" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:43.269" starttime="20160130 01:04:43.221"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.275" starttime="20160130 01:04:43.274"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.276" starttime="20160130 01:04:43.275"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.277" starttime="20160130 01:04:43.277"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:04:43.283" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:04:43.284" starttime="20160130 01:04:43.282"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:43.284" starttime="20160130 01:04:43.281"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:43.285" starttime="20160130 01:04:43.278"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:43.285" starttime="20160130 01:04:43.271"></status>
</kw>
<msg timestamp="20160130 01:04:43.288" level="INFO">${rc} = OK</msg>
<msg timestamp="20160130 01:04:43.288" level="INFO">${provId} = 1</msg>
<msg timestamp="20160130 01:04:43.288" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160130 01:04:43.289" level="INFO">${id} = 2422377</msg>
<msg timestamp="20160130 01:04:43.289" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160130 01:04:43.289" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160130 01:04:43.290" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:43.287" starttime="20160130 01:04:42.705"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.301" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:43.301" starttime="20160130 01:04:43.299"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:43.302" starttime="20160130 01:04:43.298"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.304" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:43.305" starttime="20160130 01:04:43.303"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:43.305" starttime="20160130 01:04:43.302"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.308" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:43.308" starttime="20160130 01:04:43.307"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:43.309" starttime="20160130 01:04:43.306"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:43.309" starttime="20160130 01:04:43.296"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.311" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:04:43.312" starttime="20160130 01:04:43.310"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.313" starttime="20160130 01:04:43.312"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.315" starttime="20160130 01:04:43.314"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.317" starttime="20160130 01:04:43.316"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.318" starttime="20160130 01:04:43.317"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.319" starttime="20160130 01:04:43.318"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.321" starttime="20160130 01:04:43.320"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:04:43.323" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2422377']</msg>
<msg timestamp="20160130 01:04:43.447" level="INFO">01:04:43,438 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:04:43,440 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422378
01:04:43,441 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
01:04:43,443 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:04:43,444 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:04:43.447" starttime="20160130 01:04:43.322"></status>
</kw>
<msg timestamp="20160130 01:04:43.448" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:43.449" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:04:43.448" starttime="20160130 01:04:43.321"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:43.455" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:04:43.455" starttime="20160130 01:04:43.453"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.457" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:43.457" starttime="20160130 01:04:43.456"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.459" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:43.459" starttime="20160130 01:04:43.458"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.462" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:43.463" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:43.463" starttime="20160130 01:04:43.461"></status>
</kw>
<msg timestamp="20160130 01:04:43.464" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:43.465" level="INFO">${return_log_entry} = 2016-01-30 01:04:43,438 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:43.464" starttime="20160130 01:04:43.460"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.470" starttime="20160130 01:04:43.469"></status>
</kw>
<msg timestamp="20160130 01:04:43.471" level="INFO">${return_log_entry} = 2016-01-30 01:04:43,438 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:43.470" starttime="20160130 01:04:43.465"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.476" starttime="20160130 01:04:43.475"></status>
</kw>
<msg timestamp="20160130 01:04:43.476" level="INFO">${return_log_entry} = 2016-01-30 01:04:43,438 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:43.476" starttime="20160130 01:04:43.471"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.482" starttime="20160130 01:04:43.480"></status>
</kw>
<msg timestamp="20160130 01:04:43.482" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:43.482" starttime="20160130 01:04:43.477"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.489" starttime="20160130 01:04:43.488"></status>
</kw>
<msg timestamp="20160130 01:04:43.490" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:43.490" starttime="20160130 01:04:43.483"></status>
</kw>
<msg timestamp="20160130 01:04:43.491" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:43.491" starttime="20160130 01:04:43.450"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:43.498" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160130 01:04:43.497" starttime="20160130 01:04:43.496"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.500" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:43.499" starttime="20160130 01:04:43.498"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.502" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:43.501" starttime="20160130 01:04:43.500"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.505" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:43.506" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:43.506" starttime="20160130 01:04:43.503"></status>
</kw>
<msg timestamp="20160130 01:04:43.507" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:43.507" level="INFO">${return_log_entry} = 2016-01-30 01:04:43,440 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422378</msg>
<status status="PASS" endtime="20160130 01:04:43.507" starttime="20160130 01:04:43.502"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.512" starttime="20160130 01:04:43.511"></status>
</kw>
<msg timestamp="20160130 01:04:43.513" level="INFO">${return_log_entry} = 2016-01-30 01:04:43,440 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422378</msg>
<status status="PASS" endtime="20160130 01:04:43.513" starttime="20160130 01:04:43.508"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.518" starttime="20160130 01:04:43.517"></status>
</kw>
<msg timestamp="20160130 01:04:43.519" level="INFO">${return_log_entry} = 2016-01-30 01:04:43,440 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422378</msg>
<status status="PASS" endtime="20160130 01:04:43.518" starttime="20160130 01:04:43.514"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.523" starttime="20160130 01:04:43.522"></status>
</kw>
<msg timestamp="20160130 01:04:43.524" level="INFO">${resultCode} = 2422378</msg>
<status status="PASS" endtime="20160130 01:04:43.524" starttime="20160130 01:04:43.519"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.530" starttime="20160130 01:04:43.529"></status>
</kw>
<msg timestamp="20160130 01:04:43.531" level="INFO">${resultCode} = 2422378</msg>
<status status="PASS" endtime="20160130 01:04:43.530" starttime="20160130 01:04:43.524"></status>
</kw>
<msg timestamp="20160130 01:04:43.532" level="INFO">${accountId} = 2422378</msg>
<status status="PASS" endtime="20160130 01:04:43.531" starttime="20160130 01:04:43.492"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:43.537" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160130 01:04:43.537" starttime="20160130 01:04:43.536"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.539" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:43.539" starttime="20160130 01:04:43.538"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.541" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:43.540" starttime="20160130 01:04:43.540"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.543" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:43.544" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:43.544" starttime="20160130 01:04:43.542"></status>
</kw>
<msg timestamp="20160130 01:04:43.545" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:43.546" level="INFO">${return_log_entry} = 2016-01-30 01:04:43,441 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160130 01:04:43.545" starttime="20160130 01:04:43.541"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.550" starttime="20160130 01:04:43.549"></status>
</kw>
<msg timestamp="20160130 01:04:43.550" level="INFO">${return_log_entry} = 2016-01-30 01:04:43,441 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160130 01:04:43.550" starttime="20160130 01:04:43.546"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.555" starttime="20160130 01:04:43.554"></status>
</kw>
<msg timestamp="20160130 01:04:43.556" level="INFO">${return_log_entry} = 2016-01-30 01:04:43,441 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160130 01:04:43.555" starttime="20160130 01:04:43.551"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.560" starttime="20160130 01:04:43.559"></status>
</kw>
<msg timestamp="20160130 01:04:43.561" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160130 01:04:43.561" starttime="20160130 01:04:43.556"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.567" starttime="20160130 01:04:43.566"></status>
</kw>
<msg timestamp="20160130 01:04:43.568" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160130 01:04:43.567" starttime="20160130 01:04:43.561"></status>
</kw>
<msg timestamp="20160130 01:04:43.569" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160130 01:04:43.568" starttime="20160130 01:04:43.533"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:43.574" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160130 01:04:43.574" starttime="20160130 01:04:43.573"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.576" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:43.576" starttime="20160130 01:04:43.575"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.578" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:43.578" starttime="20160130 01:04:43.577"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.581" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:43.581" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:43.582" starttime="20160130 01:04:43.579"></status>
</kw>
<msg timestamp="20160130 01:04:43.582" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:43.583" level="INFO">${return_log_entry} = 2016-01-30 01:04:43,443 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:04:43.582" starttime="20160130 01:04:43.579"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.587" starttime="20160130 01:04:43.586"></status>
</kw>
<msg timestamp="20160130 01:04:43.588" level="INFO">${return_log_entry} = 2016-01-30 01:04:43,443 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:04:43.587" starttime="20160130 01:04:43.583"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.592" starttime="20160130 01:04:43.591"></status>
</kw>
<msg timestamp="20160130 01:04:43.593" level="INFO">${return_log_entry} = 2016-01-30 01:04:43,443 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:04:43.592" starttime="20160130 01:04:43.588"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.597" starttime="20160130 01:04:43.596"></status>
</kw>
<msg timestamp="20160130 01:04:43.598" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160130 01:04:43.598" starttime="20160130 01:04:43.593"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.604" starttime="20160130 01:04:43.603"></status>
</kw>
<msg timestamp="20160130 01:04:43.605" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160130 01:04:43.604" starttime="20160130 01:04:43.598"></status>
</kw>
<msg timestamp="20160130 01:04:43.606" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160130 01:04:43.605" starttime="20160130 01:04:43.570"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:43.611" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160130 01:04:43.611" starttime="20160130 01:04:43.610"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.613" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:43.613" starttime="20160130 01:04:43.612"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.615" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:43.615" starttime="20160130 01:04:43.614"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.618" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:43.618" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:43.619" starttime="20160130 01:04:43.616"></status>
</kw>
<msg timestamp="20160130 01:04:43.619" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:43.620" level="INFO">${return_log_entry} = 2016-01-30 01:04:43,444 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:04:43.619" starttime="20160130 01:04:43.615"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.624" starttime="20160130 01:04:43.623"></status>
</kw>
<msg timestamp="20160130 01:04:43.625" level="INFO">${return_log_entry} = 2016-01-30 01:04:43,444 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:04:43.624" starttime="20160130 01:04:43.620"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.629" starttime="20160130 01:04:43.628"></status>
</kw>
<msg timestamp="20160130 01:04:43.629" level="INFO">${return_log_entry} = 2016-01-30 01:04:43,444 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:04:43.629" starttime="20160130 01:04:43.625"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.634" starttime="20160130 01:04:43.633"></status>
</kw>
<msg timestamp="20160130 01:04:43.635" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:04:43.634" starttime="20160130 01:04:43.630"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.641" starttime="20160130 01:04:43.640"></status>
</kw>
<msg timestamp="20160130 01:04:43.642" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:04:43.641" starttime="20160130 01:04:43.635"></status>
</kw>
<msg timestamp="20160130 01:04:43.643" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160130 01:04:43.643" starttime="20160130 01:04:43.607"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.648" starttime="20160130 01:04:43.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.649" starttime="20160130 01:04:43.648"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.650" starttime="20160130 01:04:43.649"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:04:43.656" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:04:43.656" starttime="20160130 01:04:43.654"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:43.657" starttime="20160130 01:04:43.654"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:43.657" starttime="20160130 01:04:43.651"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:43.658" starttime="20160130 01:04:43.644"></status>
</kw>
<msg timestamp="20160130 01:04:43.659" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160130 01:04:43.659" level="INFO">${accId} = 2422378</msg>
<msg timestamp="20160130 01:04:43.660" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160130 01:04:43.660" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160130 01:04:43.660" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160130 01:04:43.659" starttime="20160130 01:04:43.291"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.662" starttime="20160130 01:04:43.661"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.663" starttime="20160130 01:04:43.662"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:43.664" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160130 01:04:43.665" starttime="20160130 01:04:43.663"></status>
</kw>
<doc>Test will make a MOC call in NoAnswer case

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:04:43.665" starttime="20160130 01:04:38.532"></status>
</test>
<doc>Testing the prepaid MOC call - NoAnswer

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:04:43.670" starttime="20160130 01:04:34.483"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:04:43.678" starttime="20160130 01:04:34.467"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoCredit" id="s1-s1-s1-s2-s1-s5" name="MOC PREPAID ONNET-NoCredit">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoCredit/MOC_PREPAID_ONNET-NoCredit-robot-suite.txt" id="s1-s1-s1-s2-s1-s5-s1" name="MOC PREPAID ONNET-NoCredit-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160130 01:04:43.837" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:04:43.842" level="INFO">${date} = Sat Jan 30 01:04:43 CET 2016</msg>
<status status="PASS" endtime="20160130 01:04:43.842" starttime="20160130 01:04:43.833"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:43.846" level="INFO">Date and time: Sat Jan 30 01:04:43 CET 2016</msg>
<status status="PASS" endtime="20160130 01:04:43.847" starttime="20160130 01:04:43.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:43.850" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160130 01:04:43.851" starttime="20160130 01:04:43.848"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.905" starttime="20160130 01:04:43.903"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:43.962" starttime="20160130 01:04:43.913"></status>
</kw>
<msg timestamp="20160130 01:04:43.963" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20160130 01:04:43.963" starttime="20160130 01:04:43.906"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:04:43.969" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:04:44.379" level="INFO">Read output: Last login: Sat Jan 30 00:04:35 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:04:44.379" starttime="20160130 01:04:43.968"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:44.380" starttime="20160130 01:04:43.964"></status>
</kw>
<msg timestamp="20160130 01:04:44.382" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20160130 01:04:44.382" starttime="20160130 01:04:43.894"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:04:44.386" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:04:44.386" starttime="20160130 01:04:44.383"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:04:44.388" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160130 01:04:44.753" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:04:44.754" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:04:44.754" starttime="20160130 01:04:44.387"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:44.757" starttime="20160130 01:04:44.756"></status>
</kw>
<msg timestamp="20160130 01:04:44.758" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:04:44.758" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:04:44.758" starttime="20160130 01:04:44.755"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:44.763" starttime="20160130 01:04:44.762"></status>
</kw>
<msg timestamp="20160130 01:04:44.763" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:44.763" starttime="20160130 01:04:44.759"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160130 01:04:44.765" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:04:44.765" starttime="20160130 01:04:44.764"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:04:44.767" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:04:44.767" starttime="20160130 01:04:44.766"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:44.769" starttime="20160130 01:04:44.768"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:44.774" starttime="20160130 01:04:44.772"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:04:44.776" starttime="20160130 01:04:44.774"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:44.777" starttime="20160130 01:04:44.769"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:44.781" starttime="20160130 01:04:44.780"></status>
</kw>
<msg timestamp="20160130 01:04:44.782" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:04:44.782" starttime="20160130 01:04:44.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:44.783" starttime="20160130 01:04:44.782"></status>
</kw>
<msg timestamp="20160130 01:04:44.785" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160130 01:04:44.785" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:04:44.784" starttime="20160130 01:04:43.868"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:44.809" starttime="20160130 01:04:44.808"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:44.851" starttime="20160130 01:04:44.813"></status>
</kw>
<msg timestamp="20160130 01:04:44.852" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20160130 01:04:44.851" starttime="20160130 01:04:44.809"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:04:44.857" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:04:45.285" level="INFO">Read output: Last login: Sat Jan 30 00:04:36 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:04:45.287" starttime="20160130 01:04:44.856"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:45.288" starttime="20160130 01:04:44.853"></status>
</kw>
<msg timestamp="20160130 01:04:45.290" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20160130 01:04:45.289" starttime="20160130 01:04:44.804"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:04:45.294" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:04:45.294" starttime="20160130 01:04:45.290"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:04:45.296" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160130 01:04:45.686" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:04:45.689" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:04:45.688" starttime="20160130 01:04:45.295"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:45.696" starttime="20160130 01:04:45.693"></status>
</kw>
<msg timestamp="20160130 01:04:45.698" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:04:45.698" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:04:45.697" starttime="20160130 01:04:45.690"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:45.708" starttime="20160130 01:04:45.706"></status>
</kw>
<msg timestamp="20160130 01:04:45.710" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:45.709" starttime="20160130 01:04:45.700"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160130 01:04:45.714" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:04:45.713" starttime="20160130 01:04:45.711"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:04:45.718" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:04:45.718" starttime="20160130 01:04:45.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:45.721" starttime="20160130 01:04:45.720"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:45.733" starttime="20160130 01:04:45.730"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:04:45.738" starttime="20160130 01:04:45.734"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:45.739" starttime="20160130 01:04:45.724"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:45.748" starttime="20160130 01:04:45.746"></status>
</kw>
<msg timestamp="20160130 01:04:45.750" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:04:45.750" starttime="20160130 01:04:45.740"></status>
</kw>
<msg timestamp="20160130 01:04:45.754" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160130 01:04:45.754" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:04:45.752" starttime="20160130 01:04:44.793"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:45.805" starttime="20160130 01:04:45.803"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:45.865" starttime="20160130 01:04:45.813"></status>
</kw>
<msg timestamp="20160130 01:04:45.867" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20160130 01:04:45.866" starttime="20160130 01:04:45.806"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:04:45.877" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:04:46.296" level="INFO">Read output: Last login: Sat Jan 30 00:04:37 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:04:46.297" starttime="20160130 01:04:45.875"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:46.298" starttime="20160130 01:04:45.868"></status>
</kw>
<msg timestamp="20160130 01:04:46.300" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20160130 01:04:46.299" starttime="20160130 01:04:45.794"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:04:46.304" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:04:46.303" starttime="20160130 01:04:46.300"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:04:46.305" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160130 01:04:46.482" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:04:46.484" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:04:46.483" starttime="20160130 01:04:46.304"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:46.491" starttime="20160130 01:04:46.488"></status>
</kw>
<msg timestamp="20160130 01:04:46.492" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:04:46.493" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:04:46.492" starttime="20160130 01:04:46.485"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:46.502" starttime="20160130 01:04:46.500"></status>
</kw>
<msg timestamp="20160130 01:04:46.504" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:46.503" starttime="20160130 01:04:46.494"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:04:46.508" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:04:46.507" starttime="20160130 01:04:46.505"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:04:46.512" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:04:46.511" starttime="20160130 01:04:46.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:46.514" starttime="20160130 01:04:46.513"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:46.528" starttime="20160130 01:04:46.523"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:04:46.534" starttime="20160130 01:04:46.530"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:46.535" starttime="20160130 01:04:46.516"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:46.544" starttime="20160130 01:04:46.542"></status>
</kw>
<msg timestamp="20160130 01:04:46.545" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:04:46.545" starttime="20160130 01:04:46.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:46.548" starttime="20160130 01:04:46.547"></status>
</kw>
<msg timestamp="20160130 01:04:46.552" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160130 01:04:46.552" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:04:46.550" starttime="20160130 01:04:45.770"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:46.603" starttime="20160130 01:04:46.601"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:46.650" starttime="20160130 01:04:46.611"></status>
</kw>
<msg timestamp="20160130 01:04:46.651" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20160130 01:04:46.651" starttime="20160130 01:04:46.604"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:04:46.656" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:04:47.049" level="INFO">Read output: Last login: Sat Jan 30 00:04:38 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:04:47.050" starttime="20160130 01:04:46.655"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:47.050" starttime="20160130 01:04:46.652"></status>
</kw>
<msg timestamp="20160130 01:04:47.052" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20160130 01:04:47.052" starttime="20160130 01:04:46.592"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:04:47.056" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:04:47.056" starttime="20160130 01:04:47.053"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:04:47.058" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160130 01:04:47.132" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:04:47.133" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:04:47.133" starttime="20160130 01:04:47.057"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.136" starttime="20160130 01:04:47.135"></status>
</kw>
<msg timestamp="20160130 01:04:47.137" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:04:47.137" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:04:47.136" starttime="20160130 01:04:47.134"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.141" starttime="20160130 01:04:47.140"></status>
</kw>
<msg timestamp="20160130 01:04:47.142" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:47.141" starttime="20160130 01:04:47.137"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:04:47.144" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:04:47.143" starttime="20160130 01:04:47.142"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:04:47.146" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:04:47.145" starttime="20160130 01:04:47.144"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.147" starttime="20160130 01:04:47.146"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.152" starttime="20160130 01:04:47.151"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.154" starttime="20160130 01:04:47.152"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:47.155" starttime="20160130 01:04:47.147"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.159" starttime="20160130 01:04:47.158"></status>
</kw>
<msg timestamp="20160130 01:04:47.160" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:04:47.159" starttime="20160130 01:04:47.156"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.161" starttime="20160130 01:04:47.160"></status>
</kw>
<msg timestamp="20160130 01:04:47.163" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160130 01:04:47.163" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:04:47.162" starttime="20160130 01:04:46.568"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:47.165" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:04:47.165" starttime="20160130 01:04:47.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:47.167" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:04:47.167" starttime="20160130 01:04:47.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:47.169" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:04:47.169" starttime="20160130 01:04:47.168"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:47.171" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:04:47.171" starttime="20160130 01:04:47.170"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160130 01:04:47.173" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:47.173" starttime="20160130 01:04:47.172"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160130 01:04:47.175" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:47.175" starttime="20160130 01:04:47.174"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160130 01:04:47.176" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:47.177" starttime="20160130 01:04:47.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160130 01:04:47.178" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:47.179" starttime="20160130 01:04:47.177"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.184" starttime="20160130 01:04:47.182"></status>
</kw>
<msg timestamp="20160130 01:04:47.185" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:04:47.185" starttime="20160130 01:04:47.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160130 01:04:47.187" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:04:47.187" starttime="20160130 01:04:47.186"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:47.188" starttime="20160130 01:04:43.830"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s5-s1-t1" name="Run MOC NoCredit Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.193" starttime="20160130 01:04:47.193"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20160130 01:04:47.195" level="INFO">${INITIAL_BALANCE} = 0</msg>
<status status="PASS" endtime="20160130 01:04:47.195" starttime="20160130 01:04:47.194"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160130 01:04:47.202" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160130 01:04:47.202" starttime="20160130 01:04:47.201"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160130 01:04:47.204" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160130 01:04:47.204" starttime="20160130 01:04:47.203"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160130 01:04:47.206" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160130 01:04:47.206" starttime="20160130 01:04:47.205"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160130 01:04:47.207" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160130 01:04:47.208" starttime="20160130 01:04:47.206"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:04:47.209" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160130 01:04:47.210" starttime="20160130 01:04:47.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:04:47.211" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160130 01:04:47.211" starttime="20160130 01:04:47.210"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160130 01:04:47.213" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:47.213" starttime="20160130 01:04:47.212"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160130 01:04:47.215" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160130 01:04:47.215" starttime="20160130 01:04:47.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160130 01:04:47.216" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:04:47.217" starttime="20160130 01:04:47.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160130 01:04:47.218" level="INFO">msg=balance=0</msg>
<status status="PASS" endtime="20160130 01:04:47.218" starttime="20160130 01:04:47.217"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:47.225" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:47.225" starttime="20160130 01:04:47.223"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:47.226" starttime="20160130 01:04:47.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:47.228" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:47.229" starttime="20160130 01:04:47.227"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:47.229" starttime="20160130 01:04:47.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:47.232" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:47.232" starttime="20160130 01:04:47.231"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:47.233" starttime="20160130 01:04:47.230"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:47.233" starttime="20160130 01:04:47.220"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:04:47.236" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:04:47.236" starttime="20160130 01:04:47.234"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.238" starttime="20160130 01:04:47.237"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.239" starttime="20160130 01:04:47.238"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.241" starttime="20160130 01:04:47.240"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.243" starttime="20160130 01:04:47.242"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.244" starttime="20160130 01:04:47.243"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.246" starttime="20160130 01:04:47.245"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.247" starttime="20160130 01:04:47.246"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.249" starttime="20160130 01:04:47.248"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.250" starttime="20160130 01:04:47.249"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.252" starttime="20160130 01:04:47.251"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.253" starttime="20160130 01:04:47.252"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:47.255" starttime="20160130 01:04:47.254"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:04:47.257" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=0']</msg>
<msg timestamp="20160130 01:04:48.151" level="INFO">01:04:48,148 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:48.152" starttime="20160130 01:04:47.256"></status>
</kw>
<msg timestamp="20160130 01:04:48.154" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:48.154" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:04:48.153" starttime="20160130 01:04:47.256"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:48.160" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:04:48.159" starttime="20160130 01:04:48.158"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:48.161" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:48.161" starttime="20160130 01:04:48.160"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:48.163" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:48.163" starttime="20160130 01:04:48.162"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:48.166" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:48.166" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:48.167" starttime="20160130 01:04:48.165"></status>
</kw>
<msg timestamp="20160130 01:04:48.168" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:48.168" level="INFO">${return_log_entry} = 2016-01-30 01:04:48,148 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:48.167" starttime="20160130 01:04:48.164"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:48.173" starttime="20160130 01:04:48.172"></status>
</kw>
<msg timestamp="20160130 01:04:48.173" level="INFO">${return_log_entry} = 2016-01-30 01:04:48,148 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:48.173" starttime="20160130 01:04:48.168"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:48.178" starttime="20160130 01:04:48.177"></status>
</kw>
<msg timestamp="20160130 01:04:48.178" level="INFO">${return_log_entry} = 2016-01-30 01:04:48,148 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:48.178" starttime="20160130 01:04:48.174"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:48.183" starttime="20160130 01:04:48.182"></status>
</kw>
<msg timestamp="20160130 01:04:48.183" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:48.183" starttime="20160130 01:04:48.179"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:48.190" starttime="20160130 01:04:48.189"></status>
</kw>
<msg timestamp="20160130 01:04:48.190" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:48.190" starttime="20160130 01:04:48.184"></status>
</kw>
<msg timestamp="20160130 01:04:48.191" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:48.191" starttime="20160130 01:04:48.155"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:48.196" starttime="20160130 01:04:48.195"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:48.197" starttime="20160130 01:04:48.197"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:48.199" starttime="20160130 01:04:48.198"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:04:48.204" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:04:48.204" starttime="20160130 01:04:48.203"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:48.205" starttime="20160130 01:04:48.202"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:48.205" starttime="20160130 01:04:48.199"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:48.206" starttime="20160130 01:04:48.192"></status>
</kw>
<msg timestamp="20160130 01:04:48.207" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160130 01:04:48.206" starttime="20160130 01:04:47.196"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160130 01:04:48.209" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:48.209" starttime="20160130 01:04:48.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:48.210" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160130 01:04:48.210" starttime="20160130 01:04:48.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:48.212" starttime="20160130 01:04:48.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:48.213" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20160130 01:04:48.213" starttime="20160130 01:04:48.212"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC Final Rerouting">
<doc>Initiates a MOC session that is expected to do a final reroute to another number</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv</arg>
</arguments>
<msg timestamp="20160130 01:04:48.221" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv</msg>
<status status="PASS" endtime="20160130 01:04:48.220" starttime="20160130 01:04:48.220"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv</arg>
</arguments>
<msg timestamp="20160130 01:04:48.222" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv</msg>
<status status="PASS" endtime="20160130 01:04:48.222" starttime="20160130 01:04:48.221"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini</arg>
</arguments>
<msg timestamp="20160130 01:04:48.224" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini</msg>
<status status="PASS" endtime="20160130 01:04:48.223" starttime="20160130 01:04:48.223"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-final-rerouting.cgs</arg>
</arguments>
<msg timestamp="20160130 01:04:48.225" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-final-rerouting.cgs</msg>
<status status="PASS" endtime="20160130 01:04:48.225" starttime="20160130 01:04:48.224"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:48.227" starttime="20160130 01:04:48.226"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:04:48.229" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:48.229" starttime="20160130 01:04:48.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:48.230" starttime="20160130 01:04:48.230"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160130 01:04:48.232" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:48.233" starttime="20160130 01:04:48.231"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>Mocfinal-rerouting parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:04:48.235" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:48.235" starttime="20160130 01:04:48.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:48.237" starttime="20160130 01:04:48.236"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160130 01:04:48.239" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:48.239" starttime="20160130 01:04:48.237"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160130 01:04:48.242" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:48.242" starttime="20160130 01:04:48.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:48.243" starttime="20160130 01:04:48.243"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160130 01:04:48.252" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-final-rerouting.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:04:50.452" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:04:50.451" starttime="20160130 01:04:48.244"></status>
</kw>
<msg timestamp="20160130 01:04:50.454" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:04:50.453" starttime="20160130 01:04:48.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:50.455" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160130 01:04:50.455" starttime="20160130 01:04:50.454"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160130 01:04:50.457" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:50.458" starttime="20160130 01:04:50.456"></status>
</kw>
<doc>Insufficient funds MOC call

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:04:50.458" starttime="20160130 01:04:47.189"></status>
</test>
<doc>Testing the prepaid MOC call from the calling party that has empty account balance. It is expected that calling party will hear
announcement (call is redirected) that it has insufficient funds (call is successful from platform point of view)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:04:50.462" starttime="20160130 01:04:43.698"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:04:50.469" starttime="20160130 01:04:43.682"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration" id="s1-s1-s1-s2-s1-s6" name="MOC PREPAID ONNET-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/MOC_PREPAID_ONNET-ShortDuration-robot-suite.txt" id="s1-s1-s1-s2-s1-s6-s1" name="MOC PREPAID ONNET-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160130 01:04:50.627" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:04:50.630" level="INFO">${date} = Sat Jan 30 01:04:50 CET 2016</msg>
<status status="PASS" endtime="20160130 01:04:50.629" starttime="20160130 01:04:50.624"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:50.631" level="INFO">Date and time: Sat Jan 30 01:04:50 CET 2016</msg>
<status status="PASS" endtime="20160130 01:04:50.632" starttime="20160130 01:04:50.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:50.633" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160130 01:04:50.634" starttime="20160130 01:04:50.632"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:50.658" starttime="20160130 01:04:50.657"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:50.715" starttime="20160130 01:04:50.662"></status>
</kw>
<msg timestamp="20160130 01:04:50.717" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20160130 01:04:50.717" starttime="20160130 01:04:50.658"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:04:50.728" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:04:51.149" level="INFO">Read output: Last login: Sat Jan 30 00:04:44 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:04:51.150" starttime="20160130 01:04:50.726"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:51.151" starttime="20160130 01:04:50.719"></status>
</kw>
<msg timestamp="20160130 01:04:51.152" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20160130 01:04:51.152" starttime="20160130 01:04:50.653"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:04:51.156" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:04:51.156" starttime="20160130 01:04:51.153"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:04:51.158" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160130 01:04:51.519" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:04:51.522" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:04:51.521" starttime="20160130 01:04:51.157"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:51.528" starttime="20160130 01:04:51.525"></status>
</kw>
<msg timestamp="20160130 01:04:51.530" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:04:51.530" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:04:51.529" starttime="20160130 01:04:51.523"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:51.540" starttime="20160130 01:04:51.538"></status>
</kw>
<msg timestamp="20160130 01:04:51.542" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:51.541" starttime="20160130 01:04:51.532"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160130 01:04:51.546" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:04:51.545" starttime="20160130 01:04:51.543"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:04:51.549" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:04:51.549" starttime="20160130 01:04:51.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:51.552" starttime="20160130 01:04:51.551"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:51.563" starttime="20160130 01:04:51.561"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:04:51.569" starttime="20160130 01:04:51.564"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:51.570" starttime="20160130 01:04:51.554"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:51.579" starttime="20160130 01:04:51.577"></status>
</kw>
<msg timestamp="20160130 01:04:51.580" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:04:51.580" starttime="20160130 01:04:51.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:51.583" starttime="20160130 01:04:51.582"></status>
</kw>
<msg timestamp="20160130 01:04:51.587" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160130 01:04:51.587" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:04:51.585" starttime="20160130 01:04:50.641"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:51.638" starttime="20160130 01:04:51.636"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:51.700" starttime="20160130 01:04:51.644"></status>
</kw>
<msg timestamp="20160130 01:04:51.703" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20160130 01:04:51.702" starttime="20160130 01:04:51.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:04:51.713" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:04:52.121" level="INFO">Read output: Last login: Sat Jan 30 00:04:45 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:04:52.122" starttime="20160130 01:04:51.711"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:52.124" starttime="20160130 01:04:51.704"></status>
</kw>
<msg timestamp="20160130 01:04:52.128" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20160130 01:04:52.127" starttime="20160130 01:04:51.627"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:04:52.136" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:04:52.136" starttime="20160130 01:04:52.129"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:04:52.140" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160130 01:04:52.512" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:04:52.514" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:04:52.513" starttime="20160130 01:04:52.137"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:52.521" starttime="20160130 01:04:52.518"></status>
</kw>
<msg timestamp="20160130 01:04:52.523" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:04:52.523" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:04:52.522" starttime="20160130 01:04:52.515"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:52.533" starttime="20160130 01:04:52.531"></status>
</kw>
<msg timestamp="20160130 01:04:52.534" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:52.534" starttime="20160130 01:04:52.525"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160130 01:04:52.538" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:04:52.537" starttime="20160130 01:04:52.535"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:04:52.542" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:04:52.542" starttime="20160130 01:04:52.539"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:52.545" starttime="20160130 01:04:52.543"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:52.555" starttime="20160130 01:04:52.553"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:04:52.561" starttime="20160130 01:04:52.557"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:52.562" starttime="20160130 01:04:52.546"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:52.572" starttime="20160130 01:04:52.570"></status>
</kw>
<msg timestamp="20160130 01:04:52.573" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:04:52.573" starttime="20160130 01:04:52.564"></status>
</kw>
<msg timestamp="20160130 01:04:52.577" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160130 01:04:52.577" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:04:52.575" starttime="20160130 01:04:51.603"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:52.627" starttime="20160130 01:04:52.626"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:52.676" starttime="20160130 01:04:52.635"></status>
</kw>
<msg timestamp="20160130 01:04:52.677" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20160130 01:04:52.677" starttime="20160130 01:04:52.629"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:04:52.682" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:04:53.110" level="INFO">Read output: Last login: Sat Jan 30 00:04:46 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:04:53.111" starttime="20160130 01:04:52.681"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:53.112" starttime="20160130 01:04:52.678"></status>
</kw>
<msg timestamp="20160130 01:04:53.114" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20160130 01:04:53.113" starttime="20160130 01:04:52.617"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:04:53.119" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:04:53.118" starttime="20160130 01:04:53.115"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:04:53.120" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160130 01:04:53.308" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:04:53.309" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:04:53.309" starttime="20160130 01:04:53.119"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.313" starttime="20160130 01:04:53.311"></status>
</kw>
<msg timestamp="20160130 01:04:53.314" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:04:53.314" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:04:53.313" starttime="20160130 01:04:53.310"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.318" starttime="20160130 01:04:53.318"></status>
</kw>
<msg timestamp="20160130 01:04:53.319" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:53.319" starttime="20160130 01:04:53.315"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:04:53.321" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:04:53.321" starttime="20160130 01:04:53.320"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:04:53.323" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:04:53.323" starttime="20160130 01:04:53.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.324" starttime="20160130 01:04:53.323"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.329" starttime="20160130 01:04:53.328"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.332" starttime="20160130 01:04:53.330"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:53.333" starttime="20160130 01:04:53.325"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.337" starttime="20160130 01:04:53.336"></status>
</kw>
<msg timestamp="20160130 01:04:53.337" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:04:53.337" starttime="20160130 01:04:53.333"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.339" starttime="20160130 01:04:53.338"></status>
</kw>
<msg timestamp="20160130 01:04:53.340" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160130 01:04:53.340" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:04:53.339" starttime="20160130 01:04:52.593"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.363" starttime="20160130 01:04:53.362"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.419" starttime="20160130 01:04:53.367"></status>
</kw>
<msg timestamp="20160130 01:04:53.422" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20160130 01:04:53.421" starttime="20160130 01:04:53.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:04:53.433" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:04:53.830" level="INFO">Read output: Last login: Sat Jan 30 00:04:46 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:04:53.830" starttime="20160130 01:04:53.430"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:53.831" starttime="20160130 01:04:53.423"></status>
</kw>
<msg timestamp="20160130 01:04:53.832" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20160130 01:04:53.832" starttime="20160130 01:04:53.359"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:04:53.836" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:04:53.836" starttime="20160130 01:04:53.833"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:04:53.838" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160130 01:04:53.916" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:04:53.917" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:04:53.916" starttime="20160130 01:04:53.837"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.921" starttime="20160130 01:04:53.919"></status>
</kw>
<msg timestamp="20160130 01:04:53.922" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:04:53.923" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:04:53.922" starttime="20160130 01:04:53.918"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.929" starttime="20160130 01:04:53.928"></status>
</kw>
<msg timestamp="20160130 01:04:53.930" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:53.930" starttime="20160130 01:04:53.924"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:04:53.933" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:04:53.933" starttime="20160130 01:04:53.931"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:04:53.936" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:04:53.935" starttime="20160130 01:04:53.934"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.938" starttime="20160130 01:04:53.937"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.945" starttime="20160130 01:04:53.943"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.949" starttime="20160130 01:04:53.946"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:53.950" starttime="20160130 01:04:53.939"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.957" starttime="20160130 01:04:53.955"></status>
</kw>
<msg timestamp="20160130 01:04:53.958" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:04:53.957" starttime="20160130 01:04:53.951"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.960" starttime="20160130 01:04:53.958"></status>
</kw>
<msg timestamp="20160130 01:04:53.961" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160130 01:04:53.962" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:04:53.961" starttime="20160130 01:04:53.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:53.964" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:04:53.965" starttime="20160130 01:04:53.963"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:53.967" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:04:53.968" starttime="20160130 01:04:53.966"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:53.971" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:04:53.971" starttime="20160130 01:04:53.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:53.974" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:04:53.974" starttime="20160130 01:04:53.972"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160130 01:04:53.977" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:53.977" starttime="20160130 01:04:53.975"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160130 01:04:53.979" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:53.980" starttime="20160130 01:04:53.978"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160130 01:04:53.982" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:53.983" starttime="20160130 01:04:53.981"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160130 01:04:53.985" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:53.985" starttime="20160130 01:04:53.983"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:53.994" starttime="20160130 01:04:53.990"></status>
</kw>
<msg timestamp="20160130 01:04:53.996" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:04:53.995" starttime="20160130 01:04:53.986"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160130 01:04:54.001" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:04:54.002" starttime="20160130 01:04:53.997"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:54.004" starttime="20160130 01:04:50.621"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s6-s1-t1" name="Run MOC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:54.016" starttime="20160130 01:04:54.015"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160130 01:04:54.020" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160130 01:04:54.019" starttime="20160130 01:04:54.018"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160130 01:04:54.035" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160130 01:04:54.036" starttime="20160130 01:04:54.033"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160130 01:04:54.039" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160130 01:04:54.039" starttime="20160130 01:04:54.037"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160130 01:04:54.043" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160130 01:04:54.043" starttime="20160130 01:04:54.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160130 01:04:54.046" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160130 01:04:54.047" starttime="20160130 01:04:54.044"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:04:54.050" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160130 01:04:54.051" starttime="20160130 01:04:54.048"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:04:54.054" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160130 01:04:54.055" starttime="20160130 01:04:54.052"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160130 01:04:54.058" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:04:54.058" starttime="20160130 01:04:54.056"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160130 01:04:54.061" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160130 01:04:54.062" starttime="20160130 01:04:54.059"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160130 01:04:54.065" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:04:54.066" starttime="20160130 01:04:54.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160130 01:04:54.069" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160130 01:04:54.070" starttime="20160130 01:04:54.067"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:54.084" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:54.084" starttime="20160130 01:04:54.080"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:54.085" starttime="20160130 01:04:54.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:54.091" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:54.092" starttime="20160130 01:04:54.089"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:54.093" starttime="20160130 01:04:54.087"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:54.099" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:54.100" starttime="20160130 01:04:54.096"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:54.100" starttime="20160130 01:04:54.094"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:54.102" starttime="20160130 01:04:54.072"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:04:54.106" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:04:54.107" starttime="20160130 01:04:54.103"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:54.110" starttime="20160130 01:04:54.108"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:54.114" starttime="20160130 01:04:54.111"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:54.117" starttime="20160130 01:04:54.115"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:54.120" starttime="20160130 01:04:54.118"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:54.122" starttime="20160130 01:04:54.121"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:54.126" starttime="20160130 01:04:54.123"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:54.129" starttime="20160130 01:04:54.127"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:54.132" starttime="20160130 01:04:54.130"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:54.136" starttime="20160130 01:04:54.134"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:54.139" starttime="20160130 01:04:54.137"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:54.143" starttime="20160130 01:04:54.140"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:54.146" starttime="20160130 01:04:54.144"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:04:54.150" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160130 01:04:55.322" level="INFO">01:04:55,316 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:55.323" starttime="20160130 01:04:54.149"></status>
</kw>
<msg timestamp="20160130 01:04:55.326" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:55.327" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:04:55.325" starttime="20160130 01:04:54.147"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:04:55.339" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:04:55.338" starttime="20160130 01:04:55.336"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:55.343" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:04:55.342" starttime="20160130 01:04:55.340"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:04:55.346" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:04:55.346" starttime="20160130 01:04:55.344"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:04:55.352" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:04:55.353" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160130 01:04:55.354" starttime="20160130 01:04:55.350"></status>
</kw>
<msg timestamp="20160130 01:04:55.356" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:04:55.357" level="INFO">${return_log_entry} = 2016-01-30 01:04:55,316 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:55.355" starttime="20160130 01:04:55.348"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:55.366" starttime="20160130 01:04:55.364"></status>
</kw>
<msg timestamp="20160130 01:04:55.368" level="INFO">${return_log_entry} = 2016-01-30 01:04:55,316 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:55.367" starttime="20160130 01:04:55.358"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:55.377" starttime="20160130 01:04:55.375"></status>
</kw>
<msg timestamp="20160130 01:04:55.379" level="INFO">${return_log_entry} = 2016-01-30 01:04:55,316 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:04:55.378" starttime="20160130 01:04:55.369"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:55.389" starttime="20160130 01:04:55.386"></status>
</kw>
<msg timestamp="20160130 01:04:55.390" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:55.389" starttime="20160130 01:04:55.380"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:55.404" starttime="20160130 01:04:55.402"></status>
</kw>
<msg timestamp="20160130 01:04:55.406" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:55.405" starttime="20160130 01:04:55.391"></status>
</kw>
<msg timestamp="20160130 01:04:55.408" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:04:55.408" starttime="20160130 01:04:55.329"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:55.419" starttime="20160130 01:04:55.417"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:55.421" starttime="20160130 01:04:55.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:55.424" starttime="20160130 01:04:55.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:04:55.436" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:04:55.437" starttime="20160130 01:04:55.433"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:55.438" starttime="20160130 01:04:55.431"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:55.439" starttime="20160130 01:04:55.425"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:55.440" starttime="20160130 01:04:55.410"></status>
</kw>
<msg timestamp="20160130 01:04:55.443" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160130 01:04:55.441" starttime="20160130 01:04:54.023"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160130 01:04:55.446" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:55.447" starttime="20160130 01:04:55.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:55.450" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160130 01:04:55.450" starttime="20160130 01:04:55.448"></status>
</kw>
<kw type="kw" name="${calling_int} = BuiltIn.Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<msg timestamp="20160130 01:04:55.453" level="INFO">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160130 01:04:55.455" level="INFO">${calling_int} = 642041010000</msg>
<status status="PASS" endtime="20160130 01:04:55.454" starttime="20160130 01:04:55.452"></status>
</kw>
<kw type="kw" name="${called_party} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${calling_int}+1</arg>
</arguments>
<msg timestamp="20160130 01:04:55.462" level="INFO">${called_party} = 642041010001</msg>
<status status="PASS" endtime="20160130 01:04:55.461" starttime="20160130 01:04:55.456"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:55.465" starttime="20160130 01:04:55.463"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${called_party}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160130 01:04:55.495" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160130 01:04:55.494" starttime="20160130 01:04:55.492"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160130 01:04:55.499" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160130 01:04:55.498" starttime="20160130 01:04:55.496"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160130 01:04:55.503" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20160130 01:04:55.502" starttime="20160130 01:04:55.500"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160130 01:04:55.507" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20160130 01:04:55.506" starttime="20160130 01:04:55.504"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:55.509" starttime="20160130 01:04:55.508"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:04:55.515" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:55.516" starttime="20160130 01:04:55.510"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:55.518" starttime="20160130 01:04:55.517"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160130 01:04:55.519" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:55.520" starttime="20160130 01:04:55.518"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:04:55.522" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:55.523" starttime="20160130 01:04:55.520"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:55.524" starttime="20160130 01:04:55.523"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160130 01:04:55.526" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:55.526" starttime="20160130 01:04:55.524"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160130 01:04:55.529" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:55.529" starttime="20160130 01:04:55.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:55.530" starttime="20160130 01:04:55.530"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160130 01:04:55.538" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:04:59.820" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:04:59.819" starttime="20160130 01:04:55.531"></status>
</kw>
<msg timestamp="20160130 01:04:59.822" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:04:59.821" starttime="20160130 01:04:55.481"></status>
</kw>
<msg timestamp="20160130 01:04:59.823" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:04:59.822" starttime="20160130 01:04:55.468"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:04:59.825" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160130 01:04:59.825" starttime="20160130 01:04:59.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160130 01:04:59.827" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:04:59.827" starttime="20160130 01:04:59.826"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:59.828" starttime="20160130 01:04:59.828"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:59.839" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:59.840" starttime="20160130 01:04:59.838"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:59.840" starttime="20160130 01:04:59.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:59.843" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:59.843" starttime="20160130 01:04:59.842"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:59.844" starttime="20160130 01:04:59.841"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:04:59.846" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:04:59.847" starttime="20160130 01:04:59.845"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:59.847" starttime="20160130 01:04:59.844"></status>
</kw>
<status status="PASS" endtime="20160130 01:04:59.848" starttime="20160130 01:04:59.835"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:04:59.849" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:04:59.850" starttime="20160130 01:04:59.848"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:59.851" starttime="20160130 01:04:59.850"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:59.853" starttime="20160130 01:04:59.852"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:59.854" starttime="20160130 01:04:59.853"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:59.855" starttime="20160130 01:04:59.855"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:59.857" starttime="20160130 01:04:59.856"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:04:59.858" starttime="20160130 01:04:59.857"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:04:59.860" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160130 01:05:00.063" level="INFO">01:05:00,034 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:05:00,038 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:05:00,042 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422382
01:05:00,045 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
01:05:00,048 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:05:00,052 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:05:00,055 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:05:00,059 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160130 01:05:00.065" starttime="20160130 01:04:59.860"></status>
</kw>
<msg timestamp="20160130 01:05:00.068" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:00.069" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:05:00.066" starttime="20160130 01:04:59.859"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:00.081" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:05:00.080" starttime="20160130 01:05:00.077"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.084" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:00.084" starttime="20160130 01:05:00.082"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.088" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:00.087" starttime="20160130 01:05:00.086"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.094" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:00.095" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:00.096" starttime="20160130 01:05:00.091"></status>
</kw>
<msg timestamp="20160130 01:05:00.098" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:00.098" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,034 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:00.097" starttime="20160130 01:05:00.089"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.108" starttime="20160130 01:05:00.106"></status>
</kw>
<msg timestamp="20160130 01:05:00.110" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,034 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:00.109" starttime="20160130 01:05:00.100"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.119" starttime="20160130 01:05:00.117"></status>
</kw>
<msg timestamp="20160130 01:05:00.120" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,034 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:00.120" starttime="20160130 01:05:00.111"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.130" starttime="20160130 01:05:00.127"></status>
</kw>
<msg timestamp="20160130 01:05:00.131" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:00.131" starttime="20160130 01:05:00.121"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.143" starttime="20160130 01:05:00.142"></status>
</kw>
<msg timestamp="20160130 01:05:00.144" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:00.143" starttime="20160130 01:05:00.133"></status>
</kw>
<msg timestamp="20160130 01:05:00.145" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:00.144" starttime="20160130 01:05:00.071"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:00.150" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160130 01:05:00.150" starttime="20160130 01:05:00.149"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.152" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:00.152" starttime="20160130 01:05:00.151"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.154" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:00.153" starttime="20160130 01:05:00.152"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.156" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:00.157" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:00.157" starttime="20160130 01:05:00.155"></status>
</kw>
<msg timestamp="20160130 01:05:00.158" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:00.158" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,038 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:05:00.158" starttime="20160130 01:05:00.154"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.162" starttime="20160130 01:05:00.161"></status>
</kw>
<msg timestamp="20160130 01:05:00.163" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,038 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:05:00.163" starttime="20160130 01:05:00.159"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.167" starttime="20160130 01:05:00.166"></status>
</kw>
<msg timestamp="20160130 01:05:00.168" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,038 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:05:00.168" starttime="20160130 01:05:00.164"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.172" starttime="20160130 01:05:00.171"></status>
</kw>
<msg timestamp="20160130 01:05:00.173" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:05:00.173" starttime="20160130 01:05:00.169"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.179" starttime="20160130 01:05:00.178"></status>
</kw>
<msg timestamp="20160130 01:05:00.180" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:05:00.179" starttime="20160130 01:05:00.174"></status>
</kw>
<msg timestamp="20160130 01:05:00.181" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160130 01:05:00.180" starttime="20160130 01:05:00.146"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:00.186" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160130 01:05:00.186" starttime="20160130 01:05:00.184"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.188" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:00.187" starttime="20160130 01:05:00.186"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.189" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:00.189" starttime="20160130 01:05:00.188"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.192" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:00.193" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:00.193" starttime="20160130 01:05:00.191"></status>
</kw>
<msg timestamp="20160130 01:05:00.194" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:00.194" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,045 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:00.193" starttime="20160130 01:05:00.190"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.198" starttime="20160130 01:05:00.197"></status>
</kw>
<msg timestamp="20160130 01:05:00.199" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,045 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:00.199" starttime="20160130 01:05:00.195"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.203" starttime="20160130 01:05:00.202"></status>
</kw>
<msg timestamp="20160130 01:05:00.204" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,045 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:00.203" starttime="20160130 01:05:00.199"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.208" starttime="20160130 01:05:00.207"></status>
</kw>
<msg timestamp="20160130 01:05:00.209" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:00.209" starttime="20160130 01:05:00.204"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.215" starttime="20160130 01:05:00.214"></status>
</kw>
<msg timestamp="20160130 01:05:00.215" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:00.215" starttime="20160130 01:05:00.209"></status>
</kw>
<msg timestamp="20160130 01:05:00.216" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:00.216" starttime="20160130 01:05:00.181"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:00.222" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160130 01:05:00.222" starttime="20160130 01:05:00.220"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.224" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:00.223" starttime="20160130 01:05:00.222"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.225" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:00.225" starttime="20160130 01:05:00.224"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.228" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:00.229" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:00.229" starttime="20160130 01:05:00.227"></status>
</kw>
<msg timestamp="20160130 01:05:00.230" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:00.230" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,042 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422382</msg>
<status status="PASS" endtime="20160130 01:05:00.229" starttime="20160130 01:05:00.226"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.234" starttime="20160130 01:05:00.233"></status>
</kw>
<msg timestamp="20160130 01:05:00.235" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,042 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422382</msg>
<status status="PASS" endtime="20160130 01:05:00.235" starttime="20160130 01:05:00.231"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.239" starttime="20160130 01:05:00.238"></status>
</kw>
<msg timestamp="20160130 01:05:00.240" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,042 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422382</msg>
<status status="PASS" endtime="20160130 01:05:00.240" starttime="20160130 01:05:00.236"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.244" starttime="20160130 01:05:00.243"></status>
</kw>
<msg timestamp="20160130 01:05:00.245" level="INFO">${resultCode} = 2422382</msg>
<status status="PASS" endtime="20160130 01:05:00.245" starttime="20160130 01:05:00.240"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.251" starttime="20160130 01:05:00.250"></status>
</kw>
<msg timestamp="20160130 01:05:00.251" level="INFO">${resultCode} = 2422382</msg>
<status status="PASS" endtime="20160130 01:05:00.251" starttime="20160130 01:05:00.245"></status>
</kw>
<msg timestamp="20160130 01:05:00.252" level="INFO">${id} = 2422382</msg>
<status status="PASS" endtime="20160130 01:05:00.252" starttime="20160130 01:05:00.217"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:00.258" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160130 01:05:00.258" starttime="20160130 01:05:00.256"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.260" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:00.259" starttime="20160130 01:05:00.258"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.261" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:00.261" starttime="20160130 01:05:00.260"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.264" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:00.264" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:00.265" starttime="20160130 01:05:00.263"></status>
</kw>
<msg timestamp="20160130 01:05:00.266" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:00.266" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,048 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:00.265" starttime="20160130 01:05:00.262"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.270" starttime="20160130 01:05:00.269"></status>
</kw>
<msg timestamp="20160130 01:05:00.271" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,048 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:00.270" starttime="20160130 01:05:00.266"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.275" starttime="20160130 01:05:00.274"></status>
</kw>
<msg timestamp="20160130 01:05:00.276" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,048 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:00.275" starttime="20160130 01:05:00.271"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.280" starttime="20160130 01:05:00.279"></status>
</kw>
<msg timestamp="20160130 01:05:00.281" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:00.281" starttime="20160130 01:05:00.276"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.287" starttime="20160130 01:05:00.286"></status>
</kw>
<msg timestamp="20160130 01:05:00.288" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:00.287" starttime="20160130 01:05:00.281"></status>
</kw>
<msg timestamp="20160130 01:05:00.288" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:00.288" starttime="20160130 01:05:00.253"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:00.294" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160130 01:05:00.294" starttime="20160130 01:05:00.293"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.296" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:00.295" starttime="20160130 01:05:00.294"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.297" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:00.297" starttime="20160130 01:05:00.296"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.300" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:00.301" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:00.301" starttime="20160130 01:05:00.299"></status>
</kw>
<msg timestamp="20160130 01:05:00.302" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:00.302" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,052 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:05:00.301" starttime="20160130 01:05:00.298"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.306" starttime="20160130 01:05:00.305"></status>
</kw>
<msg timestamp="20160130 01:05:00.307" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,052 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:05:00.306" starttime="20160130 01:05:00.302"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.311" starttime="20160130 01:05:00.310"></status>
</kw>
<msg timestamp="20160130 01:05:00.311" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,052 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:05:00.311" starttime="20160130 01:05:00.307"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.316" starttime="20160130 01:05:00.315"></status>
</kw>
<msg timestamp="20160130 01:05:00.317" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:05:00.316" starttime="20160130 01:05:00.312"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.322" starttime="20160130 01:05:00.321"></status>
</kw>
<msg timestamp="20160130 01:05:00.323" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:05:00.323" starttime="20160130 01:05:00.317"></status>
</kw>
<msg timestamp="20160130 01:05:00.324" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160130 01:05:00.324" starttime="20160130 01:05:00.289"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:00.330" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160130 01:05:00.329" starttime="20160130 01:05:00.328"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.331" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:00.331" starttime="20160130 01:05:00.330"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.333" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:00.333" starttime="20160130 01:05:00.332"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.336" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:00.336" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:00.337" starttime="20160130 01:05:00.334"></status>
</kw>
<msg timestamp="20160130 01:05:00.337" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:00.338" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,055 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:00.337" starttime="20160130 01:05:00.334"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.342" starttime="20160130 01:05:00.341"></status>
</kw>
<msg timestamp="20160130 01:05:00.342" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,055 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:00.342" starttime="20160130 01:05:00.338"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.346" starttime="20160130 01:05:00.345"></status>
</kw>
<msg timestamp="20160130 01:05:00.347" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,055 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:00.347" starttime="20160130 01:05:00.343"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.351" starttime="20160130 01:05:00.350"></status>
</kw>
<msg timestamp="20160130 01:05:00.352" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:00.352" starttime="20160130 01:05:00.348"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.358" starttime="20160130 01:05:00.357"></status>
</kw>
<msg timestamp="20160130 01:05:00.359" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:00.358" starttime="20160130 01:05:00.353"></status>
</kw>
<msg timestamp="20160130 01:05:00.360" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:00.359" starttime="20160130 01:05:00.325"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.364" starttime="20160130 01:05:00.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.366" starttime="20160130 01:05:00.365"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.367" starttime="20160130 01:05:00.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:05:00.372" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:05:00.373" starttime="20160130 01:05:00.371"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:00.373" starttime="20160130 01:05:00.370"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:00.373" starttime="20160130 01:05:00.367"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:00.374" starttime="20160130 01:05:00.361"></status>
</kw>
<msg timestamp="20160130 01:05:00.376" level="INFO">${rc} = OK</msg>
<msg timestamp="20160130 01:05:00.376" level="INFO">${provId} = 1</msg>
<msg timestamp="20160130 01:05:00.377" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160130 01:05:00.377" level="INFO">${id} = 2422382</msg>
<msg timestamp="20160130 01:05:00.377" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160130 01:05:00.377" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160130 01:05:00.378" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:00.375" starttime="20160130 01:04:59.830"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.388" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:00.389" starttime="20160130 01:05:00.387"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:00.389" starttime="20160130 01:05:00.386"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.392" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:00.392" starttime="20160130 01:05:00.390"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:00.393" starttime="20160130 01:05:00.390"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.395" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:00.396" starttime="20160130 01:05:00.394"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:00.396" starttime="20160130 01:05:00.393"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:00.397" starttime="20160130 01:05:00.383"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.398" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:05:00.399" starttime="20160130 01:05:00.397"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.400" starttime="20160130 01:05:00.399"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.402" starttime="20160130 01:05:00.401"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.403" starttime="20160130 01:05:00.402"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.404" starttime="20160130 01:05:00.404"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.406" starttime="20160130 01:05:00.405"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.407" starttime="20160130 01:05:00.406"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:05:00.409" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2422382']</msg>
<msg timestamp="20160130 01:05:00.582" level="INFO">01:05:00,563 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:05:00,566 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422383
01:05:00,570 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000
01:05:00,573 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:05:00,577 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:05:00.583" starttime="20160130 01:05:00.408"></status>
</kw>
<msg timestamp="20160130 01:05:00.585" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:00.585" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:05:00.584" starttime="20160130 01:05:00.408"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:00.598" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:05:00.597" starttime="20160130 01:05:00.594"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.601" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:00.601" starttime="20160130 01:05:00.599"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.605" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:00.604" starttime="20160130 01:05:00.602"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.611" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:00.612" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:00.613" starttime="20160130 01:05:00.608"></status>
</kw>
<msg timestamp="20160130 01:05:00.615" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:00.615" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,563 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:00.614" starttime="20160130 01:05:00.606"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.625" starttime="20160130 01:05:00.623"></status>
</kw>
<msg timestamp="20160130 01:05:00.626" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,563 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:00.626" starttime="20160130 01:05:00.616"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.635" starttime="20160130 01:05:00.633"></status>
</kw>
<msg timestamp="20160130 01:05:00.637" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,563 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:00.636" starttime="20160130 01:05:00.627"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.646" starttime="20160130 01:05:00.644"></status>
</kw>
<msg timestamp="20160130 01:05:00.648" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:00.647" starttime="20160130 01:05:00.638"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.660" starttime="20160130 01:05:00.658"></status>
</kw>
<msg timestamp="20160130 01:05:00.661" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:00.661" starttime="20160130 01:05:00.649"></status>
</kw>
<msg timestamp="20160130 01:05:00.663" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:00.663" starttime="20160130 01:05:00.587"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:00.675" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160130 01:05:00.674" starttime="20160130 01:05:00.672"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.678" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:00.678" starttime="20160130 01:05:00.676"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.682" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:00.681" starttime="20160130 01:05:00.679"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.687" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:00.688" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:00.689" starttime="20160130 01:05:00.685"></status>
</kw>
<msg timestamp="20160130 01:05:00.690" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:00.691" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,566 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422383</msg>
<status status="PASS" endtime="20160130 01:05:00.690" starttime="20160130 01:05:00.683"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.699" starttime="20160130 01:05:00.697"></status>
</kw>
<msg timestamp="20160130 01:05:00.701" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,566 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422383</msg>
<status status="PASS" endtime="20160130 01:05:00.700" starttime="20160130 01:05:00.692"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.709" starttime="20160130 01:05:00.707"></status>
</kw>
<msg timestamp="20160130 01:05:00.711" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,566 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422383</msg>
<status status="PASS" endtime="20160130 01:05:00.710" starttime="20160130 01:05:00.702"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.720" starttime="20160130 01:05:00.718"></status>
</kw>
<msg timestamp="20160130 01:05:00.721" level="INFO">${resultCode} = 2422383</msg>
<status status="PASS" endtime="20160130 01:05:00.721" starttime="20160130 01:05:00.712"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.734" starttime="20160130 01:05:00.732"></status>
</kw>
<msg timestamp="20160130 01:05:00.735" level="INFO">${resultCode} = 2422383</msg>
<status status="PASS" endtime="20160130 01:05:00.735" starttime="20160130 01:05:00.722"></status>
</kw>
<msg timestamp="20160130 01:05:00.737" level="INFO">${accountId} = 2422383</msg>
<status status="PASS" endtime="20160130 01:05:00.737" starttime="20160130 01:05:00.665"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:00.749" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160130 01:05:00.748" starttime="20160130 01:05:00.746"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.752" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:00.752" starttime="20160130 01:05:00.750"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.756" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:00.755" starttime="20160130 01:05:00.753"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.761" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:00.762" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:00.763" starttime="20160130 01:05:00.759"></status>
</kw>
<msg timestamp="20160130 01:05:00.765" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:00.765" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,570 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160130 01:05:00.764" starttime="20160130 01:05:00.757"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.770" starttime="20160130 01:05:00.769"></status>
</kw>
<msg timestamp="20160130 01:05:00.771" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,570 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160130 01:05:00.771" starttime="20160130 01:05:00.766"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.775" starttime="20160130 01:05:00.774"></status>
</kw>
<msg timestamp="20160130 01:05:00.776" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,570 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160130 01:05:00.775" starttime="20160130 01:05:00.771"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.780" starttime="20160130 01:05:00.779"></status>
</kw>
<msg timestamp="20160130 01:05:00.781" level="INFO">${resultCode} = 9980000</msg>
<status status="PASS" endtime="20160130 01:05:00.780" starttime="20160130 01:05:00.776"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.787" starttime="20160130 01:05:00.786"></status>
</kw>
<msg timestamp="20160130 01:05:00.787" level="INFO">${resultCode} = 9980000</msg>
<status status="PASS" endtime="20160130 01:05:00.787" starttime="20160130 01:05:00.781"></status>
</kw>
<msg timestamp="20160130 01:05:00.788" level="INFO">${balance} = 9980000</msg>
<status status="PASS" endtime="20160130 01:05:00.788" starttime="20160130 01:05:00.739"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:00.794" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160130 01:05:00.794" starttime="20160130 01:05:00.792"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.796" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:00.795" starttime="20160130 01:05:00.794"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.797" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:00.797" starttime="20160130 01:05:00.796"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.800" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:00.800" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:00.801" starttime="20160130 01:05:00.799"></status>
</kw>
<msg timestamp="20160130 01:05:00.802" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:00.802" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,573 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:05:00.801" starttime="20160130 01:05:00.798"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.806" starttime="20160130 01:05:00.805"></status>
</kw>
<msg timestamp="20160130 01:05:00.807" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,573 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:05:00.806" starttime="20160130 01:05:00.802"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.811" starttime="20160130 01:05:00.810"></status>
</kw>
<msg timestamp="20160130 01:05:00.812" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,573 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:05:00.811" starttime="20160130 01:05:00.807"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.816" starttime="20160130 01:05:00.815"></status>
</kw>
<msg timestamp="20160130 01:05:00.817" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160130 01:05:00.816" starttime="20160130 01:05:00.812"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.824" starttime="20160130 01:05:00.823"></status>
</kw>
<msg timestamp="20160130 01:05:00.825" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160130 01:05:00.825" starttime="20160130 01:05:00.817"></status>
</kw>
<msg timestamp="20160130 01:05:00.826" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160130 01:05:00.826" starttime="20160130 01:05:00.789"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:00.831" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160130 01:05:00.831" starttime="20160130 01:05:00.830"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.833" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:00.833" starttime="20160130 01:05:00.832"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.835" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:00.835" starttime="20160130 01:05:00.834"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.838" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:00.838" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:00.839" starttime="20160130 01:05:00.836"></status>
</kw>
<msg timestamp="20160130 01:05:00.839" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:00.840" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,577 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:05:00.839" starttime="20160130 01:05:00.835"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.844" starttime="20160130 01:05:00.843"></status>
</kw>
<msg timestamp="20160130 01:05:00.844" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,577 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:05:00.844" starttime="20160130 01:05:00.840"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.849" starttime="20160130 01:05:00.848"></status>
</kw>
<msg timestamp="20160130 01:05:00.849" level="INFO">${return_log_entry} = 2016-01-30 01:05:00,577 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:05:00.849" starttime="20160130 01:05:00.845"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.857" starttime="20160130 01:05:00.854"></status>
</kw>
<msg timestamp="20160130 01:05:00.858" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:05:00.858" starttime="20160130 01:05:00.850"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.871" starttime="20160130 01:05:00.869"></status>
</kw>
<msg timestamp="20160130 01:05:00.873" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:05:00.872" starttime="20160130 01:05:00.859"></status>
</kw>
<msg timestamp="20160130 01:05:00.875" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160130 01:05:00.875" starttime="20160130 01:05:00.827"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.885" starttime="20160130 01:05:00.884"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.888" starttime="20160130 01:05:00.886"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:00.891" starttime="20160130 01:05:00.889"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:05:00.903" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:05:00.904" starttime="20160130 01:05:00.900"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:00.904" starttime="20160130 01:05:00.898"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:00.905" starttime="20160130 01:05:00.892"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:00.906" starttime="20160130 01:05:00.877"></status>
</kw>
<msg timestamp="20160130 01:05:00.910" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160130 01:05:00.911" level="INFO">${accId} = 2422383</msg>
<msg timestamp="20160130 01:05:00.911" level="INFO">${bal} = 9980000</msg>
<msg timestamp="20160130 01:05:00.912" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160130 01:05:00.912" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160130 01:05:00.909" starttime="20160130 01:05:00.379"></status>
</kw>
<kw type="kw" name="${target_bal} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<msg timestamp="20160130 01:05:00.919" level="INFO">${target_bal} = 9980000</msg>
<status status="PASS" endtime="20160130 01:05:00.919" starttime="20160130 01:05:00.914"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<msg timestamp="20160130 01:05:00.923" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:00.924" starttime="20160130 01:05:00.921"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check OK!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:00.927" level="INFO">Account balance check OK!</msg>
<status status="PASS" endtime="20160130 01:05:00.928" starttime="20160130 01:05:00.925"></status>
</kw>
<doc>Test will make a MOC call, duration 1s.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:05:00.929" starttime="20160130 01:04:54.006"></status>
</test>
<doc>Testing the prepaid MOC call, duration is 1s - shorter than one slice (less than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:05:00.938" starttime="20160130 01:04:50.489"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:05:00.954" starttime="20160130 01:04:50.474"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ToUnknown" id="s1-s1-s1-s2-s1-s7" name="MOC PREPAID ONNET-ToUnknown">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ToUnknown/MOC_PREPAID_ONNET-ToUnknown-robot-suite.txt" id="s1-s1-s1-s2-s1-s7-s1" name="MOC PREPAID ONNET-ToUnknown-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160130 01:05:01.204" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:05:01.210" level="INFO">${date} = Sat Jan 30 01:05:01 CET 2016</msg>
<status status="PASS" endtime="20160130 01:05:01.209" starttime="20160130 01:05:01.200"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:01.214" level="INFO">Date and time: Sat Jan 30 01:05:01 CET 2016</msg>
<status status="PASS" endtime="20160130 01:05:01.215" starttime="20160130 01:05:01.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:01.218" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160130 01:05:01.219" starttime="20160130 01:05:01.216"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:01.269" starttime="20160130 01:05:01.266"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:01.344" starttime="20160130 01:05:01.276"></status>
</kw>
<msg timestamp="20160130 01:05:01.346" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20160130 01:05:01.345" starttime="20160130 01:05:01.270"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:01.351" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:02.059" level="INFO">Read output: Last login: Sat Jan 30 00:04:50 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:02.060" starttime="20160130 01:05:01.350"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:02.061" starttime="20160130 01:05:01.346"></status>
</kw>
<msg timestamp="20160130 01:05:02.063" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20160130 01:05:02.062" starttime="20160130 01:05:01.258"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:02.068" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:02.067" starttime="20160130 01:05:02.064"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:02.070" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160130 01:05:02.532" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:02.533" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:05:02.532" starttime="20160130 01:05:02.069"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:02.536" starttime="20160130 01:05:02.535"></status>
</kw>
<msg timestamp="20160130 01:05:02.537" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:02.537" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:02.537" starttime="20160130 01:05:02.534"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:02.542" starttime="20160130 01:05:02.541"></status>
</kw>
<msg timestamp="20160130 01:05:02.543" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:02.542" starttime="20160130 01:05:02.538"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160130 01:05:02.544" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:05:02.544" starttime="20160130 01:05:02.543"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:02.546" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:02.546" starttime="20160130 01:05:02.545"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:02.548" starttime="20160130 01:05:02.547"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:02.553" starttime="20160130 01:05:02.552"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:02.555" starttime="20160130 01:05:02.554"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:02.556" starttime="20160130 01:05:02.549"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:02.560" starttime="20160130 01:05:02.559"></status>
</kw>
<msg timestamp="20160130 01:05:02.561" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:02.561" starttime="20160130 01:05:02.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:02.562" starttime="20160130 01:05:02.562"></status>
</kw>
<msg timestamp="20160130 01:05:02.564" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160130 01:05:02.564" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:02.563" starttime="20160130 01:05:01.235"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:02.587" starttime="20160130 01:05:02.586"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:02.628" starttime="20160130 01:05:02.590"></status>
</kw>
<msg timestamp="20160130 01:05:02.629" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20160130 01:05:02.629" starttime="20160130 01:05:02.587"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:02.634" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:03.105" level="INFO">Read output: Last login: Sat Jan 30 00:04:51 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:03.106" starttime="20160130 01:05:02.633"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:03.107" starttime="20160130 01:05:02.630"></status>
</kw>
<msg timestamp="20160130 01:05:03.108" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20160130 01:05:03.108" starttime="20160130 01:05:02.582"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:03.112" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:03.112" starttime="20160130 01:05:03.109"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:03.114" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160130 01:05:03.501" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:03.502" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:05:03.502" starttime="20160130 01:05:03.113"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:03.505" starttime="20160130 01:05:03.504"></status>
</kw>
<msg timestamp="20160130 01:05:03.506" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:03.506" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:03.505" starttime="20160130 01:05:03.503"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:03.510" starttime="20160130 01:05:03.509"></status>
</kw>
<msg timestamp="20160130 01:05:03.511" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:03.511" starttime="20160130 01:05:03.507"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160130 01:05:03.513" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:05:03.512" starttime="20160130 01:05:03.511"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:03.514" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:03.514" starttime="20160130 01:05:03.513"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:03.516" starttime="20160130 01:05:03.515"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:03.521" starttime="20160130 01:05:03.520"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:03.522" starttime="20160130 01:05:03.521"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:03.525" starttime="20160130 01:05:03.516"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:03.529" starttime="20160130 01:05:03.528"></status>
</kw>
<msg timestamp="20160130 01:05:03.530" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:03.529" starttime="20160130 01:05:03.525"></status>
</kw>
<msg timestamp="20160130 01:05:03.531" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160130 01:05:03.531" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:03.530" starttime="20160130 01:05:02.572"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:03.554" starttime="20160130 01:05:03.553"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:03.610" starttime="20160130 01:05:03.557"></status>
</kw>
<msg timestamp="20160130 01:05:03.612" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20160130 01:05:03.611" starttime="20160130 01:05:03.555"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:03.623" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:04.039" level="INFO">Read output: Last login: Sat Jan 30 00:04:52 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:04.040" starttime="20160130 01:05:03.620"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:04.041" starttime="20160130 01:05:03.613"></status>
</kw>
<msg timestamp="20160130 01:05:04.043" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20160130 01:05:04.042" starttime="20160130 01:05:03.549"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:04.047" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:04.047" starttime="20160130 01:05:04.044"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:04.049" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160130 01:05:04.231" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:04.233" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:05:04.233" starttime="20160130 01:05:04.048"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.240" starttime="20160130 01:05:04.237"></status>
</kw>
<msg timestamp="20160130 01:05:04.242" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:04.243" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:04.241" starttime="20160130 01:05:04.235"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.252" starttime="20160130 01:05:04.250"></status>
</kw>
<msg timestamp="20160130 01:05:04.254" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:04.253" starttime="20160130 01:05:04.244"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:05:04.258" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:05:04.257" starttime="20160130 01:05:04.255"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:04.261" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:04.261" starttime="20160130 01:05:04.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.267" starttime="20160130 01:05:04.263"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.277" starttime="20160130 01:05:04.275"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.280" starttime="20160130 01:05:04.278"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:04.283" starttime="20160130 01:05:04.268"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.292" starttime="20160130 01:05:04.290"></status>
</kw>
<msg timestamp="20160130 01:05:04.293" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:04.293" starttime="20160130 01:05:04.284"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.296" starttime="20160130 01:05:04.294"></status>
</kw>
<msg timestamp="20160130 01:05:04.299" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160130 01:05:04.300" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:04.298" starttime="20160130 01:05:03.538"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.350" starttime="20160130 01:05:04.348"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.397" starttime="20160130 01:05:04.358"></status>
</kw>
<msg timestamp="20160130 01:05:04.398" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20160130 01:05:04.398" starttime="20160130 01:05:04.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:04.404" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:04.831" level="INFO">Read output: Last login: Sat Jan 30 00:04:53 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:04.831" starttime="20160130 01:05:04.402"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:04.832" starttime="20160130 01:05:04.399"></status>
</kw>
<msg timestamp="20160130 01:05:04.833" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20160130 01:05:04.833" starttime="20160130 01:05:04.340"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:04.837" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:04.837" starttime="20160130 01:05:04.834"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:04.838" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160130 01:05:04.915" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:04.915" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:05:04.915" starttime="20160130 01:05:04.837"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.918" starttime="20160130 01:05:04.917"></status>
</kw>
<msg timestamp="20160130 01:05:04.919" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:04.919" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:04.919" starttime="20160130 01:05:04.916"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.923" starttime="20160130 01:05:04.922"></status>
</kw>
<msg timestamp="20160130 01:05:04.924" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:04.924" starttime="20160130 01:05:04.920"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:05:04.926" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:05:04.925" starttime="20160130 01:05:04.924"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:04.927" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:04.927" starttime="20160130 01:05:04.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.929" starttime="20160130 01:05:04.928"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.933" starttime="20160130 01:05:04.932"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.936" starttime="20160130 01:05:04.934"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:04.937" starttime="20160130 01:05:04.929"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.940" starttime="20160130 01:05:04.940"></status>
</kw>
<msg timestamp="20160130 01:05:04.941" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:04.941" starttime="20160130 01:05:04.937"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.942" starttime="20160130 01:05:04.942"></status>
</kw>
<msg timestamp="20160130 01:05:04.944" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160130 01:05:04.944" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:04.943" starttime="20160130 01:05:04.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:04.946" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:04.946" starttime="20160130 01:05:04.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:04.948" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:04.948" starttime="20160130 01:05:04.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:04.949" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:04.950" starttime="20160130 01:05:04.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:04.951" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:04.952" starttime="20160130 01:05:04.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160130 01:05:04.953" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:04.954" starttime="20160130 01:05:04.952"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160130 01:05:04.955" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:04.955" starttime="20160130 01:05:04.954"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160130 01:05:04.957" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:04.957" starttime="20160130 01:05:04.956"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160130 01:05:04.959" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:04.959" starttime="20160130 01:05:04.958"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.965" starttime="20160130 01:05:04.962"></status>
</kw>
<msg timestamp="20160130 01:05:04.965" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:05:04.965" starttime="20160130 01:05:04.960"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160130 01:05:04.967" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:05:04.968" starttime="20160130 01:05:04.966"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:04.968" starttime="20160130 01:05:01.197"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s7-s1-t1" name="Run MOC ToUnknown Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:04.974" starttime="20160130 01:05:04.973"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160130 01:05:04.975" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160130 01:05:04.975" starttime="20160130 01:05:04.974"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160130 01:05:04.982" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160130 01:05:04.983" starttime="20160130 01:05:04.981"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160130 01:05:04.984" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160130 01:05:04.984" starttime="20160130 01:05:04.983"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160130 01:05:04.986" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160130 01:05:04.986" starttime="20160130 01:05:04.985"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160130 01:05:04.987" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160130 01:05:04.988" starttime="20160130 01:05:04.986"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:05:04.989" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:04.989" starttime="20160130 01:05:04.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:05:04.991" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160130 01:05:04.991" starttime="20160130 01:05:04.990"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160130 01:05:04.992" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:04.993" starttime="20160130 01:05:04.991"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160130 01:05:04.994" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160130 01:05:04.994" starttime="20160130 01:05:04.993"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160130 01:05:04.996" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:05:04.996" starttime="20160130 01:05:04.995"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160130 01:05:04.997" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160130 01:05:04.998" starttime="20160130 01:05:04.997"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:05.004" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:05.004" starttime="20160130 01:05:05.003"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:05.005" starttime="20160130 01:05:05.002"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:05.007" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:05.008" starttime="20160130 01:05:05.006"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:05.008" starttime="20160130 01:05:05.005"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:05.011" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:05.011" starttime="20160130 01:05:05.010"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:05.012" starttime="20160130 01:05:05.009"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:05.012" starttime="20160130 01:05:04.999"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:05:05.014" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:05:05.015" starttime="20160130 01:05:05.013"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:05.017" starttime="20160130 01:05:05.015"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:05.018" starttime="20160130 01:05:05.017"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:05.020" starttime="20160130 01:05:05.019"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:05.021" starttime="20160130 01:05:05.020"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:05.022" starttime="20160130 01:05:05.022"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:05.024" starttime="20160130 01:05:05.023"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:05.025" starttime="20160130 01:05:05.024"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:05.027" starttime="20160130 01:05:05.026"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:05.028" starttime="20160130 01:05:05.027"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:05.030" starttime="20160130 01:05:05.029"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:05.031" starttime="20160130 01:05:05.030"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:05.033" starttime="20160130 01:05:05.032"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:05:05.035" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160130 01:05:06.207" level="INFO">01:05:06,202 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:06.209" starttime="20160130 01:05:05.034"></status>
</kw>
<msg timestamp="20160130 01:05:06.212" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:06.212" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:05:06.210" starttime="20160130 01:05:05.034"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:06.224" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:05:06.224" starttime="20160130 01:05:06.221"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.228" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:06.228" starttime="20160130 01:05:06.226"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.232" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:06.231" starttime="20160130 01:05:06.229"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.238" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:06.239" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:06.240" starttime="20160130 01:05:06.235"></status>
</kw>
<msg timestamp="20160130 01:05:06.241" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:06.242" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,202 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:06.241" starttime="20160130 01:05:06.233"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.252" starttime="20160130 01:05:06.250"></status>
</kw>
<msg timestamp="20160130 01:05:06.254" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,202 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:06.253" starttime="20160130 01:05:06.244"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.263" starttime="20160130 01:05:06.261"></status>
</kw>
<msg timestamp="20160130 01:05:06.264" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,202 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:06.264" starttime="20160130 01:05:06.255"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.274" starttime="20160130 01:05:06.272"></status>
</kw>
<msg timestamp="20160130 01:05:06.276" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:06.275" starttime="20160130 01:05:06.265"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.288" starttime="20160130 01:05:06.286"></status>
</kw>
<msg timestamp="20160130 01:05:06.290" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:06.289" starttime="20160130 01:05:06.277"></status>
</kw>
<msg timestamp="20160130 01:05:06.292" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:06.291" starttime="20160130 01:05:06.215"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.302" starttime="20160130 01:05:06.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.305" starttime="20160130 01:05:06.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.307" starttime="20160130 01:05:06.306"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:05:06.319" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:05:06.320" starttime="20160130 01:05:06.317"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:06.321" starttime="20160130 01:05:06.314"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:06.322" starttime="20160130 01:05:06.308"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:06.323" starttime="20160130 01:05:06.294"></status>
</kw>
<msg timestamp="20160130 01:05:06.326" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160130 01:05:06.325" starttime="20160130 01:05:04.977"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160130 01:05:06.329" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:06.330" starttime="20160130 01:05:06.327"></status>
</kw>
<kw type="kw" name="${unknown_subscriber} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160130 01:05:06.336" level="INFO">${unknown_subscriber} = 642041010001</msg>
<status status="PASS" endtime="20160130 01:05:06.336" starttime="20160130 01:05:06.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Unknown subscriber's MSISDN: ${unknown_subscriber}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:06.340" level="INFO">Unknown subscriber's MSISDN: 642041010001</msg>
<status status="PASS" endtime="20160130 01:05:06.341" starttime="20160130 01:05:06.337"></status>
</kw>
<kw type="kw" name="${rc}, ${provcId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${unknown_subscriber}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.365" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:06.366" starttime="20160130 01:05:06.362"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:06.367" starttime="20160130 01:05:06.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.372" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:06.373" starttime="20160130 01:05:06.370"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:06.374" starttime="20160130 01:05:06.368"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.379" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:06.380" starttime="20160130 01:05:06.377"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:06.381" starttime="20160130 01:05:06.375"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:06.382" starttime="20160130 01:05:06.353"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.386" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:05:06.386" starttime="20160130 01:05:06.383"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.390" starttime="20160130 01:05:06.388"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.392" starttime="20160130 01:05:06.391"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.394" starttime="20160130 01:05:06.393"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.395" starttime="20160130 01:05:06.394"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.396" starttime="20160130 01:05:06.396"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.398" starttime="20160130 01:05:06.397"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:05:06.400" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010001']</msg>
<msg timestamp="20160130 01:05:06.572" level="INFO">01:05:06,539 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:05:06,543 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:05:06,547 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422389
01:05:06,551 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010001
01:05:06,555 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:05:06,559 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:05:06,563 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:05:06,567 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160130 01:05:06.573" starttime="20160130 01:05:06.399"></status>
</kw>
<msg timestamp="20160130 01:05:06.575" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:06.575" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:05:06.574" starttime="20160130 01:05:06.398"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:06.587" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:05:06.587" starttime="20160130 01:05:06.584"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.591" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:06.590" starttime="20160130 01:05:06.588"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.595" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:06.594" starttime="20160130 01:05:06.592"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.600" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:06.602" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:06.603" starttime="20160130 01:05:06.598"></status>
</kw>
<msg timestamp="20160130 01:05:06.605" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:06.605" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,539 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:06.604" starttime="20160130 01:05:06.596"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.614" starttime="20160130 01:05:06.612"></status>
</kw>
<msg timestamp="20160130 01:05:06.616" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,539 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:06.615" starttime="20160130 01:05:06.606"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.625" starttime="20160130 01:05:06.623"></status>
</kw>
<msg timestamp="20160130 01:05:06.626" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,539 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:06.626" starttime="20160130 01:05:06.617"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.636" starttime="20160130 01:05:06.633"></status>
</kw>
<msg timestamp="20160130 01:05:06.637" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:06.637" starttime="20160130 01:05:06.628"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.649" starttime="20160130 01:05:06.648"></status>
</kw>
<msg timestamp="20160130 01:05:06.651" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:06.650" starttime="20160130 01:05:06.638"></status>
</kw>
<msg timestamp="20160130 01:05:06.653" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:06.652" starttime="20160130 01:05:06.577"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:06.664" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160130 01:05:06.663" starttime="20160130 01:05:06.661"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.667" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:06.667" starttime="20160130 01:05:06.665"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.671" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:06.670" starttime="20160130 01:05:06.668"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.676" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:06.677" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:06.678" starttime="20160130 01:05:06.674"></status>
</kw>
<msg timestamp="20160130 01:05:06.679" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:06.680" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,543 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:05:06.679" starttime="20160130 01:05:06.672"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.689" starttime="20160130 01:05:06.687"></status>
</kw>
<msg timestamp="20160130 01:05:06.690" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,543 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:05:06.690" starttime="20160130 01:05:06.681"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.698" starttime="20160130 01:05:06.696"></status>
</kw>
<msg timestamp="20160130 01:05:06.700" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,543 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:05:06.699" starttime="20160130 01:05:06.691"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.708" starttime="20160130 01:05:06.706"></status>
</kw>
<msg timestamp="20160130 01:05:06.710" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:05:06.709" starttime="20160130 01:05:06.701"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.721" starttime="20160130 01:05:06.720"></status>
</kw>
<msg timestamp="20160130 01:05:06.723" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:05:06.723" starttime="20160130 01:05:06.711"></status>
</kw>
<msg timestamp="20160130 01:05:06.725" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160130 01:05:06.725" starttime="20160130 01:05:06.655"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:06.736" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160130 01:05:06.736" starttime="20160130 01:05:06.733"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.740" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:06.739" starttime="20160130 01:05:06.737"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.743" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:06.742" starttime="20160130 01:05:06.741"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.748" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:06.749" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:06.750" starttime="20160130 01:05:06.746"></status>
</kw>
<msg timestamp="20160130 01:05:06.752" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:06.752" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,551 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010001</msg>
<status status="PASS" endtime="20160130 01:05:06.751" starttime="20160130 01:05:06.744"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.760" starttime="20160130 01:05:06.759"></status>
</kw>
<msg timestamp="20160130 01:05:06.762" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,551 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010001</msg>
<status status="PASS" endtime="20160130 01:05:06.761" starttime="20160130 01:05:06.753"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.768" starttime="20160130 01:05:06.768"></status>
</kw>
<msg timestamp="20160130 01:05:06.769" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,551 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010001</msg>
<status status="PASS" endtime="20160130 01:05:06.769" starttime="20160130 01:05:06.763"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.774" starttime="20160130 01:05:06.772"></status>
</kw>
<msg timestamp="20160130 01:05:06.774" level="INFO">${resultCode} = 530052041010001</msg>
<status status="PASS" endtime="20160130 01:05:06.774" starttime="20160130 01:05:06.770"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.780" starttime="20160130 01:05:06.779"></status>
</kw>
<msg timestamp="20160130 01:05:06.781" level="INFO">${resultCode} = 530052041010001</msg>
<status status="PASS" endtime="20160130 01:05:06.781" starttime="20160130 01:05:06.775"></status>
</kw>
<msg timestamp="20160130 01:05:06.782" level="INFO">${imsi} = 530052041010001</msg>
<status status="PASS" endtime="20160130 01:05:06.782" starttime="20160130 01:05:06.727"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:06.794" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160130 01:05:06.793" starttime="20160130 01:05:06.791"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.797" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:06.797" starttime="20160130 01:05:06.795"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.801" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:06.800" starttime="20160130 01:05:06.798"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.806" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:06.808" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:06.809" starttime="20160130 01:05:06.804"></status>
</kw>
<msg timestamp="20160130 01:05:06.810" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:06.811" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,547 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422389</msg>
<status status="PASS" endtime="20160130 01:05:06.810" starttime="20160130 01:05:06.802"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.818" starttime="20160130 01:05:06.816"></status>
</kw>
<msg timestamp="20160130 01:05:06.820" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,547 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422389</msg>
<status status="PASS" endtime="20160130 01:05:06.819" starttime="20160130 01:05:06.811"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.828" starttime="20160130 01:05:06.827"></status>
</kw>
<msg timestamp="20160130 01:05:06.830" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,547 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422389</msg>
<status status="PASS" endtime="20160130 01:05:06.829" starttime="20160130 01:05:06.821"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.840" starttime="20160130 01:05:06.837"></status>
</kw>
<msg timestamp="20160130 01:05:06.841" level="INFO">${resultCode} = 2422389</msg>
<status status="PASS" endtime="20160130 01:05:06.841" starttime="20160130 01:05:06.831"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.854" starttime="20160130 01:05:06.852"></status>
</kw>
<msg timestamp="20160130 01:05:06.856" level="INFO">${resultCode} = 2422389</msg>
<status status="PASS" endtime="20160130 01:05:06.855" starttime="20160130 01:05:06.842"></status>
</kw>
<msg timestamp="20160130 01:05:06.858" level="INFO">${id} = 2422389</msg>
<status status="PASS" endtime="20160130 01:05:06.857" starttime="20160130 01:05:06.784"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:06.869" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160130 01:05:06.869" starttime="20160130 01:05:06.866"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.873" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:06.873" starttime="20160130 01:05:06.871"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.877" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:06.876" starttime="20160130 01:05:06.874"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.882" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:06.884" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:06.885" starttime="20160130 01:05:06.880"></status>
</kw>
<msg timestamp="20160130 01:05:06.886" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:06.887" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,555 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:06.885" starttime="20160130 01:05:06.878"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.896" starttime="20160130 01:05:06.894"></status>
</kw>
<msg timestamp="20160130 01:05:06.897" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,555 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:06.897" starttime="20160130 01:05:06.888"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.906" starttime="20160130 01:05:06.904"></status>
</kw>
<msg timestamp="20160130 01:05:06.908" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,555 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:06.907" starttime="20160130 01:05:06.898"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.917" starttime="20160130 01:05:06.915"></status>
</kw>
<msg timestamp="20160130 01:05:06.919" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:06.918" starttime="20160130 01:05:06.909"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.931" starttime="20160130 01:05:06.929"></status>
</kw>
<msg timestamp="20160130 01:05:06.933" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:06.932" starttime="20160130 01:05:06.920"></status>
</kw>
<msg timestamp="20160130 01:05:06.935" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:06.935" starttime="20160130 01:05:06.860"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:06.948" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160130 01:05:06.948" starttime="20160130 01:05:06.945"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.952" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:06.951" starttime="20160130 01:05:06.949"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.956" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:06.955" starttime="20160130 01:05:06.953"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:06.962" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:06.963" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:06.964" starttime="20160130 01:05:06.959"></status>
</kw>
<msg timestamp="20160130 01:05:06.966" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:06.966" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,559 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:05:06.965" starttime="20160130 01:05:06.957"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.976" starttime="20160130 01:05:06.974"></status>
</kw>
<msg timestamp="20160130 01:05:06.978" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,559 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:05:06.977" starttime="20160130 01:05:06.967"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.987" starttime="20160130 01:05:06.985"></status>
</kw>
<msg timestamp="20160130 01:05:06.988" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,559 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:05:06.988" starttime="20160130 01:05:06.979"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:06.998" starttime="20160130 01:05:06.995"></status>
</kw>
<msg timestamp="20160130 01:05:06.999" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:05:06.999" starttime="20160130 01:05:06.989"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.012" starttime="20160130 01:05:07.010"></status>
</kw>
<msg timestamp="20160130 01:05:07.014" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:05:07.013" starttime="20160130 01:05:07.000"></status>
</kw>
<msg timestamp="20160130 01:05:07.017" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160130 01:05:07.016" starttime="20160130 01:05:06.938"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:07.032" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160130 01:05:07.031" starttime="20160130 01:05:07.028"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:07.036" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:07.035" starttime="20160130 01:05:07.033"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:07.039" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:07.039" starttime="20160130 01:05:07.037"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:07.045" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:07.047" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:07.047" starttime="20160130 01:05:07.043"></status>
</kw>
<msg timestamp="20160130 01:05:07.049" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:07.050" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,563 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:07.048" starttime="20160130 01:05:07.041"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.060" starttime="20160130 01:05:07.058"></status>
</kw>
<msg timestamp="20160130 01:05:07.062" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,563 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:07.061" starttime="20160130 01:05:07.051"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.071" starttime="20160130 01:05:07.069"></status>
</kw>
<msg timestamp="20160130 01:05:07.073" level="INFO">${return_log_entry} = 2016-01-30 01:05:06,563 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:07.072" starttime="20160130 01:05:07.063"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.082" starttime="20160130 01:05:07.080"></status>
</kw>
<msg timestamp="20160130 01:05:07.084" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:07.083" starttime="20160130 01:05:07.074"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.096" starttime="20160130 01:05:07.094"></status>
</kw>
<msg timestamp="20160130 01:05:07.098" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:07.097" starttime="20160130 01:05:07.085"></status>
</kw>
<msg timestamp="20160130 01:05:07.100" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:07.100" starttime="20160130 01:05:07.020"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.110" starttime="20160130 01:05:07.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.113" starttime="20160130 01:05:07.111"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.116" starttime="20160130 01:05:07.114"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:05:07.127" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:05:07.128" starttime="20160130 01:05:07.124"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:07.129" starttime="20160130 01:05:07.122"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:07.130" starttime="20160130 01:05:07.117"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:07.131" starttime="20160130 01:05:07.102"></status>
</kw>
<msg timestamp="20160130 01:05:07.136" level="INFO">${rc} = OK</msg>
<msg timestamp="20160130 01:05:07.136" level="INFO">${provcId} = 1</msg>
<msg timestamp="20160130 01:05:07.137" level="INFO">${imsi} = 530052041010001</msg>
<msg timestamp="20160130 01:05:07.137" level="INFO">${id} = 2422389</msg>
<msg timestamp="20160130 01:05:07.138" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160130 01:05:07.139" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160130 01:05:07.139" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:07.134" starttime="20160130 01:05:06.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Deleting "unknown" subscriber...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:07.142" level="INFO">Deleting "unknown" subscriber...</msg>
<status status="PASS" endtime="20160130 01:05:07.142" starttime="20160130 01:05:07.140"></status>
</kw>
<kw type="kw" name="${rc} = subscriber-admin-support-resource.CRCE Delete Subscriber">
<doc>This is a delegator to the CRCE webservice operation deleteSubcriber</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:07.153" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:07.153" starttime="20160130 01:05:07.151"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:07.154" starttime="20160130 01:05:07.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:07.156" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:07.156" starttime="20160130 01:05:07.155"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:07.157" starttime="20160130 01:05:07.154"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:07.159" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:07.160" starttime="20160130 01:05:07.158"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:07.160" starttime="20160130 01:05:07.157"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:07.161" starttime="20160130 01:05:07.148"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:05:07.162" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:05:07.163" starttime="20160130 01:05:07.161"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.164" starttime="20160130 01:05:07.163"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.166" starttime="20160130 01:05:07.165"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.167" starttime="20160130 01:05:07.166"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.168" starttime="20160130 01:05:07.168"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>deleteSubscriber</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.169" starttime="20160130 01:05:07.169"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.deleteSubscriber.input.id=${id}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.171" starttime="20160130 01:05:07.170"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:05:07.173" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010001', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.deleteSubscriber.input.id=2422389']</msg>
<msg timestamp="20160130 01:05:07.359" level="INFO">01:05:07,355 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:07.360" starttime="20160130 01:05:07.172"></status>
</kw>
<msg timestamp="20160130 01:05:07.361" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:07.362" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:05:07.361" starttime="20160130 01:05:07.171"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.deleteSubscriber.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:07.371" level="INFO">${return_marker} = LowLevelOps.deleteSubscriber.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:05:07.370" starttime="20160130 01:05:07.368"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:07.373" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:07.373" starttime="20160130 01:05:07.372"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:07.376" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:07.376" starttime="20160130 01:05:07.374"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:07.380" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:07.385" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:07.385" starttime="20160130 01:05:07.379"></status>
</kw>
<msg timestamp="20160130 01:05:07.387" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:07.387" level="INFO">${return_log_entry} = 2016-01-30 01:05:07,355 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:07.386" starttime="20160130 01:05:07.377"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.394" starttime="20160130 01:05:07.393"></status>
</kw>
<msg timestamp="20160130 01:05:07.396" level="INFO">${return_log_entry} = 2016-01-30 01:05:07,355 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:07.395" starttime="20160130 01:05:07.388"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.402" starttime="20160130 01:05:07.401"></status>
</kw>
<msg timestamp="20160130 01:05:07.403" level="INFO">${return_log_entry} = 2016-01-30 01:05:07,355 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:07.403" starttime="20160130 01:05:07.397"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.411" starttime="20160130 01:05:07.409"></status>
</kw>
<msg timestamp="20160130 01:05:07.412" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:07.411" starttime="20160130 01:05:07.404"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.421" starttime="20160130 01:05:07.420"></status>
</kw>
<msg timestamp="20160130 01:05:07.422" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:07.422" starttime="20160130 01:05:07.413"></status>
</kw>
<msg timestamp="20160130 01:05:07.424" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:07.423" starttime="20160130 01:05:07.363"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-DeleteSubscriber</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.431" starttime="20160130 01:05:07.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.433" starttime="20160130 01:05:07.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.435" starttime="20160130 01:05:07.434"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:05:07.447" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-DeleteSubscriber*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-DeleteSubscriber*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:05:07.448" starttime="20160130 01:05:07.442"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:07.449" starttime="20160130 01:05:07.441"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:07.449" starttime="20160130 01:05:07.436"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:07.450" starttime="20160130 01:05:07.425"></status>
</kw>
<msg timestamp="20160130 01:05:07.452" level="INFO">${rc} = OK</msg>
<status status="PASS" endtime="20160130 01:05:07.451" starttime="20160130 01:05:07.143"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Deleting subscriber returned rc= ${rc}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:07.454" level="INFO">Deleting subscriber returned rc= OK</msg>
<status status="PASS" endtime="20160130 01:05:07.455" starttime="20160130 01:05:07.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}'=='OK'</arg>
<arg>Log</arg>
<arg>Test Subscribers prepared!</arg>
<arg>console=yes</arg>
<arg>ELSE</arg>
<arg>Fail</arg>
<arg>msg=Subscriber preparation failed!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers prepared!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:07.461" level="INFO">Test Subscribers prepared!</msg>
<status status="PASS" endtime="20160130 01:05:07.461" starttime="20160130 01:05:07.459"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:07.462" starttime="20160130 01:05:07.456"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s to unknown subscriber*******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.464" starttime="20160130 01:05:07.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:07.466" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20160130 01:05:07.467" starttime="20160130 01:05:07.465"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${unknown_subscriber}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160130 01:05:07.521" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160130 01:05:07.521" starttime="20160130 01:05:07.520"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160130 01:05:07.524" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160130 01:05:07.523" starttime="20160130 01:05:07.522"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160130 01:05:07.528" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20160130 01:05:07.527" starttime="20160130 01:05:07.525"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160130 01:05:07.532" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20160130 01:05:07.532" starttime="20160130 01:05:07.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.535" starttime="20160130 01:05:07.533"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:05:07.541" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:07.542" starttime="20160130 01:05:07.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.544" starttime="20160130 01:05:07.542"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160130 01:05:07.548" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:07.549" starttime="20160130 01:05:07.545"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:05:07.554" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:07.555" starttime="20160130 01:05:07.550"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.558" starttime="20160130 01:05:07.556"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160130 01:05:07.562" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:07.563" starttime="20160130 01:05:07.559"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160130 01:05:07.569" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:07.570" starttime="20160130 01:05:07.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:07.572" starttime="20160130 01:05:07.571"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160130 01:05:07.590" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:05:12.757" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:05:12.753" starttime="20160130 01:05:07.573"></status>
</kw>
<msg timestamp="20160130 01:05:12.761" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:05:12.759" starttime="20160130 01:05:07.513"></status>
</kw>
<msg timestamp="20160130 01:05:12.764" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:05:12.762" starttime="20160130 01:05:07.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CG return code is: ${rc}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:12.768" level="INFO">CG return code is: 0</msg>
<status status="PASS" endtime="20160130 01:05:12.769" starttime="20160130 01:05:12.765"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:12.794" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:12.795" starttime="20160130 01:05:12.791"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:12.796" starttime="20160130 01:05:12.789"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:12.802" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:12.803" starttime="20160130 01:05:12.799"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:12.804" starttime="20160130 01:05:12.797"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:12.809" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:12.810" starttime="20160130 01:05:12.807"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:12.811" starttime="20160130 01:05:12.805"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:12.812" starttime="20160130 01:05:12.783"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:05:12.817" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:05:12.817" starttime="20160130 01:05:12.814"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:12.821" starttime="20160130 01:05:12.818"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:12.825" starttime="20160130 01:05:12.822"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:12.829" starttime="20160130 01:05:12.826"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:12.832" starttime="20160130 01:05:12.830"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:12.835" starttime="20160130 01:05:12.833"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:12.838" starttime="20160130 01:05:12.836"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:05:12.843" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010001', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.deleteSubscriber.input.id=2422389', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160130 01:05:13.073" level="INFO">01:05:13,036 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:05:13,041 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:05:13,045 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422387
01:05:13,050 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
01:05:13,054 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:05:13,058 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:05:13,063 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:05:13,067 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160130 01:05:13.074" starttime="20160130 01:05:12.841"></status>
</kw>
<msg timestamp="20160130 01:05:13.077" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:13.078" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:05:13.076" starttime="20160130 01:05:12.839"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:13.090" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:05:13.090" starttime="20160130 01:05:13.087"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.094" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:13.093" starttime="20160130 01:05:13.091"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.098" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:13.097" starttime="20160130 01:05:13.095"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.103" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:13.105" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:13.106" starttime="20160130 01:05:13.101"></status>
</kw>
<msg timestamp="20160130 01:05:13.107" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:13.108" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,036 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:13.106" starttime="20160130 01:05:13.099"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.119" starttime="20160130 01:05:13.117"></status>
</kw>
<msg timestamp="20160130 01:05:13.121" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,036 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:13.120" starttime="20160130 01:05:13.109"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.130" starttime="20160130 01:05:13.128"></status>
</kw>
<msg timestamp="20160130 01:05:13.131" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,036 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:13.131" starttime="20160130 01:05:13.122"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.141" starttime="20160130 01:05:13.138"></status>
</kw>
<msg timestamp="20160130 01:05:13.142" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:13.142" starttime="20160130 01:05:13.133"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.148" starttime="20160130 01:05:13.147"></status>
</kw>
<msg timestamp="20160130 01:05:13.149" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:13.148" starttime="20160130 01:05:13.143"></status>
</kw>
<msg timestamp="20160130 01:05:13.150" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:13.149" starttime="20160130 01:05:13.080"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:13.155" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160130 01:05:13.155" starttime="20160130 01:05:13.154"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.157" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:13.157" starttime="20160130 01:05:13.156"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.159" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:13.158" starttime="20160130 01:05:13.157"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.161" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:13.162" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:13.162" starttime="20160130 01:05:13.160"></status>
</kw>
<msg timestamp="20160130 01:05:13.163" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:13.163" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,041 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:05:13.163" starttime="20160130 01:05:13.159"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.167" starttime="20160130 01:05:13.166"></status>
</kw>
<msg timestamp="20160130 01:05:13.168" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,041 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:05:13.168" starttime="20160130 01:05:13.164"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.172" starttime="20160130 01:05:13.171"></status>
</kw>
<msg timestamp="20160130 01:05:13.173" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,041 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160130 01:05:13.172" starttime="20160130 01:05:13.169"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.177" starttime="20160130 01:05:13.176"></status>
</kw>
<msg timestamp="20160130 01:05:13.178" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:05:13.177" starttime="20160130 01:05:13.173"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.183" starttime="20160130 01:05:13.183"></status>
</kw>
<msg timestamp="20160130 01:05:13.184" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:05:13.184" starttime="20160130 01:05:13.178"></status>
</kw>
<msg timestamp="20160130 01:05:13.185" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160130 01:05:13.185" starttime="20160130 01:05:13.151"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:13.191" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160130 01:05:13.190" starttime="20160130 01:05:13.189"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.192" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:13.192" starttime="20160130 01:05:13.191"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.194" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:13.194" starttime="20160130 01:05:13.193"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.197" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:13.197" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:13.198" starttime="20160130 01:05:13.195"></status>
</kw>
<msg timestamp="20160130 01:05:13.198" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:13.199" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,050 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:13.198" starttime="20160130 01:05:13.195"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.202" starttime="20160130 01:05:13.202"></status>
</kw>
<msg timestamp="20160130 01:05:13.203" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,050 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:13.203" starttime="20160130 01:05:13.199"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.207" starttime="20160130 01:05:13.206"></status>
</kw>
<msg timestamp="20160130 01:05:13.208" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,050 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:13.208" starttime="20160130 01:05:13.204"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.212" starttime="20160130 01:05:13.211"></status>
</kw>
<msg timestamp="20160130 01:05:13.213" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:13.213" starttime="20160130 01:05:13.208"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.219" starttime="20160130 01:05:13.218"></status>
</kw>
<msg timestamp="20160130 01:05:13.219" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:13.219" starttime="20160130 01:05:13.213"></status>
</kw>
<msg timestamp="20160130 01:05:13.220" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:13.220" starttime="20160130 01:05:13.186"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:13.226" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160130 01:05:13.225" starttime="20160130 01:05:13.224"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.227" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:13.227" starttime="20160130 01:05:13.226"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.229" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:13.229" starttime="20160130 01:05:13.228"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.232" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:13.232" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:13.233" starttime="20160130 01:05:13.230"></status>
</kw>
<msg timestamp="20160130 01:05:13.233" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:13.234" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,045 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422387</msg>
<status status="PASS" endtime="20160130 01:05:13.233" starttime="20160130 01:05:13.230"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.238" starttime="20160130 01:05:13.237"></status>
</kw>
<msg timestamp="20160130 01:05:13.238" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,045 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422387</msg>
<status status="PASS" endtime="20160130 01:05:13.238" starttime="20160130 01:05:13.234"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.242" starttime="20160130 01:05:13.242"></status>
</kw>
<msg timestamp="20160130 01:05:13.243" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,045 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2422387</msg>
<status status="PASS" endtime="20160130 01:05:13.243" starttime="20160130 01:05:13.239"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.247" starttime="20160130 01:05:13.246"></status>
</kw>
<msg timestamp="20160130 01:05:13.248" level="INFO">${resultCode} = 2422387</msg>
<status status="PASS" endtime="20160130 01:05:13.248" starttime="20160130 01:05:13.244"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.254" starttime="20160130 01:05:13.253"></status>
</kw>
<msg timestamp="20160130 01:05:13.254" level="INFO">${resultCode} = 2422387</msg>
<status status="PASS" endtime="20160130 01:05:13.254" starttime="20160130 01:05:13.249"></status>
</kw>
<msg timestamp="20160130 01:05:13.255" level="INFO">${id} = 2422387</msg>
<status status="PASS" endtime="20160130 01:05:13.255" starttime="20160130 01:05:13.221"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:13.261" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160130 01:05:13.261" starttime="20160130 01:05:13.259"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.263" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:13.262" starttime="20160130 01:05:13.261"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.264" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:13.264" starttime="20160130 01:05:13.263"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.267" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:13.268" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:13.268" starttime="20160130 01:05:13.266"></status>
</kw>
<msg timestamp="20160130 01:05:13.269" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:13.269" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,054 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:13.268" starttime="20160130 01:05:13.265"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.273" starttime="20160130 01:05:13.272"></status>
</kw>
<msg timestamp="20160130 01:05:13.274" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,054 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:13.273" starttime="20160130 01:05:13.270"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.278" starttime="20160130 01:05:13.277"></status>
</kw>
<msg timestamp="20160130 01:05:13.278" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,054 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:13.278" starttime="20160130 01:05:13.274"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.283" starttime="20160130 01:05:13.282"></status>
</kw>
<msg timestamp="20160130 01:05:13.284" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:13.284" starttime="20160130 01:05:13.279"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.291" starttime="20160130 01:05:13.290"></status>
</kw>
<msg timestamp="20160130 01:05:13.291" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:13.291" starttime="20160130 01:05:13.285"></status>
</kw>
<msg timestamp="20160130 01:05:13.292" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160130 01:05:13.292" starttime="20160130 01:05:13.256"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:13.298" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160130 01:05:13.297" starttime="20160130 01:05:13.296"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.299" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:13.299" starttime="20160130 01:05:13.298"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.301" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:13.301" starttime="20160130 01:05:13.300"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.303" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:13.304" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:13.305" starttime="20160130 01:05:13.302"></status>
</kw>
<msg timestamp="20160130 01:05:13.305" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:13.306" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,058 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:05:13.305" starttime="20160130 01:05:13.302"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.309" starttime="20160130 01:05:13.309"></status>
</kw>
<msg timestamp="20160130 01:05:13.310" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,058 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:05:13.310" starttime="20160130 01:05:13.306"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.314" starttime="20160130 01:05:13.313"></status>
</kw>
<msg timestamp="20160130 01:05:13.315" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,058 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:05:13.315" starttime="20160130 01:05:13.311"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.319" starttime="20160130 01:05:13.318"></status>
</kw>
<msg timestamp="20160130 01:05:13.320" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:05:13.320" starttime="20160130 01:05:13.315"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.326" starttime="20160130 01:05:13.325"></status>
</kw>
<msg timestamp="20160130 01:05:13.326" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160130 01:05:13.326" starttime="20160130 01:05:13.320"></status>
</kw>
<msg timestamp="20160130 01:05:13.327" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160130 01:05:13.327" starttime="20160130 01:05:13.293"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:13.333" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160130 01:05:13.332" starttime="20160130 01:05:13.331"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.334" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:13.334" starttime="20160130 01:05:13.333"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.336" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:13.336" starttime="20160130 01:05:13.335"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.338" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:13.339" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:13.339" starttime="20160130 01:05:13.337"></status>
</kw>
<msg timestamp="20160130 01:05:13.340" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:13.340" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,063 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:13.340" starttime="20160130 01:05:13.336"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.344" starttime="20160130 01:05:13.343"></status>
</kw>
<msg timestamp="20160130 01:05:13.345" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,063 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:13.345" starttime="20160130 01:05:13.341"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.349" starttime="20160130 01:05:13.348"></status>
</kw>
<msg timestamp="20160130 01:05:13.350" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,063 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:13.349" starttime="20160130 01:05:13.346"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.354" starttime="20160130 01:05:13.353"></status>
</kw>
<msg timestamp="20160130 01:05:13.355" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:13.354" starttime="20160130 01:05:13.350"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.360" starttime="20160130 01:05:13.359"></status>
</kw>
<msg timestamp="20160130 01:05:13.361" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:13.361" starttime="20160130 01:05:13.355"></status>
</kw>
<msg timestamp="20160130 01:05:13.362" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:13.362" starttime="20160130 01:05:13.328"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.367" starttime="20160130 01:05:13.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.368" starttime="20160130 01:05:13.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.369" starttime="20160130 01:05:13.368"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:05:13.374" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:05:13.375" starttime="20160130 01:05:13.373"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:13.375" starttime="20160130 01:05:13.372"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:13.376" starttime="20160130 01:05:13.370"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:13.376" starttime="20160130 01:05:13.363"></status>
</kw>
<msg timestamp="20160130 01:05:13.378" level="INFO">${rc} = OK</msg>
<msg timestamp="20160130 01:05:13.378" level="INFO">${provId} = 1</msg>
<msg timestamp="20160130 01:05:13.379" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160130 01:05:13.379" level="INFO">${id} = 2422387</msg>
<msg timestamp="20160130 01:05:13.379" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160130 01:05:13.379" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160130 01:05:13.380" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:13.378" starttime="20160130 01:05:12.773"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.390" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:13.391" starttime="20160130 01:05:13.389"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:13.391" starttime="20160130 01:05:13.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.394" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:13.394" starttime="20160130 01:05:13.393"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:13.395" starttime="20160130 01:05:13.392"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.397" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:13.397" starttime="20160130 01:05:13.396"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:13.398" starttime="20160130 01:05:13.395"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:13.398" starttime="20160130 01:05:13.385"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.400" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:05:13.400" starttime="20160130 01:05:13.399"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.402" starttime="20160130 01:05:13.401"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.403" starttime="20160130 01:05:13.402"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.405" starttime="20160130 01:05:13.404"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.406" starttime="20160130 01:05:13.405"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.407" starttime="20160130 01:05:13.406"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.409" starttime="20160130 01:05:13.408"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:05:13.411" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010001', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.deleteSubscriber.input.id=2422389', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2422387']</msg>
<msg timestamp="20160130 01:05:13.526" level="INFO">01:05:13,514 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:05:13,516 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422388
01:05:13,518 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000
01:05:13,520 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:05:13,523 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:05:13.526" starttime="20160130 01:05:13.410"></status>
</kw>
<msg timestamp="20160130 01:05:13.527" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:13.528" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:05:13.527" starttime="20160130 01:05:13.409"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:13.534" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:05:13.534" starttime="20160130 01:05:13.532"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.536" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:13.535" starttime="20160130 01:05:13.534"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.538" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:13.537" starttime="20160130 01:05:13.536"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.541" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:13.541" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:13.542" starttime="20160130 01:05:13.539"></status>
</kw>
<msg timestamp="20160130 01:05:13.542" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:13.543" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,514 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:13.542" starttime="20160130 01:05:13.538"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.548" starttime="20160130 01:05:13.547"></status>
</kw>
<msg timestamp="20160130 01:05:13.549" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,514 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:13.548" starttime="20160130 01:05:13.543"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.553" starttime="20160130 01:05:13.552"></status>
</kw>
<msg timestamp="20160130 01:05:13.554" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,514 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:13.554" starttime="20160130 01:05:13.549"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.559" starttime="20160130 01:05:13.557"></status>
</kw>
<msg timestamp="20160130 01:05:13.559" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:13.559" starttime="20160130 01:05:13.555"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.566" starttime="20160130 01:05:13.565"></status>
</kw>
<msg timestamp="20160130 01:05:13.567" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:13.566" starttime="20160130 01:05:13.560"></status>
</kw>
<msg timestamp="20160130 01:05:13.568" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:13.568" starttime="20160130 01:05:13.529"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:13.574" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160130 01:05:13.574" starttime="20160130 01:05:13.572"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.576" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:13.576" starttime="20160130 01:05:13.575"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.578" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:13.578" starttime="20160130 01:05:13.577"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.581" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:13.581" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:13.582" starttime="20160130 01:05:13.579"></status>
</kw>
<msg timestamp="20160130 01:05:13.583" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:13.583" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,516 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422388</msg>
<status status="PASS" endtime="20160130 01:05:13.582" starttime="20160130 01:05:13.578"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.588" starttime="20160130 01:05:13.587"></status>
</kw>
<msg timestamp="20160130 01:05:13.588" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,516 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422388</msg>
<status status="PASS" endtime="20160130 01:05:13.588" starttime="20160130 01:05:13.584"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.593" starttime="20160130 01:05:13.592"></status>
</kw>
<msg timestamp="20160130 01:05:13.594" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,516 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2422388</msg>
<status status="PASS" endtime="20160130 01:05:13.593" starttime="20160130 01:05:13.589"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.599" starttime="20160130 01:05:13.597"></status>
</kw>
<msg timestamp="20160130 01:05:13.599" level="INFO">${resultCode} = 2422388</msg>
<status status="PASS" endtime="20160130 01:05:13.599" starttime="20160130 01:05:13.594"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.606" starttime="20160130 01:05:13.605"></status>
</kw>
<msg timestamp="20160130 01:05:13.607" level="INFO">${resultCode} = 2422388</msg>
<status status="PASS" endtime="20160130 01:05:13.606" starttime="20160130 01:05:13.600"></status>
</kw>
<msg timestamp="20160130 01:05:13.608" level="INFO">${accountId} = 2422388</msg>
<status status="PASS" endtime="20160130 01:05:13.607" starttime="20160130 01:05:13.569"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:13.614" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160130 01:05:13.613" starttime="20160130 01:05:13.612"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.616" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:13.615" starttime="20160130 01:05:13.614"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.618" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:13.617" starttime="20160130 01:05:13.616"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.620" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:13.621" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:13.622" starttime="20160130 01:05:13.619"></status>
</kw>
<msg timestamp="20160130 01:05:13.622" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:13.623" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,518 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160130 01:05:13.622" starttime="20160130 01:05:13.618"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.627" starttime="20160130 01:05:13.626"></status>
</kw>
<msg timestamp="20160130 01:05:13.628" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,518 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160130 01:05:13.628" starttime="20160130 01:05:13.623"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.632" starttime="20160130 01:05:13.631"></status>
</kw>
<msg timestamp="20160130 01:05:13.633" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,518 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160130 01:05:13.633" starttime="20160130 01:05:13.629"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.638" starttime="20160130 01:05:13.637"></status>
</kw>
<msg timestamp="20160130 01:05:13.639" level="INFO">${resultCode} = 9980000</msg>
<status status="PASS" endtime="20160130 01:05:13.638" starttime="20160130 01:05:13.634"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.645" starttime="20160130 01:05:13.644"></status>
</kw>
<msg timestamp="20160130 01:05:13.646" level="INFO">${resultCode} = 9980000</msg>
<status status="PASS" endtime="20160130 01:05:13.645" starttime="20160130 01:05:13.639"></status>
</kw>
<msg timestamp="20160130 01:05:13.647" level="INFO">${balance} = 9980000</msg>
<status status="PASS" endtime="20160130 01:05:13.646" starttime="20160130 01:05:13.609"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:13.652" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160130 01:05:13.652" starttime="20160130 01:05:13.651"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.654" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:13.654" starttime="20160130 01:05:13.653"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.655" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:13.655" starttime="20160130 01:05:13.654"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.658" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:13.659" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:13.659" starttime="20160130 01:05:13.657"></status>
</kw>
<msg timestamp="20160130 01:05:13.660" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:13.660" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,520 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:05:13.659" starttime="20160130 01:05:13.656"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.664" starttime="20160130 01:05:13.663"></status>
</kw>
<msg timestamp="20160130 01:05:13.665" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,520 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:05:13.664" starttime="20160130 01:05:13.661"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.669" starttime="20160130 01:05:13.668"></status>
</kw>
<msg timestamp="20160130 01:05:13.670" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,520 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160130 01:05:13.670" starttime="20160130 01:05:13.665"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.674" starttime="20160130 01:05:13.673"></status>
</kw>
<msg timestamp="20160130 01:05:13.675" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160130 01:05:13.675" starttime="20160130 01:05:13.671"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.681" starttime="20160130 01:05:13.680"></status>
</kw>
<msg timestamp="20160130 01:05:13.681" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160130 01:05:13.681" starttime="20160130 01:05:13.676"></status>
</kw>
<msg timestamp="20160130 01:05:13.682" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160130 01:05:13.682" starttime="20160130 01:05:13.648"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:13.688" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160130 01:05:13.687" starttime="20160130 01:05:13.686"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.689" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:13.689" starttime="20160130 01:05:13.688"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.691" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:13.691" starttime="20160130 01:05:13.690"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:13.694" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:13.694" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:13.695" starttime="20160130 01:05:13.692"></status>
</kw>
<msg timestamp="20160130 01:05:13.695" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:13.696" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,523 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:05:13.695" starttime="20160130 01:05:13.692"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.699" starttime="20160130 01:05:13.699"></status>
</kw>
<msg timestamp="20160130 01:05:13.700" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,523 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:05:13.700" starttime="20160130 01:05:13.696"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.704" starttime="20160130 01:05:13.703"></status>
</kw>
<msg timestamp="20160130 01:05:13.705" level="INFO">${return_log_entry} = 2016-01-30 01:05:13,523 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160130 01:05:13.705" starttime="20160130 01:05:13.701"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.709" starttime="20160130 01:05:13.708"></status>
</kw>
<msg timestamp="20160130 01:05:13.710" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:05:13.710" starttime="20160130 01:05:13.705"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.716" starttime="20160130 01:05:13.715"></status>
</kw>
<msg timestamp="20160130 01:05:13.716" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160130 01:05:13.716" starttime="20160130 01:05:13.710"></status>
</kw>
<msg timestamp="20160130 01:05:13.717" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160130 01:05:13.717" starttime="20160130 01:05:13.683"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.722" starttime="20160130 01:05:13.721"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.723" starttime="20160130 01:05:13.722"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:13.724" starttime="20160130 01:05:13.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:05:13.729" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:05:13.730" starttime="20160130 01:05:13.728"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:13.730" starttime="20160130 01:05:13.727"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:13.731" starttime="20160130 01:05:13.725"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:13.731" starttime="20160130 01:05:13.718"></status>
</kw>
<msg timestamp="20160130 01:05:13.733" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160130 01:05:13.733" level="INFO">${accId} = 2422388</msg>
<msg timestamp="20160130 01:05:13.733" level="INFO">${bal} = 9980000</msg>
<msg timestamp="20160130 01:05:13.733" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160130 01:05:13.734" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160130 01:05:13.732" starttime="20160130 01:05:13.381"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Balance of the calling party is: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:13.735" level="INFO">Balance of the calling party is: 9980000</msg>
<status status="PASS" endtime="20160130 01:05:13.735" starttime="20160130 01:05:13.734"></status>
</kw>
<doc>Test will make a MOC call to unknown subscriber

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:05:13.736" starttime="20160130 01:05:04.969"></status>
</test>
<doc>Testing the prepaid MOC call to the unknown subscriber

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:05:13.740" starttime="20160130 01:05:00.994"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:05:13.746" starttime="20160130 01:05:00.962"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:05:13.765" starttime="20160130 01:01:20.600"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:05:13.800" starttime="20160130 01:01:20.560"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC" id="s1-s1-s1-s3" name="MTC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon" id="s1-s1-s1-s3-s1" name="MTC PREPAID-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon/MTC_PREPAID-Abandon-robot-suite.txt" id="s1-s1-s1-s3-s1-s1" name="MTC PREPAID-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160130 01:05:14.130" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:05:14.135" level="INFO">${date} = Sat Jan 30 01:05:14 CET 2016</msg>
<status status="PASS" endtime="20160130 01:05:14.133" starttime="20160130 01:05:14.121"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:14.138" level="INFO">Date and time: Sat Jan 30 01:05:14 CET 2016</msg>
<status status="PASS" endtime="20160130 01:05:14.139" starttime="20160130 01:05:14.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:14.143" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160130 01:05:14.144" starttime="20160130 01:05:14.140"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:14.195" starttime="20160130 01:05:14.193"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:14.243" starttime="20160130 01:05:14.203"></status>
</kw>
<msg timestamp="20160130 01:05:14.244" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20160130 01:05:14.244" starttime="20160130 01:05:14.196"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:14.250" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:14.659" level="INFO">Read output: Last login: Sat Jan 30 00:05:01 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:14.660" starttime="20160130 01:05:14.248"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:14.660" starttime="20160130 01:05:14.245"></status>
</kw>
<msg timestamp="20160130 01:05:14.661" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20160130 01:05:14.661" starttime="20160130 01:05:14.185"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:14.665" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:14.665" starttime="20160130 01:05:14.662"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:14.667" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160130 01:05:15.016" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:15.018" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:05:15.017" starttime="20160130 01:05:14.666"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.021" starttime="20160130 01:05:15.020"></status>
</kw>
<msg timestamp="20160130 01:05:15.022" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:15.022" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:15.022" starttime="20160130 01:05:15.019"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.027" starttime="20160130 01:05:15.026"></status>
</kw>
<msg timestamp="20160130 01:05:15.028" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:15.028" starttime="20160130 01:05:15.023"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160130 01:05:15.030" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:05:15.030" starttime="20160130 01:05:15.029"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:15.033" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:15.032" starttime="20160130 01:05:15.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.034" starttime="20160130 01:05:15.033"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.040" starttime="20160130 01:05:15.038"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.043" starttime="20160130 01:05:15.040"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:15.043" starttime="20160130 01:05:15.035"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.047" starttime="20160130 01:05:15.046"></status>
</kw>
<msg timestamp="20160130 01:05:15.048" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:15.048" starttime="20160130 01:05:15.044"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.049" starttime="20160130 01:05:15.049"></status>
</kw>
<msg timestamp="20160130 01:05:15.051" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160130 01:05:15.051" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:15.050" starttime="20160130 01:05:14.159"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.074" starttime="20160130 01:05:15.073"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.116" starttime="20160130 01:05:15.077"></status>
</kw>
<msg timestamp="20160130 01:05:15.117" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20160130 01:05:15.116" starttime="20160130 01:05:15.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:15.122" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:15.544" level="INFO">Read output: Last login: Sat Jan 30 00:05:02 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:15.545" starttime="20160130 01:05:15.121"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:15.546" starttime="20160130 01:05:15.118"></status>
</kw>
<msg timestamp="20160130 01:05:15.547" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20160130 01:05:15.547" starttime="20160130 01:05:15.069"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:15.552" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:15.551" starttime="20160130 01:05:15.548"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:15.554" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160130 01:05:15.930" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:15.931" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:05:15.931" starttime="20160130 01:05:15.552"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.935" starttime="20160130 01:05:15.933"></status>
</kw>
<msg timestamp="20160130 01:05:15.935" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:15.936" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:15.935" starttime="20160130 01:05:15.932"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.941" starttime="20160130 01:05:15.940"></status>
</kw>
<msg timestamp="20160130 01:05:15.941" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:15.941" starttime="20160130 01:05:15.936"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160130 01:05:15.943" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:05:15.943" starttime="20160130 01:05:15.942"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:15.945" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:15.944" starttime="20160130 01:05:15.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.946" starttime="20160130 01:05:15.945"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.951" starttime="20160130 01:05:15.950"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.952" starttime="20160130 01:05:15.951"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:15.954" starttime="20160130 01:05:15.947"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.958" starttime="20160130 01:05:15.957"></status>
</kw>
<msg timestamp="20160130 01:05:15.958" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:15.958" starttime="20160130 01:05:15.954"></status>
</kw>
<msg timestamp="20160130 01:05:15.959" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160130 01:05:15.960" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:15.959" starttime="20160130 01:05:15.058"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:15.983" starttime="20160130 01:05:15.982"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:16.025" starttime="20160130 01:05:15.986"></status>
</kw>
<msg timestamp="20160130 01:05:16.027" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20160130 01:05:16.026" starttime="20160130 01:05:15.983"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:16.032" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:16.463" level="INFO">Read output: Last login: Sat Jan 30 00:05:03 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:16.463" starttime="20160130 01:05:16.030"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:16.464" starttime="20160130 01:05:16.027"></status>
</kw>
<msg timestamp="20160130 01:05:16.465" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20160130 01:05:16.465" starttime="20160130 01:05:15.978"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:16.469" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:16.469" starttime="20160130 01:05:16.466"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:16.471" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160130 01:05:16.651" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:16.652" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:05:16.652" starttime="20160130 01:05:16.470"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:16.655" starttime="20160130 01:05:16.654"></status>
</kw>
<msg timestamp="20160130 01:05:16.656" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:16.656" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:16.656" starttime="20160130 01:05:16.653"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:16.660" starttime="20160130 01:05:16.659"></status>
</kw>
<msg timestamp="20160130 01:05:16.661" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:16.661" starttime="20160130 01:05:16.657"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:05:16.663" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:05:16.662" starttime="20160130 01:05:16.661"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:16.665" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:16.665" starttime="20160130 01:05:16.663"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:16.666" starttime="20160130 01:05:16.665"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:16.671" starttime="20160130 01:05:16.670"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:16.672" starttime="20160130 01:05:16.672"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:16.674" starttime="20160130 01:05:16.667"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:16.678" starttime="20160130 01:05:16.677"></status>
</kw>
<msg timestamp="20160130 01:05:16.678" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:16.678" starttime="20160130 01:05:16.674"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:16.680" starttime="20160130 01:05:16.679"></status>
</kw>
<msg timestamp="20160130 01:05:16.681" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160130 01:05:16.681" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:16.680" starttime="20160130 01:05:15.967"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:16.702" starttime="20160130 01:05:16.702"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:16.772" starttime="20160130 01:05:16.706"></status>
</kw>
<msg timestamp="20160130 01:05:16.774" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20160130 01:05:16.773" starttime="20160130 01:05:16.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:16.780" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:17.183" level="INFO">Read output: Last login: Sat Jan 30 00:05:04 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:17.183" starttime="20160130 01:05:16.779"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:17.184" starttime="20160130 01:05:16.775"></status>
</kw>
<msg timestamp="20160130 01:05:17.186" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20160130 01:05:17.186" starttime="20160130 01:05:16.698"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:17.190" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:17.190" starttime="20160130 01:05:17.187"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:17.192" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160130 01:05:17.269" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:17.270" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:05:17.270" starttime="20160130 01:05:17.191"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.273" starttime="20160130 01:05:17.272"></status>
</kw>
<msg timestamp="20160130 01:05:17.274" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:17.275" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:17.274" starttime="20160130 01:05:17.271"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.279" starttime="20160130 01:05:17.278"></status>
</kw>
<msg timestamp="20160130 01:05:17.279" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:17.279" starttime="20160130 01:05:17.275"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:05:17.281" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:05:17.281" starttime="20160130 01:05:17.280"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:17.283" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:17.283" starttime="20160130 01:05:17.282"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.284" starttime="20160130 01:05:17.284"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.290" starttime="20160130 01:05:17.289"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.292" starttime="20160130 01:05:17.290"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:17.293" starttime="20160130 01:05:17.285"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.297" starttime="20160130 01:05:17.296"></status>
</kw>
<msg timestamp="20160130 01:05:17.297" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:17.297" starttime="20160130 01:05:17.293"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.299" starttime="20160130 01:05:17.298"></status>
</kw>
<msg timestamp="20160130 01:05:17.300" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160130 01:05:17.300" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:17.299" starttime="20160130 01:05:16.688"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:17.302" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:17.302" starttime="20160130 01:05:17.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:17.304" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:17.304" starttime="20160130 01:05:17.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:17.306" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:17.306" starttime="20160130 01:05:17.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:17.308" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:17.308" starttime="20160130 01:05:17.307"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160130 01:05:17.310" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:17.310" starttime="20160130 01:05:17.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160130 01:05:17.311" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:17.312" starttime="20160130 01:05:17.310"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160130 01:05:17.313" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:17.313" starttime="20160130 01:05:17.312"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160130 01:05:17.315" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:17.315" starttime="20160130 01:05:17.314"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.323" starttime="20160130 01:05:17.318"></status>
</kw>
<msg timestamp="20160130 01:05:17.326" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:05:17.325" starttime="20160130 01:05:17.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160130 01:05:17.328" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:05:17.328" starttime="20160130 01:05:17.326"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:17.328" starttime="20160130 01:05:14.116"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s1-t1" name="Run MTC Abandon Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.334" starttime="20160130 01:05:17.333"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160130 01:05:17.335" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160130 01:05:17.335" starttime="20160130 01:05:17.334"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160130 01:05:17.342" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160130 01:05:17.342" starttime="20160130 01:05:17.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160130 01:05:17.344" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160130 01:05:17.344" starttime="20160130 01:05:17.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160130 01:05:17.345" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160130 01:05:17.346" starttime="20160130 01:05:17.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160130 01:05:17.347" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160130 01:05:17.347" starttime="20160130 01:05:17.346"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:05:17.349" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:17.349" starttime="20160130 01:05:17.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:05:17.350" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160130 01:05:17.351" starttime="20160130 01:05:17.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160130 01:05:17.352" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:17.352" starttime="20160130 01:05:17.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160130 01:05:17.354" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160130 01:05:17.354" starttime="20160130 01:05:17.353"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160130 01:05:17.355" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:05:17.355" starttime="20160130 01:05:17.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160130 01:05:17.357" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160130 01:05:17.357" starttime="20160130 01:05:17.356"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:17.363" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:17.364" starttime="20160130 01:05:17.362"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:17.364" starttime="20160130 01:05:17.361"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:17.367" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:17.367" starttime="20160130 01:05:17.365"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:17.367" starttime="20160130 01:05:17.365"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:17.370" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:17.370" starttime="20160130 01:05:17.369"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:17.371" starttime="20160130 01:05:17.368"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:17.371" starttime="20160130 01:05:17.358"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:05:17.373" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:05:17.373" starttime="20160130 01:05:17.372"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.375" starttime="20160130 01:05:17.374"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.376" starttime="20160130 01:05:17.375"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.378" starttime="20160130 01:05:17.377"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.379" starttime="20160130 01:05:17.378"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.380" starttime="20160130 01:05:17.379"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.382" starttime="20160130 01:05:17.381"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.383" starttime="20160130 01:05:17.382"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.385" starttime="20160130 01:05:17.384"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.386" starttime="20160130 01:05:17.385"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.388" starttime="20160130 01:05:17.387"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.389" starttime="20160130 01:05:17.388"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:17.390" starttime="20160130 01:05:17.389"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:05:17.393" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160130 01:05:18.447" level="INFO">01:05:18,441 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:18.448" starttime="20160130 01:05:17.392"></status>
</kw>
<msg timestamp="20160130 01:05:18.452" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:18.452" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:05:18.450" starttime="20160130 01:05:17.391"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:18.464" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:05:18.463" starttime="20160130 01:05:18.461"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:18.468" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:18.467" starttime="20160130 01:05:18.465"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:18.471" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:18.471" starttime="20160130 01:05:18.469"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:18.477" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:18.479" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:18.480" starttime="20160130 01:05:18.475"></status>
</kw>
<msg timestamp="20160130 01:05:18.481" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:18.482" level="INFO">${return_log_entry} = 2016-01-30 01:05:18,441 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:18.480" starttime="20160130 01:05:18.473"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:18.491" starttime="20160130 01:05:18.489"></status>
</kw>
<msg timestamp="20160130 01:05:18.492" level="INFO">${return_log_entry} = 2016-01-30 01:05:18,441 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:18.492" starttime="20160130 01:05:18.483"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:18.501" starttime="20160130 01:05:18.499"></status>
</kw>
<msg timestamp="20160130 01:05:18.503" level="INFO">${return_log_entry} = 2016-01-30 01:05:18,441 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:18.502" starttime="20160130 01:05:18.494"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:18.512" starttime="20160130 01:05:18.510"></status>
</kw>
<msg timestamp="20160130 01:05:18.514" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:18.513" starttime="20160130 01:05:18.504"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:18.527" starttime="20160130 01:05:18.525"></status>
</kw>
<msg timestamp="20160130 01:05:18.528" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:18.527" starttime="20160130 01:05:18.515"></status>
</kw>
<msg timestamp="20160130 01:05:18.530" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:18.530" starttime="20160130 01:05:18.454"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:18.540" starttime="20160130 01:05:18.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:18.543" starttime="20160130 01:05:18.541"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:18.545" starttime="20160130 01:05:18.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:05:18.557" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:05:18.558" starttime="20160130 01:05:18.554"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:18.559" starttime="20160130 01:05:18.552"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:18.560" starttime="20160130 01:05:18.546"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:18.561" starttime="20160130 01:05:18.532"></status>
</kw>
<msg timestamp="20160130 01:05:18.563" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160130 01:05:18.562" starttime="20160130 01:05:17.337"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160130 01:05:18.570" level="INFO">${calling_party_msisdn} = 642041010001</msg>
<status status="PASS" endtime="20160130 01:05:18.569" starttime="20160130 01:05:18.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160130 01:05:18.573" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:18.573" starttime="20160130 01:05:18.571"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:18.576" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160130 01:05:18.577" starttime="20160130 01:05:18.574"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC abandon *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:18.579" starttime="20160130 01:05:18.578"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MTC abandon call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:18.582" level="INFO">Running the MTC abandon call...</msg>
<status status="PASS" endtime="20160130 01:05:18.583" starttime="20160130 01:05:18.580"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Abandon">
<doc>Runs an abandoned non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-abandon</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160130 01:05:18.612" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv</msg>
<status status="PASS" endtime="20160130 01:05:18.611" starttime="20160130 01:05:18.609"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160130 01:05:18.616" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv</msg>
<status status="PASS" endtime="20160130 01:05:18.615" starttime="20160130 01:05:18.613"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160130 01:05:18.620" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini</msg>
<status status="PASS" endtime="20160130 01:05:18.619" starttime="20160130 01:05:18.617"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160130 01:05:18.623" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs</msg>
<status status="PASS" endtime="20160130 01:05:18.623" starttime="20160130 01:05:18.621"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:18.626" starttime="20160130 01:05:18.625"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:05:18.631" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:18.632" starttime="20160130 01:05:18.627"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:18.635" starttime="20160130 01:05:18.633"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160130 01:05:18.639" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:18.640" starttime="20160130 01:05:18.636"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:05:18.643" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:18.644" starttime="20160130 01:05:18.641"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:18.645" starttime="20160130 01:05:18.644"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160130 01:05:18.647" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:18.647" starttime="20160130 01:05:18.645"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160130 01:05:18.650" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:18.650" starttime="20160130 01:05:18.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:18.651" starttime="20160130 01:05:18.650"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160130 01:05:18.658" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:05:30.828" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:05:30.827" starttime="20160130 01:05:18.652"></status>
</kw>
<msg timestamp="20160130 01:05:30.829" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:05:30.829" starttime="20160130 01:05:18.598"></status>
</kw>
<msg timestamp="20160130 01:05:30.831" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:05:30.830" starttime="20160130 01:05:18.586"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:30.832" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160130 01:05:30.832" starttime="20160130 01:05:30.831"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160130 01:05:30.834" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:30.834" starttime="20160130 01:05:30.833"></status>
</kw>
<doc>Test will make an abandoned MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:05:30.835" starttime="20160130 01:05:17.329"></status>
</test>
<doc>Testing the abandoned MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:05:30.839" starttime="20160130 01:05:13.850"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:05:30.845" starttime="20160130 01:05:13.836"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy" id="s1-s1-s1-s3-s2" name="MTC PREPAID-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy/MTC_PREPAID-Busy-robot-suite.txt" id="s1-s1-s1-s3-s2-s1" name="MTC PREPAID-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160130 01:05:30.997" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:05:31.001" level="INFO">${date} = Sat Jan 30 01:05:30 CET 2016</msg>
<status status="PASS" endtime="20160130 01:05:31.000" starttime="20160130 01:05:30.994"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:31.003" level="INFO">Date and time: Sat Jan 30 01:05:30 CET 2016</msg>
<status status="PASS" endtime="20160130 01:05:31.003" starttime="20160130 01:05:31.002"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:31.005" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160130 01:05:31.005" starttime="20160130 01:05:31.004"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:31.026" starttime="20160130 01:05:31.025"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:31.109" starttime="20160130 01:05:31.030"></status>
</kw>
<msg timestamp="20160130 01:05:31.110" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20160130 01:05:31.110" starttime="20160130 01:05:31.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:31.115" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:31.535" level="INFO">Read output: Last login: Sat Jan 30 00:05:14 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:31.535" starttime="20160130 01:05:31.114"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:31.536" starttime="20160130 01:05:31.111"></status>
</kw>
<msg timestamp="20160130 01:05:31.537" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20160130 01:05:31.537" starttime="20160130 01:05:31.021"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:31.541" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:31.540" starttime="20160130 01:05:31.538"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:31.542" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160130 01:05:31.823" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:31.824" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:05:31.823" starttime="20160130 01:05:31.541"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:31.827" starttime="20160130 01:05:31.825"></status>
</kw>
<msg timestamp="20160130 01:05:31.827" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:31.828" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:31.827" starttime="20160130 01:05:31.824"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:31.832" starttime="20160130 01:05:31.831"></status>
</kw>
<msg timestamp="20160130 01:05:31.832" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:31.832" starttime="20160130 01:05:31.828"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160130 01:05:31.834" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:05:31.834" starttime="20160130 01:05:31.833"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:31.836" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:31.836" starttime="20160130 01:05:31.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:31.837" starttime="20160130 01:05:31.836"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:31.842" starttime="20160130 01:05:31.841"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:31.848" starttime="20160130 01:05:31.842"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:31.849" starttime="20160130 01:05:31.838"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:31.853" starttime="20160130 01:05:31.852"></status>
</kw>
<msg timestamp="20160130 01:05:31.853" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:31.853" starttime="20160130 01:05:31.849"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:31.855" starttime="20160130 01:05:31.854"></status>
</kw>
<msg timestamp="20160130 01:05:31.856" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160130 01:05:31.856" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:31.855" starttime="20160130 01:05:31.011"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:31.877" starttime="20160130 01:05:31.876"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:31.932" starttime="20160130 01:05:31.880"></status>
</kw>
<msg timestamp="20160130 01:05:31.934" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20160130 01:05:31.933" starttime="20160130 01:05:31.877"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:31.944" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:32.352" level="INFO">Read output: Last login: Sat Jan 30 00:05:15 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:32.353" starttime="20160130 01:05:31.942"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:32.355" starttime="20160130 01:05:31.935"></status>
</kw>
<msg timestamp="20160130 01:05:32.359" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20160130 01:05:32.357" starttime="20160130 01:05:31.872"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:32.367" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:32.366" starttime="20160130 01:05:32.360"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:32.370" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160130 01:05:32.738" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:32.740" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:05:32.739" starttime="20160130 01:05:32.368"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:32.747" starttime="20160130 01:05:32.744"></status>
</kw>
<msg timestamp="20160130 01:05:32.748" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:32.749" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:32.748" starttime="20160130 01:05:32.742"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:32.758" starttime="20160130 01:05:32.756"></status>
</kw>
<msg timestamp="20160130 01:05:32.760" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:32.759" starttime="20160130 01:05:32.750"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160130 01:05:32.763" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:05:32.763" starttime="20160130 01:05:32.761"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:32.767" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:32.766" starttime="20160130 01:05:32.764"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:32.770" starttime="20160130 01:05:32.768"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:32.780" starttime="20160130 01:05:32.778"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:32.786" starttime="20160130 01:05:32.782"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:32.786" starttime="20160130 01:05:32.771"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:32.791" starttime="20160130 01:05:32.790"></status>
</kw>
<msg timestamp="20160130 01:05:32.792" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:32.792" starttime="20160130 01:05:32.787"></status>
</kw>
<msg timestamp="20160130 01:05:32.794" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160130 01:05:32.794" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:32.793" starttime="20160130 01:05:31.862"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:32.815" starttime="20160130 01:05:32.815"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:32.870" starttime="20160130 01:05:32.819"></status>
</kw>
<msg timestamp="20160130 01:05:32.872" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20160130 01:05:32.871" starttime="20160130 01:05:32.816"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:32.882" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:33.296" level="INFO">Read output: Last login: Sat Jan 30 00:05:16 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:33.297" starttime="20160130 01:05:32.880"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:33.298" starttime="20160130 01:05:32.873"></status>
</kw>
<msg timestamp="20160130 01:05:33.300" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20160130 01:05:33.299" starttime="20160130 01:05:32.811"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:33.303" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:33.303" starttime="20160130 01:05:33.300"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:33.305" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160130 01:05:33.483" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:33.484" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:05:33.484" starttime="20160130 01:05:33.304"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:33.487" starttime="20160130 01:05:33.486"></status>
</kw>
<msg timestamp="20160130 01:05:33.488" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:33.488" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:33.487" starttime="20160130 01:05:33.485"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:33.492" starttime="20160130 01:05:33.491"></status>
</kw>
<msg timestamp="20160130 01:05:33.493" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:33.493" starttime="20160130 01:05:33.489"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:05:33.495" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:05:33.494" starttime="20160130 01:05:33.493"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:33.529" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:33.529" starttime="20160130 01:05:33.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:33.531" starttime="20160130 01:05:33.530"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:33.536" starttime="20160130 01:05:33.535"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:33.538" starttime="20160130 01:05:33.537"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:33.539" starttime="20160130 01:05:33.532"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:33.544" starttime="20160130 01:05:33.543"></status>
</kw>
<msg timestamp="20160130 01:05:33.545" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:33.545" starttime="20160130 01:05:33.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:33.546" starttime="20160130 01:05:33.545"></status>
</kw>
<msg timestamp="20160130 01:05:33.548" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160130 01:05:33.548" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:33.547" starttime="20160130 01:05:32.800"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:33.569" starttime="20160130 01:05:33.568"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:33.622" starttime="20160130 01:05:33.572"></status>
</kw>
<msg timestamp="20160130 01:05:33.624" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20160130 01:05:33.623" starttime="20160130 01:05:33.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:33.634" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:34.031" level="INFO">Read output: Last login: Sat Jan 30 00:05:16 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:34.032" starttime="20160130 01:05:33.632"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:34.033" starttime="20160130 01:05:33.625"></status>
</kw>
<msg timestamp="20160130 01:05:34.034" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20160130 01:05:34.034" starttime="20160130 01:05:33.564"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:34.038" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:34.038" starttime="20160130 01:05:34.035"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:34.040" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160130 01:05:34.116" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:34.118" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:05:34.117" starttime="20160130 01:05:34.039"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.125" starttime="20160130 01:05:34.122"></status>
</kw>
<msg timestamp="20160130 01:05:34.126" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:34.127" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:34.126" starttime="20160130 01:05:34.120"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.136" starttime="20160130 01:05:34.134"></status>
</kw>
<msg timestamp="20160130 01:05:34.137" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:34.137" starttime="20160130 01:05:34.128"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:05:34.141" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:05:34.140" starttime="20160130 01:05:34.138"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:34.145" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:34.144" starttime="20160130 01:05:34.142"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.148" starttime="20160130 01:05:34.146"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.158" starttime="20160130 01:05:34.156"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.163" starttime="20160130 01:05:34.159"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:34.166" starttime="20160130 01:05:34.149"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.170" starttime="20160130 01:05:34.170"></status>
</kw>
<msg timestamp="20160130 01:05:34.171" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:34.171" starttime="20160130 01:05:34.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.172" starttime="20160130 01:05:34.172"></status>
</kw>
<msg timestamp="20160130 01:05:34.174" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160130 01:05:34.174" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:34.173" starttime="20160130 01:05:33.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:34.176" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:34.176" starttime="20160130 01:05:34.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:34.178" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:34.178" starttime="20160130 01:05:34.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:34.180" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:34.180" starttime="20160130 01:05:34.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:34.182" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:34.182" starttime="20160130 01:05:34.181"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160130 01:05:34.184" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:34.184" starttime="20160130 01:05:34.183"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160130 01:05:34.185" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:34.186" starttime="20160130 01:05:34.185"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160130 01:05:34.187" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:34.188" starttime="20160130 01:05:34.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160130 01:05:34.189" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:34.189" starttime="20160130 01:05:34.188"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.195" starttime="20160130 01:05:34.193"></status>
</kw>
<msg timestamp="20160130 01:05:34.196" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:05:34.195" starttime="20160130 01:05:34.190"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160130 01:05:34.198" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:05:34.198" starttime="20160130 01:05:34.196"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:34.198" starttime="20160130 01:05:30.991"></status>
</kw>
<test id="s1-s1-s1-s3-s2-s1-t1" name="Run MTC Busy Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.204" starttime="20160130 01:05:34.203"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160130 01:05:34.205" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160130 01:05:34.205" starttime="20160130 01:05:34.204"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160130 01:05:34.212" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160130 01:05:34.212" starttime="20160130 01:05:34.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160130 01:05:34.214" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160130 01:05:34.214" starttime="20160130 01:05:34.213"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160130 01:05:34.215" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160130 01:05:34.216" starttime="20160130 01:05:34.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160130 01:05:34.217" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160130 01:05:34.217" starttime="20160130 01:05:34.216"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:05:34.219" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:34.219" starttime="20160130 01:05:34.218"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:05:34.220" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160130 01:05:34.221" starttime="20160130 01:05:34.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160130 01:05:34.222" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:34.222" starttime="20160130 01:05:34.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160130 01:05:34.224" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160130 01:05:34.224" starttime="20160130 01:05:34.223"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160130 01:05:34.225" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:05:34.226" starttime="20160130 01:05:34.224"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160130 01:05:34.227" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160130 01:05:34.227" starttime="20160130 01:05:34.226"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:34.234" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:34.234" starttime="20160130 01:05:34.232"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:34.234" starttime="20160130 01:05:34.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:34.237" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:34.237" starttime="20160130 01:05:34.236"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:34.238" starttime="20160130 01:05:34.235"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:34.240" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:34.241" starttime="20160130 01:05:34.239"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:34.241" starttime="20160130 01:05:34.238"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:34.241" starttime="20160130 01:05:34.228"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:05:34.243" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:05:34.244" starttime="20160130 01:05:34.242"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.245" starttime="20160130 01:05:34.244"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.247" starttime="20160130 01:05:34.246"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.248" starttime="20160130 01:05:34.247"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.249" starttime="20160130 01:05:34.249"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.251" starttime="20160130 01:05:34.250"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.252" starttime="20160130 01:05:34.251"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.254" starttime="20160130 01:05:34.253"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.255" starttime="20160130 01:05:34.254"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.257" starttime="20160130 01:05:34.256"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.258" starttime="20160130 01:05:34.257"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.260" starttime="20160130 01:05:34.259"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:34.261" starttime="20160130 01:05:34.260"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:05:34.263" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160130 01:05:35.366" level="INFO">01:05:35,358 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:35.367" starttime="20160130 01:05:34.262"></status>
</kw>
<msg timestamp="20160130 01:05:35.371" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:35.371" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:05:35.369" starttime="20160130 01:05:34.262"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:35.383" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:05:35.383" starttime="20160130 01:05:35.380"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:35.388" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:35.387" starttime="20160130 01:05:35.385"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:35.391" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:35.391" starttime="20160130 01:05:35.389"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:35.397" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:35.399" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:35.400" starttime="20160130 01:05:35.395"></status>
</kw>
<msg timestamp="20160130 01:05:35.401" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:35.402" level="INFO">${return_log_entry} = 2016-01-30 01:05:35,358 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:35.401" starttime="20160130 01:05:35.393"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:35.411" starttime="20160130 01:05:35.409"></status>
</kw>
<msg timestamp="20160130 01:05:35.413" level="INFO">${return_log_entry} = 2016-01-30 01:05:35,358 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:35.412" starttime="20160130 01:05:35.403"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:35.422" starttime="20160130 01:05:35.420"></status>
</kw>
<msg timestamp="20160130 01:05:35.423" level="INFO">${return_log_entry} = 2016-01-30 01:05:35,358 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:35.423" starttime="20160130 01:05:35.414"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:35.433" starttime="20160130 01:05:35.430"></status>
</kw>
<msg timestamp="20160130 01:05:35.434" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:35.434" starttime="20160130 01:05:35.424"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:35.447" starttime="20160130 01:05:35.445"></status>
</kw>
<msg timestamp="20160130 01:05:35.449" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:35.448" starttime="20160130 01:05:35.435"></status>
</kw>
<msg timestamp="20160130 01:05:35.451" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:35.451" starttime="20160130 01:05:35.374"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:35.461" starttime="20160130 01:05:35.459"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:35.464" starttime="20160130 01:05:35.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:35.466" starttime="20160130 01:05:35.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:05:35.479" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:05:35.479" starttime="20160130 01:05:35.476"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:35.480" starttime="20160130 01:05:35.474"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:35.481" starttime="20160130 01:05:35.468"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:35.482" starttime="20160130 01:05:35.453"></status>
</kw>
<msg timestamp="20160130 01:05:35.485" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160130 01:05:35.484" starttime="20160130 01:05:34.207"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160130 01:05:35.491" level="INFO">${calling_party_msisdn} = 642041010001</msg>
<status status="PASS" endtime="20160130 01:05:35.491" starttime="20160130 01:05:35.486"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160130 01:05:35.494" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:35.495" starttime="20160130 01:05:35.493"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:35.498" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160130 01:05:35.499" starttime="20160130 01:05:35.496"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run busy MTC *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:35.501" starttime="20160130 01:05:35.500"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:35.504" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160130 01:05:35.505" starttime="20160130 01:05:35.502"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Busy">
<doc>Runs a busy non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-busy</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160130 01:05:35.524" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv</msg>
<status status="PASS" endtime="20160130 01:05:35.524" starttime="20160130 01:05:35.523"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160130 01:05:35.526" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv</msg>
<status status="PASS" endtime="20160130 01:05:35.526" starttime="20160130 01:05:35.525"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160130 01:05:35.528" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini</msg>
<status status="PASS" endtime="20160130 01:05:35.528" starttime="20160130 01:05:35.527"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160130 01:05:35.530" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs</msg>
<status status="PASS" endtime="20160130 01:05:35.529" starttime="20160130 01:05:35.528"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:35.531" starttime="20160130 01:05:35.530"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:05:35.533" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:35.534" starttime="20160130 01:05:35.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:35.535" starttime="20160130 01:05:35.534"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160130 01:05:35.537" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:35.537" starttime="20160130 01:05:35.535"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:05:35.540" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:35.540" starttime="20160130 01:05:35.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:35.541" starttime="20160130 01:05:35.540"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160130 01:05:35.543" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:35.543" starttime="20160130 01:05:35.542"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160130 01:05:35.546" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:35.546" starttime="20160130 01:05:35.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:35.547" starttime="20160130 01:05:35.547"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160130 01:05:35.554" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:05:43.948" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:05:43.946" starttime="20160130 01:05:35.548"></status>
</kw>
<msg timestamp="20160130 01:05:43.949" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:05:43.949" starttime="20160130 01:05:35.518"></status>
</kw>
<msg timestamp="20160130 01:05:43.951" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:05:43.950" starttime="20160130 01:05:35.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:43.952" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160130 01:05:43.953" starttime="20160130 01:05:43.951"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160130 01:05:43.954" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:43.955" starttime="20160130 01:05:43.953"></status>
</kw>
<doc>Test will make a busy MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:05:43.955" starttime="20160130 01:05:34.199"></status>
</test>
<doc>Testing the prepaid busy MTC call (called party is busy)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:05:43.959" starttime="20160130 01:05:30.865"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:05:43.965" starttime="20160130 01:05:30.850"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer" id="s1-s1-s1-s3-s3" name="MTC PREPAID-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer/MTC_PREPAID-NoAnswer-robot-suite.txt" id="s1-s1-s1-s3-s3-s1" name="MTC PREPAID-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160130 01:05:44.121" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:05:44.125" level="INFO">${date} = Sat Jan 30 01:05:44 CET 2016</msg>
<status status="PASS" endtime="20160130 01:05:44.124" starttime="20160130 01:05:44.118"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:44.126" level="INFO">Date and time: Sat Jan 30 01:05:44 CET 2016</msg>
<status status="PASS" endtime="20160130 01:05:44.127" starttime="20160130 01:05:44.125"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:44.128" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160130 01:05:44.128" starttime="20160130 01:05:44.127"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:44.150" starttime="20160130 01:05:44.149"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:44.192" starttime="20160130 01:05:44.153"></status>
</kw>
<msg timestamp="20160130 01:05:44.192" level="INFO">${ssh_connection} = 41</msg>
<status status="PASS" endtime="20160130 01:05:44.192" starttime="20160130 01:05:44.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:44.197" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:44.611" level="INFO">Read output: Last login: Sat Jan 30 00:05:31 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:44.611" starttime="20160130 01:05:44.196"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:44.612" starttime="20160130 01:05:44.193"></status>
</kw>
<msg timestamp="20160130 01:05:44.613" level="INFO">${ssh_connection} = 41</msg>
<status status="PASS" endtime="20160130 01:05:44.613" starttime="20160130 01:05:44.145"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:44.617" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:44.617" starttime="20160130 01:05:44.614"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:44.618" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160130 01:05:44.860" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:44.861" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:05:44.861" starttime="20160130 01:05:44.617"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:44.864" starttime="20160130 01:05:44.863"></status>
</kw>
<msg timestamp="20160130 01:05:44.865" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:44.866" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:44.865" starttime="20160130 01:05:44.862"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:44.870" starttime="20160130 01:05:44.869"></status>
</kw>
<msg timestamp="20160130 01:05:44.871" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:44.871" starttime="20160130 01:05:44.866"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160130 01:05:44.873" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:05:44.873" starttime="20160130 01:05:44.872"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:44.875" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:44.875" starttime="20160130 01:05:44.874"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:44.876" starttime="20160130 01:05:44.876"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:44.881" starttime="20160130 01:05:44.880"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:44.885" starttime="20160130 01:05:44.882"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:44.886" starttime="20160130 01:05:44.877"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:44.890" starttime="20160130 01:05:44.889"></status>
</kw>
<msg timestamp="20160130 01:05:44.891" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:44.891" starttime="20160130 01:05:44.887"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:44.893" starttime="20160130 01:05:44.892"></status>
</kw>
<msg timestamp="20160130 01:05:44.894" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160130 01:05:44.894" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:44.893" starttime="20160130 01:05:44.135"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:44.915" starttime="20160130 01:05:44.914"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:44.970" starttime="20160130 01:05:44.918"></status>
</kw>
<msg timestamp="20160130 01:05:44.972" level="INFO">${ssh_connection} = 42</msg>
<status status="PASS" endtime="20160130 01:05:44.971" starttime="20160130 01:05:44.916"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:44.982" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:45.383" level="INFO">Read output: Last login: Sat Jan 30 00:05:32 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:45.385" starttime="20160130 01:05:44.980"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:45.387" starttime="20160130 01:05:44.973"></status>
</kw>
<msg timestamp="20160130 01:05:45.391" level="INFO">${ssh_connection} = 42</msg>
<status status="PASS" endtime="20160130 01:05:45.389" starttime="20160130 01:05:44.910"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:45.395" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:45.395" starttime="20160130 01:05:45.392"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:45.397" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160130 01:05:45.773" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:45.775" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:05:45.775" starttime="20160130 01:05:45.396"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:45.782" starttime="20160130 01:05:45.779"></status>
</kw>
<msg timestamp="20160130 01:05:45.783" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:45.784" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:45.783" starttime="20160130 01:05:45.777"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:45.795" starttime="20160130 01:05:45.793"></status>
</kw>
<msg timestamp="20160130 01:05:45.796" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:45.796" starttime="20160130 01:05:45.786"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160130 01:05:45.800" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:05:45.800" starttime="20160130 01:05:45.798"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:45.804" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:45.803" starttime="20160130 01:05:45.801"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:45.806" starttime="20160130 01:05:45.805"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:45.817" starttime="20160130 01:05:45.815"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:45.823" starttime="20160130 01:05:45.818"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:45.824" starttime="20160130 01:05:45.808"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:45.834" starttime="20160130 01:05:45.833"></status>
</kw>
<msg timestamp="20160130 01:05:45.836" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:45.835" starttime="20160130 01:05:45.825"></status>
</kw>
<msg timestamp="20160130 01:05:45.839" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160130 01:05:45.840" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:45.838" starttime="20160130 01:05:44.900"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:45.886" starttime="20160130 01:05:45.884"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:45.934" starttime="20160130 01:05:45.893"></status>
</kw>
<msg timestamp="20160130 01:05:45.935" level="INFO">${ssh_connection} = 43</msg>
<status status="PASS" endtime="20160130 01:05:45.935" starttime="20160130 01:05:45.887"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:45.940" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:46.363" level="INFO">Read output: Last login: Sat Jan 30 00:05:33 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:46.364" starttime="20160130 01:05:45.939"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:46.365" starttime="20160130 01:05:45.936"></status>
</kw>
<msg timestamp="20160130 01:05:46.368" level="INFO">${ssh_connection} = 43</msg>
<status status="PASS" endtime="20160130 01:05:46.367" starttime="20160130 01:05:45.875"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:46.372" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:46.371" starttime="20160130 01:05:46.369"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:46.373" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160130 01:05:46.550" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:46.550" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:05:46.550" starttime="20160130 01:05:46.372"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:46.553" starttime="20160130 01:05:46.552"></status>
</kw>
<msg timestamp="20160130 01:05:46.554" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:46.554" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:46.554" starttime="20160130 01:05:46.551"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:46.558" starttime="20160130 01:05:46.557"></status>
</kw>
<msg timestamp="20160130 01:05:46.559" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:46.559" starttime="20160130 01:05:46.555"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:05:46.561" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:05:46.560" starttime="20160130 01:05:46.559"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:46.562" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:46.562" starttime="20160130 01:05:46.561"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:46.563" starttime="20160130 01:05:46.563"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:46.568" starttime="20160130 01:05:46.567"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:46.571" starttime="20160130 01:05:46.569"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:46.571" starttime="20160130 01:05:46.564"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:46.576" starttime="20160130 01:05:46.575"></status>
</kw>
<msg timestamp="20160130 01:05:46.576" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:46.576" starttime="20160130 01:05:46.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:46.578" starttime="20160130 01:05:46.577"></status>
</kw>
<msg timestamp="20160130 01:05:46.579" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160130 01:05:46.579" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:46.579" starttime="20160130 01:05:45.854"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:46.600" starttime="20160130 01:05:46.600"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:46.641" starttime="20160130 01:05:46.604"></status>
</kw>
<msg timestamp="20160130 01:05:46.642" level="INFO">${ssh_connection} = 44</msg>
<status status="PASS" endtime="20160130 01:05:46.641" starttime="20160130 01:05:46.601"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:46.646" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:47.049" level="INFO">Read output: Last login: Sat Jan 30 00:05:33 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:47.050" starttime="20160130 01:05:46.645"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:47.051" starttime="20160130 01:05:46.642"></status>
</kw>
<msg timestamp="20160130 01:05:47.053" level="INFO">${ssh_connection} = 44</msg>
<status status="PASS" endtime="20160130 01:05:47.052" starttime="20160130 01:05:46.596"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:47.057" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:47.057" starttime="20160130 01:05:47.054"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:47.059" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160130 01:05:47.134" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:47.134" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:05:47.134" starttime="20160130 01:05:47.058"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.138" starttime="20160130 01:05:47.136"></status>
</kw>
<msg timestamp="20160130 01:05:47.139" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:47.139" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:47.138" starttime="20160130 01:05:47.135"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.143" starttime="20160130 01:05:47.143"></status>
</kw>
<msg timestamp="20160130 01:05:47.144" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:47.144" starttime="20160130 01:05:47.139"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:05:47.146" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:05:47.146" starttime="20160130 01:05:47.145"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:47.148" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:47.147" starttime="20160130 01:05:47.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.149" starttime="20160130 01:05:47.148"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.154" starttime="20160130 01:05:47.153"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.157" starttime="20160130 01:05:47.155"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:47.157" starttime="20160130 01:05:47.150"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.161" starttime="20160130 01:05:47.160"></status>
</kw>
<msg timestamp="20160130 01:05:47.162" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:47.162" starttime="20160130 01:05:47.158"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.163" starttime="20160130 01:05:47.162"></status>
</kw>
<msg timestamp="20160130 01:05:47.165" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160130 01:05:47.165" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:47.164" starttime="20160130 01:05:46.586"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:47.167" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:47.167" starttime="20160130 01:05:47.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:47.168" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:47.169" starttime="20160130 01:05:47.167"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:47.170" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:47.171" starttime="20160130 01:05:47.169"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:47.172" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:47.173" starttime="20160130 01:05:47.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160130 01:05:47.174" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:47.175" starttime="20160130 01:05:47.173"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160130 01:05:47.176" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:47.176" starttime="20160130 01:05:47.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160130 01:05:47.178" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:47.178" starttime="20160130 01:05:47.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160130 01:05:47.179" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:47.180" starttime="20160130 01:05:47.178"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.185" starttime="20160130 01:05:47.183"></status>
</kw>
<msg timestamp="20160130 01:05:47.186" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:05:47.186" starttime="20160130 01:05:47.180"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160130 01:05:47.188" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:05:47.188" starttime="20160130 01:05:47.186"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:47.188" starttime="20160130 01:05:44.115"></status>
</kw>
<test id="s1-s1-s1-s3-s3-s1-t1" name="Run MTC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.194" starttime="20160130 01:05:47.193"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160130 01:05:47.195" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160130 01:05:47.195" starttime="20160130 01:05:47.194"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160130 01:05:47.202" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160130 01:05:47.202" starttime="20160130 01:05:47.201"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160130 01:05:47.204" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160130 01:05:47.204" starttime="20160130 01:05:47.203"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160130 01:05:47.205" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160130 01:05:47.206" starttime="20160130 01:05:47.204"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160130 01:05:47.207" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160130 01:05:47.207" starttime="20160130 01:05:47.206"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:05:47.209" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:47.209" starttime="20160130 01:05:47.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:05:47.210" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160130 01:05:47.211" starttime="20160130 01:05:47.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160130 01:05:47.212" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:47.212" starttime="20160130 01:05:47.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160130 01:05:47.214" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160130 01:05:47.214" starttime="20160130 01:05:47.213"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160130 01:05:47.215" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:05:47.215" starttime="20160130 01:05:47.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160130 01:05:47.217" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160130 01:05:47.217" starttime="20160130 01:05:47.216"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:47.223" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:47.224" starttime="20160130 01:05:47.222"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:47.224" starttime="20160130 01:05:47.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:47.226" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:47.227" starttime="20160130 01:05:47.225"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:47.227" starttime="20160130 01:05:47.224"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:47.230" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:47.230" starttime="20160130 01:05:47.229"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:47.230" starttime="20160130 01:05:47.228"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:47.231" starttime="20160130 01:05:47.218"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:05:47.233" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:05:47.233" starttime="20160130 01:05:47.231"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.235" starttime="20160130 01:05:47.234"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.236" starttime="20160130 01:05:47.235"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.237" starttime="20160130 01:05:47.236"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.239" starttime="20160130 01:05:47.238"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.240" starttime="20160130 01:05:47.239"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.241" starttime="20160130 01:05:47.240"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.243" starttime="20160130 01:05:47.242"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.244" starttime="20160130 01:05:47.243"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.246" starttime="20160130 01:05:47.245"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.247" starttime="20160130 01:05:47.246"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.249" starttime="20160130 01:05:47.248"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:47.250" starttime="20160130 01:05:47.249"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:05:47.252" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160130 01:05:48.344" level="INFO">01:05:48,337 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:48.345" starttime="20160130 01:05:47.252"></status>
</kw>
<msg timestamp="20160130 01:05:48.348" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:48.349" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:05:48.347" starttime="20160130 01:05:47.251"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:48.360" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:05:48.360" starttime="20160130 01:05:48.357"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:48.364" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:48.363" starttime="20160130 01:05:48.361"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:48.367" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:48.367" starttime="20160130 01:05:48.365"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:48.373" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:48.374" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:48.375" starttime="20160130 01:05:48.370"></status>
</kw>
<msg timestamp="20160130 01:05:48.376" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:48.377" level="INFO">${return_log_entry} = 2016-01-30 01:05:48,337 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:48.376" starttime="20160130 01:05:48.369"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:48.386" starttime="20160130 01:05:48.384"></status>
</kw>
<msg timestamp="20160130 01:05:48.388" level="INFO">${return_log_entry} = 2016-01-30 01:05:48,337 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:48.387" starttime="20160130 01:05:48.378"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:48.397" starttime="20160130 01:05:48.395"></status>
</kw>
<msg timestamp="20160130 01:05:48.398" level="INFO">${return_log_entry} = 2016-01-30 01:05:48,337 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:48.398" starttime="20160130 01:05:48.389"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:48.408" starttime="20160130 01:05:48.405"></status>
</kw>
<msg timestamp="20160130 01:05:48.409" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:48.409" starttime="20160130 01:05:48.400"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:48.422" starttime="20160130 01:05:48.420"></status>
</kw>
<msg timestamp="20160130 01:05:48.423" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:48.422" starttime="20160130 01:05:48.410"></status>
</kw>
<msg timestamp="20160130 01:05:48.425" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:48.425" starttime="20160130 01:05:48.351"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:48.435" starttime="20160130 01:05:48.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:48.438" starttime="20160130 01:05:48.436"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:48.440" starttime="20160130 01:05:48.439"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:05:48.452" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:05:48.453" starttime="20160130 01:05:48.449"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:48.453" starttime="20160130 01:05:48.447"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:48.454" starttime="20160130 01:05:48.441"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:48.455" starttime="20160130 01:05:48.427"></status>
</kw>
<msg timestamp="20160130 01:05:48.458" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160130 01:05:48.457" starttime="20160130 01:05:47.196"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160130 01:05:48.464" level="INFO">${calling_party_msisdn} = 642041010001</msg>
<status status="PASS" endtime="20160130 01:05:48.464" starttime="20160130 01:05:48.459"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160130 01:05:48.467" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:48.468" starttime="20160130 01:05:48.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:48.471" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160130 01:05:48.472" starttime="20160130 01:05:48.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:48.474" starttime="20160130 01:05:48.473"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:48.477" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160130 01:05:48.478" starttime="20160130 01:05:48.475"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC NoAnswer">
<doc>Runs a noAnswer non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-noanswer</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160130 01:05:48.506" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20160130 01:05:48.506" starttime="20160130 01:05:48.503"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160130 01:05:48.510" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20160130 01:05:48.510" starttime="20160130 01:05:48.508"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160130 01:05:48.514" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20160130 01:05:48.514" starttime="20160130 01:05:48.511"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160130 01:05:48.517" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs</msg>
<status status="PASS" endtime="20160130 01:05:48.517" starttime="20160130 01:05:48.515"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:48.518" starttime="20160130 01:05:48.518"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:05:48.521" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:48.521" starttime="20160130 01:05:48.519"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:48.522" starttime="20160130 01:05:48.522"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160130 01:05:48.524" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:48.525" starttime="20160130 01:05:48.523"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:05:48.527" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:48.527" starttime="20160130 01:05:48.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:48.528" starttime="20160130 01:05:48.528"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160130 01:05:48.530" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:48.531" starttime="20160130 01:05:48.529"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160130 01:05:48.533" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:48.534" starttime="20160130 01:05:48.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:48.535" starttime="20160130 01:05:48.534"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160130 01:05:48.542" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:05:51.751" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:05:51.749" starttime="20160130 01:05:48.535"></status>
</kw>
<msg timestamp="20160130 01:05:51.752" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:05:51.751" starttime="20160130 01:05:48.492"></status>
</kw>
<msg timestamp="20160130 01:05:51.753" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:05:51.753" starttime="20160130 01:05:48.480"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:51.755" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160130 01:05:51.755" starttime="20160130 01:05:51.754"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160130 01:05:51.757" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:51.757" starttime="20160130 01:05:51.756"></status>
</kw>
<doc>Test will make the no answer MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:05:51.758" starttime="20160130 01:05:47.189"></status>
</test>
<doc>Testing the prepaid the no answer MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:05:51.762" starttime="20160130 01:05:43.985"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:05:51.769" starttime="20160130 01:05:43.970"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration" id="s1-s1-s1-s3-s4" name="MTC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration/MTC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s1-s1-s3-s4-s1" name="MTC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160130 01:05:51.921" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:05:51.924" level="INFO">${date} = Sat Jan 30 01:05:51 CET 2016</msg>
<status status="PASS" endtime="20160130 01:05:51.923" starttime="20160130 01:05:51.918"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:51.925" level="INFO">Date and time: Sat Jan 30 01:05:51 CET 2016</msg>
<status status="PASS" endtime="20160130 01:05:51.926" starttime="20160130 01:05:51.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:51.927" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160130 01:05:51.928" starttime="20160130 01:05:51.926"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:51.959" starttime="20160130 01:05:51.947"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:52.014" starttime="20160130 01:05:51.962"></status>
</kw>
<msg timestamp="20160130 01:05:52.018" level="INFO">${ssh_connection} = 45</msg>
<status status="PASS" endtime="20160130 01:05:52.016" starttime="20160130 01:05:51.959"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:52.028" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:52.431" level="INFO">Read output: Last login: Sat Jan 30 00:05:44 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:52.431" starttime="20160130 01:05:52.026"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:52.432" starttime="20160130 01:05:52.019"></status>
</kw>
<msg timestamp="20160130 01:05:52.434" level="INFO">${ssh_connection} = 45</msg>
<status status="PASS" endtime="20160130 01:05:52.433" starttime="20160130 01:05:51.943"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:52.438" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:52.437" starttime="20160130 01:05:52.434"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:52.439" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160130 01:05:52.774" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:52.775" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:05:52.774" starttime="20160130 01:05:52.438"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:52.778" starttime="20160130 01:05:52.776"></status>
</kw>
<msg timestamp="20160130 01:05:52.779" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:52.779" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:52.778" starttime="20160130 01:05:52.775"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:52.783" starttime="20160130 01:05:52.782"></status>
</kw>
<msg timestamp="20160130 01:05:52.784" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:52.784" starttime="20160130 01:05:52.779"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160130 01:05:52.785" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160130 01:05:52.785" starttime="20160130 01:05:52.784"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:52.787" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:52.787" starttime="20160130 01:05:52.786"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:52.788" starttime="20160130 01:05:52.788"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:52.793" starttime="20160130 01:05:52.792"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:52.795" starttime="20160130 01:05:52.794"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:52.795" starttime="20160130 01:05:52.789"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:52.807" starttime="20160130 01:05:52.805"></status>
</kw>
<msg timestamp="20160130 01:05:52.809" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:52.808" starttime="20160130 01:05:52.799"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:52.811" starttime="20160130 01:05:52.810"></status>
</kw>
<msg timestamp="20160130 01:05:52.814" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160130 01:05:52.815" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:52.813" starttime="20160130 01:05:51.934"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:52.861" starttime="20160130 01:05:52.859"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:52.908" starttime="20160130 01:05:52.868"></status>
</kw>
<msg timestamp="20160130 01:05:52.909" level="INFO">${ssh_connection} = 46</msg>
<status status="PASS" endtime="20160130 01:05:52.909" starttime="20160130 01:05:52.862"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:52.914" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:53.328" level="INFO">Read output: Last login: Sat Jan 30 00:05:45 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:53.330" starttime="20160130 01:05:52.913"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:53.331" starttime="20160130 01:05:52.910"></status>
</kw>
<msg timestamp="20160130 01:05:53.334" level="INFO">${ssh_connection} = 46</msg>
<status status="PASS" endtime="20160130 01:05:53.333" starttime="20160130 01:05:52.850"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:53.341" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:53.340" starttime="20160130 01:05:53.336"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:53.344" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160130 01:05:53.727" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:53.728" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:05:53.727" starttime="20160130 01:05:53.342"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:53.731" starttime="20160130 01:05:53.729"></status>
</kw>
<msg timestamp="20160130 01:05:53.731" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:53.731" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:53.731" starttime="20160130 01:05:53.728"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:53.736" starttime="20160130 01:05:53.735"></status>
</kw>
<msg timestamp="20160130 01:05:53.736" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:53.736" starttime="20160130 01:05:53.732"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160130 01:05:53.738" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:05:53.738" starttime="20160130 01:05:53.737"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:53.740" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:53.739" starttime="20160130 01:05:53.738"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:53.741" starttime="20160130 01:05:53.740"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:53.745" starttime="20160130 01:05:53.744"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:53.747" starttime="20160130 01:05:53.746"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:53.749" starttime="20160130 01:05:53.741"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:53.753" starttime="20160130 01:05:53.752"></status>
</kw>
<msg timestamp="20160130 01:05:53.754" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:53.753" starttime="20160130 01:05:53.749"></status>
</kw>
<msg timestamp="20160130 01:05:53.755" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160130 01:05:53.756" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:53.755" starttime="20160130 01:05:52.829"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:53.777" starttime="20160130 01:05:53.776"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:53.818" starttime="20160130 01:05:53.780"></status>
</kw>
<msg timestamp="20160130 01:05:53.819" level="INFO">${ssh_connection} = 47</msg>
<status status="PASS" endtime="20160130 01:05:53.819" starttime="20160130 01:05:53.777"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:53.824" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:54.243" level="INFO">Read output: Last login: Sat Jan 30 00:05:46 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:54.244" starttime="20160130 01:05:53.823"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:54.245" starttime="20160130 01:05:53.820"></status>
</kw>
<msg timestamp="20160130 01:05:54.247" level="INFO">${ssh_connection} = 47</msg>
<status status="PASS" endtime="20160130 01:05:54.246" starttime="20160130 01:05:53.772"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:54.250" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:54.250" starttime="20160130 01:05:54.247"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:54.252" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160130 01:05:54.430" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:54.430" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:05:54.430" starttime="20160130 01:05:54.251"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:54.433" starttime="20160130 01:05:54.432"></status>
</kw>
<msg timestamp="20160130 01:05:54.434" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:54.434" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:54.434" starttime="20160130 01:05:54.431"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:54.438" starttime="20160130 01:05:54.438"></status>
</kw>
<msg timestamp="20160130 01:05:54.439" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:54.439" starttime="20160130 01:05:54.435"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:05:54.441" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160130 01:05:54.440" starttime="20160130 01:05:54.440"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:54.442" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:54.442" starttime="20160130 01:05:54.441"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:54.444" starttime="20160130 01:05:54.443"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:54.448" starttime="20160130 01:05:54.447"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:54.452" starttime="20160130 01:05:54.449"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:54.453" starttime="20160130 01:05:54.444"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:54.456" starttime="20160130 01:05:54.455"></status>
</kw>
<msg timestamp="20160130 01:05:54.457" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:54.457" starttime="20160130 01:05:54.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:54.458" starttime="20160130 01:05:54.458"></status>
</kw>
<msg timestamp="20160130 01:05:54.460" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160130 01:05:54.460" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:54.459" starttime="20160130 01:05:53.762"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:54.481" starttime="20160130 01:05:54.480"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:54.533" starttime="20160130 01:05:54.484"></status>
</kw>
<msg timestamp="20160130 01:05:54.535" level="INFO">${ssh_connection} = 48</msg>
<status status="PASS" endtime="20160130 01:05:54.535" starttime="20160130 01:05:54.481"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:05:54.547" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:05:54.937" level="INFO">Read output: Last login: Sat Jan 30 00:05:46 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:05:54.938" starttime="20160130 01:05:54.544"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:54.938" starttime="20160130 01:05:54.537"></status>
</kw>
<msg timestamp="20160130 01:05:54.939" level="INFO">${ssh_connection} = 48</msg>
<status status="PASS" endtime="20160130 01:05:54.939" starttime="20160130 01:05:54.476"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160130 01:05:54.943" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160130 01:05:54.943" starttime="20160130 01:05:54.940"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160130 01:05:54.945" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160130 01:05:55.021" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:05:55.024" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:05:55.022" starttime="20160130 01:05:54.944"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.030" starttime="20160130 01:05:55.027"></status>
</kw>
<msg timestamp="20160130 01:05:55.031" level="INFO">${status} = PASS</msg>
<msg timestamp="20160130 01:05:55.032" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160130 01:05:55.031" starttime="20160130 01:05:55.025"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.040" starttime="20160130 01:05:55.038"></status>
</kw>
<msg timestamp="20160130 01:05:55.041" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:55.041" starttime="20160130 01:05:55.033"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160130 01:05:55.045" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160130 01:05:55.044" starttime="20160130 01:05:55.042"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160130 01:05:55.048" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:55.048" starttime="20160130 01:05:55.046"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.050" starttime="20160130 01:05:55.049"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.060" starttime="20160130 01:05:55.058"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.065" starttime="20160130 01:05:55.061"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:55.066" starttime="20160130 01:05:55.052"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.074" starttime="20160130 01:05:55.072"></status>
</kw>
<msg timestamp="20160130 01:05:55.076" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:55.075" starttime="20160130 01:05:55.068"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.078" starttime="20160130 01:05:55.077"></status>
</kw>
<msg timestamp="20160130 01:05:55.081" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160130 01:05:55.082" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:55.080" starttime="20160130 01:05:54.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:55.085" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160130 01:05:55.086" starttime="20160130 01:05:55.083"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:55.089" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160130 01:05:55.090" starttime="20160130 01:05:55.087"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:55.093" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160130 01:05:55.094" starttime="20160130 01:05:55.091"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:55.097" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160130 01:05:55.098" starttime="20160130 01:05:55.094"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160130 01:05:55.100" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:55.101" starttime="20160130 01:05:55.099"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160130 01:05:55.105" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:55.105" starttime="20160130 01:05:55.102"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160130 01:05:55.108" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:55.109" starttime="20160130 01:05:55.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160130 01:05:55.112" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:55.112" starttime="20160130 01:05:55.110"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.125" starttime="20160130 01:05:55.119"></status>
</kw>
<msg timestamp="20160130 01:05:55.127" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:05:55.126" starttime="20160130 01:05:55.113"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160130 01:05:55.131" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160130 01:05:55.131" starttime="20160130 01:05:55.128"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:55.132" starttime="20160130 01:05:51.916"></status>
</kw>
<test id="s1-s1-s1-s3-s4-s1-t1" name="Run MTC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.142" starttime="20160130 01:05:55.142"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160130 01:05:55.144" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160130 01:05:55.144" starttime="20160130 01:05:55.143"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160130 01:05:55.150" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160130 01:05:55.151" starttime="20160130 01:05:55.149"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160130 01:05:55.181" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160130 01:05:55.182" starttime="20160130 01:05:55.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160130 01:05:55.183" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160130 01:05:55.184" starttime="20160130 01:05:55.182"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160130 01:05:55.185" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160130 01:05:55.185" starttime="20160130 01:05:55.184"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:05:55.187" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160130 01:05:55.187" starttime="20160130 01:05:55.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:05:55.189" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160130 01:05:55.189" starttime="20160130 01:05:55.188"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160130 01:05:55.190" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:05:55.191" starttime="20160130 01:05:55.189"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160130 01:05:55.192" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160130 01:05:55.192" starttime="20160130 01:05:55.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160130 01:05:55.194" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:05:55.194" starttime="20160130 01:05:55.193"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160130 01:05:55.195" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160130 01:05:55.196" starttime="20160130 01:05:55.195"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:55.203" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:55.203" starttime="20160130 01:05:55.201"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:55.204" starttime="20160130 01:05:55.200"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:55.206" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:55.206" starttime="20160130 01:05:55.205"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:55.207" starttime="20160130 01:05:55.204"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:05:55.209" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:55.210" starttime="20160130 01:05:55.208"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:55.210" starttime="20160130 01:05:55.207"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:55.210" starttime="20160130 01:05:55.197"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:05:55.212" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:05:55.213" starttime="20160130 01:05:55.211"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.214" starttime="20160130 01:05:55.213"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.216" starttime="20160130 01:05:55.215"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.217" starttime="20160130 01:05:55.216"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.218" starttime="20160130 01:05:55.217"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.219" starttime="20160130 01:05:55.219"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.221" starttime="20160130 01:05:55.220"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.222" starttime="20160130 01:05:55.221"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.224" starttime="20160130 01:05:55.223"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.225" starttime="20160130 01:05:55.224"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.227" starttime="20160130 01:05:55.226"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.228" starttime="20160130 01:05:55.227"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:55.230" starttime="20160130 01:05:55.229"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:05:55.231" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160130 01:05:56.254" level="INFO">01:05:56,247 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:56.255" starttime="20160130 01:05:55.231"></status>
</kw>
<msg timestamp="20160130 01:05:56.258" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:56.259" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:05:56.257" starttime="20160130 01:05:55.230"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:05:56.271" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:05:56.271" starttime="20160130 01:05:56.268"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:56.275" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:05:56.274" starttime="20160130 01:05:56.272"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:05:56.278" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:05:56.278" starttime="20160130 01:05:56.276"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:05:56.284" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:05:56.285" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160130 01:05:56.286" starttime="20160130 01:05:56.281"></status>
</kw>
<msg timestamp="20160130 01:05:56.287" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:05:56.288" level="INFO">${return_log_entry} = 2016-01-30 01:05:56,247 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:56.287" starttime="20160130 01:05:56.280"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:56.298" starttime="20160130 01:05:56.296"></status>
</kw>
<msg timestamp="20160130 01:05:56.299" level="INFO">${return_log_entry} = 2016-01-30 01:05:56,247 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:56.299" starttime="20160130 01:05:56.289"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:56.308" starttime="20160130 01:05:56.306"></status>
</kw>
<msg timestamp="20160130 01:05:56.309" level="INFO">${return_log_entry} = 2016-01-30 01:05:56,247 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:05:56.309" starttime="20160130 01:05:56.301"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:56.319" starttime="20160130 01:05:56.316"></status>
</kw>
<msg timestamp="20160130 01:05:56.320" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:56.320" starttime="20160130 01:05:56.311"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:56.332" starttime="20160130 01:05:56.330"></status>
</kw>
<msg timestamp="20160130 01:05:56.334" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:56.333" starttime="20160130 01:05:56.321"></status>
</kw>
<msg timestamp="20160130 01:05:56.336" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:05:56.335" starttime="20160130 01:05:56.261"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:56.346" starttime="20160130 01:05:56.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:56.348" starttime="20160130 01:05:56.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:56.351" starttime="20160130 01:05:56.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:05:56.362" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:05:56.363" starttime="20160130 01:05:56.359"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:56.364" starttime="20160130 01:05:56.357"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:56.365" starttime="20160130 01:05:56.352"></status>
</kw>
<status status="PASS" endtime="20160130 01:05:56.366" starttime="20160130 01:05:56.338"></status>
</kw>
<msg timestamp="20160130 01:05:56.369" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160130 01:05:56.367" starttime="20160130 01:05:55.145"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160130 01:05:56.375" level="INFO">${calling_party_msisdn} = 642041010001</msg>
<status status="PASS" endtime="20160130 01:05:56.374" starttime="20160130 01:05:56.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160130 01:05:56.378" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:05:56.379" starttime="20160130 01:05:56.376"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:56.381" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160130 01:05:56.382" starttime="20160130 01:05:56.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:56.385" starttime="20160130 01:05:56.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:05:56.387" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160130 01:05:56.388" starttime="20160130 01:05:56.386"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC 1s">
<doc>Runs a standard (i.e. non-roaming) MTC 1s session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160130 01:05:56.403" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160130 01:05:56.403" starttime="20160130 01:05:56.402"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160130 01:05:56.405" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160130 01:05:56.404" starttime="20160130 01:05:56.403"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160130 01:05:56.406" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini</msg>
<status status="PASS" endtime="20160130 01:05:56.406" starttime="20160130 01:05:56.405"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160130 01:05:56.408" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs</msg>
<status status="PASS" endtime="20160130 01:05:56.408" starttime="20160130 01:05:56.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:56.409" starttime="20160130 01:05:56.409"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:05:56.412" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:56.412" starttime="20160130 01:05:56.410"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:56.413" starttime="20160130 01:05:56.413"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160130 01:05:56.415" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:56.416" starttime="20160130 01:05:56.414"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160130 01:05:56.418" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:56.418" starttime="20160130 01:05:56.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:56.419" starttime="20160130 01:05:56.419"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160130 01:05:56.421" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:56.422" starttime="20160130 01:05:56.420"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160130 01:05:56.424" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:05:56.425" starttime="20160130 01:05:56.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160130 01:05:56.426" starttime="20160130 01:05:56.425"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160130 01:05:56.433" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:06:00.588" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:06:00.586" starttime="20160130 01:05:56.426"></status>
</kw>
<msg timestamp="20160130 01:06:00.592" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:06:00.590" starttime="20160130 01:05:56.397"></status>
</kw>
<msg timestamp="20160130 01:06:00.594" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:06:00.593" starttime="20160130 01:05:56.390"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:00.597" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160130 01:06:00.598" starttime="20160130 01:06:00.596"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160130 01:06:00.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:06:00.603" starttime="20160130 01:06:00.599"></status>
</kw>
<doc>Test will make a short MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:06:00.604" starttime="20160130 01:05:55.134"></status>
</test>
<doc>Testing the prepaid MTC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:06:00.612" starttime="20160130 01:05:51.788"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:06:00.627" starttime="20160130 01:05:51.773"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:06:00.653" starttime="20160130 01:05:13.821"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:06:00.729" starttime="20160130 01:01:00.572"></status>
</suite>
<doc>This robot framework initialization file is used to globaly assign tags to
all test suites located in or below the current folder
For a complete list of tags allowed for folder assignement
see &lt;workspace root&gt;/tagging-rules.txt</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:06:00.805" starttime="20160130 01:01:00.547"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd" id="s1-s2" name="Ussd">
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd/TNZ" id="s1-s2-s1" name="TNZ">
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd/TNZ/ussd-robot-suite.txt" id="s1-s2-s1-s1" name="Ussd-Robot-Suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160130 01:06:01.026" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:06:01.029" level="INFO">${time} = Sat Jan 30 01:06:01 CET 2016</msg>
<status status="PASS" endtime="20160130 01:06:01.029" starttime="20160130 01:06:01.023"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:01.031" level="INFO">Date and time: Sat Jan 30 01:06:01 CET 2016</msg>
<status status="PASS" endtime="20160130 01:06:01.032" starttime="20160130 01:06:01.030"></status>
</kw>
<kw type="kw" name="${conn_id} = SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${USSD HOST}</arg>
</arguments>
<msg timestamp="20160130 01:06:01.073" level="INFO">${conn_id} = 49</msg>
<status status="PASS" endtime="20160130 01:06:01.072" starttime="20160130 01:06:01.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${conn_id}</arg>
</arguments>
<msg timestamp="20160130 01:06:01.076" level="INFO">${conn_id} = 49</msg>
<status status="PASS" endtime="20160130 01:06:01.076" starttime="20160130 01:06:01.074"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USSD USER}</arg>
<arg>${USSD PWD}</arg>
</arguments>
<msg timestamp="20160130 01:06:01.078" level="INFO">Logging into '10.105.113.167:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:06:02.297" level="INFO">Read output: Last login: Fri Jan 29 02:38:53 2016 from 10.105.101.196
[1m[qa_automation@ussd-app01.tb13 ~]$[m</msg>
<msg timestamp="20160130 01:06:02.301" level="INFO">${output_login} = Last login: Fri Jan 29 02:38:53 2016 from 10.105.101.196
[1m[qa_automation@ussd-app01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160130 01:06:02.299" starttime="20160130 01:06:01.077"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160130 01:06:02.305" level="INFO">Last login: Fri Jan 29 02:38:53 2016 from 10.105.101.196
[1m[qa_automation@ussd-app01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160130 01:06:02.306" starttime="20160130 01:06:02.303"></status>
</kw>
<kw type="kw" name="SSHLibrary.Put File">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/robot_testsuites/ussd/tool/USSDtest.py</arg>
<arg>${USSD HOME}/ussd/</arg>
</arguments>
<msg timestamp="20160130 01:06:02.369" level="INFO">'/opt/robot/robotworkspace/robot_testsuites/ussd/tool/USSDtest.py' -&gt; '/home/qa_automation//ussd//USSDtest.py'</msg>
<status status="PASS" endtime="20160130 01:06:02.370" starttime="20160130 01:06:02.308"></status>
</kw>
<kw type="kw" name="SSHLibrary.File Should Exist">
<doc>Fails if the given `path` does NOT point to an existing file.</doc>
<arguments>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:02.376" starttime="20160130 01:06:02.373"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ussd_tool}</arg>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<msg timestamp="20160130 01:06:02.397" level="INFO">${ussd_tool} = /home/qa_automation/ussd/USSDtest.py</msg>
<status status="PASS" endtime="20160130 01:06:02.398" starttime="20160130 01:06:02.378"></status>
</kw>
<kw type="kw" name="Create Subscriber">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160130 01:06:02.410" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160130 01:06:02.409" starttime="20160130 01:06:02.407"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160130 01:06:02.426" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160130 01:06:02.426" starttime="20160130 01:06:02.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160130 01:06:02.430" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160130 01:06:02.430" starttime="20160130 01:06:02.428"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160130 01:06:02.434" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160130 01:06:02.434" starttime="20160130 01:06:02.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160130 01:06:02.438" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160130 01:06:02.438" starttime="20160130 01:06:02.436"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:06:02.442" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160130 01:06:02.442" starttime="20160130 01:06:02.440"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160130 01:06:02.446" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160130 01:06:02.446" starttime="20160130 01:06:02.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160130 01:06:02.449" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160130 01:06:02.450" starttime="20160130 01:06:02.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160130 01:06:02.453" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160130 01:06:02.454" starttime="20160130 01:06:02.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160130 01:06:02.457" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160130 01:06:02.458" starttime="20160130 01:06:02.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160130 01:06:02.461" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160130 01:06:02.462" starttime="20160130 01:06:02.459"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160130 01:06:02.476" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:06:02.477" starttime="20160130 01:06:02.473"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:02.478" starttime="20160130 01:06:02.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160130 01:06:02.484" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:06:02.485" starttime="20160130 01:06:02.481"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:02.486" starttime="20160130 01:06:02.479"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160130 01:06:02.491" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:06:02.492" starttime="20160130 01:06:02.489"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:02.493" starttime="20160130 01:06:02.487"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:02.495" starttime="20160130 01:06:02.465"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160130 01:06:02.499" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160130 01:06:02.500" starttime="20160130 01:06:02.496"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:02.503" starttime="20160130 01:06:02.501"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:02.507" starttime="20160130 01:06:02.505"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:02.510" starttime="20160130 01:06:02.508"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:02.513" starttime="20160130 01:06:02.512"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:02.516" starttime="20160130 01:06:02.515"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:02.518" starttime="20160130 01:06:02.517"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:02.520" starttime="20160130 01:06:02.519"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:02.521" starttime="20160130 01:06:02.520"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:02.523" starttime="20160130 01:06:02.522"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:02.525" starttime="20160130 01:06:02.523"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:02.526" starttime="20160130 01:06:02.525"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:02.528" starttime="20160130 01:06:02.527"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:06:02.530" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160130 01:06:03.667" level="INFO">01:06:03,659 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:06:03.668" starttime="20160130 01:06:02.529"></status>
</kw>
<msg timestamp="20160130 01:06:03.671" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:06:03.672" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160130 01:06:03.670" starttime="20160130 01:06:02.528"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160130 01:06:03.684" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160130 01:06:03.684" starttime="20160130 01:06:03.681"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:06:03.688" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160130 01:06:03.688" starttime="20160130 01:06:03.686"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160130 01:06:03.692" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160130 01:06:03.692" starttime="20160130 01:06:03.690"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160130 01:06:03.698" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:06:03.700" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160130 01:06:03.700" starttime="20160130 01:06:03.696"></status>
</kw>
<msg timestamp="20160130 01:06:03.702" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160130 01:06:03.703" level="INFO">${return_log_entry} = 2016-01-30 01:06:03,659 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:06:03.701" starttime="20160130 01:06:03.694"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:03.713" starttime="20160130 01:06:03.711"></status>
</kw>
<msg timestamp="20160130 01:06:03.715" level="INFO">${return_log_entry} = 2016-01-30 01:06:03,659 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:06:03.714" starttime="20160130 01:06:03.704"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:03.724" starttime="20160130 01:06:03.722"></status>
</kw>
<msg timestamp="20160130 01:06:03.726" level="INFO">${return_log_entry} = 2016-01-30 01:06:03,659 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160130 01:06:03.725" starttime="20160130 01:06:03.716"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:03.736" starttime="20160130 01:06:03.733"></status>
</kw>
<msg timestamp="20160130 01:06:03.737" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:06:03.737" starttime="20160130 01:06:03.727"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:03.750" starttime="20160130 01:06:03.748"></status>
</kw>
<msg timestamp="20160130 01:06:03.752" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:06:03.752" starttime="20160130 01:06:03.739"></status>
</kw>
<msg timestamp="20160130 01:06:03.755" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160130 01:06:03.754" starttime="20160130 01:06:03.674"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:03.765" starttime="20160130 01:06:03.764"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:03.768" starttime="20160130 01:06:03.767"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:03.769" starttime="20160130 01:06:03.768"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160130 01:06:03.774" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160130 01:06:03.775" starttime="20160130 01:06:03.773"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:03.775" starttime="20160130 01:06:03.772"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:03.776" starttime="20160130 01:06:03.769"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:03.776" starttime="20160130 01:06:03.757"></status>
</kw>
<msg timestamp="20160130 01:06:03.778" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160130 01:06:03.777" starttime="20160130 01:06:02.414"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160130 01:06:03.779" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:06:03.780" starttime="20160130 01:06:03.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:03.781" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160130 01:06:03.781" starttime="20160130 01:06:03.780"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:03.782" starttime="20160130 01:06:02.399"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:03.783" starttime="20160130 01:06:01.020"></status>
</kw>
<test id="s1-s2-s1-s1-t1" name="Test USSD Start">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160130 01:06:03.796" level="INFO">/home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000</msg>
<status status="PASS" endtime="20160130 01:06:03.796" starttime="20160130 01:06:03.789"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:04.619" level="INFO">=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160130 01:06:04.622" level="INFO">${output} = =====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
Us...</msg>
<status status="PASS" endtime="20160130 01:06:04.621" starttime="20160130 01:06:03.797"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160130 01:06:04.624" level="INFO">USSD Start: =====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:04.625" starttime="20160130 01:06:04.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160130 01:06:06.626" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160130 01:06:06.628" starttime="20160130 01:06:04.625"></status>
</kw>
<msg timestamp="20160130 01:06:06.632" level="INFO">${output} = =====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
Us...</msg>
<status status="PASS" endtime="20160130 01:06:06.631" starttime="20160130 01:06:03.787"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Enter the number of what you would like to do</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.636" starttime="20160130 01:06:06.634"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.648" starttime="20160130 01:06:06.646"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:06:06.651" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:06:06.686" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:06.688" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:06:06.687" starttime="20160130 01:06:06.649"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.691" starttime="20160130 01:06:06.689"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.694" starttime="20160130 01:06:06.692"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.697" starttime="20160130 01:06:06.695"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:06:06.701" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160130 01:06:06.761" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:06.764" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:06:06.764" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:06:06.763" starttime="20160130 01:06:06.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.773" starttime="20160130 01:06:06.765"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.776" starttime="20160130 01:06:06.774"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.778" starttime="20160130 01:06:06.777"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.781" starttime="20160130 01:06:06.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.784" starttime="20160130 01:06:06.782"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.787" starttime="20160130 01:06:06.785"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.790" starttime="20160130 01:06:06.788"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.793" starttime="20160130 01:06:06.791"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.795" starttime="20160130 01:06:06.794"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.798" starttime="20160130 01:06:06.796"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:06.801" starttime="20160130 01:06:06.799"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:06.802" starttime="20160130 01:06:06.639"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:06:06.803" starttime="20160130 01:06:03.783"></status>
</test>
<test id="s1-s2-s1-s1-t2" name="Test USSD TopUp via CreditCard">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160130 01:06:06.822" level="INFO">Killed</msg>
<status status="PASS" endtime="20160130 01:06:06.822" starttime="20160130 01:06:06.818"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:07.407" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160130 01:06:07.409" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160130 01:06:07.408" starttime="20160130 01:06:06.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160130 01:06:07.411" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:07.411" starttime="20160130 01:06:07.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160130 01:06:09.414" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160130 01:06:09.416" starttime="20160130 01:06:07.411"></status>
</kw>
<msg timestamp="20160130 01:06:09.421" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160130 01:06:09.420" starttime="20160130 01:06:06.812"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for Top-Up</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:09.425" level="INFO">Pressing 1 for Top-Up</msg>
<status status="PASS" endtime="20160130 01:06:09.426" starttime="20160130 01:06:09.422"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160130 01:06:09.432" level="INFO">1</msg>
<status status="PASS" endtime="20160130 01:06:09.433" starttime="20160130 01:06:09.427"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:09.451" level="INFO">=====================
How would you like to top up?
1. Voucher
2. Credit / debit card
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:09.453" level="INFO">${output} = =====================
How would you like to top up?
1. Voucher
2. Credit / debit card
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:09.452" starttime="20160130 01:06:09.434"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>TopUp 1: ${output}</arg>
</arguments>
<msg timestamp="20160130 01:06:09.456" level="INFO">TopUp 1: =====================
How would you like to top up?
1. Voucher
2. Credit / debit card
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:09.456" starttime="20160130 01:06:09.454"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for Top-Up with Credit Card</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:09.459" level="INFO">Pressing 2 for Top-Up with Credit Card</msg>
<status status="PASS" endtime="20160130 01:06:09.460" starttime="20160130 01:06:09.457"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160130 01:06:09.465" level="INFO">2</msg>
<status status="PASS" endtime="20160130 01:06:09.465" starttime="20160130 01:06:09.461"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:09.513" level="INFO">=====================
Sorry, you must have a registered credit or debit card to use this service.
Jump online at skinny.co.nz to get set up, or call us on 204 &amp; select top up.
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:09.515" level="INFO">${output} = =====================
Sorry, you must have a registered credit or debit card to use this service.
Jump online at skinny.co.nz to get set up, or call us on 204 &amp; select top up.
Enter * to return, # ...</msg>
<status status="PASS" endtime="20160130 01:06:09.514" starttime="20160130 01:06:09.467"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>TopUp 2: ${output}</arg>
</arguments>
<msg timestamp="20160130 01:06:09.519" level="INFO">TopUp 2: =====================
Sorry, you must have a registered credit or debit card to use this service.
Jump online at skinny.co.nz to get set up, or call us on 204 &amp; select top up.
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:09.520" starttime="20160130 01:06:09.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Sorry, you must have a registered credit or debit card</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.523" starttime="20160130 01:06:09.521"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.534" starttime="20160130 01:06:09.531"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:06:09.536" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:06:09.568" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:09.570" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:06:09.569" starttime="20160130 01:06:09.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.573" starttime="20160130 01:06:09.571"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.575" starttime="20160130 01:06:09.574"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.578" starttime="20160130 01:06:09.576"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:06:09.582" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160130 01:06:09.644" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:09.646" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:06:09.646" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:06:09.645" starttime="20160130 01:06:09.579"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.654" starttime="20160130 01:06:09.648"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.657" starttime="20160130 01:06:09.655"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.660" starttime="20160130 01:06:09.658"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.663" starttime="20160130 01:06:09.661"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.665" starttime="20160130 01:06:09.664"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.668" starttime="20160130 01:06:09.666"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.671" starttime="20160130 01:06:09.669"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.674" starttime="20160130 01:06:09.672"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.677" starttime="20160130 01:06:09.675"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.680" starttime="20160130 01:06:09.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:09.682" starttime="20160130 01:06:09.681"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:09.683" starttime="20160130 01:06:09.525"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:06:09.685" starttime="20160130 01:06:06.805"></status>
</test>
<test id="s1-s2-s1-s1-t3" name="Test USSD Check Balance">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160130 01:06:09.703" level="INFO">Killed</msg>
<status status="PASS" endtime="20160130 01:06:09.704" starttime="20160130 01:06:09.699"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:10.237" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160130 01:06:10.239" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160130 01:06:10.238" starttime="20160130 01:06:09.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160130 01:06:10.241" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:10.241" starttime="20160130 01:06:10.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160130 01:06:12.244" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160130 01:06:12.246" starttime="20160130 01:06:10.241"></status>
</kw>
<msg timestamp="20160130 01:06:12.251" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160130 01:06:12.249" starttime="20160130 01:06:09.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for checking balance</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:12.254" level="INFO">Pressing 2 for checking balance</msg>
<status status="PASS" endtime="20160130 01:06:12.256" starttime="20160130 01:06:12.252"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160130 01:06:12.265" level="INFO">2</msg>
<status status="PASS" endtime="20160130 01:06:12.266" starttime="20160130 01:06:12.257"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:12.383" level="INFO">=====================
Your balance is $100.00 and you've collected 0.00 bonus points.
You're on our standard rates - to save even more jump on line at skinny.co.nz. 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:12.385" level="INFO">${output} = =====================
Your balance is $100.00 and you've collected 0.00 bonus points.
You're on our standard rates - to save even more jump on line at skinny.co.nz. 
=====================
User inp...</msg>
<status status="PASS" endtime="20160130 01:06:12.384" starttime="20160130 01:06:12.268"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Your balance is $100.00</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.388" starttime="20160130 01:06:12.386"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.395" starttime="20160130 01:06:12.394"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:06:12.396" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:06:12.428" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:12.428" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:06:12.428" starttime="20160130 01:06:12.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.429" starttime="20160130 01:06:12.429"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.431" starttime="20160130 01:06:12.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.432" starttime="20160130 01:06:12.431"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:06:12.434" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160130 01:06:12.501" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:12.502" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:06:12.503" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:06:12.502" starttime="20160130 01:06:12.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.507" starttime="20160130 01:06:12.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.508" starttime="20160130 01:06:12.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.509" starttime="20160130 01:06:12.508"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.510" starttime="20160130 01:06:12.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.511" starttime="20160130 01:06:12.511"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.513" starttime="20160130 01:06:12.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.514" starttime="20160130 01:06:12.513"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.515" starttime="20160130 01:06:12.515"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.518" starttime="20160130 01:06:12.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.521" starttime="20160130 01:06:12.519"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:12.523" starttime="20160130 01:06:12.522"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:12.525" starttime="20160130 01:06:12.390"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:06:12.526" starttime="20160130 01:06:09.687"></status>
</test>
<test id="s1-s2-s1-s1-t4" name="Test USSD Subscription Check">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160130 01:06:12.544" level="INFO">Killed</msg>
<status status="PASS" endtime="20160130 01:06:12.545" starttime="20160130 01:06:12.540"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:13.123" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160130 01:06:13.125" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160130 01:06:13.124" starttime="20160130 01:06:12.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160130 01:06:13.127" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:13.127" starttime="20160130 01:06:13.125"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160130 01:06:15.128" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160130 01:06:15.130" starttime="20160130 01:06:13.127"></status>
</kw>
<msg timestamp="20160130 01:06:15.134" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160130 01:06:15.132" starttime="20160130 01:06:12.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for setup check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:15.137" level="INFO">Pressing 3 for setup check</msg>
<status status="PASS" endtime="20160130 01:06:15.138" starttime="20160130 01:06:15.135"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20160130 01:06:15.145" level="INFO">3</msg>
<status status="PASS" endtime="20160130 01:06:15.146" starttime="20160130 01:06:15.139"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:15.165" level="INFO">=====================
What would you like to view?
1. Subscription Check
2. Your auto top up
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:15.168" level="INFO">${output} = =====================
What would you like to view?
1. Subscription Check
2. Your auto top up
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:15.167" starttime="20160130 01:06:15.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for subscription check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:15.171" level="INFO">Pressing 1 for subscription check</msg>
<status status="PASS" endtime="20160130 01:06:15.172" starttime="20160130 01:06:15.169"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160130 01:06:15.178" level="INFO">1</msg>
<status status="PASS" endtime="20160130 01:06:15.178" starttime="20160130 01:06:15.173"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:15.241" level="INFO">=====================
You are on standard rates.
1. Buy Plan
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:15.243" level="INFO">${output} = =====================
You are on standard rates.
1. Buy Plan
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:15.242" starttime="20160130 01:06:15.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>You are on standard rates.</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.247" starttime="20160130 01:06:15.244"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.270" starttime="20160130 01:06:15.268"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:06:15.274" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:06:15.306" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:15.308" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:06:15.307" starttime="20160130 01:06:15.272"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.311" starttime="20160130 01:06:15.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.314" starttime="20160130 01:06:15.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.317" starttime="20160130 01:06:15.315"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:06:15.321" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160130 01:06:15.380" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:15.381" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:06:15.382" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:06:15.381" starttime="20160130 01:06:15.318"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.390" starttime="20160130 01:06:15.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.393" starttime="20160130 01:06:15.391"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.396" starttime="20160130 01:06:15.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.398" starttime="20160130 01:06:15.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.401" starttime="20160130 01:06:15.399"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.404" starttime="20160130 01:06:15.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.407" starttime="20160130 01:06:15.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.409" starttime="20160130 01:06:15.408"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.412" starttime="20160130 01:06:15.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.415" starttime="20160130 01:06:15.413"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:15.418" starttime="20160130 01:06:15.416"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:15.419" starttime="20160130 01:06:15.248"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:06:15.420" starttime="20160130 01:06:12.528"></status>
</test>
<test id="s1-s2-s1-s1-t5" name="Test Buying">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160130 01:06:15.438" level="INFO">Killed</msg>
<status status="PASS" endtime="20160130 01:06:15.439" starttime="20160130 01:06:15.434"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:15.981" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160130 01:06:15.982" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160130 01:06:15.982" starttime="20160130 01:06:15.440"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160130 01:06:15.984" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:15.984" starttime="20160130 01:06:15.983"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160130 01:06:17.987" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160130 01:06:17.989" starttime="20160130 01:06:15.985"></status>
</kw>
<msg timestamp="20160130 01:06:17.993" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160130 01:06:17.991" starttime="20160130 01:06:15.429"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 4 for buying menu</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:17.996" level="INFO">Pressing 4 for buying menu</msg>
<status status="PASS" endtime="20160130 01:06:17.999" starttime="20160130 01:06:17.994"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20160130 01:06:18.005" level="INFO">4</msg>
<status status="PASS" endtime="20160130 01:06:18.006" starttime="20160130 01:06:18.000"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:18.207" level="INFO">=====================
You are on Standard rates. What would you like to do?
1. Add Combo
2. Buy an Add-On
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:18.208" level="INFO">${output} = =====================
You are on Standard rates. What would you like to do?
1. Add Combo
2. Buy an Add-On
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:18.207" starttime="20160130 01:06:18.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for subscription check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:18.209" level="INFO">Pressing 1 for subscription check</msg>
<status status="PASS" endtime="20160130 01:06:18.210" starttime="20160130 01:06:18.208"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160130 01:06:18.214" level="INFO">1</msg>
<status status="PASS" endtime="20160130 01:06:18.215" starttime="20160130 01:06:18.210"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:18.338" level="INFO">=====================
Enter the Combo number you want to buy, then press reply
1. $4 Busy Fingers
2. $5 Data Weekly
0. Next Page
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:18.339" level="INFO">${output} = =====================
Enter the Combo number you want to buy, then press reply
1. $4 Busy Fingers
2. $5 Data Weekly
0. Next Page
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:18.339" starttime="20160130 01:06:18.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Enter the Combo number</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.341" starttime="20160130 01:06:18.340"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for buying Weekly Combo offer</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:18.342" level="INFO">Pressing 2 for buying Weekly Combo offer</msg>
<status status="PASS" endtime="20160130 01:06:18.342" starttime="20160130 01:06:18.341"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160130 01:06:18.346" level="INFO">2</msg>
<status status="PASS" endtime="20160130 01:06:18.347" starttime="20160130 01:06:18.343"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:18.372" level="INFO">=====================
You have selected the Data Weekly Combo which costs $5.
Please select:
1. To confirm your purchase
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:18.372" level="INFO">${output} = =====================
You have selected the Data Weekly Combo which costs $5.
Please select:
1. To confirm your purchase
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:18.372" starttime="20160130 01:06:18.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>You have selected the Data Weekly Combo which costs $5.</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.374" starttime="20160130 01:06:18.373"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for confirmation</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:18.375" level="INFO">Pressing 1 for confirmation</msg>
<status status="PASS" endtime="20160130 01:06:18.376" starttime="20160130 01:06:18.375"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160130 01:06:18.379" level="INFO">1</msg>
<status status="PASS" endtime="20160130 01:06:18.379" starttime="20160130 01:06:18.376"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:18.477" level="INFO">=====================
Great, you've bought this Combo successfully. Please select:
0. Main Menu
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:18.479" level="INFO">${output} = =====================
Great, you've bought this Combo successfully. Please select:
0. Main Menu
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:18.478" starttime="20160130 01:06:18.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Great, you've bought this Combo successfully</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.482" starttime="20160130 01:06:18.480"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.493" starttime="20160130 01:06:18.491"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:06:18.495" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:06:18.527" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:18.528" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:06:18.527" starttime="20160130 01:06:18.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.530" starttime="20160130 01:06:18.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.532" starttime="20160130 01:06:18.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.535" starttime="20160130 01:06:18.533"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:06:18.538" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160130 01:06:18.600" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:18.602" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:06:18.602" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:06:18.601" starttime="20160130 01:06:18.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.608" starttime="20160130 01:06:18.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.610" starttime="20160130 01:06:18.609"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.612" starttime="20160130 01:06:18.611"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.614" starttime="20160130 01:06:18.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.616" starttime="20160130 01:06:18.615"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.618" starttime="20160130 01:06:18.617"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.621" starttime="20160130 01:06:18.619"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.623" starttime="20160130 01:06:18.622"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.625" starttime="20160130 01:06:18.624"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.627" starttime="20160130 01:06:18.626"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:18.629" starttime="20160130 01:06:18.628"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:18.630" starttime="20160130 01:06:18.484"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:06:18.631" starttime="20160130 01:06:15.422"></status>
</test>
<test id="s1-s2-s1-s1-t6" name="Test What Is My Number">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160130 01:06:18.647" level="INFO">Killed</msg>
<status status="PASS" endtime="20160130 01:06:18.648" starttime="20160130 01:06:18.643"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:19.207" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160130 01:06:19.210" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160130 01:06:19.208" starttime="20160130 01:06:18.649"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160130 01:06:19.211" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:19.212" starttime="20160130 01:06:19.210"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160130 01:06:21.214" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160130 01:06:21.215" starttime="20160130 01:06:19.212"></status>
</kw>
<msg timestamp="20160130 01:06:21.219" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160130 01:06:21.218" starttime="20160130 01:06:18.638"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 8 for last menu item</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:21.222" level="INFO">Pressing 8 for last menu item</msg>
<status status="PASS" endtime="20160130 01:06:21.223" starttime="20160130 01:06:21.221"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>8</arg>
</arguments>
<msg timestamp="20160130 01:06:21.231" level="INFO">8</msg>
<status status="PASS" endtime="20160130 01:06:21.232" starttime="20160130 01:06:21.225"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:21.252" level="INFO">=====================
What would you like to do?
1. Credit transfer
2. Use Call Me Back
3. What's my number?
4. What's included
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:21.254" level="INFO">${output} = =====================
What would you like to do?
1. Credit transfer
2. Use Call Me Back
3. What's my number?
4. What's included
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:21.253" starttime="20160130 01:06:21.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for what is my number service</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:21.257" level="INFO">Pressing 3 for what is my number service</msg>
<status status="PASS" endtime="20160130 01:06:21.257" starttime="20160130 01:06:21.255"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20160130 01:06:21.263" level="INFO">3</msg>
<status status="PASS" endtime="20160130 01:06:21.264" starttime="20160130 01:06:21.258"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:21.289" level="INFO">=====================
Your number is:
02041010000
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:21.290" level="INFO">${output} = =====================
Your number is:
02041010000
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:21.289" starttime="20160130 01:06:21.265"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>02041010000</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.293" starttime="20160130 01:06:21.291"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.304" starttime="20160130 01:06:21.302"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:06:21.307" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:06:21.339" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:21.341" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:06:21.340" starttime="20160130 01:06:21.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.343" starttime="20160130 01:06:21.342"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.346" starttime="20160130 01:06:21.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.349" starttime="20160130 01:06:21.347"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:06:21.352" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160130 01:06:21.415" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:21.417" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:06:21.417" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:06:21.416" starttime="20160130 01:06:21.350"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.425" starttime="20160130 01:06:21.419"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.428" starttime="20160130 01:06:21.427"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.431" starttime="20160130 01:06:21.429"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.434" starttime="20160130 01:06:21.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.436" starttime="20160130 01:06:21.435"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.439" starttime="20160130 01:06:21.437"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.442" starttime="20160130 01:06:21.440"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.445" starttime="20160130 01:06:21.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.448" starttime="20160130 01:06:21.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.450" starttime="20160130 01:06:21.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:21.453" starttime="20160130 01:06:21.451"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:21.454" starttime="20160130 01:06:21.296"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:06:21.455" starttime="20160130 01:06:18.633"></status>
</test>
<test id="s1-s2-s1-s1-t7" name="Test USSD Credit Transfer">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160130 01:06:21.473" level="INFO">Killed</msg>
<status status="PASS" endtime="20160130 01:06:21.474" starttime="20160130 01:06:21.470"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:21.999" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160130 01:06:22.002" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160130 01:06:22.000" starttime="20160130 01:06:21.475"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160130 01:06:22.003" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:22.004" starttime="20160130 01:06:22.002"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160130 01:06:24.006" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160130 01:06:24.007" starttime="20160130 01:06:22.004"></status>
</kw>
<msg timestamp="20160130 01:06:24.011" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160130 01:06:24.010" starttime="20160130 01:06:21.464"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 8 for last menu item</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:24.015" level="INFO">Pressing 8 for last menu item</msg>
<status status="PASS" endtime="20160130 01:06:24.015" starttime="20160130 01:06:24.013"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>8</arg>
</arguments>
<msg timestamp="20160130 01:06:24.022" level="INFO">8</msg>
<status status="PASS" endtime="20160130 01:06:24.023" starttime="20160130 01:06:24.017"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:24.043" level="INFO">=====================
What would you like to do?
1. Credit transfer
2. Use Call Me Back
3. What's my number?
4. What's included
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:24.045" level="INFO">${output} = =====================
What would you like to do?
1. Credit transfer
2. Use Call Me Back
3. What's my number?
4. What's included
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:24.044" starttime="20160130 01:06:24.024"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for credit transfer</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:24.048" level="INFO">Pressing 1 for credit transfer</msg>
<status status="PASS" endtime="20160130 01:06:24.049" starttime="20160130 01:06:24.046"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160130 01:06:24.055" level="INFO">1</msg>
<status status="PASS" endtime="20160130 01:06:24.055" starttime="20160130 01:06:24.050"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:24.098" level="INFO">=====================
Please enter the Skinny mobile number of the person getting your credit: 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:24.100" level="INFO">${output} = =====================
Please enter the Skinny mobile number of the person getting your credit: 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:24.099" starttime="20160130 01:06:24.057"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Entering recipient mobile number</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:24.103" level="INFO">Entering recipient mobile number</msg>
<status status="PASS" endtime="20160130 01:06:24.103" starttime="20160130 01:06:24.101"></status>
</kw>
<kw type="kw" name="${recipient} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160130 01:06:24.111" level="INFO">${recipient} = 642041010001</msg>
<status status="PASS" endtime="20160130 01:06:24.110" starttime="20160130 01:06:24.105"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${recipient}</arg>
</arguments>
<msg timestamp="20160130 01:06:24.117" level="INFO">642041010001</msg>
<status status="PASS" endtime="20160130 01:06:24.118" starttime="20160130 01:06:24.112"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:24.186" level="INFO">=====================
Your balance is $95.00.
Please enter a transfer amount in whole dollars: 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:24.187" level="INFO">${output} = =====================
Your balance is $95.00.
Please enter a transfer amount in whole dollars: 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:24.187" starttime="20160130 01:06:24.119"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Entering amount to transfer</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:24.189" level="INFO">Entering amount to transfer</msg>
<status status="PASS" endtime="20160130 01:06:24.189" starttime="20160130 01:06:24.188"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20160130 01:06:24.193" level="INFO">10</msg>
<status status="PASS" endtime="20160130 01:06:24.194" starttime="20160130 01:06:24.190"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:24.249" level="INFO">=====================
Do you really want to do this, press 1. If not, press # 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:24.250" level="INFO">${output} = =====================
Do you really want to do this, press 1. If not, press # 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:24.250" starttime="20160130 01:06:24.196"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Final confirmation</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:24.253" level="INFO">Final confirmation</msg>
<status status="PASS" endtime="20160130 01:06:24.254" starttime="20160130 01:06:24.252"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160130 01:06:24.260" level="INFO">1</msg>
<status status="PASS" endtime="20160130 01:06:24.261" starttime="20160130 01:06:24.255"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160130 01:06:24.357" level="INFO">=====================
Nice one. Your mate 2041010001 has been sent $10.00 credit from your balance. 
=====================
User input:</msg>
<msg timestamp="20160130 01:06:24.359" level="INFO">${output} = =====================
Nice one. Your mate 2041010001 has been sent $10.00 credit from your balance. 
=====================
User input:</msg>
<status status="PASS" endtime="20160130 01:06:24.358" starttime="20160130 01:06:24.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Nice one.</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.363" starttime="20160130 01:06:24.361"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.373" starttime="20160130 01:06:24.371"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:06:24.376" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:06:24.409" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:24.410" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:06:24.409" starttime="20160130 01:06:24.375"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.413" starttime="20160130 01:06:24.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.416" starttime="20160130 01:06:24.414"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.418" starttime="20160130 01:06:24.417"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:06:24.422" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160130 01:06:24.484" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:24.486" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:06:24.486" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:06:24.485" starttime="20160130 01:06:24.419"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.493" starttime="20160130 01:06:24.487"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.496" starttime="20160130 01:06:24.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.498" starttime="20160130 01:06:24.497"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.501" starttime="20160130 01:06:24.499"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.504" starttime="20160130 01:06:24.502"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.507" starttime="20160130 01:06:24.505"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.509" starttime="20160130 01:06:24.508"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.512" starttime="20160130 01:06:24.511"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.515" starttime="20160130 01:06:24.513"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.518" starttime="20160130 01:06:24.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.520" starttime="20160130 01:06:24.519"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:24.521" starttime="20160130 01:06:24.365"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:06:24.523" starttime="20160130 01:06:21.457"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.562" starttime="20160130 01:06:24.557"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:24.565" starttime="20160130 01:06:24.551"></status>
</kw>
<doc>This suite uses USSDtest.py class to test the USSD interface. Various test cases (scenarios) will be checked</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:06:24.565" starttime="20160130 01:06:00.868"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:06:24.634" starttime="20160130 01:06:00.855"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:06:24.668" starttime="20160130 01:06:00.841"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr" id="s1-s3" name="Xdr">
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification" id="s1-s3-s1" name="XDR-ticket-verification">
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/XDR_Test-robot-suite.txt" id="s1-s3-s1-s1" name="XDR Test-robot-suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160130 01:06:24.816" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160130 01:06:24.818" level="INFO">${time} = Sat Jan 30 01:06:24 CET 2016</msg>
<status status="PASS" endtime="20160130 01:06:24.818" starttime="20160130 01:06:24.811"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:24.820" level="INFO">Date and time: Sat Jan 30 01:06:24 CET 2016</msg>
<status status="PASS" endtime="20160130 01:06:24.821" starttime="20160130 01:06:24.819"></status>
</kw>
<kw type="kw" name="NTP Check on XDR">
<doc>Called at suite setup to check if ntp is up and running</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:24.875" starttime="20160130 01:06:24.824"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160130 01:06:24.878" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:06:26.153" level="INFO">Read output: Last login: Sat Jan 30 00:05:53 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m</msg>
<msg timestamp="20160130 01:06:26.156" level="INFO">${output_login} = Last login: Sat Jan 30 00:05:53 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160130 01:06:26.154" starttime="20160130 01:06:24.876"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160130 01:06:26.159" level="INFO">Last login: Sat Jan 30 00:05:53 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160130 01:06:26.160" starttime="20160130 01:06:26.157"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ntpstat</arg>
</arguments>
<msg timestamp="20160130 01:06:26.162" level="INFO">Executing command 'ntpstat'.</msg>
<msg timestamp="20160130 01:06:26.203" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:26.205" level="INFO">${output} = synchronised to NTP server (10.189.251.100) at stratum 3 
   time correct to within 69 ms
   polling server every 1024 s</msg>
<status status="PASS" endtime="20160130 01:06:26.204" starttime="20160130 01:06:26.161"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:06:26.209" starttime="20160130 01:06:26.207"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>synchronised to NTP server</arg>
<arg>msg=NTP sync problem!</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:26.214" starttime="20160130 01:06:26.212"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NTP is synced</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:26.217" level="INFO">NTP is synced</msg>
<status status="PASS" endtime="20160130 01:06:26.218" starttime="20160130 01:06:26.215"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:26.219" starttime="20160130 01:06:24.821"></status>
</kw>
<kw type="kw" name="Log The XDR Version">
<doc>Called at suite setup procedure to check if XDR is running and to see which version is there.</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:26.279" starttime="20160130 01:06:26.227"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160130 01:06:26.282" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:06:27.496" level="INFO">Read output: Last login: Sat Jan 30 00:06:25 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m</msg>
<msg timestamp="20160130 01:06:27.499" level="INFO">${output_login} = Last login: Sat Jan 30 00:06:25 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160130 01:06:27.497" starttime="20160130 01:06:26.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160130 01:06:27.502" level="INFO">Last login: Sat Jan 30 00:06:25 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160130 01:06:27.503" starttime="20160130 01:06:27.500"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-xdr status</arg>
</arguments>
<msg timestamp="20160130 01:06:27.505" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160130 01:06:27.888" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:27.890" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:06:27.889" starttime="20160130 01:06:27.504"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR Version and pid: ${output}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:27.894" level="INFO">XDR Version and pid: I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160130 01:06:27.895" starttime="20160130 01:06:27.891"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running PID:</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:27.898" starttime="20160130 01:06:27.896"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:06:27.903" starttime="20160130 01:06:27.899"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:27.905" starttime="20160130 01:06:26.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SUT:${SUT_RESOURCE}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:27.909" level="INFO">SUT:/opt/robot/robotworkspace/suts/TNZ-resource.txt</msg>
<status status="PASS" endtime="20160130 01:06:27.910" starttime="20160130 01:06:27.906"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR IP address:${XDR HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:27.913" level="INFO">XDR IP address:10.105.113.171</msg>
<status status="PASS" endtime="20160130 01:06:27.914" starttime="20160130 01:06:27.911"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Using ${SUT RELEASE TAG PREFIX} tickets</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:27.917" level="INFO">Using R5.3 tickets</msg>
<status status="PASS" endtime="20160130 01:06:27.918" starttime="20160130 01:06:27.915"></status>
</kw>
<kw type="kw" name="Check AMQ Availability">
<doc>Called at suite setup procedure to check if AMQ is UP</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${AMQ-XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:27.966" starttime="20160130 01:06:27.925"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160130 01:06:27.968" level="INFO">Logging into '10.105.113.124:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:06:29.226" level="INFO">Read output: Last login: Fri Jan 29 02:39:19 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb13 ~]$[m</msg>
<msg timestamp="20160130 01:06:29.229" level="INFO">${output_login} = Last login: Fri Jan 29 02:39:19 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160130 01:06:29.228" starttime="20160130 01:06:27.966"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>netstat -an | grep ${AMQ-XDR PORT}</arg>
</arguments>
<msg timestamp="20160130 01:06:29.233" level="INFO">Executing command 'netstat -an | grep 61616'.</msg>
<msg timestamp="20160130 01:06:29.311" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:29.312" level="INFO">${output} = tcp        0      0 :::61616                    :::*                        LISTEN      
tcp        0      0 ::ffff:10.105.113.124:61616 ::ffff:10.189.230.161:59028 ESTABLISHED 
tcp        0      0 ::...</msg>
<status status="PASS" endtime="20160130 01:06:29.312" starttime="20160130 01:06:29.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>LISTEN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:29.315" starttime="20160130 01:06:29.314"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${output}=</arg>
<arg>Execute Command</arg>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} query -QQueue=${AMQ-XDR CRCE CDR QUEUE} | grep ConsumerCount</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:29.318" starttime="20160130 01:06:29.317"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} status</arg>
</arguments>
<msg timestamp="20160130 01:06:29.321" level="INFO">Executing command 'sudo /etc/init.d/amq-xdr-tb13 status'.</msg>
<msg timestamp="20160130 01:06:29.461" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:29.462" level="INFO">${output} = INFO: Using default configuration
(you can configure options in one of these file: /etc/default/activemq /root/.activemqrc)

INFO: Invoke the following command to create a configuration file
/etc/init...</msg>
<status status="PASS" endtime="20160130 01:06:29.462" starttime="20160130 01:06:29.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>ActiveMQ is running</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:29.464" starttime="20160130 01:06:29.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${count}=</arg>
<arg>Get Substring</arg>
<arg>${output}</arg>
<arg>16</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:29.465" starttime="20160130 01:06:29.464"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Evaluate</arg>
<arg>0 &lt; ${count}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:29.466" starttime="20160130 01:06:29.465"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:06:29.468" starttime="20160130 01:06:29.467"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:29.468" starttime="20160130 01:06:27.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>AMQ and consumers are UP</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160130 01:06:29.470" level="INFO">AMQ and consumers are UP</msg>
<status status="PASS" endtime="20160130 01:06:29.470" starttime="20160130 01:06:29.469"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${XDR DB HOST}:${XDR DB PORT}/${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:29.540" starttime="20160130 01:06:29.471"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:29.614" starttime="20160130 01:06:29.560"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:29.616" starttime="20160130 01:06:29.554"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:29.807" starttime="20160130 01:06:29.634"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:29.809" starttime="20160130 01:06:29.628"></status>
</kw>
<kw type="kw" name="${JNDI_PROVIDER_URL} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>tcp://${AMQ-XDR HOST}:${AMQ-XDR PORT}?jms.useAsyncSend=false</arg>
</arguments>
<msg timestamp="20160130 01:06:29.814" level="INFO">${JNDI_PROVIDER_URL} = tcp://10.105.113.124:61616?jms.useAsyncSend=false</msg>
<status status="PASS" endtime="20160130 01:06:29.813" starttime="20160130 01:06:29.810"></status>
</kw>
<kw type="kw" name="JMSLibrary.Init Provider">
<doc></doc>
<arguments>
<arg>${INITIAL_CONTEXT_FACTORY}</arg>
<arg>${JNDI_PROVIDER_URL}</arg>
<arg>connect=true</arg>
<arg>start=true</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:30.235" starttime="20160130 01:06:29.815"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:30.238" starttime="20160130 01:06:24.808"></status>
</kw>
<test id="s1-s3-s1-s1-t1" name="Test MOC ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC}</arg>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:30.279" starttime="20160130 01:06:30.279"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:30.323" starttime="20160130 01:06:30.283"></status>
</kw>
<msg timestamp="20160130 01:06:30.324" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160130 01:06:30.323" starttime="20160130 01:06:30.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:06:30.329" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:06:30.748" level="INFO">Read output: Last login: Sat Jan 30 00:06:26 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:06:30.749" starttime="20160130 01:06:30.328"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:30.750" starttime="20160130 01:06:30.324"></status>
</kw>
<msg timestamp="20160130 01:06:30.751" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160130 01:06:30.751" starttime="20160130 01:06:30.274"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:30.757" starttime="20160130 01:06:30.756"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:06:30.759" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160130 01:06:30.762" starttime="20160130 01:06:30.758"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:30.763" starttime="20160130 01:06:30.753"></status>
</kw>
<msg timestamp="20160130 01:06:30.764" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160130 01:06:30.763" starttime="20160130 01:06:30.269"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:30.777" starttime="20160130 01:06:30.773"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:30.778" starttime="20160130 01:06:30.770"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:30.804" starttime="20160130 01:06:30.787"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:30.816" starttime="20160130 01:06:30.805"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:30.817" starttime="20160130 01:06:30.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160130 01:06:40.822" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160130 01:06:40.824" starttime="20160130 01:06:30.818"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:40.845" starttime="20160130 01:06:40.843"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160130 01:06:40.853" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160130 01:06:40.853" starttime="20160130 01:06:40.846"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160130 01:06:40.860" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160130 01:06:40.860" starttime="20160130 01:06:40.855"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:40.871" starttime="20160130 01:06:40.869"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:06:40.874" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:06:40.911" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:40.913" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:06:40.912" starttime="20160130 01:06:40.872"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:40.916" starttime="20160130 01:06:40.914"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:40.918" starttime="20160130 01:06:40.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:40.921" starttime="20160130 01:06:40.919"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:06:40.925" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160130 01:06:40.988" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:40.990" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:06:40.990" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:06:40.989" starttime="20160130 01:06:40.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:40.997" starttime="20160130 01:06:40.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.000" starttime="20160130 01:06:40.998"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.004" starttime="20160130 01:06:41.002"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.007" starttime="20160130 01:06:41.005"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.010" starttime="20160130 01:06:41.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.013" starttime="20160130 01:06:41.011"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.016" starttime="20160130 01:06:41.014"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.019" starttime="20160130 01:06:41.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.022" starttime="20160130 01:06:41.020"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.024" starttime="20160130 01:06:41.023"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.027" starttime="20160130 01:06:41.025"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:41.028" starttime="20160130 01:06:40.862"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:06:41.032" level="INFO">Starting command 'cat tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160130 01:06:41.036" starttime="20160130 01:06:41.030"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:06:41.039" level="INFO">Reading output of command 'cat tmpfilemonitor4.log'.</msg>
<msg timestamp="20160130 01:06:41.068" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:41.070" level="INFO">${stdout_string} = [2016-01-30 00:06:30,813][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:06:41.069" starttime="20160130 01:06:41.037"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:06:41.073" level="INFO">Executing command 'rm tmpfilemonitor4.log'.</msg>
<msg timestamp="20160130 01:06:41.143" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160130 01:06:41.144" starttime="20160130 01:06:41.071"></status>
</kw>
<msg timestamp="20160130 01:06:41.147" level="INFO">${tailed_text} = [2016-01-30 00:06:30,813][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:06:41.146" starttime="20160130 01:06:40.836"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160130 01:06:41.159" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MOC_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MOC_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:06:41.160" starttime="20160130 01:06:41.155"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:41.161" starttime="20160130 01:06:41.149"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.171" starttime="20160130 01:06:41.169"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.174" starttime="20160130 01:06:41.172"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:41.176" starttime="20160130 01:06:41.162"></status>
</kw>
<msg timestamp="20160130 01:06:41.179" level="INFO">${tailed_text} = [2016-01-30 00:06:30,813][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:06:41.178" starttime="20160130 01:06:40.828"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.210" starttime="20160130 01:06:41.209"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.258" starttime="20160130 01:06:41.212"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.261" starttime="20160130 01:06:41.259"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160130 01:06:41.264" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:06:41.266" level="INFO">${queryResultSetLines} = 1008677|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessi...</msg>
<status status="PASS" endtime="20160130 01:06:41.266" starttime="20160130 01:06:41.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.269" starttime="20160130 01:06:41.268"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160130 01:06:41.273" level="INFO">1 lines returned</msg>
<msg timestamp="20160130 01:06:41.275" level="INFO">@{queryResultSet} = [ 1008677|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSes...</msg>
<status status="PASS" endtime="20160130 01:06:41.274" starttime="20160130 01:06:41.271"></status>
</kw>
<msg timestamp="20160130 01:06:41.278" level="INFO">@{queryRows} = [ 1008677|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSes...</msg>
<status status="PASS" endtime="20160130 01:06:41.277" starttime="20160130 01:06:41.201"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160130 01:06:41.282" level="INFO">Length is 1</msg>
<msg timestamp="20160130 01:06:41.283" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160130 01:06:41.283" starttime="20160130 01:06:41.279"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160130 01:06:41.286" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160130 01:06:41.288" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160130 01:06:41.287" starttime="20160130 01:06:41.284"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160130 01:06:41.297" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:06:41.298" starttime="20160130 01:06:41.295"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:41.299" starttime="20160130 01:06:41.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.305" starttime="20160130 01:06:41.300"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:41.306" starttime="20160130 01:06:41.192"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.330" starttime="20160130 01:06:41.327"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:41.331" starttime="20160130 01:06:41.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.337" starttime="20160130 01:06:41.332"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:41.338" starttime="20160130 01:06:41.313"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:41.339" starttime="20160130 01:06:41.307"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:41.340" starttime="20160130 01:06:30.250"></status>
</kw>
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. 

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:06:41.342" starttime="20160130 01:06:30.240"></status>
</test>
<test id="s1-s3-s1-s1-t2" name="Test SMS ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SMS}</arg>
<arg>SMS</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.397" starttime="20160130 01:06:41.396"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.440" starttime="20160130 01:06:41.400"></status>
</kw>
<msg timestamp="20160130 01:06:41.441" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160130 01:06:41.441" starttime="20160130 01:06:41.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:06:41.449" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:06:41.844" level="INFO">Read output: Last login: Sat Jan 30 00:06:30 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:06:41.845" starttime="20160130 01:06:41.446"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:41.846" starttime="20160130 01:06:41.442"></status>
</kw>
<msg timestamp="20160130 01:06:41.848" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160130 01:06:41.848" starttime="20160130 01:06:41.389"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.860" starttime="20160130 01:06:41.857"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:06:41.863" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160130 01:06:41.867" starttime="20160130 01:06:41.861"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:41.868" starttime="20160130 01:06:41.850"></status>
</kw>
<msg timestamp="20160130 01:06:41.870" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160130 01:06:41.869" starttime="20160130 01:06:41.376"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.896" starttime="20160130 01:06:41.889"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:41.897" starttime="20160130 01:06:41.883"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.907" starttime="20160130 01:06:41.905"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:41.917" starttime="20160130 01:06:41.908"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:41.918" starttime="20160130 01:06:41.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160130 01:06:51.922" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160130 01:06:51.924" starttime="20160130 01:06:41.919"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:51.945" starttime="20160130 01:06:51.943"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160130 01:06:51.952" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160130 01:06:51.951" starttime="20160130 01:06:51.946"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160130 01:06:51.958" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160130 01:06:51.958" starttime="20160130 01:06:51.953"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:51.969" starttime="20160130 01:06:51.967"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:06:51.972" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:06:52.014" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:52.016" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:06:52.015" starttime="20160130 01:06:51.970"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.020" starttime="20160130 01:06:52.018"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.022" starttime="20160130 01:06:52.021"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.025" starttime="20160130 01:06:52.023"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:06:52.030" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160130 01:06:52.093" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:52.095" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:06:52.096" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:06:52.094" starttime="20160130 01:06:52.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.103" starttime="20160130 01:06:52.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.105" starttime="20160130 01:06:52.104"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.108" starttime="20160130 01:06:52.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.111" starttime="20160130 01:06:52.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.114" starttime="20160130 01:06:52.112"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.116" starttime="20160130 01:06:52.115"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.119" starttime="20160130 01:06:52.117"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.122" starttime="20160130 01:06:52.120"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.125" starttime="20160130 01:06:52.123"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.128" starttime="20160130 01:06:52.126"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.130" starttime="20160130 01:06:52.129"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:52.131" starttime="20160130 01:06:51.960"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:06:52.135" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160130 01:06:52.139" starttime="20160130 01:06:52.133"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:06:52.141" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20160130 01:06:52.174" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:06:52.176" level="INFO">${stdout_string} = [2016-01-30 00:06:41,913][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:06:52.175" starttime="20160130 01:06:52.140"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:06:52.179" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20160130 01:06:52.252" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160130 01:06:52.253" starttime="20160130 01:06:52.177"></status>
</kw>
<msg timestamp="20160130 01:06:52.256" level="INFO">${tailed_text} = [2016-01-30 00:06:41,913][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:06:52.255" starttime="20160130 01:06:51.936"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160130 01:06:52.268" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/SMS_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/SMS_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:06:52.269" starttime="20160130 01:06:52.264"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:52.270" starttime="20160130 01:06:52.258"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.280" starttime="20160130 01:06:52.278"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.284" starttime="20160130 01:06:52.282"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:52.288" starttime="20160130 01:06:52.271"></status>
</kw>
<msg timestamp="20160130 01:06:52.290" level="INFO">${tailed_text} = [2016-01-30 00:06:41,913][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:06:52.289" starttime="20160130 01:06:51.928"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.322" starttime="20160130 01:06:52.321"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.330" starttime="20160130 01:06:52.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.332" starttime="20160130 01:06:52.331"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160130 01:06:52.336" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:06:52.338" level="INFO">${queryResultSetLines} = 1008678|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:36:19.022+00|2015-02-22 15:00:50.025+00|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.0|Charge|0|53099204...</msg>
<status status="PASS" endtime="20160130 01:06:52.337" starttime="20160130 01:06:52.334"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.340" starttime="20160130 01:06:52.339"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160130 01:06:52.343" level="INFO">1 lines returned</msg>
<msg timestamp="20160130 01:06:52.345" level="INFO">@{queryResultSet} = [ 1008678|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:36:19.022+00|2015-02-22 15:00:50.025+00|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.0|Charge|0|530992...</msg>
<status status="PASS" endtime="20160130 01:06:52.344" starttime="20160130 01:06:52.341"></status>
</kw>
<msg timestamp="20160130 01:06:52.347" level="INFO">@{queryRows} = [ 1008678|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:36:19.022+00|2015-02-22 15:00:50.025+00|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.0|Charge|0|530992...</msg>
<status status="PASS" endtime="20160130 01:06:52.346" starttime="20160130 01:06:52.313"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160130 01:06:52.351" level="INFO">Length is 1</msg>
<msg timestamp="20160130 01:06:52.352" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160130 01:06:52.351" starttime="20160130 01:06:52.348"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160130 01:06:52.355" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160130 01:06:52.356" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160130 01:06:52.356" starttime="20160130 01:06:52.353"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160130 01:06:52.365" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:06:52.366" starttime="20160130 01:06:52.363"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:52.367" starttime="20160130 01:06:52.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.373" starttime="20160130 01:06:52.368"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:52.374" starttime="20160130 01:06:52.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.394" starttime="20160130 01:06:52.393"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:52.395" starttime="20160130 01:06:52.389"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.398" starttime="20160130 01:06:52.395"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:52.398" starttime="20160130 01:06:52.381"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:52.399" starttime="20160130 01:06:52.375"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:52.399" starttime="20160130 01:06:41.354"></status>
</kw>
<doc>Send the SMS XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:06:52.400" starttime="20160130 01:06:41.345"></status>
</test>
<test id="s1-s3-s1-s1-t3" name="Test DATA ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${DATA}</arg>
<arg>DATA</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.426" starttime="20160130 01:06:52.425"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.482" starttime="20160130 01:06:52.429"></status>
</kw>
<msg timestamp="20160130 01:06:52.484" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160130 01:06:52.483" starttime="20160130 01:06:52.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:06:52.494" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:06:52.886" level="INFO">Read output: Last login: Sat Jan 30 00:06:41 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:06:52.887" starttime="20160130 01:06:52.491"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:52.888" starttime="20160130 01:06:52.485"></status>
</kw>
<msg timestamp="20160130 01:06:52.890" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160130 01:06:52.890" starttime="20160130 01:06:52.420"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.897" starttime="20160130 01:06:52.895"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:06:52.898" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160130 01:06:52.901" starttime="20160130 01:06:52.897"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:52.902" starttime="20160130 01:06:52.892"></status>
</kw>
<msg timestamp="20160130 01:06:52.903" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160130 01:06:52.902" starttime="20160130 01:06:52.415"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.940" starttime="20160130 01:06:52.912"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:52.942" starttime="20160130 01:06:52.908"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.952" starttime="20160130 01:06:52.950"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:06:52.962" starttime="20160130 01:06:52.953"></status>
</kw>
<status status="PASS" endtime="20160130 01:06:52.963" starttime="20160130 01:06:52.943"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160130 01:07:02.967" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160130 01:07:02.969" starttime="20160130 01:06:52.964"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:02.990" starttime="20160130 01:07:02.988"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160130 01:07:02.997" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160130 01:07:02.996" starttime="20160130 01:07:02.991"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160130 01:07:03.003" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160130 01:07:03.004" starttime="20160130 01:07:02.998"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.016" starttime="20160130 01:07:03.013"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:07:03.019" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:07:03.056" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:07:03.058" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:07:03.057" starttime="20160130 01:07:03.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.061" starttime="20160130 01:07:03.059"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.064" starttime="20160130 01:07:03.062"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.066" starttime="20160130 01:07:03.065"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:07:03.070" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160130 01:07:03.135" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:07:03.137" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:07:03.138" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:07:03.136" starttime="20160130 01:07:03.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.145" starttime="20160130 01:07:03.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.148" starttime="20160130 01:07:03.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.151" starttime="20160130 01:07:03.149"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.153" starttime="20160130 01:07:03.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.156" starttime="20160130 01:07:03.154"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.159" starttime="20160130 01:07:03.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.162" starttime="20160130 01:07:03.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.165" starttime="20160130 01:07:03.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.167" starttime="20160130 01:07:03.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.170" starttime="20160130 01:07:03.168"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.172" starttime="20160130 01:07:03.171"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:03.174" starttime="20160130 01:07:03.006"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:07:03.177" level="INFO">Starting command 'cat tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160130 01:07:03.181" starttime="20160130 01:07:03.175"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:07:03.183" level="INFO">Reading output of command 'cat tmpfilemonitor6.log'.</msg>
<msg timestamp="20160130 01:07:03.215" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:07:03.217" level="INFO">${stdout_string} = [2016-01-30 00:06:52,957][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:07:03.216" starttime="20160130 01:07:03.182"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:07:03.220" level="INFO">Executing command 'rm tmpfilemonitor6.log'.</msg>
<msg timestamp="20160130 01:07:03.295" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160130 01:07:03.296" starttime="20160130 01:07:03.218"></status>
</kw>
<msg timestamp="20160130 01:07:03.299" level="INFO">${tailed_text} = [2016-01-30 00:06:52,957][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:07:03.298" starttime="20160130 01:07:02.981"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160130 01:07:03.311" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/DATA_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/DATA_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:07:03.312" starttime="20160130 01:07:03.307"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:03.313" starttime="20160130 01:07:03.300"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.323" starttime="20160130 01:07:03.321"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.326" starttime="20160130 01:07:03.324"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:03.330" starttime="20160130 01:07:03.314"></status>
</kw>
<msg timestamp="20160130 01:07:03.333" level="INFO">${tailed_text} = [2016-01-30 00:06:52,957][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:07:03.331" starttime="20160130 01:07:02.973"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.364" starttime="20160130 01:07:03.363"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.420" starttime="20160130 01:07:03.365"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.423" starttime="20160130 01:07:03.421"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160130 01:07:03.426" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:07:03.428" level="INFO">${queryResultSetLines} = 1008679|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:37:42.312+00|2015-02-23 09:37:06+00|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|FinalCommit|BasicSes...</msg>
<status status="PASS" endtime="20160130 01:07:03.427" starttime="20160130 01:07:03.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.431" starttime="20160130 01:07:03.429"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160130 01:07:03.434" level="INFO">1 lines returned</msg>
<msg timestamp="20160130 01:07:03.435" level="INFO">@{queryResultSet} = [ 1008679|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:37:42.312+00|2015-02-23 09:37:06+00|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|FinalCommit|BasicS...</msg>
<status status="PASS" endtime="20160130 01:07:03.434" starttime="20160130 01:07:03.432"></status>
</kw>
<msg timestamp="20160130 01:07:03.437" level="INFO">@{queryRows} = [ 1008679|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:37:42.312+00|2015-02-23 09:37:06+00|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|FinalCommit|BasicS...</msg>
<status status="PASS" endtime="20160130 01:07:03.437" starttime="20160130 01:07:03.355"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160130 01:07:03.441" level="INFO">Length is 1</msg>
<msg timestamp="20160130 01:07:03.442" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160130 01:07:03.441" starttime="20160130 01:07:03.438"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160130 01:07:03.445" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160130 01:07:03.446" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160130 01:07:03.446" starttime="20160130 01:07:03.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160130 01:07:03.456" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:07:03.456" starttime="20160130 01:07:03.453"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:03.457" starttime="20160130 01:07:03.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.463" starttime="20160130 01:07:03.458"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:03.464" starttime="20160130 01:07:03.346"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.487" starttime="20160130 01:07:03.484"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:03.488" starttime="20160130 01:07:03.479"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.494" starttime="20160130 01:07:03.489"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:03.495" starttime="20160130 01:07:03.471"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:03.496" starttime="20160130 01:07:03.465"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:03.497" starttime="20160130 01:06:52.405"></status>
</kw>
<doc>Send the DATA XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:07:03.499" starttime="20160130 01:06:52.402"></status>
</test>
<test id="s1-s3-s1-s1-t4" name="Test CRCE Recharge ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Rec}</arg>
<arg>CRCE_Rec</arg>
<arg>crce_recharge</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.554" starttime="20160130 01:07:03.553"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.615" starttime="20160130 01:07:03.562"></status>
</kw>
<msg timestamp="20160130 01:07:03.617" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160130 01:07:03.617" starttime="20160130 01:07:03.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:07:03.627" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:07:03.942" level="INFO">Read output: Last login: Sat Jan 30 00:06:52 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:07:03.943" starttime="20160130 01:07:03.624"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:03.944" starttime="20160130 01:07:03.618"></status>
</kw>
<msg timestamp="20160130 01:07:03.946" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160130 01:07:03.946" starttime="20160130 01:07:03.543"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:03.958" starttime="20160130 01:07:03.955"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:07:03.961" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160130 01:07:03.965" starttime="20160130 01:07:03.959"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:03.966" starttime="20160130 01:07:03.948"></status>
</kw>
<msg timestamp="20160130 01:07:03.968" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160130 01:07:03.967" starttime="20160130 01:07:03.531"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:04.410" starttime="20160130 01:07:03.988"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:04.413" starttime="20160130 01:07:03.981"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:04.424" starttime="20160130 01:07:04.422"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:04.438" starttime="20160130 01:07:04.425"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:04.439" starttime="20160130 01:07:04.415"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160130 01:07:14.445" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160130 01:07:14.449" starttime="20160130 01:07:04.440"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.474" starttime="20160130 01:07:14.471"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160130 01:07:14.482" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160130 01:07:14.481" starttime="20160130 01:07:14.475"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160130 01:07:14.489" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160130 01:07:14.490" starttime="20160130 01:07:14.483"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.501" starttime="20160130 01:07:14.499"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:07:14.504" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:07:14.544" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:07:14.545" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:07:14.545" starttime="20160130 01:07:14.502"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.548" starttime="20160130 01:07:14.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.551" starttime="20160130 01:07:14.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.553" starttime="20160130 01:07:14.552"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:07:14.557" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160130 01:07:14.620" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:07:14.622" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:07:14.623" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:07:14.621" starttime="20160130 01:07:14.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.629" starttime="20160130 01:07:14.624"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.632" starttime="20160130 01:07:14.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.635" starttime="20160130 01:07:14.633"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.637" starttime="20160130 01:07:14.636"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.640" starttime="20160130 01:07:14.638"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.643" starttime="20160130 01:07:14.641"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.646" starttime="20160130 01:07:14.644"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.649" starttime="20160130 01:07:14.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.651" starttime="20160130 01:07:14.650"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.654" starttime="20160130 01:07:14.652"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.657" starttime="20160130 01:07:14.655"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:14.658" starttime="20160130 01:07:14.491"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:07:14.661" level="INFO">Starting command 'cat tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160130 01:07:14.665" starttime="20160130 01:07:14.659"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:07:14.668" level="INFO">Reading output of command 'cat tmpfilemonitor7.log'.</msg>
<msg timestamp="20160130 01:07:14.699" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:07:14.700" level="INFO">${stdout_string} = [2016-01-30 00:07:04,430][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:07:14.700" starttime="20160130 01:07:14.666"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:07:14.704" level="INFO">Executing command 'rm tmpfilemonitor7.log'.</msg>
<msg timestamp="20160130 01:07:14.775" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160130 01:07:14.775" starttime="20160130 01:07:14.701"></status>
</kw>
<msg timestamp="20160130 01:07:14.778" level="INFO">${tailed_text} = [2016-01-30 00:07:04,430][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:07:14.777" starttime="20160130 01:07:14.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160130 01:07:14.790" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Rec_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Rec_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:07:14.790" starttime="20160130 01:07:14.786"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:14.791" starttime="20160130 01:07:14.779"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.804" starttime="20160130 01:07:14.802"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.807" starttime="20160130 01:07:14.805"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:14.812" starttime="20160130 01:07:14.793"></status>
</kw>
<msg timestamp="20160130 01:07:14.813" level="INFO">${tailed_text} = [2016-01-30 00:07:04,430][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:07:14.813" starttime="20160130 01:07:14.455"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.828" starttime="20160130 01:07:14.828"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.883" starttime="20160130 01:07:14.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.886" starttime="20160130 01:07:14.884"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160130 01:07:14.889" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:07:14.891" level="INFO">${queryResultSetLines} = 1043838|5.3|110|RECHARGE|1|CRCE|crce01.tb13|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|...</msg>
<status status="PASS" endtime="20160130 01:07:14.891" starttime="20160130 01:07:14.887"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.894" starttime="20160130 01:07:14.893"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160130 01:07:14.897" level="INFO">1 lines returned</msg>
<msg timestamp="20160130 01:07:14.899" level="INFO">@{queryResultSet} = [ 1043838|5.3|110|RECHARGE|1|CRCE|crce01.tb13|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1....</msg>
<status status="PASS" endtime="20160130 01:07:14.898" starttime="20160130 01:07:14.895"></status>
</kw>
<msg timestamp="20160130 01:07:14.901" level="INFO">@{queryRows} = [ 1043838|5.3|110|RECHARGE|1|CRCE|crce01.tb13|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1....</msg>
<status status="PASS" endtime="20160130 01:07:14.900" starttime="20160130 01:07:14.824"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160130 01:07:14.904" level="INFO">Length is 1</msg>
<msg timestamp="20160130 01:07:14.906" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160130 01:07:14.905" starttime="20160130 01:07:14.902"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160130 01:07:14.908" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160130 01:07:14.910" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160130 01:07:14.909" starttime="20160130 01:07:14.907"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160130 01:07:14.919" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:07:14.920" starttime="20160130 01:07:14.917"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:14.921" starttime="20160130 01:07:14.911"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.929" starttime="20160130 01:07:14.923"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:14.930" starttime="20160130 01:07:14.820"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.953" starttime="20160130 01:07:14.950"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:14.954" starttime="20160130 01:07:14.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:14.960" starttime="20160130 01:07:14.955"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:14.961" starttime="20160130 01:07:14.937"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:14.962" starttime="20160130 01:07:14.931"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:14.963" starttime="20160130 01:07:03.510"></status>
</kw>
<doc>Send the CRCE Recharge XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:07:14.965" starttime="20160130 01:07:03.502"></status>
</test>
<test id="s1-s3-s1-s1-t5" name="Test CRCE Confirmation ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Conf}</arg>
<arg>CRCE_Conf</arg>
<arg>crce_conf</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:15.021" starttime="20160130 01:07:15.020"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:15.073" starttime="20160130 01:07:15.026"></status>
</kw>
<msg timestamp="20160130 01:07:15.074" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160130 01:07:15.074" starttime="20160130 01:07:15.022"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:07:15.084" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:07:15.483" level="INFO">Read output: Last login: Sat Jan 30 00:07:03 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:07:15.484" starttime="20160130 01:07:15.082"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:15.485" starttime="20160130 01:07:15.075"></status>
</kw>
<msg timestamp="20160130 01:07:15.487" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160130 01:07:15.487" starttime="20160130 01:07:15.014"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:15.499" starttime="20160130 01:07:15.496"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:07:15.502" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160130 01:07:15.506" starttime="20160130 01:07:15.500"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:15.507" starttime="20160130 01:07:15.489"></status>
</kw>
<msg timestamp="20160130 01:07:15.509" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160130 01:07:15.509" starttime="20160130 01:07:15.001"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:15.550" starttime="20160130 01:07:15.522"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:15.552" starttime="20160130 01:07:15.519"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:15.561" starttime="20160130 01:07:15.559"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:15.574" starttime="20160130 01:07:15.563"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:15.575" starttime="20160130 01:07:15.553"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160130 01:07:25.579" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160130 01:07:25.580" starttime="20160130 01:07:15.576"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.601" starttime="20160130 01:07:25.598"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160130 01:07:25.608" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160130 01:07:25.607" starttime="20160130 01:07:25.602"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160130 01:07:25.614" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160130 01:07:25.615" starttime="20160130 01:07:25.609"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.625" starttime="20160130 01:07:25.623"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:07:25.628" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:07:25.666" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:07:25.667" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:07:25.667" starttime="20160130 01:07:25.626"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.670" starttime="20160130 01:07:25.669"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.674" starttime="20160130 01:07:25.672"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.677" starttime="20160130 01:07:25.675"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:07:25.681" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160130 01:07:25.745" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:07:25.746" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:07:25.747" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:07:25.746" starttime="20160130 01:07:25.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.754" starttime="20160130 01:07:25.749"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.757" starttime="20160130 01:07:25.755"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.760" starttime="20160130 01:07:25.758"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.762" starttime="20160130 01:07:25.761"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.765" starttime="20160130 01:07:25.763"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.767" starttime="20160130 01:07:25.766"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.769" starttime="20160130 01:07:25.768"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.770" starttime="20160130 01:07:25.769"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.771" starttime="20160130 01:07:25.770"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.773" starttime="20160130 01:07:25.772"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.774" starttime="20160130 01:07:25.773"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:25.774" starttime="20160130 01:07:25.616"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:07:25.776" level="INFO">Starting command 'cat tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160130 01:07:25.779" starttime="20160130 01:07:25.775"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:07:25.780" level="INFO">Reading output of command 'cat tmpfilemonitor8.log'.</msg>
<msg timestamp="20160130 01:07:25.814" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:07:25.815" level="INFO">${stdout_string} = [2016-01-30 00:07:15,567][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:07:25.815" starttime="20160130 01:07:25.779"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:07:25.817" level="INFO">Executing command 'rm tmpfilemonitor8.log'.</msg>
<msg timestamp="20160130 01:07:25.889" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160130 01:07:25.890" starttime="20160130 01:07:25.816"></status>
</kw>
<msg timestamp="20160130 01:07:25.891" level="INFO">${tailed_text} = [2016-01-30 00:07:15,567][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:07:25.891" starttime="20160130 01:07:25.592"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160130 01:07:25.897" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Conf_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Conf_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:07:25.898" starttime="20160130 01:07:25.895"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:25.898" starttime="20160130 01:07:25.892"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.903" starttime="20160130 01:07:25.902"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.904" starttime="20160130 01:07:25.903"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:25.906" starttime="20160130 01:07:25.899"></status>
</kw>
<msg timestamp="20160130 01:07:25.907" level="INFO">${tailed_text} = [2016-01-30 00:07:15,567][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:07:25.907" starttime="20160130 01:07:25.584"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.922" starttime="20160130 01:07:25.921"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.939" starttime="20160130 01:07:25.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.941" starttime="20160130 01:07:25.940"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160130 01:07:25.942" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:07:25.943" level="INFO">${queryResultSetLines} = 2069056|5.3|130|CONF|1|CRCE|crce01.tb13|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff|1...</msg>
<status status="PASS" endtime="20160130 01:07:25.943" starttime="20160130 01:07:25.941"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.944" starttime="20160130 01:07:25.943"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160130 01:07:25.946" level="INFO">1 lines returned</msg>
<msg timestamp="20160130 01:07:25.946" level="INFO">@{queryResultSet} = [ 2069056|5.3|130|CONF|1|CRCE|crce01.tb13|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff...</msg>
<status status="PASS" endtime="20160130 01:07:25.946" starttime="20160130 01:07:25.945"></status>
</kw>
<msg timestamp="20160130 01:07:25.947" level="INFO">@{queryRows} = [ 2069056|5.3|130|CONF|1|CRCE|crce01.tb13|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff...</msg>
<status status="PASS" endtime="20160130 01:07:25.947" starttime="20160130 01:07:25.917"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160130 01:07:25.949" level="INFO">Length is 1</msg>
<msg timestamp="20160130 01:07:25.949" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160130 01:07:25.949" starttime="20160130 01:07:25.948"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160130 01:07:25.951" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160130 01:07:25.951" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160130 01:07:25.951" starttime="20160130 01:07:25.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160130 01:07:25.956" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:07:25.956" starttime="20160130 01:07:25.955"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:25.957" starttime="20160130 01:07:25.952"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.960" starttime="20160130 01:07:25.957"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:25.960" starttime="20160130 01:07:25.913"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.971" starttime="20160130 01:07:25.969"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:25.971" starttime="20160130 01:07:25.967"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:25.974" starttime="20160130 01:07:25.971"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:25.974" starttime="20160130 01:07:25.963"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:25.975" starttime="20160130 01:07:25.960"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:25.975" starttime="20160130 01:07:14.979"></status>
</kw>
<doc>Send the CRCE Confirmation XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:07:25.976" starttime="20160130 01:07:14.968"></status>
</test>
<test id="s1-s3-s1-s1-t6" name="Test CRCE AccountChange ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Acc}</arg>
<arg>CRCE_Acc</arg>
<arg>crce_accountchange</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:26.002" starttime="20160130 01:07:26.001"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:26.056" starttime="20160130 01:07:26.006"></status>
</kw>
<msg timestamp="20160130 01:07:26.058" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160130 01:07:26.057" starttime="20160130 01:07:26.003"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:07:26.069" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:07:26.459" level="INFO">Read output: Last login: Sat Jan 30 00:07:15 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:07:26.460" starttime="20160130 01:07:26.066"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:26.460" starttime="20160130 01:07:26.059"></status>
</kw>
<msg timestamp="20160130 01:07:26.462" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160130 01:07:26.461" starttime="20160130 01:07:25.997"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:26.467" starttime="20160130 01:07:26.466"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:07:26.469" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160130 01:07:26.472" starttime="20160130 01:07:26.468"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:26.472" starttime="20160130 01:07:26.463"></status>
</kw>
<msg timestamp="20160130 01:07:26.473" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160130 01:07:26.473" starttime="20160130 01:07:25.991"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:26.782" starttime="20160130 01:07:26.482"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:26.783" starttime="20160130 01:07:26.479"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:26.794" starttime="20160130 01:07:26.791"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:26.802" starttime="20160130 01:07:26.795"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:26.803" starttime="20160130 01:07:26.785"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160130 01:07:36.807" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160130 01:07:36.809" starttime="20160130 01:07:26.804"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:36.836" starttime="20160130 01:07:36.833"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160130 01:07:36.845" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160130 01:07:36.844" starttime="20160130 01:07:36.837"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160130 01:07:36.852" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160130 01:07:36.853" starttime="20160130 01:07:36.846"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:36.867" starttime="20160130 01:07:36.864"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:07:36.870" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:07:36.909" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:07:36.911" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:07:36.910" starttime="20160130 01:07:36.868"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:36.913" starttime="20160130 01:07:36.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:36.916" starttime="20160130 01:07:36.914"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:36.919" starttime="20160130 01:07:36.917"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:07:36.923" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160130 01:07:36.987" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:07:36.988" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:07:36.989" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:07:36.988" starttime="20160130 01:07:36.920"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:36.996" starttime="20160130 01:07:36.990"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:36.999" starttime="20160130 01:07:36.997"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.002" starttime="20160130 01:07:37.000"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.005" starttime="20160130 01:07:37.003"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.008" starttime="20160130 01:07:37.006"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.011" starttime="20160130 01:07:37.009"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.014" starttime="20160130 01:07:37.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.017" starttime="20160130 01:07:37.015"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.020" starttime="20160130 01:07:37.018"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.022" starttime="20160130 01:07:37.021"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.025" starttime="20160130 01:07:37.023"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:37.026" starttime="20160130 01:07:36.855"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:07:37.030" level="INFO">Starting command 'cat tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160130 01:07:37.034" starttime="20160130 01:07:37.028"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:07:37.036" level="INFO">Reading output of command 'cat tmpfilemonitor9.log'.</msg>
<msg timestamp="20160130 01:07:37.067" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:07:37.069" level="INFO">${stdout_string} = [2016-01-30 00:07:26,799][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:07:37.068" starttime="20160130 01:07:37.035"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:07:37.072" level="INFO">Executing command 'rm tmpfilemonitor9.log'.</msg>
<msg timestamp="20160130 01:07:37.143" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160130 01:07:37.144" starttime="20160130 01:07:37.070"></status>
</kw>
<msg timestamp="20160130 01:07:37.147" level="INFO">${tailed_text} = [2016-01-30 00:07:26,799][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:07:37.146" starttime="20160130 01:07:36.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160130 01:07:37.158" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Acc_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Acc_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:07:37.159" starttime="20160130 01:07:37.155"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:37.160" starttime="20160130 01:07:37.148"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.170" starttime="20160130 01:07:37.168"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.173" starttime="20160130 01:07:37.171"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:37.176" starttime="20160130 01:07:37.161"></status>
</kw>
<msg timestamp="20160130 01:07:37.179" level="INFO">${tailed_text} = [2016-01-30 00:07:26,799][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:07:37.178" starttime="20160130 01:07:36.814"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.210" starttime="20160130 01:07:37.208"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.243" starttime="20160130 01:07:37.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.246" starttime="20160130 01:07:37.244"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160130 01:07:37.249" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:07:37.251" level="INFO">${queryResultSetLines} = 1032918|5.3|140|ACCOUNT_CHANGE|1|CRCE|crce01.tb13|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01.tb13123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0|t...</msg>
<status status="PASS" endtime="20160130 01:07:37.250" starttime="20160130 01:07:37.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.254" starttime="20160130 01:07:37.252"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160130 01:07:37.257" level="INFO">1 lines returned</msg>
<msg timestamp="20160130 01:07:37.258" level="INFO">@{queryResultSet} = [ 1032918|5.3|140|ACCOUNT_CHANGE|1|CRCE|crce01.tb13|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01.tb13123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0...</msg>
<status status="PASS" endtime="20160130 01:07:37.257" starttime="20160130 01:07:37.255"></status>
</kw>
<msg timestamp="20160130 01:07:37.260" level="INFO">@{queryRows} = [ 1032918|5.3|140|ACCOUNT_CHANGE|1|CRCE|crce01.tb13|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01.tb13123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0...</msg>
<status status="PASS" endtime="20160130 01:07:37.260" starttime="20160130 01:07:37.200"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160130 01:07:37.264" level="INFO">Length is 1</msg>
<msg timestamp="20160130 01:07:37.265" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160130 01:07:37.264" starttime="20160130 01:07:37.261"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160130 01:07:37.268" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160130 01:07:37.270" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160130 01:07:37.269" starttime="20160130 01:07:37.266"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160130 01:07:37.279" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:07:37.279" starttime="20160130 01:07:37.277"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:37.280" starttime="20160130 01:07:37.271"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.286" starttime="20160130 01:07:37.281"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:37.287" starttime="20160130 01:07:37.192"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.311" starttime="20160130 01:07:37.307"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:37.312" starttime="20160130 01:07:37.302"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.318" starttime="20160130 01:07:37.313"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:37.319" starttime="20160130 01:07:37.294"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:37.320" starttime="20160130 01:07:37.288"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:37.321" starttime="20160130 01:07:25.982"></status>
</kw>
<doc>Send the CRCE AccountChange ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:07:37.323" starttime="20160130 01:07:25.978"></status>
</test>
<test id="s1-s3-s1-s1-t7" name="Test Customer EDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${Cust_EDR}</arg>
<arg>Cust_EDR</arg>
<arg>customer_edr</arg>
<arg>customerid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.379" starttime="20160130 01:07:37.377"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.438" starttime="20160130 01:07:37.386"></status>
</kw>
<msg timestamp="20160130 01:07:37.440" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160130 01:07:37.440" starttime="20160130 01:07:37.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:07:37.451" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:07:37.847" level="INFO">Read output: Last login: Sat Jan 30 00:07:26 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:07:37.848" starttime="20160130 01:07:37.449"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:37.849" starttime="20160130 01:07:37.442"></status>
</kw>
<msg timestamp="20160130 01:07:37.851" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160130 01:07:37.851" starttime="20160130 01:07:37.367"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.865" starttime="20160130 01:07:37.863"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:07:37.869" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160130 01:07:37.873" starttime="20160130 01:07:37.866"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:37.874" starttime="20160130 01:07:37.854"></status>
</kw>
<msg timestamp="20160130 01:07:37.876" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160130 01:07:37.875" starttime="20160130 01:07:37.355"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.903" starttime="20160130 01:07:37.896"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:37.904" starttime="20160130 01:07:37.888"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.914" starttime="20160130 01:07:37.912"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:37.927" starttime="20160130 01:07:37.915"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:37.928" starttime="20160130 01:07:37.905"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160130 01:07:47.931" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160130 01:07:47.933" starttime="20160130 01:07:37.929"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:47.954" starttime="20160130 01:07:47.952"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160130 01:07:47.961" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160130 01:07:47.960" starttime="20160130 01:07:47.955"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160130 01:07:47.967" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160130 01:07:47.968" starttime="20160130 01:07:47.962"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:47.978" starttime="20160130 01:07:47.976"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:07:47.981" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:07:48.022" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:07:48.025" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:07:48.023" starttime="20160130 01:07:47.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.028" starttime="20160130 01:07:48.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.030" starttime="20160130 01:07:48.029"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.033" starttime="20160130 01:07:48.031"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:07:48.037" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160130 01:07:48.099" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:07:48.100" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:07:48.101" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:07:48.100" starttime="20160130 01:07:48.034"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.108" starttime="20160130 01:07:48.102"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.111" starttime="20160130 01:07:48.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.113" starttime="20160130 01:07:48.112"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.116" starttime="20160130 01:07:48.114"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.119" starttime="20160130 01:07:48.117"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.121" starttime="20160130 01:07:48.120"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.124" starttime="20160130 01:07:48.122"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.127" starttime="20160130 01:07:48.125"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.130" starttime="20160130 01:07:48.128"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.132" starttime="20160130 01:07:48.131"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.135" starttime="20160130 01:07:48.133"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:48.136" starttime="20160130 01:07:47.969"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:07:48.140" level="INFO">Starting command 'cat tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160130 01:07:48.144" starttime="20160130 01:07:48.138"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:07:48.147" level="INFO">Reading output of command 'cat tmpfilemonitor10.log'.</msg>
<msg timestamp="20160130 01:07:48.177" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:07:48.178" level="INFO">${stdout_string} = [2016-01-30 00:07:37,919][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|910|1|soa01|240...</msg>
<status status="PASS" endtime="20160130 01:07:48.178" starttime="20160130 01:07:48.145"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:07:48.181" level="INFO">Executing command 'rm tmpfilemonitor10.log'.</msg>
<msg timestamp="20160130 01:07:48.251" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160130 01:07:48.252" starttime="20160130 01:07:48.179"></status>
</kw>
<msg timestamp="20160130 01:07:48.255" level="INFO">${tailed_text} = [2016-01-30 00:07:37,919][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|910|1|soa01|240...</msg>
<status status="PASS" endtime="20160130 01:07:48.254" starttime="20160130 01:07:47.945"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160130 01:07:48.267" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/Cust_EDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/Cust_EDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:07:48.268" starttime="20160130 01:07:48.263"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:48.269" starttime="20160130 01:07:48.256"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.279" starttime="20160130 01:07:48.277"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.282" starttime="20160130 01:07:48.280"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:48.284" starttime="20160130 01:07:48.270"></status>
</kw>
<msg timestamp="20160130 01:07:48.287" level="INFO">${tailed_text} = [2016-01-30 00:07:37,919][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|910|1|soa01|240...</msg>
<status status="PASS" endtime="20160130 01:07:48.285" starttime="20160130 01:07:47.937"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.318" starttime="20160130 01:07:48.316"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.325" starttime="20160130 01:07:48.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.328" starttime="20160130 01:07:48.326"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160130 01:07:48.332" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:07:48.333" level="INFO">${queryResultSetLines} = 1000760|5.3|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.|
</msg>
<status status="PASS" endtime="20160130 01:07:48.333" starttime="20160130 01:07:48.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.336" starttime="20160130 01:07:48.334"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160130 01:07:48.339" level="INFO">1 lines returned</msg>
<msg timestamp="20160130 01:07:48.340" level="INFO">@{queryResultSet} = [ 1000760|5.3|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.| ]</msg>
<status status="PASS" endtime="20160130 01:07:48.339" starttime="20160130 01:07:48.337"></status>
</kw>
<msg timestamp="20160130 01:07:48.342" level="INFO">@{queryRows} = [ 1000760|5.3|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.| ]</msg>
<status status="PASS" endtime="20160130 01:07:48.341" starttime="20160130 01:07:48.308"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160130 01:07:48.346" level="INFO">Length is 1</msg>
<msg timestamp="20160130 01:07:48.347" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160130 01:07:48.346" starttime="20160130 01:07:48.343"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160130 01:07:48.350" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160130 01:07:48.351" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160130 01:07:48.350" starttime="20160130 01:07:48.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160130 01:07:48.360" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:07:48.361" starttime="20160130 01:07:48.358"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:48.362" starttime="20160130 01:07:48.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.368" starttime="20160130 01:07:48.363"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:48.369" starttime="20160130 01:07:48.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.393" starttime="20160130 01:07:48.391"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:48.393" starttime="20160130 01:07:48.385"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.396" starttime="20160130 01:07:48.394"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:48.396" starttime="20160130 01:07:48.377"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:48.397" starttime="20160130 01:07:48.371"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:48.397" starttime="20160130 01:07:37.334"></status>
</kw>
<doc>Send the CRM EDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:07:48.398" starttime="20160130 01:07:37.326"></status>
</test>
<test id="s1-s3-s1-s1-t8" name="Test Customer SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SDR_IME}</arg>
<arg>SDR_IME</arg>
<arg>inotif_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.423" starttime="20160130 01:07:48.422"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.476" starttime="20160130 01:07:48.426"></status>
</kw>
<msg timestamp="20160130 01:07:48.478" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160130 01:07:48.477" starttime="20160130 01:07:48.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:07:48.487" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:07:48.874" level="INFO">Read output: Last login: Sat Jan 30 00:07:37 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:07:48.876" starttime="20160130 01:07:48.485"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:48.877" starttime="20160130 01:07:48.479"></status>
</kw>
<msg timestamp="20160130 01:07:48.879" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160130 01:07:48.878" starttime="20160130 01:07:48.418"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:48.890" starttime="20160130 01:07:48.888"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:07:48.894" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20160130 01:07:48.898" starttime="20160130 01:07:48.891"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:48.899" starttime="20160130 01:07:48.881"></status>
</kw>
<msg timestamp="20160130 01:07:48.901" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160130 01:07:48.900" starttime="20160130 01:07:48.413"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:59.541" starttime="20160130 01:07:48.920"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:59.545" starttime="20160130 01:07:48.913"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:59.555" starttime="20160130 01:07:59.553"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:07:59.565" starttime="20160130 01:07:59.556"></status>
</kw>
<status status="PASS" endtime="20160130 01:07:59.566" starttime="20160130 01:07:59.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160130 01:08:09.570" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160130 01:08:09.572" starttime="20160130 01:07:59.567"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.595" starttime="20160130 01:08:09.592"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160130 01:08:09.603" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160130 01:08:09.602" starttime="20160130 01:08:09.596"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160130 01:08:09.609" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160130 01:08:09.609" starttime="20160130 01:08:09.604"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.620" starttime="20160130 01:08:09.618"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:08:09.622" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:08:09.660" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:08:09.661" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:08:09.661" starttime="20160130 01:08:09.621"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.664" starttime="20160130 01:08:09.662"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.667" starttime="20160130 01:08:09.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.669" starttime="20160130 01:08:09.668"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:08:09.673" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160130 01:08:09.738" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:08:09.740" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:08:09.741" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:08:09.739" starttime="20160130 01:08:09.671"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.748" starttime="20160130 01:08:09.742"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.750" starttime="20160130 01:08:09.749"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.753" starttime="20160130 01:08:09.752"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.756" starttime="20160130 01:08:09.754"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.759" starttime="20160130 01:08:09.757"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.762" starttime="20160130 01:08:09.760"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.764" starttime="20160130 01:08:09.763"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.767" starttime="20160130 01:08:09.765"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.770" starttime="20160130 01:08:09.768"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.772" starttime="20160130 01:08:09.771"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.775" starttime="20160130 01:08:09.773"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:09.776" starttime="20160130 01:08:09.611"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:08:09.779" level="INFO">Starting command 'cat tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20160130 01:08:09.783" starttime="20160130 01:08:09.777"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:08:09.785" level="INFO">Reading output of command 'cat tmpfilemonitor11.log'.</msg>
<msg timestamp="20160130 01:08:09.817" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:08:09.819" level="INFO">${stdout_string} = [2016-01-30 00:07:59,561][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160130 01:08:09.818" starttime="20160130 01:08:09.784"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:08:09.822" level="INFO">Executing command 'rm tmpfilemonitor11.log'.</msg>
<msg timestamp="20160130 01:08:09.893" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160130 01:08:09.894" starttime="20160130 01:08:09.820"></status>
</kw>
<msg timestamp="20160130 01:08:09.896" level="INFO">${tailed_text} = [2016-01-30 00:07:59,561][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160130 01:08:09.896" starttime="20160130 01:08:09.586"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160130 01:08:09.907" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/SDR_IME_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/SDR_IME_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:08:09.908" starttime="20160130 01:08:09.904"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:09.909" starttime="20160130 01:08:09.897"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.920" starttime="20160130 01:08:09.917"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.923" starttime="20160130 01:08:09.921"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:09.926" starttime="20160130 01:08:09.911"></status>
</kw>
<msg timestamp="20160130 01:08:09.928" level="INFO">${tailed_text} = [2016-01-30 00:07:59,561][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160130 01:08:09.927" starttime="20160130 01:08:09.577"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:09.958" starttime="20160130 01:08:09.956"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:11.508" starttime="20160130 01:08:09.959"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:11.513" starttime="20160130 01:08:11.512"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160130 01:08:11.518" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:08:11.520" level="INFO">${queryResultSetLines} = 5556165|5.3|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|5.3|null|NEW|2015-02-23 23...</msg>
<status status="PASS" endtime="20160130 01:08:11.519" starttime="20160130 01:08:11.515"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:11.523" starttime="20160130 01:08:11.521"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160130 01:08:11.526" level="INFO">1 lines returned</msg>
<msg timestamp="20160130 01:08:11.527" level="INFO">@{queryResultSet} = [ 5556165|5.3|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|5.3|null|NEW|2015-02-23 ...</msg>
<status status="PASS" endtime="20160130 01:08:11.527" starttime="20160130 01:08:11.524"></status>
</kw>
<msg timestamp="20160130 01:08:11.530" level="INFO">@{queryRows} = [ 5556165|5.3|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|5.3|null|NEW|2015-02-23 ...</msg>
<status status="PASS" endtime="20160130 01:08:11.529" starttime="20160130 01:08:09.949"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160130 01:08:11.535" level="INFO">Length is 1</msg>
<msg timestamp="20160130 01:08:11.536" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160130 01:08:11.536" starttime="20160130 01:08:11.531"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160130 01:08:11.540" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160130 01:08:11.541" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160130 01:08:11.540" starttime="20160130 01:08:11.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160130 01:08:11.551" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:08:11.552" starttime="20160130 01:08:11.549"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:11.553" starttime="20160130 01:08:11.542"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:11.559" starttime="20160130 01:08:11.554"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:11.560" starttime="20160130 01:08:09.940"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:11.582" starttime="20160130 01:08:11.580"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:11.583" starttime="20160130 01:08:11.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:11.589" starttime="20160130 01:08:11.584"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:11.590" starttime="20160130 01:08:11.567"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:11.591" starttime="20160130 01:08:11.561"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:11.592" starttime="20160130 01:07:48.404"></status>
</kw>
<doc>Send the CRM SDR IME ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:08:11.594" starttime="20160130 01:07:48.400"></status>
</test>
<test id="s1-s3-s1-s1-t9" name="Test Customer IVR SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${IVR_SDR}</arg>
<arg>IVR_SDR</arg>
<arg>ivr_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:11.647" starttime="20160130 01:08:11.645"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:11.708" starttime="20160130 01:08:11.654"></status>
</kw>
<msg timestamp="20160130 01:08:11.710" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160130 01:08:11.709" starttime="20160130 01:08:11.648"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:08:11.720" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:08:12.116" level="INFO">Read output: Last login: Sat Jan 30 00:07:48 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:08:12.118" starttime="20160130 01:08:11.718"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:12.120" starttime="20160130 01:08:11.711"></status>
</kw>
<msg timestamp="20160130 01:08:12.123" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160130 01:08:12.122" starttime="20160130 01:08:11.636"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:12.135" starttime="20160130 01:08:12.133"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:08:12.138" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20160130 01:08:12.142" starttime="20160130 01:08:12.136"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:12.143" starttime="20160130 01:08:12.125"></status>
</kw>
<msg timestamp="20160130 01:08:12.144" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160130 01:08:12.143" starttime="20160130 01:08:11.625"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:12.158" starttime="20160130 01:08:12.152"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:12.159" starttime="20160130 01:08:12.149"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:12.169" starttime="20160130 01:08:12.167"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:12.178" starttime="20160130 01:08:12.170"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:12.179" starttime="20160130 01:08:12.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160130 01:08:22.182" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160130 01:08:22.184" starttime="20160130 01:08:12.180"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.204" starttime="20160130 01:08:22.201"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160130 01:08:22.210" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160130 01:08:22.210" starttime="20160130 01:08:22.205"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160130 01:08:22.216" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160130 01:08:22.216" starttime="20160130 01:08:22.212"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.226" starttime="20160130 01:08:22.224"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:08:22.229" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:08:22.268" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:08:22.269" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:08:22.269" starttime="20160130 01:08:22.228"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.272" starttime="20160130 01:08:22.271"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.275" starttime="20160130 01:08:22.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.277" starttime="20160130 01:08:22.276"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:08:22.281" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160130 01:08:22.347" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:08:22.349" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:08:22.349" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:08:22.348" starttime="20160130 01:08:22.278"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.356" starttime="20160130 01:08:22.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.359" starttime="20160130 01:08:22.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.361" starttime="20160130 01:08:22.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.364" starttime="20160130 01:08:22.362"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.367" starttime="20160130 01:08:22.365"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.369" starttime="20160130 01:08:22.368"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.372" starttime="20160130 01:08:22.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.375" starttime="20160130 01:08:22.373"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.377" starttime="20160130 01:08:22.376"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.380" starttime="20160130 01:08:22.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.382" starttime="20160130 01:08:22.381"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:22.383" starttime="20160130 01:08:22.218"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:08:22.386" level="INFO">Starting command 'cat tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20160130 01:08:22.390" starttime="20160130 01:08:22.384"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:08:22.393" level="INFO">Reading output of command 'cat tmpfilemonitor12.log'.</msg>
<msg timestamp="20160130 01:08:22.424" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:08:22.425" level="INFO">${stdout_string} = [2016-01-30 00:08:12,244][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=1.0|601|...</msg>
<status status="PASS" endtime="20160130 01:08:22.424" starttime="20160130 01:08:22.391"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:08:22.428" level="INFO">Executing command 'rm tmpfilemonitor12.log'.</msg>
<msg timestamp="20160130 01:08:22.500" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160130 01:08:22.501" starttime="20160130 01:08:22.426"></status>
</kw>
<msg timestamp="20160130 01:08:22.504" level="INFO">${tailed_text} = [2016-01-30 00:08:12,244][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=1.0|601|...</msg>
<status status="PASS" endtime="20160130 01:08:22.503" starttime="20160130 01:08:22.195"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160130 01:08:22.516" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/IVR_SDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/IVR_SDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:08:22.517" starttime="20160130 01:08:22.512"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:22.518" starttime="20160130 01:08:22.505"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.528" starttime="20160130 01:08:22.526"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.531" starttime="20160130 01:08:22.529"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:22.534" starttime="20160130 01:08:22.519"></status>
</kw>
<msg timestamp="20160130 01:08:22.536" level="INFO">${tailed_text} = [2016-01-30 00:08:12,244][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=1.0|601|...</msg>
<status status="PASS" endtime="20160130 01:08:22.535" starttime="20160130 01:08:22.187"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.566" starttime="20160130 01:08:22.565"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.575" starttime="20160130 01:08:22.568"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.577" starttime="20160130 01:08:22.576"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160130 01:08:22.581" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:08:22.583" level="INFO">${queryResultSetLines} = 1000753|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0|A...</msg>
<status status="PASS" endtime="20160130 01:08:22.582" starttime="20160130 01:08:22.579"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.585" starttime="20160130 01:08:22.584"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160130 01:08:22.588" level="INFO">1 lines returned</msg>
<msg timestamp="20160130 01:08:22.590" level="INFO">@{queryResultSet} = [ 1000753|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0...</msg>
<status status="PASS" endtime="20160130 01:08:22.589" starttime="20160130 01:08:22.586"></status>
</kw>
<msg timestamp="20160130 01:08:22.592" level="INFO">@{queryRows} = [ 1000753|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0...</msg>
<status status="PASS" endtime="20160130 01:08:22.591" starttime="20160130 01:08:22.557"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160130 01:08:22.595" level="INFO">Length is 1</msg>
<msg timestamp="20160130 01:08:22.597" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160130 01:08:22.596" starttime="20160130 01:08:22.593"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160130 01:08:22.599" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160130 01:08:22.601" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160130 01:08:22.600" starttime="20160130 01:08:22.598"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160130 01:08:22.610" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:08:22.611" starttime="20160130 01:08:22.608"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:22.612" starttime="20160130 01:08:22.602"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.619" starttime="20160130 01:08:22.613"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:22.620" starttime="20160130 01:08:22.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.643" starttime="20160130 01:08:22.640"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:22.644" starttime="20160130 01:08:22.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.651" starttime="20160130 01:08:22.646"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:22.652" starttime="20160130 01:08:22.627"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:22.653" starttime="20160130 01:08:22.622"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:22.654" starttime="20160130 01:08:11.606"></status>
</kw>
<doc>Send the IVR SDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:08:22.656" starttime="20160130 01:08:11.597"></status>
</test>
<test id="s1-s3-s1-s1-t10" name="Test Customer PROV SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${PROV_SDR}</arg>
<arg>PROV_SDR</arg>
<arg>prov_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.709" starttime="20160130 01:08:22.707"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:22.767" starttime="20160130 01:08:22.716"></status>
</kw>
<msg timestamp="20160130 01:08:22.769" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160130 01:08:22.768" starttime="20160130 01:08:22.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:08:22.779" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:08:23.195" level="INFO">Read output: Last login: Sat Jan 30 00:08:11 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:08:23.196" starttime="20160130 01:08:22.776"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:23.197" starttime="20160130 01:08:22.770"></status>
</kw>
<msg timestamp="20160130 01:08:23.199" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160130 01:08:23.198" starttime="20160130 01:08:22.698"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:23.204" starttime="20160130 01:08:23.203"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:08:23.205" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20160130 01:08:23.208" starttime="20160130 01:08:23.204"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:23.209" starttime="20160130 01:08:23.200"></status>
</kw>
<msg timestamp="20160130 01:08:23.210" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160130 01:08:23.209" starttime="20160130 01:08:22.686"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:23.235" starttime="20160130 01:08:23.218"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:23.235" starttime="20160130 01:08:23.215"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:23.240" starttime="20160130 01:08:23.239"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:23.251" starttime="20160130 01:08:23.240"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:23.252" starttime="20160130 01:08:23.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160130 01:08:33.256" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160130 01:08:33.258" starttime="20160130 01:08:23.253"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.278" starttime="20160130 01:08:33.276"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160130 01:08:33.285" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160130 01:08:33.284" starttime="20160130 01:08:33.279"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160130 01:08:33.291" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160130 01:08:33.292" starttime="20160130 01:08:33.286"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.302" starttime="20160130 01:08:33.300"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:08:33.304" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:08:33.345" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:08:33.346" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:08:33.345" starttime="20160130 01:08:33.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.349" starttime="20160130 01:08:33.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.352" starttime="20160130 01:08:33.350"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.354" starttime="20160130 01:08:33.353"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:08:33.358" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160130 01:08:33.423" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:08:33.425" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:08:33.425" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:08:33.424" starttime="20160130 01:08:33.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.433" starttime="20160130 01:08:33.427"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.435" starttime="20160130 01:08:33.434"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.438" starttime="20160130 01:08:33.436"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.441" starttime="20160130 01:08:33.439"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.444" starttime="20160130 01:08:33.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.447" starttime="20160130 01:08:33.445"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.450" starttime="20160130 01:08:33.448"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.453" starttime="20160130 01:08:33.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.456" starttime="20160130 01:08:33.454"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.458" starttime="20160130 01:08:33.457"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.462" starttime="20160130 01:08:33.459"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:33.463" starttime="20160130 01:08:33.293"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:08:33.467" level="INFO">Starting command 'cat tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20160130 01:08:33.471" starttime="20160130 01:08:33.465"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:08:33.474" level="INFO">Reading output of command 'cat tmpfilemonitor13.log'.</msg>
<msg timestamp="20160130 01:08:33.505" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:08:33.507" level="INFO">${stdout_string} = [2016-01-30 00:08:23,243][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160130 01:08:33.506" starttime="20160130 01:08:33.473"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:08:33.510" level="INFO">Executing command 'rm tmpfilemonitor13.log'.</msg>
<msg timestamp="20160130 01:08:33.580" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160130 01:08:33.581" starttime="20160130 01:08:33.508"></status>
</kw>
<msg timestamp="20160130 01:08:33.583" level="INFO">${tailed_text} = [2016-01-30 00:08:23,243][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160130 01:08:33.582" starttime="20160130 01:08:33.269"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160130 01:08:33.594" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/PROV_SDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/PROV_SDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:08:33.595" starttime="20160130 01:08:33.590"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:33.596" starttime="20160130 01:08:33.584"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.606" starttime="20160130 01:08:33.604"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.611" starttime="20160130 01:08:33.607"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:33.612" starttime="20160130 01:08:33.597"></status>
</kw>
<msg timestamp="20160130 01:08:33.614" level="INFO">${tailed_text} = [2016-01-30 00:08:23,243][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160130 01:08:33.614" starttime="20160130 01:08:33.261"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.647" starttime="20160130 01:08:33.645"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.661" starttime="20160130 01:08:33.649"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.664" starttime="20160130 01:08:33.662"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160130 01:08:33.667" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:08:33.669" level="INFO">${queryResultSetLines} = 1012163|5.3|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|null|...</msg>
<status status="PASS" endtime="20160130 01:08:33.668" starttime="20160130 01:08:33.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.671" starttime="20160130 01:08:33.670"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160130 01:08:33.674" level="INFO">1 lines returned</msg>
<msg timestamp="20160130 01:08:33.676" level="INFO">@{queryResultSet} = [ 1012163|5.3|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|nul...</msg>
<status status="PASS" endtime="20160130 01:08:33.675" starttime="20160130 01:08:33.672"></status>
</kw>
<msg timestamp="20160130 01:08:33.678" level="INFO">@{queryRows} = [ 1012163|5.3|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|nul...</msg>
<status status="PASS" endtime="20160130 01:08:33.677" starttime="20160130 01:08:33.636"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160130 01:08:33.681" level="INFO">Length is 1</msg>
<msg timestamp="20160130 01:08:33.682" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160130 01:08:33.682" starttime="20160130 01:08:33.679"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160130 01:08:33.685" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160130 01:08:33.687" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160130 01:08:33.686" starttime="20160130 01:08:33.683"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160130 01:08:33.696" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:08:33.696" starttime="20160130 01:08:33.693"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:33.697" starttime="20160130 01:08:33.688"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.703" starttime="20160130 01:08:33.698"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:33.704" starttime="20160130 01:08:33.626"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.726" starttime="20160130 01:08:33.723"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:33.727" starttime="20160130 01:08:33.718"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.733" starttime="20160130 01:08:33.728"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:33.734" starttime="20160130 01:08:33.711"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:33.735" starttime="20160130 01:08:33.705"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:33.736" starttime="20160130 01:08:22.667"></status>
</kw>
<doc>Send the PROV SDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:08:33.738" starttime="20160130 01:08:22.659"></status>
</test>
<test id="s1-s3-s1-s1-t11" name="Test MoneyTX ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MoneyTX}</arg>
<arg>MoneyTX</arg>
<arg>crce_moneytx</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.778" starttime="20160130 01:08:33.777"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:33.820" starttime="20160130 01:08:33.781"></status>
</kw>
<msg timestamp="20160130 01:08:33.821" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160130 01:08:33.821" starttime="20160130 01:08:33.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:08:33.826" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:08:34.220" level="INFO">Read output: Last login: Sat Jan 30 00:08:22 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:08:34.221" starttime="20160130 01:08:33.825"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:34.222" starttime="20160130 01:08:33.822"></status>
</kw>
<msg timestamp="20160130 01:08:34.223" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160130 01:08:34.223" starttime="20160130 01:08:33.773"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:34.229" starttime="20160130 01:08:34.228"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:08:34.230" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20160130 01:08:34.233" starttime="20160130 01:08:34.229"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:34.233" starttime="20160130 01:08:34.224"></status>
</kw>
<msg timestamp="20160130 01:08:34.235" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160130 01:08:34.234" starttime="20160130 01:08:33.768"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:34.250" starttime="20160130 01:08:34.243"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:34.252" starttime="20160130 01:08:34.240"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:34.264" starttime="20160130 01:08:34.262"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:34.275" starttime="20160130 01:08:34.265"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:34.276" starttime="20160130 01:08:34.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160130 01:08:44.279" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160130 01:08:44.281" starttime="20160130 01:08:34.277"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.302" starttime="20160130 01:08:44.299"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160130 01:08:44.308" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160130 01:08:44.308" starttime="20160130 01:08:44.303"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160130 01:08:44.314" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160130 01:08:44.314" starttime="20160130 01:08:44.309"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.325" starttime="20160130 01:08:44.323"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:08:44.327" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:08:44.372" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:08:44.374" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:08:44.373" starttime="20160130 01:08:44.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.376" starttime="20160130 01:08:44.375"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.379" starttime="20160130 01:08:44.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.382" starttime="20160130 01:08:44.380"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:08:44.386" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160130 01:08:44.450" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:08:44.451" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:08:44.452" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:08:44.451" starttime="20160130 01:08:44.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.458" starttime="20160130 01:08:44.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.461" starttime="20160130 01:08:44.459"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.464" starttime="20160130 01:08:44.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.466" starttime="20160130 01:08:44.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.469" starttime="20160130 01:08:44.467"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.472" starttime="20160130 01:08:44.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.474" starttime="20160130 01:08:44.473"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.477" starttime="20160130 01:08:44.475"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.480" starttime="20160130 01:08:44.478"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.482" starttime="20160130 01:08:44.481"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.485" starttime="20160130 01:08:44.483"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:44.486" starttime="20160130 01:08:44.316"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:08:44.490" level="INFO">Starting command 'cat tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20160130 01:08:44.493" starttime="20160130 01:08:44.487"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:08:44.496" level="INFO">Reading output of command 'cat tmpfilemonitor14.log'.</msg>
<msg timestamp="20160130 01:08:44.527" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:08:44.528" level="INFO">${stdout_string} = [2016-01-30 00:08:34,270][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|120|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:08:44.528" starttime="20160130 01:08:44.495"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:08:44.532" level="INFO">Executing command 'rm tmpfilemonitor14.log'.</msg>
<msg timestamp="20160130 01:08:44.603" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160130 01:08:44.603" starttime="20160130 01:08:44.530"></status>
</kw>
<msg timestamp="20160130 01:08:44.605" level="INFO">${tailed_text} = [2016-01-30 00:08:34,270][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|120|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:08:44.605" starttime="20160130 01:08:44.293"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160130 01:08:44.617" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MoneyTX_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MoneyTX_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:08:44.618" starttime="20160130 01:08:44.613"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:44.619" starttime="20160130 01:08:44.607"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.630" starttime="20160130 01:08:44.628"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.633" starttime="20160130 01:08:44.631"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:44.636" starttime="20160130 01:08:44.620"></status>
</kw>
<msg timestamp="20160130 01:08:44.638" level="INFO">${tailed_text} = [2016-01-30 00:08:34,270][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|120|true|1|CRCE...</msg>
<status status="PASS" endtime="20160130 01:08:44.637" starttime="20160130 01:08:44.285"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.667" starttime="20160130 01:08:44.666"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.675" starttime="20160130 01:08:44.669"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.677" starttime="20160130 01:08:44.676"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160130 01:08:44.681" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:08:44.683" level="INFO">${queryResultSetLines} = 1000829|5.3|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|1|...</msg>
<status status="PASS" endtime="20160130 01:08:44.682" starttime="20160130 01:08:44.679"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.685" starttime="20160130 01:08:44.684"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160130 01:08:44.688" level="INFO">1 lines returned</msg>
<msg timestamp="20160130 01:08:44.689" level="INFO">@{queryResultSet} = [ 1000829|5.3|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|...</msg>
<status status="PASS" endtime="20160130 01:08:44.689" starttime="20160130 01:08:44.686"></status>
</kw>
<msg timestamp="20160130 01:08:44.691" level="INFO">@{queryRows} = [ 1000829|5.3|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|...</msg>
<status status="PASS" endtime="20160130 01:08:44.691" starttime="20160130 01:08:44.658"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160130 01:08:44.695" level="INFO">Length is 1</msg>
<msg timestamp="20160130 01:08:44.696" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160130 01:08:44.696" starttime="20160130 01:08:44.693"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160130 01:08:44.699" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160130 01:08:44.700" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160130 01:08:44.700" starttime="20160130 01:08:44.697"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160130 01:08:44.709" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:08:44.710" starttime="20160130 01:08:44.707"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:44.711" starttime="20160130 01:08:44.702"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.717" starttime="20160130 01:08:44.712"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:44.718" starttime="20160130 01:08:44.650"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.740" starttime="20160130 01:08:44.737"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:44.740" starttime="20160130 01:08:44.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.746" starttime="20160130 01:08:44.742"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:44.747" starttime="20160130 01:08:44.724"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:44.748" starttime="20160130 01:08:44.719"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:44.749" starttime="20160130 01:08:33.749"></status>
</kw>
<doc>Send the MoneyTX CRCE ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:08:44.751" starttime="20160130 01:08:33.741"></status>
</test>
<test id="s1-s3-s1-s1-t12" name="Test SwapSIM ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${swapSIM}</arg>
<arg>swapSIM</arg>
<arg>crce_simswap</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.784" starttime="20160130 01:08:44.783"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:44.825" starttime="20160130 01:08:44.787"></status>
</kw>
<msg timestamp="20160130 01:08:44.827" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160130 01:08:44.826" starttime="20160130 01:08:44.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:08:44.832" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:08:45.228" level="INFO">Read output: Last login: Sat Jan 30 00:08:34 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:08:45.229" starttime="20160130 01:08:44.831"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:45.230" starttime="20160130 01:08:44.827"></status>
</kw>
<msg timestamp="20160130 01:08:45.231" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160130 01:08:45.231" starttime="20160130 01:08:44.779"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:45.237" starttime="20160130 01:08:45.236"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:08:45.238" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20160130 01:08:45.241" starttime="20160130 01:08:45.237"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:45.242" starttime="20160130 01:08:45.232"></status>
</kw>
<msg timestamp="20160130 01:08:45.243" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160130 01:08:45.242" starttime="20160130 01:08:44.774"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:45.257" starttime="20160130 01:08:45.251"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:45.259" starttime="20160130 01:08:45.248"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:45.269" starttime="20160130 01:08:45.267"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:45.278" starttime="20160130 01:08:45.270"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:45.279" starttime="20160130 01:08:45.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160130 01:08:55.283" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160130 01:08:55.285" starttime="20160130 01:08:45.280"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.305" starttime="20160130 01:08:55.303"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160130 01:08:55.312" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160130 01:08:55.311" starttime="20160130 01:08:55.306"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160130 01:08:55.318" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160130 01:08:55.319" starttime="20160130 01:08:55.313"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.329" starttime="20160130 01:08:55.327"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:08:55.332" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:08:55.371" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:08:55.373" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:08:55.372" starttime="20160130 01:08:55.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.375" starttime="20160130 01:08:55.374"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.378" starttime="20160130 01:08:55.376"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.380" starttime="20160130 01:08:55.379"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:08:55.384" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160130 01:08:55.451" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:08:55.453" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:08:55.454" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:08:55.452" starttime="20160130 01:08:55.382"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.488" starttime="20160130 01:08:55.481"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.491" starttime="20160130 01:08:55.489"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.494" starttime="20160130 01:08:55.492"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.497" starttime="20160130 01:08:55.495"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.500" starttime="20160130 01:08:55.498"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.502" starttime="20160130 01:08:55.501"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.505" starttime="20160130 01:08:55.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.508" starttime="20160130 01:08:55.506"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.510" starttime="20160130 01:08:55.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.513" starttime="20160130 01:08:55.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.517" starttime="20160130 01:08:55.515"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:55.518" starttime="20160130 01:08:55.320"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:08:55.522" level="INFO">Starting command 'cat tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20160130 01:08:55.525" starttime="20160130 01:08:55.519"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:08:55.528" level="INFO">Reading output of command 'cat tmpfilemonitor15.log'.</msg>
<msg timestamp="20160130 01:08:55.559" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:08:55.560" level="INFO">${stdout_string} = [2016-01-30 00:08:45,274][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|160|true|16|CRC...</msg>
<status status="PASS" endtime="20160130 01:08:55.560" starttime="20160130 01:08:55.526"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:08:55.564" level="INFO">Executing command 'rm tmpfilemonitor15.log'.</msg>
<msg timestamp="20160130 01:08:55.635" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160130 01:08:55.636" starttime="20160130 01:08:55.562"></status>
</kw>
<msg timestamp="20160130 01:08:55.638" level="INFO">${tailed_text} = [2016-01-30 00:08:45,274][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|160|true|16|CRC...</msg>
<status status="PASS" endtime="20160130 01:08:55.637" starttime="20160130 01:08:55.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160130 01:08:55.649" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/swapSIM_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/swapSIM_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:08:55.650" starttime="20160130 01:08:55.645"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:55.651" starttime="20160130 01:08:55.639"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.661" starttime="20160130 01:08:55.659"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.664" starttime="20160130 01:08:55.663"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:55.667" starttime="20160130 01:08:55.653"></status>
</kw>
<msg timestamp="20160130 01:08:55.669" level="INFO">${tailed_text} = [2016-01-30 00:08:45,274][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|160|true|16|CRC...</msg>
<status status="PASS" endtime="20160130 01:08:55.668" starttime="20160130 01:08:55.288"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.699" starttime="20160130 01:08:55.697"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.705" starttime="20160130 01:08:55.700"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.708" starttime="20160130 01:08:55.706"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160130 01:08:55.711" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:08:55.713" level="INFO">${queryResultSetLines} = 1000694|5.3|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|nul...</msg>
<status status="PASS" endtime="20160130 01:08:55.713" starttime="20160130 01:08:55.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.716" starttime="20160130 01:08:55.714"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160130 01:08:55.719" level="INFO">1 lines returned</msg>
<msg timestamp="20160130 01:08:55.720" level="INFO">@{queryResultSet} = [ 1000694|5.3|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|n...</msg>
<status status="PASS" endtime="20160130 01:08:55.719" starttime="20160130 01:08:55.717"></status>
</kw>
<msg timestamp="20160130 01:08:55.722" level="INFO">@{queryRows} = [ 1000694|5.3|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|n...</msg>
<status status="PASS" endtime="20160130 01:08:55.721" starttime="20160130 01:08:55.689"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160130 01:08:55.726" level="INFO">Length is 1</msg>
<msg timestamp="20160130 01:08:55.727" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160130 01:08:55.726" starttime="20160130 01:08:55.723"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160130 01:08:55.730" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160130 01:08:55.731" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160130 01:08:55.730" starttime="20160130 01:08:55.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160130 01:08:55.740" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:08:55.741" starttime="20160130 01:08:55.738"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:55.742" starttime="20160130 01:08:55.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.747" starttime="20160130 01:08:55.743"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:55.749" starttime="20160130 01:08:55.681"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.769" starttime="20160130 01:08:55.767"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:55.769" starttime="20160130 01:08:55.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.772" starttime="20160130 01:08:55.769"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:55.772" starttime="20160130 01:08:55.755"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:55.772" starttime="20160130 01:08:55.750"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:55.773" starttime="20160130 01:08:44.762"></status>
</kw>
<doc>Send the swapSIM CRCE ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:08:55.774" starttime="20160130 01:08:44.754"></status>
</test>
<test id="s1-s3-s1-s1-t13" name="Test MOC NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${MOC_NOK}</arg>
<arg>MOC_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160130 01:08:55.784" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160130 01:08:55.804" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160130 01:08:55.804" starttime="20160130 01:08:55.783"></status>
</kw>
<status status="FAIL" endtime="20160130 01:08:55.806" starttime="20160130 01:08:55.780"></status>
</kw>
<doc>Send the invalid MOC XDR ticket with following changes: Version (Header, Mandatory, changed), Provider (H,M,empty), Success (H,M,changed), CRCE Operation (B,M, changed), TrafficType (B,M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160130 01:08:55.807" starttime="20160130 01:08:55.775">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-s3-s1-s1-t14" name="Test SMS NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${SMS_NOK}</arg>
<arg>SMS_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160130 01:08:55.817" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160130 01:08:55.818" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160130 01:08:55.818" starttime="20160130 01:08:55.816"></status>
</kw>
<status status="FAIL" endtime="20160130 01:08:55.819" starttime="20160130 01:08:55.813"></status>
</kw>
<doc>Send the invalid SMS XDR ticket with following changes: Version (Header, Mandatory, changed), TrafficType (B, M, mpty), CRCE Result Code (B, M, changed). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160130 01:08:55.820" starttime="20160130 01:08:55.809">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-s3-s1-s1-t15" name="Test DATA NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${DATA_NOK}</arg>
<arg>DATA_NOK</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160130 01:08:55.829" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160130 01:08:55.830" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160130 01:08:55.830" starttime="20160130 01:08:55.828"></status>
</kw>
<status status="FAIL" endtime="20160130 01:08:55.831" starttime="20160130 01:08:55.825"></status>
</kw>
<doc>Send the invalid DATA XDR ticket with following changes: Application (Header, Mandatory, empty), Tariff (B, M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160130 01:08:55.831" starttime="20160130 01:08:55.821">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-s3-s1-s1-t16" name="Test MOC NOK - Invalid ASCII ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC_NOK_ASCII}</arg>
<arg>MOC_NOK_ASCII</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.858" starttime="20160130 01:08:55.858"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:55.901" starttime="20160130 01:08:55.862"></status>
</kw>
<msg timestamp="20160130 01:08:55.902" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160130 01:08:55.902" starttime="20160130 01:08:55.859"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160130 01:08:55.907" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160130 01:08:56.305" level="INFO">Read output: Last login: Sat Jan 30 00:08:45 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160130 01:08:56.306" starttime="20160130 01:08:55.906"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:56.307" starttime="20160130 01:08:55.903"></status>
</kw>
<msg timestamp="20160130 01:08:56.308" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160130 01:08:56.308" starttime="20160130 01:08:55.853"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:56.314" starttime="20160130 01:08:56.313"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:08:56.315" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20160130 01:08:56.318" starttime="20160130 01:08:56.314"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:56.319" starttime="20160130 01:08:56.309"></status>
</kw>
<msg timestamp="20160130 01:08:56.320" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160130 01:08:56.319" starttime="20160130 01:08:55.848"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:56.332" starttime="20160130 01:08:56.328"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:56.333" starttime="20160130 01:08:56.325"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:56.343" starttime="20160130 01:08:56.341"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:08:56.353" starttime="20160130 01:08:56.344"></status>
</kw>
<status status="PASS" endtime="20160130 01:08:56.354" starttime="20160130 01:08:56.335"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160130 01:09:06.359" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160130 01:09:06.360" starttime="20160130 01:08:56.355"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.380" starttime="20160130 01:09:06.378"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160130 01:09:06.387" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160130 01:09:06.386" starttime="20160130 01:09:06.381"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160130 01:09:06.393" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160130 01:09:06.394" starttime="20160130 01:09:06.388"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.404" starttime="20160130 01:09:06.402"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160130 01:09:06.406" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160130 01:09:06.446" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:09:06.448" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160130 01:09:06.447" starttime="20160130 01:09:06.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.450" starttime="20160130 01:09:06.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.453" starttime="20160130 01:09:06.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.456" starttime="20160130 01:09:06.454"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160130 01:09:06.459" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160130 01:09:06.527" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:09:06.529" level="INFO">${stderr} = </msg>
<msg timestamp="20160130 01:09:06.529" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160130 01:09:06.528" starttime="20160130 01:09:06.457"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.536" starttime="20160130 01:09:06.530"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.539" starttime="20160130 01:09:06.537"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.542" starttime="20160130 01:09:06.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.545" starttime="20160130 01:09:06.543"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.548" starttime="20160130 01:09:06.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.550" starttime="20160130 01:09:06.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.553" starttime="20160130 01:09:06.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.556" starttime="20160130 01:09:06.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.559" starttime="20160130 01:09:06.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.561" starttime="20160130 01:09:06.559"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.564" starttime="20160130 01:09:06.562"></status>
</kw>
<status status="PASS" endtime="20160130 01:09:06.565" starttime="20160130 01:09:06.395"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:09:06.568" level="INFO">Starting command 'cat tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20160130 01:09:06.572" starttime="20160130 01:09:06.566"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:09:06.575" level="INFO">Reading output of command 'cat tmpfilemonitor16.log'.</msg>
<msg timestamp="20160130 01:09:06.607" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160130 01:09:06.608" level="INFO">${stdout_string} = [2016-01-30 00:08:56,356][ERROR][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 145] An unknown exception occurred:
org.beanio.I...</msg>
<status status="PASS" endtime="20160130 01:09:06.608" starttime="20160130 01:09:06.573"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160130 01:09:06.612" level="INFO">Executing command 'rm tmpfilemonitor16.log'.</msg>
<msg timestamp="20160130 01:09:06.685" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160130 01:09:06.686" starttime="20160130 01:09:06.610"></status>
</kw>
<msg timestamp="20160130 01:09:06.688" level="INFO">${tailed_text} = [2016-01-30 00:08:56,356][ERROR][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 145] An unknown exception occurred:
org.beanio.I...</msg>
<status status="PASS" endtime="20160130 01:09:06.687" starttime="20160130 01:09:06.371"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160130 01:09:06.699" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MOC_NOK_ASCII_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MOC_NOK_ASCII_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160130 01:09:06.700" starttime="20160130 01:09:06.695"></status>
</kw>
<status status="PASS" endtime="20160130 01:09:06.701" starttime="20160130 01:09:06.689"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.711" starttime="20160130 01:09:06.709"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.714" starttime="20160130 01:09:06.712"></status>
</kw>
<status status="PASS" endtime="20160130 01:09:06.718" starttime="20160130 01:09:06.702"></status>
</kw>
<msg timestamp="20160130 01:09:06.720" level="INFO">${tailed_text} = [2016-01-30 00:08:56,356][ERROR][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 145] An unknown exception occurred:
org.beanio.I...</msg>
<status status="PASS" endtime="20160130 01:09:06.719" starttime="20160130 01:09:06.364"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.749" starttime="20160130 01:09:06.748"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.756" starttime="20160130 01:09:06.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.758" starttime="20160130 01:09:06.757"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160130 01:09:06.762" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160130 01:09:06.763" level="INFO">${queryResultSetLines} = </msg>
<status status="PASS" endtime="20160130 01:09:06.763" starttime="20160130 01:09:06.760"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.766" starttime="20160130 01:09:06.764"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160130 01:09:06.769" level="INFO">0 lines returned</msg>
<msg timestamp="20160130 01:09:06.770" level="INFO">@{queryResultSet} = [ ]</msg>
<status status="PASS" endtime="20160130 01:09:06.770" starttime="20160130 01:09:06.767"></status>
</kw>
<msg timestamp="20160130 01:09:06.773" level="INFO">@{queryRows} = [ ]</msg>
<status status="PASS" endtime="20160130 01:09:06.772" starttime="20160130 01:09:06.740"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160130 01:09:06.776" level="INFO">Length is 0</msg>
<msg timestamp="20160130 01:09:06.777" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20160130 01:09:06.777" starttime="20160130 01:09:06.774"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160130 01:09:06.780" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160130 01:09:06.781" level="INFO">${length_s} = 0</msg>
<status status="PASS" endtime="20160130 01:09:06.781" starttime="20160130 01:09:06.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.788" starttime="20160130 01:09:06.783"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160130 01:09:06.796" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160130 01:09:06.797" starttime="20160130 01:09:06.794"></status>
</kw>
<status status="PASS" endtime="20160130 01:09:06.798" starttime="20160130 01:09:06.789"></status>
</kw>
<status status="PASS" endtime="20160130 01:09:06.799" starttime="20160130 01:09:06.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.818" starttime="20160130 01:09:06.813"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.828" starttime="20160130 01:09:06.825"></status>
</kw>
<status status="PASS" endtime="20160130 01:09:06.828" starttime="20160130 01:09:06.819"></status>
</kw>
<status status="PASS" endtime="20160130 01:09:06.829" starttime="20160130 01:09:06.806"></status>
</kw>
<status status="PASS" endtime="20160130 01:09:06.830" starttime="20160130 01:09:06.800"></status>
</kw>
<status status="PASS" endtime="20160130 01:09:06.831" starttime="20160130 01:08:55.836"></status>
</kw>
<doc>Send the MOC XDR ticket with invalid ASCII garbage in it

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160130 01:09:06.833" starttime="20160130 01:08:55.833"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20160130 01:09:06.895" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20160130 01:09:06.895" starttime="20160130 01:09:06.893"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160130 01:09:06.897" starttime="20160130 01:09:06.895"></status>
</kw>
<status status="PASS" endtime="20160130 01:09:06.897" starttime="20160130 01:09:06.889"></status>
</kw>
<doc>Main goal of the test suite is to check behaviour of XDR in several basic positive cases and a few negative (NOK) cases.
It uses Robot Framework's JMSLibrary to send tickets of different types (MOC, SMS, DATA,...) to AMQ where XDR consumers should process them.
After that XDR's log will be analysed and finally DB should be checked if ticket has landed also there.
Negative tests (NOK) test different (but not all) mandatory fields (empty field, different values than predefined) according to
XDR Specification v5.3.2. Each NOK test has modified different fields - which exactly is specified in test description of the test itself</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:09:06.897" starttime="20160130 01:06:24.715"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:09:06.959" starttime="20160130 01:06:24.701"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:09:07.016" starttime="20160130 01:06:24.687"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160130 01:09:07.103" starttime="20160130 01:01:00.316"></status>
</suite>
<statistics>
<total>
<stat pass="32" fail="0">Critical Tests</stat>
<stat pass="32" fail="3">All Tests</stat>
</total>
<tag>
<stat pass="0" info="non-critical" doc="" combined="" fail="3" links="">noncritical</stat>
<stat pass="12" info="" doc="" combined="" fail="0" links="">calls</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">ComponentTest</stat>
<stat pass="32" info="" doc="" combined="" fail="3" links="">matko.sanseovic</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">MFC_only</stat>
<stat pass="7" info="" doc="" combined="" fail="0" links="">MOC_only</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">MTC_only</stat>
<stat pass="24" info="" doc="" combined="" fail="3" links="">MTEL_supported</stat>
<stat pass="22" info="" doc="" combined="" fail="3" links="">MVNA_MEX_supported</stat>
<stat pass="25" info="" doc="" combined="" fail="3" links="">SMARTSPACE_supported</stat>
<stat pass="6" info="" doc="" combined="" fail="0" links="">test</stat>
<stat pass="7" info="" doc="" combined="" fail="0" links="">TNZ_specific</stat>
<stat pass="25" info="" doc="" combined="" fail="3" links="">TNZ_supported</stat>
<stat pass="7" info="" doc="" combined="" fail="0" links="">USSD_only</stat>
<stat pass="14" info="" doc="" combined="" fail="3" links="">VIRGIN_COLUMBIA_supported</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">XDR_only</stat>
</tag>
<suite>
<stat pass="32" id="s1" fail="3" name="Robot Testsuites">Robot Testsuites</stat>
<stat pass="12" id="s1-s1" fail="0" name="Basic">Robot Testsuites.Basic</stat>
<stat pass="12" id="s1-s1-s1" fail="0" name="PrePaid">Robot Testsuites.Basic.PrePaid</stat>
<stat pass="1" id="s1-s1-s1-s1" fail="0" name="MFC">Robot Testsuites.Basic.PrePaid.MFC</stat>
<stat pass="1" id="s1-s1-s1-s1-s1" fail="0" name="MFC PREPAID-ShortDuration">Robot Testsuites.Basic.PrePaid.MFC.MFC PREPAID-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s1-s1-s1" fail="0" name="MFC PREPAID-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MFC.MFC PREPAID-ShortDuration.MFC PREPAID-ShortDuration-robot-suite</stat>
<stat pass="7" id="s1-s1-s1-s2" fail="0" name="MOC">Robot Testsuites.Basic.PrePaid.MOC</stat>
<stat pass="7" id="s1-s1-s1-s2-s1" fail="0" name="OnNet">Robot Testsuites.Basic.PrePaid.MOC.OnNet</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s1" fail="0" name="MOC PREPAID ONNET-Abandon">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Abandon</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s1-s1" fail="0" name="MOC PREPAID ONNET-Abandon-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Abandon.MOC PREPAID ONNET-Abandon-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s2" fail="0" name="MOC PREPAID ONNET-Busy">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Busy</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s2-s1" fail="0" name="MOC PREPAID ONNET-Busy-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Busy.MOC PREPAID ONNET-Busy-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s3" fail="0" name="MOC PREPAID ONNET-LongDuration136s">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-LongDuration136s</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s3-s1" fail="0" name="MOC PREPAID ONNET-LongDuration136s-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-LongDuration136s.MOC PREPAID ONNET-LongDuration136s-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s4" fail="0" name="MOC PREPAID ONNET-NoAnswer">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoAnswer</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s4-s1" fail="0" name="MOC PREPAID ONNET-NoAnswer-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoAnswer.MOC PREPAID ONNET-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s5" fail="0" name="MOC PREPAID ONNET-NoCredit">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoCredit</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s5-s1" fail="0" name="MOC PREPAID ONNET-NoCredit-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoCredit.MOC PREPAID ONNET-NoCredit-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s6" fail="0" name="MOC PREPAID ONNET-ShortDuration">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s6-s1" fail="0" name="MOC PREPAID ONNET-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ShortDuration.MOC PREPAID ONNET-ShortDuration-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s7" fail="0" name="MOC PREPAID ONNET-ToUnknown">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ToUnknown</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s7-s1" fail="0" name="MOC PREPAID ONNET-ToUnknown-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ToUnknown.MOC PREPAID ONNET-ToUnknown-robot-suite</stat>
<stat pass="4" id="s1-s1-s1-s3" fail="0" name="MTC">Robot Testsuites.Basic.PrePaid.MTC</stat>
<stat pass="1" id="s1-s1-s1-s3-s1" fail="0" name="MTC PREPAID-Abandon">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Abandon</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s1" fail="0" name="MTC PREPAID-Abandon-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Abandon.MTC PREPAID-Abandon-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s3-s2" fail="0" name="MTC PREPAID-Busy">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Busy</stat>
<stat pass="1" id="s1-s1-s1-s3-s2-s1" fail="0" name="MTC PREPAID-Busy-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Busy.MTC PREPAID-Busy-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s3-s3" fail="0" name="MTC PREPAID-NoAnswer">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-NoAnswer</stat>
<stat pass="1" id="s1-s1-s1-s3-s3-s1" fail="0" name="MTC PREPAID-NoAnswer-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-NoAnswer.MTC PREPAID-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s3-s4" fail="0" name="MTC PREPAID-ShortDuration">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s3-s4-s1" fail="0" name="MTC PREPAID-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-ShortDuration.MTC PREPAID-ShortDuration-robot-suite</stat>
<stat pass="7" id="s1-s2" fail="0" name="Ussd">Robot Testsuites.Ussd</stat>
<stat pass="7" id="s1-s2-s1" fail="0" name="TNZ">Robot Testsuites.Ussd.TNZ</stat>
<stat pass="7" id="s1-s2-s1-s1" fail="0" name="Ussd-Robot-Suite">Robot Testsuites.Ussd.TNZ.Ussd-Robot-Suite</stat>
<stat pass="13" id="s1-s3" fail="3" name="Xdr">Robot Testsuites.Xdr</stat>
<stat pass="13" id="s1-s3-s1" fail="3" name="XDR-ticket-verification">Robot Testsuites.Xdr.XDR-ticket-verification</stat>
<stat pass="13" id="s1-s3-s1-s1" fail="3" name="XDR Test-robot-suite">Robot Testsuites.Xdr.XDR-ticket-verification.XDR Test-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
