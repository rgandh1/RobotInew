<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20160203 01:35:02.242">
<suite source="/opt/robot/robotworkspace/robot_testsuites" id="s1" name="Robot Testsuites">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic" id="s1-s1" name="Basic">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid" id="s1-s1-s1" name="PrePaid">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/DATA" id="s1-s1-s1-s1" name="DATA">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/DATA/data-regression-suite.txt" id="s1-s1-s1-s1-s1" name="Data-Regression-Suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160203 01:35:03.301" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:35:03.304" level="INFO">${date} = Wed Feb  3 01:35:03 CET 2016</msg>
<status status="PASS" endtime="20160203 01:35:03.303" starttime="20160203 01:35:03.290"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:35:03.307" level="INFO">Date and time: Wed Feb  3 01:35:03 CET 2016</msg>
<status status="PASS" endtime="20160203 01:35:03.308" starttime="20160203 01:35:03.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:35:03.311" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160203 01:35:03.312" starttime="20160203 01:35:03.309"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:03.360" starttime="20160203 01:35:03.358"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:03.578" starttime="20160203 01:35:03.371"></status>
</kw>
<msg timestamp="20160203 01:35:03.580" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160203 01:35:03.579" starttime="20160203 01:35:03.361"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:35:03.589" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:35:05.867" level="INFO">Read output: Last login: Tue Feb  2 08:09:12 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:35:05.869" starttime="20160203 01:35:03.587"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:05.871" starttime="20160203 01:35:03.581"></status>
</kw>
<msg timestamp="20160203 01:35:05.877" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160203 01:35:05.876" starttime="20160203 01:35:03.348"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:35:05.883" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:35:05.883" starttime="20160203 01:35:05.878"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:35:05.886" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160203 01:35:07.153" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:35:07.156" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:35:07.155" starttime="20160203 01:35:05.884"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:07.163" starttime="20160203 01:35:07.160"></status>
</kw>
<msg timestamp="20160203 01:35:07.164" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:35:07.165" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:35:07.164" starttime="20160203 01:35:07.157"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:07.173" starttime="20160203 01:35:07.171"></status>
</kw>
<msg timestamp="20160203 01:35:07.174" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:35:07.174" starttime="20160203 01:35:07.166"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160203 01:35:07.178" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:35:07.177" starttime="20160203 01:35:07.175"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:35:07.185" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:35:07.184" starttime="20160203 01:35:07.182"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:07.188" starttime="20160203 01:35:07.186"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:07.200" starttime="20160203 01:35:07.198"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:35:07.203" starttime="20160203 01:35:07.201"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:07.206" starttime="20160203 01:35:07.189"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:07.213" starttime="20160203 01:35:07.211"></status>
</kw>
<msg timestamp="20160203 01:35:07.214" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:35:07.214" starttime="20160203 01:35:07.207"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:07.217" starttime="20160203 01:35:07.215"></status>
</kw>
<msg timestamp="20160203 01:35:07.220" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160203 01:35:07.220" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:35:07.219" starttime="20160203 01:35:03.325"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:07.266" starttime="20160203 01:35:07.265"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:07.477" starttime="20160203 01:35:07.272"></status>
</kw>
<msg timestamp="20160203 01:35:07.480" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160203 01:35:07.479" starttime="20160203 01:35:07.267"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:35:07.499" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:35:10.174" level="INFO">Read output: Last login: Tue Feb  2 08:12:12 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:35:10.176" starttime="20160203 01:35:07.494"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:10.177" starttime="20160203 01:35:07.482"></status>
</kw>
<msg timestamp="20160203 01:35:10.181" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160203 01:35:10.179" starttime="20160203 01:35:07.255"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:35:10.187" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:35:10.187" starttime="20160203 01:35:10.182"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:35:10.190" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160203 01:35:12.002" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:35:12.007" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:35:12.004" starttime="20160203 01:35:10.188"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:12.019" starttime="20160203 01:35:12.014"></status>
</kw>
<msg timestamp="20160203 01:35:12.022" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:35:12.023" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:35:12.021" starttime="20160203 01:35:12.009"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:12.039" starttime="20160203 01:35:12.036"></status>
</kw>
<msg timestamp="20160203 01:35:12.043" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:35:12.041" starttime="20160203 01:35:12.026"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160203 01:35:12.050" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:35:12.049" starttime="20160203 01:35:12.045"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:35:12.057" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:35:12.056" starttime="20160203 01:35:12.052"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:12.062" starttime="20160203 01:35:12.059"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:12.087" starttime="20160203 01:35:12.084"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:35:12.095" starttime="20160203 01:35:12.089"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:12.097" starttime="20160203 01:35:12.065"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:12.113" starttime="20160203 01:35:12.109"></status>
</kw>
<msg timestamp="20160203 01:35:12.116" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:35:12.115" starttime="20160203 01:35:12.099"></status>
</kw>
<msg timestamp="20160203 01:35:12.121" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160203 01:35:12.122" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:35:12.119" starttime="20160203 01:35:07.233"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:12.190" starttime="20160203 01:35:12.188"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:12.284" starttime="20160203 01:35:12.196"></status>
</kw>
<msg timestamp="20160203 01:35:12.287" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160203 01:35:12.286" starttime="20160203 01:35:12.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:35:12.305" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:35:15.850" level="INFO">Read output: Last login: Tue Feb  2 08:09:14 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:35:15.852" starttime="20160203 01:35:12.300"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:15.853" starttime="20160203 01:35:12.289"></status>
</kw>
<msg timestamp="20160203 01:35:15.856" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160203 01:35:15.855" starttime="20160203 01:35:12.179"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:35:15.861" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:35:15.861" starttime="20160203 01:35:15.857"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:35:15.864" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160203 01:35:17.457" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:35:17.459" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:35:17.458" starttime="20160203 01:35:15.862"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:17.464" starttime="20160203 01:35:17.462"></status>
</kw>
<msg timestamp="20160203 01:35:17.465" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:35:17.466" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:35:17.465" starttime="20160203 01:35:17.460"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:17.472" starttime="20160203 01:35:17.471"></status>
</kw>
<msg timestamp="20160203 01:35:17.473" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:35:17.473" starttime="20160203 01:35:17.467"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:35:17.476" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:35:17.475" starttime="20160203 01:35:17.474"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:35:17.479" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:35:17.478" starttime="20160203 01:35:17.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:17.481" starttime="20160203 01:35:17.480"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:17.490" starttime="20160203 01:35:17.489"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:35:17.492" starttime="20160203 01:35:17.491"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:17.494" starttime="20160203 01:35:17.482"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:17.499" starttime="20160203 01:35:17.498"></status>
</kw>
<msg timestamp="20160203 01:35:17.500" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:35:17.500" starttime="20160203 01:35:17.495"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:17.503" starttime="20160203 01:35:17.501"></status>
</kw>
<msg timestamp="20160203 01:35:17.505" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160203 01:35:17.505" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:35:17.504" starttime="20160203 01:35:12.150"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:17.543" starttime="20160203 01:35:17.542"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:17.755" starttime="20160203 01:35:17.548"></status>
</kw>
<msg timestamp="20160203 01:35:17.756" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160203 01:35:17.756" starttime="20160203 01:35:17.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:35:17.765" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:35:20.186" level="INFO">Read output: Last login: Tue Feb  2 08:09:15 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:35:20.188" starttime="20160203 01:35:17.763"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:20.190" starttime="20160203 01:35:17.757"></status>
</kw>
<msg timestamp="20160203 01:35:20.193" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160203 01:35:20.192" starttime="20160203 01:35:17.533"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:35:20.199" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:35:20.198" starttime="20160203 01:35:20.194"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:35:20.201" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160203 01:35:20.807" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:35:20.809" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:35:20.808" starttime="20160203 01:35:20.200"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:20.815" starttime="20160203 01:35:20.812"></status>
</kw>
<msg timestamp="20160203 01:35:20.816" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:35:20.816" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:35:20.815" starttime="20160203 01:35:20.810"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:20.823" starttime="20160203 01:35:20.822"></status>
</kw>
<msg timestamp="20160203 01:35:20.825" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:35:20.824" starttime="20160203 01:35:20.817"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:35:20.828" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:35:20.827" starttime="20160203 01:35:20.826"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:35:20.831" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:35:20.830" starttime="20160203 01:35:20.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:20.833" starttime="20160203 01:35:20.832"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:20.844" starttime="20160203 01:35:20.842"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:35:20.848" starttime="20160203 01:35:20.845"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:20.849" starttime="20160203 01:35:20.835"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:20.855" starttime="20160203 01:35:20.854"></status>
</kw>
<msg timestamp="20160203 01:35:20.857" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:35:20.856" starttime="20160203 01:35:20.850"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:20.859" starttime="20160203 01:35:20.857"></status>
</kw>
<msg timestamp="20160203 01:35:20.861" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160203 01:35:20.862" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:35:20.860" starttime="20160203 01:35:17.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:35:20.865" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:35:20.866" starttime="20160203 01:35:20.863"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:35:20.869" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:35:20.869" starttime="20160203 01:35:20.866"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:35:20.872" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:35:20.873" starttime="20160203 01:35:20.870"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:35:20.876" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:35:20.877" starttime="20160203 01:35:20.874"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160203 01:35:20.879" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:35:20.881" starttime="20160203 01:35:20.877"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160203 01:35:20.883" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:35:20.884" starttime="20160203 01:35:20.882"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160203 01:35:20.887" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:35:20.887" starttime="20160203 01:35:20.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160203 01:35:20.890" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:35:20.890" starttime="20160203 01:35:20.888"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:20.899" starttime="20160203 01:35:20.895"></status>
</kw>
<msg timestamp="20160203 01:35:20.900" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:35:20.900" starttime="20160203 01:35:20.891"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160203 01:35:20.903" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:35:20.904" starttime="20160203 01:35:20.901"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:20.905" starttime="20160203 01:35:03.282"></status>
</kw>
<test id="s1-s1-s1-s1-s1-t1" name="Single Data Session 767b">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:20.917" starttime="20160203 01:35:20.916"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160203 01:35:20.920" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160203 01:35:20.919" starttime="20160203 01:35:20.918"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160203 01:35:20.934" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160203 01:35:20.934" starttime="20160203 01:35:20.932"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160203 01:35:20.936" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160203 01:35:20.937" starttime="20160203 01:35:20.935"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160203 01:35:20.939" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160203 01:35:20.940" starttime="20160203 01:35:20.938"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160203 01:35:20.945" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160203 01:35:20.946" starttime="20160203 01:35:20.941"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:35:20.949" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160203 01:35:20.949" starttime="20160203 01:35:20.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:35:20.952" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160203 01:35:20.952" starttime="20160203 01:35:20.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160203 01:35:20.955" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:35:20.955" starttime="20160203 01:35:20.953"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160203 01:35:20.958" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160203 01:35:20.958" starttime="20160203 01:35:20.956"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160203 01:35:20.960" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:35:20.961" starttime="20160203 01:35:20.959"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160203 01:35:20.963" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160203 01:35:20.964" starttime="20160203 01:35:20.962"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:35:20.977" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:35:20.977" starttime="20160203 01:35:20.974"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:20.978" starttime="20160203 01:35:20.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:35:20.983" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:35:20.984" starttime="20160203 01:35:20.981"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:20.984" starttime="20160203 01:35:20.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:35:20.989" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:35:20.990" starttime="20160203 01:35:20.987"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:20.990" starttime="20160203 01:35:20.985"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:20.991" starttime="20160203 01:35:20.966"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:35:20.995" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:35:20.995" starttime="20160203 01:35:20.992"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:20.998" starttime="20160203 01:35:20.996"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:21.001" starttime="20160203 01:35:20.999"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:21.004" starttime="20160203 01:35:21.002"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:21.006" starttime="20160203 01:35:21.005"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:21.009" starttime="20160203 01:35:21.007"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:21.011" starttime="20160203 01:35:21.009"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:21.014" starttime="20160203 01:35:21.012"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:21.016" starttime="20160203 01:35:21.015"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:21.019" starttime="20160203 01:35:21.017"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:21.022" starttime="20160203 01:35:21.020"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:21.024" starttime="20160203 01:35:21.023"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:21.027" starttime="20160203 01:35:21.025"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:35:21.030" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160203 01:35:47.995" level="INFO">01:35:21,199 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/ext] for external libraries
01:35:21,200 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
01:35:22,930 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
01:35:22,945 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.119.125]
01:35:22,946 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
01:35:22,946 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
01:35:22,946 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [1]
01:35:22,946 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [334030880001000]
01:35:22,946 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [525516001000]
01:35:22,946 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
01:35:22,946 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [3]
01:35:22,947 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
01:35:22,947 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
01:35:22,947 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
01:35:22,947 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
01:35:22,956 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
01:35:22,962 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
01:35:23,384 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
01:35:23,446 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
01:35:23,629 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:35:23,629 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:35:34,208 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:35:34,216 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:35:34,404 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:35:34,405 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:35:34,405 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:35:34,405 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
01:35:34,478 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
01:35:34,771 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
01:35:34,799 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
01:35:34,800 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:35:34,802 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:35:34,802 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:35:42,063 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:35:42,063 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:35:42,071 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:35:42,071 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:35:42,071 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:35:42,071 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
01:35:42,143 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
01:35:42,149 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
01:35:42,201 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
01:35:42,205 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:35:42,207 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:35:42,207 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:35:43,011 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:35:43,011 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:35:43,017 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:35:43,018 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:35:43,018 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:35:43,018 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
01:35:43,089 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
01:35:43,100 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
01:35:43,144 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
01:35:43,147 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:35:43,149 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:35:43,149 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:35:45,205 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:35:45,206 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:35:45,213 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:35:45,213 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:35:45,213 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:35:45,213 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
01:35:45,329 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
01:35:45,335 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
01:35:45,378 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
01:35:45,380 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:35:45,382 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:35:45,382 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
01:35:46,336 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:35:46,337 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:35:46,354 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:35:46,354 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:35:46,354 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:35:46,354 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
01:35:46,427 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
01:35:46,448 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
01:35:46,494 INFO  [SoapUITestCaseRunner] running step [setBalance]
01:35:46,497 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:35:46,499 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:35:46,500 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
01:35:47,711 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:35:47,712 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:35:47,724 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:35:47,724 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:35:47,724 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:35:47,724 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
01:35:47,793 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
01:35:47,803 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
01:35:47,849 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
01:35:47,915 INFO  [SoapUITestCaseRunner] running step [finish_successful]
01:35:47,987 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
01:35:47,988 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 24993ms, status: FINISHED
01:35:47,988 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 24993ms</msg>
<status status="PASS" endtime="20160203 01:35:48.007" starttime="20160203 01:35:21.029"></status>
</kw>
<msg timestamp="20160203 01:35:48.017" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:35:48.018" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:35:48.012" starttime="20160203 01:35:21.028"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:35:48.045" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:35:48.044" starttime="20160203 01:35:48.041"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:35:48.048" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:35:48.048" starttime="20160203 01:35:48.046"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:35:48.052" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:35:48.051" starttime="20160203 01:35:48.050"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:35:48.059" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:35:48.069" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160203 01:35:48.071" starttime="20160203 01:35:48.055"></status>
</kw>
<msg timestamp="20160203 01:35:48.074" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:35:48.075" level="INFO">${return_log_entry} = 2016-02-03 01:35:47,987 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:35:48.072" starttime="20160203 01:35:48.053"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:48.094" starttime="20160203 01:35:48.090"></status>
</kw>
<msg timestamp="20160203 01:35:48.097" level="INFO">${return_log_entry} = 2016-02-03 01:35:47,987 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:35:48.096" starttime="20160203 01:35:48.078"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:48.112" starttime="20160203 01:35:48.109"></status>
</kw>
<msg timestamp="20160203 01:35:48.115" level="INFO">${return_log_entry} = 2016-02-03 01:35:47,987 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:35:48.114" starttime="20160203 01:35:48.099"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:48.132" starttime="20160203 01:35:48.128"></status>
</kw>
<msg timestamp="20160203 01:35:48.135" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:35:48.134" starttime="20160203 01:35:48.117"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:48.156" starttime="20160203 01:35:48.153"></status>
</kw>
<msg timestamp="20160203 01:35:48.159" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:35:48.158" starttime="20160203 01:35:48.137"></status>
</kw>
<msg timestamp="20160203 01:35:48.163" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:35:48.162" starttime="20160203 01:35:48.024"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:48.180" starttime="20160203 01:35:48.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:48.184" starttime="20160203 01:35:48.181"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:48.189" starttime="20160203 01:35:48.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:35:48.214" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:35:48.216" starttime="20160203 01:35:48.205"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:48.218" starttime="20160203 01:35:48.201"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:48.219" starttime="20160203 01:35:48.191"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:48.221" starttime="20160203 01:35:48.165"></status>
</kw>
<msg timestamp="20160203 01:35:48.225" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160203 01:35:48.223" starttime="20160203 01:35:20.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160203 01:35:48.230" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:35:48.232" starttime="20160203 01:35:48.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:35:48.236" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160203 01:35:48.238" starttime="20160203 01:35:48.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Data Session *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:48.242" starttime="20160203 01:35:48.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the data session...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:35:48.247" level="INFO">Running the data session...</msg>
<status status="PASS" endtime="20160203 01:35:48.248" starttime="20160203 01:35:48.244"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Short 767b Data Session">
<doc>Runs a standard data session in total of 767B (CCRi - CCRt). Rating group is added to differentiate between</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${DIAM HPLMN LOCATION}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${DIAM GW HOST}</arg>
<arg>${DIAM GW PORT}</arg>
<arg>${DIAM GW REALM}</arg>
<arg>${DIAM GGSN FQDN}</arg>
<arg>${DIAM GGSN REALM}</arg>
<arg>${DIAM GGSN VENDORID}</arg>
<arg>${DATA TRAFFIC RATING GROUP}</arg>
</arguments>
<kw type="kw" name="${cgs_filename} = BuiltIn.Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>data767b_rg</arg>
<arg>${rating_group}</arg>
</arguments>
<msg timestamp="20160203 01:35:48.279" level="INFO">${cgs_filename} = data767b_rg6</msg>
<status status="PASS" endtime="20160203 01:35:48.278" starttime="20160203 01:35:48.274"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard Data CGS">
<doc>Runs a standard Data session (meaning a session that needs only location as parameter) for the passed cgs file</doc>
<arguments>
<arg>${cgs_filename}</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${location}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${diam_host}</arg>
<arg>${diam_port}</arg>
<arg>${diam_gw_realm}</arg>
<arg>${diam_ggsn_fqdn}</arg>
<arg>${diam_ggsn_realm}</arg>
<arg>${diam_ggsn_vendorid}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160203 01:35:48.309" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv</msg>
<status status="PASS" endtime="20160203 01:35:48.308" starttime="20160203 01:35:48.305"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160203 01:35:48.315" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv</msg>
<status status="PASS" endtime="20160203 01:35:48.314" starttime="20160203 01:35:48.311"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160203 01:35:48.321" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini</msg>
<status status="PASS" endtime="20160203 01:35:48.320" starttime="20160203 01:35:48.317"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160203 01:35:48.327" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs</msg>
<status status="PASS" endtime="20160203 01:35:48.326" starttime="20160203 01:35:48.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:48.331" starttime="20160203 01:35:48.328"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:35:48.340" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:35:48.342" starttime="20160203 01:35:48.333"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:48.346" starttime="20160203 01:35:48.343"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;location\n</arg>
</arguments>
<msg timestamp="20160203 01:35:48.352" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:35:48.354" starttime="20160203 01:35:48.348"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${location}\n</arg>
</arguments>
<msg timestamp="20160203 01:35:48.361" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:35:48.362" starttime="20160203 01:35:48.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:48.366" starttime="20160203 01:35:48.364"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160203 01:35:48.373" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:35:48.374" starttime="20160203 01:35:48.368"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ndiamGwHost=${diam_host} \ndiamGwPort=${diam_port} \ndiamGwRealm=${diam_gw_realm} \ndiamGgsnFqdn=${diam_ggsn_fqdn} \ndiamGgsnRealm=${diam_ggsn_realm} \ndiamGgsnVendorId=${diam_ggsn_vendorid} \ndiamGwConnectTimeoutSecs=20</arg>
</arguments>
<msg timestamp="20160203 01:35:48.384" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:35:48.386" starttime="20160203 01:35:48.376"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:48.390" starttime="20160203 01:35:48.387"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160203 01:35:48.410" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:35:58.500" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 01:35:58.498" starttime="20160203 01:35:48.391"></status>
</kw>
<msg timestamp="20160203 01:35:58.503" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 01:35:58.503" starttime="20160203 01:35:48.284"></status>
</kw>
<msg timestamp="20160203 01:35:58.505" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 01:35:58.504" starttime="20160203 01:35:48.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:35:58.508" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160203 01:35:58.509" starttime="20160203 01:35:58.506"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160203 01:35:58.512" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160203 01:35:58.536" level="FAIL">CG Session ended with rc 1: 1.0 != 0.0</msg>
<status status="FAIL" endtime="20160203 01:35:58.537" starttime="20160203 01:35:58.509"></status>
</kw>
<doc>Test will make a short data session in total of 767 bytes

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160203 01:35:58.539" starttime="20160203 01:35:20.906">CG Session ended with rc 1: 1.0 != 0.0</status>
</test>
<test id="s1-s1-s1-s1-s1-t2" name="CG Short Multislice Data Session">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:58.554" starttime="20160203 01:35:58.552"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160203 01:35:58.557" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160203 01:35:58.556" starttime="20160203 01:35:58.555"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160203 01:35:58.571" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160203 01:35:58.571" starttime="20160203 01:35:58.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160203 01:35:58.574" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160203 01:35:58.575" starttime="20160203 01:35:58.573"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160203 01:35:58.578" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160203 01:35:58.578" starttime="20160203 01:35:58.576"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160203 01:35:58.581" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160203 01:35:58.581" starttime="20160203 01:35:58.579"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:35:58.584" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160203 01:35:58.585" starttime="20160203 01:35:58.583"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:35:58.588" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160203 01:35:58.588" starttime="20160203 01:35:58.586"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160203 01:35:58.592" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:35:58.592" starttime="20160203 01:35:58.590"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160203 01:35:58.595" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160203 01:35:58.596" starttime="20160203 01:35:58.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160203 01:35:58.598" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:35:58.599" starttime="20160203 01:35:58.597"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160203 01:35:58.605" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160203 01:35:58.606" starttime="20160203 01:35:58.600"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:35:58.616" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:35:58.616" starttime="20160203 01:35:58.614"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:58.617" starttime="20160203 01:35:58.612"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:35:58.621" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:35:58.622" starttime="20160203 01:35:58.620"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:58.623" starttime="20160203 01:35:58.618"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:35:58.627" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:35:58.627" starttime="20160203 01:35:58.625"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:58.628" starttime="20160203 01:35:58.624"></status>
</kw>
<status status="PASS" endtime="20160203 01:35:58.629" starttime="20160203 01:35:58.608"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:35:58.632" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:35:58.633" starttime="20160203 01:35:58.630"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:58.635" starttime="20160203 01:35:58.633"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:58.638" starttime="20160203 01:35:58.636"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:58.640" starttime="20160203 01:35:58.638"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:58.642" starttime="20160203 01:35:58.641"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:58.644" starttime="20160203 01:35:58.643"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:58.647" starttime="20160203 01:35:58.645"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:58.649" starttime="20160203 01:35:58.648"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:58.652" starttime="20160203 01:35:58.650"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:58.655" starttime="20160203 01:35:58.653"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:58.658" starttime="20160203 01:35:58.656"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:58.660" starttime="20160203 01:35:58.659"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:35:58.663" starttime="20160203 01:35:58.661"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:35:58.667" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160203 01:36:01.770" level="INFO">01:36:01,768 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:01.771" starttime="20160203 01:35:58.665"></status>
</kw>
<msg timestamp="20160203 01:36:01.773" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:36:01.773" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:36:01.772" starttime="20160203 01:35:58.664"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:36:01.782" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:36:01.782" starttime="20160203 01:36:01.780"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:36:01.785" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:36:01.785" starttime="20160203 01:36:01.783"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:36:01.788" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:36:01.788" starttime="20160203 01:36:01.786"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:36:01.793" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:36:01.794" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160203 01:36:01.794" starttime="20160203 01:36:01.791"></status>
</kw>
<msg timestamp="20160203 01:36:01.796" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:36:01.796" level="INFO">${return_log_entry} = 2016-02-03 01:36:01,768 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:01.795" starttime="20160203 01:36:01.789"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:01.803" starttime="20160203 01:36:01.802"></status>
</kw>
<msg timestamp="20160203 01:36:01.804" level="INFO">${return_log_entry} = 2016-02-03 01:36:01,768 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:01.804" starttime="20160203 01:36:01.797"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:01.811" starttime="20160203 01:36:01.809"></status>
</kw>
<msg timestamp="20160203 01:36:01.812" level="INFO">${return_log_entry} = 2016-02-03 01:36:01,768 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:01.812" starttime="20160203 01:36:01.805"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:01.820" starttime="20160203 01:36:01.818"></status>
</kw>
<msg timestamp="20160203 01:36:01.821" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:36:01.821" starttime="20160203 01:36:01.813"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:01.831" starttime="20160203 01:36:01.829"></status>
</kw>
<msg timestamp="20160203 01:36:01.832" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:36:01.832" starttime="20160203 01:36:01.822"></status>
</kw>
<msg timestamp="20160203 01:36:01.834" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:36:01.833" starttime="20160203 01:36:01.775"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:01.842" starttime="20160203 01:36:01.841"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:01.845" starttime="20160203 01:36:01.843"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:01.847" starttime="20160203 01:36:01.845"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:36:01.856" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:36:01.857" starttime="20160203 01:36:01.854"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:01.857" starttime="20160203 01:36:01.852"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:01.858" starttime="20160203 01:36:01.848"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:01.859" starttime="20160203 01:36:01.835"></status>
</kw>
<msg timestamp="20160203 01:36:01.861" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160203 01:36:01.860" starttime="20160203 01:35:58.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160203 01:36:01.864" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:36:01.864" starttime="20160203 01:36:01.862"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:36:01.867" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160203 01:36:01.867" starttime="20160203 01:36:01.865"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Data Session *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:01.869" starttime="20160203 01:36:01.868"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the data session...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:36:01.872" level="INFO">Running the data session...</msg>
<status status="PASS" endtime="20160203 01:36:01.872" starttime="20160203 01:36:01.870"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Short Multislice Data Session">
<doc>Runs a standard data session with two session updates before session is closed (CCRi - CCRu - CCRu - CCRt).Rating group is</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${DIAM HPLMN LOCATION}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${DIAM GW HOST}</arg>
<arg>${DIAM GW PORT}</arg>
<arg>${DIAM GW REALM}</arg>
<arg>${DIAM GGSN FQDN}</arg>
<arg>${DIAM GGSN REALM}</arg>
<arg>${DIAM GGSN VENDORID}</arg>
<arg>${DATA TRAFFIC RATING GROUP}</arg>
</arguments>
<kw type="kw" name="${cgs_filename} = BuiltIn.Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>dataSessionUpdate_rg</arg>
<arg>${rating_group}</arg>
</arguments>
<msg timestamp="20160203 01:36:01.888" level="INFO">${cgs_filename} = dataSessionUpdate_rg6</msg>
<status status="PASS" endtime="20160203 01:36:01.887" starttime="20160203 01:36:01.885"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard Data CGS">
<doc>Runs a standard Data session (meaning a session that needs only location as parameter) for the passed cgs file</doc>
<arguments>
<arg>${cgs_filename}</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${location}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${diam_host}</arg>
<arg>${diam_port}</arg>
<arg>${diam_gw_realm}</arg>
<arg>${diam_ggsn_fqdn}</arg>
<arg>${diam_ggsn_realm}</arg>
<arg>${diam_ggsn_vendorid}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160203 01:36:01.902" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv</msg>
<status status="PASS" endtime="20160203 01:36:01.902" starttime="20160203 01:36:01.900"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160203 01:36:01.905" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv</msg>
<status status="PASS" endtime="20160203 01:36:01.905" starttime="20160203 01:36:01.903"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160203 01:36:01.909" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini</msg>
<status status="PASS" endtime="20160203 01:36:01.908" starttime="20160203 01:36:01.906"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160203 01:36:01.912" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/dataSessionUpdate_rg6.cgs</msg>
<status status="PASS" endtime="20160203 01:36:01.911" starttime="20160203 01:36:01.910"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:01.914" starttime="20160203 01:36:01.913"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:36:01.918" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:01.919" starttime="20160203 01:36:01.915"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:01.921" starttime="20160203 01:36:01.919"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;location\n</arg>
</arguments>
<msg timestamp="20160203 01:36:01.924" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:01.924" starttime="20160203 01:36:01.922"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${location}\n</arg>
</arguments>
<msg timestamp="20160203 01:36:01.928" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:01.929" starttime="20160203 01:36:01.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:01.931" starttime="20160203 01:36:01.929"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160203 01:36:01.934" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:01.935" starttime="20160203 01:36:01.932"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ndiamGwHost=${diam_host} \ndiamGwPort=${diam_port} \ndiamGwRealm=${diam_gw_realm} \ndiamGgsnFqdn=${diam_ggsn_fqdn} \ndiamGgsnRealm=${diam_ggsn_realm} \ndiamGgsnVendorId=${diam_ggsn_vendorid} \ndiamGwConnectTimeoutSecs=20</arg>
</arguments>
<msg timestamp="20160203 01:36:01.940" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:01.940" starttime="20160203 01:36:01.935"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:01.942" starttime="20160203 01:36:01.941"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160203 01:36:01.949" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/dataSessionUpdate_rg6.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:36:18.014" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 01:36:18.011" starttime="20160203 01:36:01.943"></status>
</kw>
<msg timestamp="20160203 01:36:18.021" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 01:36:18.019" starttime="20160203 01:36:01.890"></status>
</kw>
<msg timestamp="20160203 01:36:18.025" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 01:36:18.024" starttime="20160203 01:36:01.875"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:36:18.030" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160203 01:36:18.032" starttime="20160203 01:36:18.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160203 01:36:18.039" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160203 01:36:18.043" level="FAIL">CG Session ended with rc 1: 1.0 != 0.0</msg>
<status status="FAIL" endtime="20160203 01:36:18.045" starttime="20160203 01:36:18.034"></status>
</kw>
<doc>Test creates the data session, sends two updates of the session and finally closes the session. Session consumes 9.77 MB

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160203 01:36:18.047" starttime="20160203 01:35:58.542">CG Session ended with rc 1: 1.0 != 0.0</status>
</test>
<test id="s1-s1-s1-s1-s1-t3" name="Single NOK BalanceExhausted Data Session">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:18.076" starttime="20160203 01:36:18.072"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>100000</arg>
<arg>'${SUT PROJECT TAG PREFIX}'=='MVNA_MEX'</arg>
<arg>100000</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MVNA_MEX'</arg>
<arg>100000</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:18.094" starttime="20160203 01:36:18.087"></status>
</kw>
<msg timestamp="20160203 01:36:18.096" level="INFO">${INITIAL_BALANCE} = 100000</msg>
<status status="PASS" endtime="20160203 01:36:18.095" starttime="20160203 01:36:18.078"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160203 01:36:18.123" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160203 01:36:18.124" starttime="20160203 01:36:18.119"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160203 01:36:18.129" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160203 01:36:18.131" starttime="20160203 01:36:18.126"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160203 01:36:18.136" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160203 01:36:18.137" starttime="20160203 01:36:18.133"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160203 01:36:18.142" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160203 01:36:18.144" starttime="20160203 01:36:18.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:36:18.148" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160203 01:36:18.150" starttime="20160203 01:36:18.145"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:36:18.154" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160203 01:36:18.156" starttime="20160203 01:36:18.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160203 01:36:18.160" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:36:18.161" starttime="20160203 01:36:18.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160203 01:36:18.165" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160203 01:36:18.165" starttime="20160203 01:36:18.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160203 01:36:18.167" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:36:18.168" starttime="20160203 01:36:18.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160203 01:36:18.170" level="INFO">msg=balance=100000</msg>
<status status="PASS" endtime="20160203 01:36:18.171" starttime="20160203 01:36:18.169"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:36:18.180" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:18.181" starttime="20160203 01:36:18.178"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:18.182" starttime="20160203 01:36:18.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:36:18.186" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:18.186" starttime="20160203 01:36:18.184"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:18.187" starttime="20160203 01:36:18.183"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:36:18.192" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:18.193" starttime="20160203 01:36:18.190"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:18.193" starttime="20160203 01:36:18.188"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:18.194" starttime="20160203 01:36:18.172"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:36:18.197" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:36:18.198" starttime="20160203 01:36:18.195"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:18.201" starttime="20160203 01:36:18.199"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:18.203" starttime="20160203 01:36:18.202"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:18.206" starttime="20160203 01:36:18.204"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:18.208" starttime="20160203 01:36:18.207"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:18.210" starttime="20160203 01:36:18.209"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:18.213" starttime="20160203 01:36:18.211"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:18.215" starttime="20160203 01:36:18.214"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:18.217" starttime="20160203 01:36:18.216"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:18.220" starttime="20160203 01:36:18.218"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:18.222" starttime="20160203 01:36:18.221"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:18.225" starttime="20160203 01:36:18.223"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:18.227" starttime="20160203 01:36:18.225"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:36:18.230" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=100000']</msg>
<msg timestamp="20160203 01:36:21.393" level="INFO">01:36:21,389 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:21.395" starttime="20160203 01:36:18.229"></status>
</kw>
<msg timestamp="20160203 01:36:21.400" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:36:21.401" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:36:21.398" starttime="20160203 01:36:18.228"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:36:21.416" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:36:21.416" starttime="20160203 01:36:21.414"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:36:21.419" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:36:21.419" starttime="20160203 01:36:21.417"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:36:21.422" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:36:21.422" starttime="20160203 01:36:21.420"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:36:21.426" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:36:21.427" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160203 01:36:21.428" starttime="20160203 01:36:21.424"></status>
</kw>
<msg timestamp="20160203 01:36:21.429" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:36:21.429" level="INFO">${return_log_entry} = 2016-02-03 01:36:21,389 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:21.428" starttime="20160203 01:36:21.423"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:21.436" starttime="20160203 01:36:21.435"></status>
</kw>
<msg timestamp="20160203 01:36:21.437" level="INFO">${return_log_entry} = 2016-02-03 01:36:21,389 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:21.437" starttime="20160203 01:36:21.430"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:21.444" starttime="20160203 01:36:21.442"></status>
</kw>
<msg timestamp="20160203 01:36:21.445" level="INFO">${return_log_entry} = 2016-02-03 01:36:21,389 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:21.444" starttime="20160203 01:36:21.438"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:21.452" starttime="20160203 01:36:21.450"></status>
</kw>
<msg timestamp="20160203 01:36:21.453" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:36:21.453" starttime="20160203 01:36:21.446"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:21.463" starttime="20160203 01:36:21.461"></status>
</kw>
<msg timestamp="20160203 01:36:21.464" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:36:21.463" starttime="20160203 01:36:21.454"></status>
</kw>
<msg timestamp="20160203 01:36:21.465" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:36:21.465" starttime="20160203 01:36:21.404"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:21.473" starttime="20160203 01:36:21.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:21.475" starttime="20160203 01:36:21.474"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:21.477" starttime="20160203 01:36:21.476"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:36:21.485" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:36:21.486" starttime="20160203 01:36:21.483"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:21.487" starttime="20160203 01:36:21.482"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:21.487" starttime="20160203 01:36:21.478"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:21.488" starttime="20160203 01:36:21.466"></status>
</kw>
<msg timestamp="20160203 01:36:21.490" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160203 01:36:21.489" starttime="20160203 01:36:18.101"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160203 01:36:21.492" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:36:21.493" starttime="20160203 01:36:21.491"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:36:21.495" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160203 01:36:21.495" starttime="20160203 01:36:21.494"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE LOG FILE PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:21.523" starttime="20160203 01:36:21.521"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:21.961" starttime="20160203 01:36:21.528"></status>
</kw>
<msg timestamp="20160203 01:36:21.963" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160203 01:36:21.962" starttime="20160203 01:36:21.524"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:36:21.970" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:36:24.324" level="INFO">Read output: Last login: Wed Feb  3 00:35:13 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:36:24.326" starttime="20160203 01:36:21.969"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:24.327" starttime="20160203 01:36:21.964"></status>
</kw>
<msg timestamp="20160203 01:36:24.331" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160203 01:36:24.330" starttime="20160203 01:36:21.515"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:24.341" starttime="20160203 01:36:24.339"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:36:24.344" level="INFO">Starting command 'tail -0f /var/log/inew/crce/6.1.23/negret-0.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160203 01:36:24.351" starttime="20160203 01:36:24.342"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:24.352" starttime="20160203 01:36:24.333"></status>
</kw>
<msg timestamp="20160203 01:36:24.354" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160203 01:36:24.353" starttime="20160203 01:36:21.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Data Session *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:24.356" starttime="20160203 01:36:24.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the data session...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:36:24.358" level="INFO">Running the data session...</msg>
<status status="PASS" endtime="20160203 01:36:24.358" starttime="20160203 01:36:24.356"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Short Multislice Data Session">
<doc>Runs a standard data session with two session updates before session is closed (CCRi - CCRu - CCRu - CCRt).Rating group is</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${DIAM HPLMN LOCATION}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${DIAM GW HOST}</arg>
<arg>${DIAM GW PORT}</arg>
<arg>${DIAM GW REALM}</arg>
<arg>${DIAM GGSN FQDN}</arg>
<arg>${DIAM GGSN REALM}</arg>
<arg>${DIAM GGSN VENDORID}</arg>
<arg>${DATA TRAFFIC RATING GROUP}</arg>
</arguments>
<kw type="kw" name="${cgs_filename} = BuiltIn.Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>dataSessionUpdate_rg</arg>
<arg>${rating_group}</arg>
</arguments>
<msg timestamp="20160203 01:36:24.371" level="INFO">${cgs_filename} = dataSessionUpdate_rg6</msg>
<status status="PASS" endtime="20160203 01:36:24.371" starttime="20160203 01:36:24.369"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard Data CGS">
<doc>Runs a standard Data session (meaning a session that needs only location as parameter) for the passed cgs file</doc>
<arguments>
<arg>${cgs_filename}</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${location}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${diam_host}</arg>
<arg>${diam_port}</arg>
<arg>${diam_gw_realm}</arg>
<arg>${diam_ggsn_fqdn}</arg>
<arg>${diam_ggsn_realm}</arg>
<arg>${diam_ggsn_vendorid}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160203 01:36:24.384" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv</msg>
<status status="PASS" endtime="20160203 01:36:24.383" starttime="20160203 01:36:24.382"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160203 01:36:24.387" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv</msg>
<status status="PASS" endtime="20160203 01:36:24.386" starttime="20160203 01:36:24.385"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160203 01:36:24.389" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini</msg>
<status status="PASS" endtime="20160203 01:36:24.389" starttime="20160203 01:36:24.387"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160203 01:36:24.392" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/dataSessionUpdate_rg6.cgs</msg>
<status status="PASS" endtime="20160203 01:36:24.392" starttime="20160203 01:36:24.390"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:24.394" starttime="20160203 01:36:24.393"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:36:24.398" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:24.399" starttime="20160203 01:36:24.395"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:24.401" starttime="20160203 01:36:24.400"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;location\n</arg>
</arguments>
<msg timestamp="20160203 01:36:24.404" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:24.404" starttime="20160203 01:36:24.402"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${location}\n</arg>
</arguments>
<msg timestamp="20160203 01:36:24.408" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:24.408" starttime="20160203 01:36:24.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:24.410" starttime="20160203 01:36:24.409"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160203 01:36:24.413" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:24.414" starttime="20160203 01:36:24.411"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ndiamGwHost=${diam_host} \ndiamGwPort=${diam_port} \ndiamGwRealm=${diam_gw_realm} \ndiamGgsnFqdn=${diam_ggsn_fqdn} \ndiamGgsnRealm=${diam_ggsn_realm} \ndiamGgsnVendorId=${diam_ggsn_vendorid} \ndiamGwConnectTimeoutSecs=20</arg>
</arguments>
<msg timestamp="20160203 01:36:24.419" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:24.419" starttime="20160203 01:36:24.415"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:24.421" starttime="20160203 01:36:24.420"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160203 01:36:24.433" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/dataSessionUpdate_rg6.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:36:39.635" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 01:36:39.633" starttime="20160203 01:36:24.422"></status>
</kw>
<msg timestamp="20160203 01:36:39.637" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 01:36:39.636" starttime="20160203 01:36:24.373"></status>
</kw>
<msg timestamp="20160203 01:36:39.639" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 01:36:39.638" starttime="20160203 01:36:24.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:36:39.641" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160203 01:36:39.642" starttime="20160203 01:36:39.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>rc=${rc}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:36:39.644" level="INFO">rc=1</msg>
<status status="PASS" endtime="20160203 01:36:39.644" starttime="20160203 01:36:39.642"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${status}</arg>
<arg>Run Keyword If</arg>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>Should Be Equal As Numbers</arg>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:39.647" starttime="20160203 01:36:39.645"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>Else If</arg>
<arg>'${SUT PROJECT TAG PREFIX}'=='MVNA_MEX'</arg>
<arg>Should Be Equal As Numbers</arg>
<arg>${rc}</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:39.649" starttime="20160203 01:36:39.648"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20160203 01:36:44.651" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20160203 01:36:44.652" starttime="20160203 01:36:39.650"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/CRCE_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:44.666" starttime="20160203 01:36:44.664"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160203 01:36:44.671" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160203 01:36:44.670" starttime="20160203 01:36:44.667"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160203 01:36:44.685" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160203 01:36:44.686" starttime="20160203 01:36:44.671"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:44.693" starttime="20160203 01:36:44.692"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:36:44.695" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:36:45.017" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:36:45.019" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:36:45.018" starttime="20160203 01:36:44.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.022" starttime="20160203 01:36:45.020"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.024" starttime="20160203 01:36:45.022"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.026" starttime="20160203 01:36:45.025"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:36:45.029" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160203 01:36:45.140" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:36:45.142" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:36:45.142" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:36:45.141" starttime="20160203 01:36:45.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.146" starttime="20160203 01:36:45.143"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.149" starttime="20160203 01:36:45.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.151" starttime="20160203 01:36:45.149"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.153" starttime="20160203 01:36:45.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.155" starttime="20160203 01:36:45.154"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.157" starttime="20160203 01:36:45.156"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.160" starttime="20160203 01:36:45.158"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.162" starttime="20160203 01:36:45.161"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.164" starttime="20160203 01:36:45.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.167" starttime="20160203 01:36:45.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.169" starttime="20160203 01:36:45.167"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:45.169" starttime="20160203 01:36:44.687"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:36:45.172" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160203 01:36:45.176" starttime="20160203 01:36:45.171"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:36:45.178" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20160203 01:36:45.219" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:36:45.220" level="INFO">${stdout_string} = [2016-02-03 00:36:28,885][  INFO][636][                     TraceInterceptorImpl.invoke()] reserve(DataReservationRequest [accumulatedData=0, accumulatedDuration=0, apn=inew.com, bearerType=GPRS, call...</msg>
<status status="PASS" endtime="20160203 01:36:45.220" starttime="20160203 01:36:45.177"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:36:45.223" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20160203 01:36:45.319" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160203 01:36:45.320" starttime="20160203 01:36:45.221"></status>
</kw>
<msg timestamp="20160203 01:36:45.321" level="INFO">${tailed_text} = [2016-02-03 00:36:28,885][  INFO][636][                     TraceInterceptorImpl.invoke()] reserve(DataReservationRequest [accumulatedData=0, accumulatedDuration=0, apn=inew.com, bearerType=GPRS, call...</msg>
<status status="PASS" endtime="20160203 01:36:45.321" starttime="20160203 01:36:44.659"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160203 01:36:45.329" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:45.329" starttime="20160203 01:36:45.326"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:45.330" starttime="20160203 01:36:45.322"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.337" starttime="20160203 01:36:45.336"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.339" starttime="20160203 01:36:45.338"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:45.341" starttime="20160203 01:36:45.331"></status>
</kw>
<msg timestamp="20160203 01:36:45.343" level="INFO">${tailed_text} = [2016-02-03 00:36:28,885][  INFO][636][                     TraceInterceptorImpl.invoke()] reserve(DataReservationRequest [accumulatedData=0, accumulatedDuration=0, apn=inew.com, bearerType=GPRS, call...</msg>
<status status="PASS" endtime="20160203 01:36:45.342" starttime="20160203 01:36:44.654"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>responseCode=INSUFFICIENT_FUNDS</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.345" starttime="20160203 01:36:45.344"></status>
</kw>
<doc>Test starts the data session, should send two updates of the session but in the mean time amount that was available on the balance is
exhausted. Session consumes 9.77 MB

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:36:45.346" starttime="20160203 01:36:18.053"></status>
</test>
<test id="s1-s1-s1-s1-s1-t4" name="Single NOK NoBalance Data Session">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.358" starttime="20160203 01:36:45.356"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20160203 01:36:45.360" level="INFO">${INITIAL_BALANCE} = 0</msg>
<status status="PASS" endtime="20160203 01:36:45.360" starttime="20160203 01:36:45.358"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160203 01:36:45.370" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160203 01:36:45.371" starttime="20160203 01:36:45.369"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160203 01:36:45.373" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160203 01:36:45.373" starttime="20160203 01:36:45.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160203 01:36:45.376" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160203 01:36:45.376" starttime="20160203 01:36:45.374"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160203 01:36:45.378" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160203 01:36:45.379" starttime="20160203 01:36:45.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:36:45.381" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160203 01:36:45.381" starttime="20160203 01:36:45.379"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:36:45.383" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160203 01:36:45.384" starttime="20160203 01:36:45.382"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160203 01:36:45.386" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:36:45.386" starttime="20160203 01:36:45.385"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160203 01:36:45.388" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160203 01:36:45.389" starttime="20160203 01:36:45.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160203 01:36:45.391" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:36:45.391" starttime="20160203 01:36:45.390"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160203 01:36:45.394" level="INFO">msg=balance=0</msg>
<status status="PASS" endtime="20160203 01:36:45.394" starttime="20160203 01:36:45.392"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:36:45.403" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:45.404" starttime="20160203 01:36:45.401"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:45.405" starttime="20160203 01:36:45.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:36:45.408" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:45.409" starttime="20160203 01:36:45.407"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:45.410" starttime="20160203 01:36:45.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:36:45.414" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:45.414" starttime="20160203 01:36:45.412"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:45.415" starttime="20160203 01:36:45.410"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:45.416" starttime="20160203 01:36:45.396"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:36:45.419" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:36:45.419" starttime="20160203 01:36:45.416"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.421" starttime="20160203 01:36:45.420"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.424" starttime="20160203 01:36:45.422"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.426" starttime="20160203 01:36:45.424"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.428" starttime="20160203 01:36:45.427"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.430" starttime="20160203 01:36:45.428"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.432" starttime="20160203 01:36:45.430"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.434" starttime="20160203 01:36:45.433"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.436" starttime="20160203 01:36:45.435"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.439" starttime="20160203 01:36:45.437"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.441" starttime="20160203 01:36:45.440"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.443" starttime="20160203 01:36:45.442"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:45.446" starttime="20160203 01:36:45.444"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:36:45.449" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=0']</msg>
<msg timestamp="20160203 01:36:47.347" level="INFO">01:36:47,344 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:47.349" starttime="20160203 01:36:45.448"></status>
</kw>
<msg timestamp="20160203 01:36:47.354" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:36:47.355" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:36:47.352" starttime="20160203 01:36:45.446"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:36:47.373" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:36:47.372" starttime="20160203 01:36:47.368"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:36:47.378" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:36:47.378" starttime="20160203 01:36:47.375"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:36:47.384" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:36:47.383" starttime="20160203 01:36:47.380"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:36:47.393" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:36:47.395" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160203 01:36:47.396" starttime="20160203 01:36:47.389"></status>
</kw>
<msg timestamp="20160203 01:36:47.398" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:36:47.399" level="INFO">${return_log_entry} = 2016-02-03 01:36:47,344 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:47.397" starttime="20160203 01:36:47.386"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:47.413" starttime="20160203 01:36:47.410"></status>
</kw>
<msg timestamp="20160203 01:36:47.415" level="INFO">${return_log_entry} = 2016-02-03 01:36:47,344 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:47.414" starttime="20160203 01:36:47.401"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:47.421" starttime="20160203 01:36:47.419"></status>
</kw>
<msg timestamp="20160203 01:36:47.422" level="INFO">${return_log_entry} = 2016-02-03 01:36:47,344 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:47.421" starttime="20160203 01:36:47.415"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:47.428" starttime="20160203 01:36:47.427"></status>
</kw>
<msg timestamp="20160203 01:36:47.429" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:36:47.429" starttime="20160203 01:36:47.423"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:47.438" starttime="20160203 01:36:47.437"></status>
</kw>
<msg timestamp="20160203 01:36:47.439" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:36:47.439" starttime="20160203 01:36:47.430"></status>
</kw>
<msg timestamp="20160203 01:36:47.440" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:36:47.440" starttime="20160203 01:36:47.358"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:47.448" starttime="20160203 01:36:47.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:47.450" starttime="20160203 01:36:47.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:47.452" starttime="20160203 01:36:47.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:36:47.460" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:36:47.460" starttime="20160203 01:36:47.458"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:47.461" starttime="20160203 01:36:47.456"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:47.462" starttime="20160203 01:36:47.453"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:47.462" starttime="20160203 01:36:47.442"></status>
</kw>
<msg timestamp="20160203 01:36:47.464" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160203 01:36:47.463" starttime="20160203 01:36:45.362"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160203 01:36:47.467" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:36:47.467" starttime="20160203 01:36:47.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:36:47.469" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160203 01:36:47.470" starttime="20160203 01:36:47.468"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Data Session *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:47.472" starttime="20160203 01:36:47.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the data session...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:36:47.473" level="INFO">Running the data session...</msg>
<status status="PASS" endtime="20160203 01:36:47.474" starttime="20160203 01:36:47.472"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Short 767b Data Session">
<doc>Runs a standard data session in total of 767B (CCRi - CCRt). Rating group is added to differentiate between</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${DIAM HPLMN LOCATION}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${DIAM GW HOST}</arg>
<arg>${DIAM GW PORT}</arg>
<arg>${DIAM GW REALM}</arg>
<arg>${DIAM GGSN FQDN}</arg>
<arg>${DIAM GGSN REALM}</arg>
<arg>${DIAM GGSN VENDORID}</arg>
<arg>${DATA TRAFFIC RATING GROUP}</arg>
</arguments>
<kw type="kw" name="${cgs_filename} = BuiltIn.Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>data767b_rg</arg>
<arg>${rating_group}</arg>
</arguments>
<msg timestamp="20160203 01:36:47.487" level="INFO">${cgs_filename} = data767b_rg6</msg>
<status status="PASS" endtime="20160203 01:36:47.486" starttime="20160203 01:36:47.485"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard Data CGS">
<doc>Runs a standard Data session (meaning a session that needs only location as parameter) for the passed cgs file</doc>
<arguments>
<arg>${cgs_filename}</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${location}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${diam_host}</arg>
<arg>${diam_port}</arg>
<arg>${diam_gw_realm}</arg>
<arg>${diam_ggsn_fqdn}</arg>
<arg>${diam_ggsn_realm}</arg>
<arg>${diam_ggsn_vendorid}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160203 01:36:47.500" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv</msg>
<status status="PASS" endtime="20160203 01:36:47.500" starttime="20160203 01:36:47.499"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160203 01:36:47.503" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv</msg>
<status status="PASS" endtime="20160203 01:36:47.503" starttime="20160203 01:36:47.501"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160203 01:36:47.506" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini</msg>
<status status="PASS" endtime="20160203 01:36:47.505" starttime="20160203 01:36:47.504"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160203 01:36:47.509" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs</msg>
<status status="PASS" endtime="20160203 01:36:47.508" starttime="20160203 01:36:47.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:47.510" starttime="20160203 01:36:47.509"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:36:47.514" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:47.515" starttime="20160203 01:36:47.511"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:47.517" starttime="20160203 01:36:47.516"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;location\n</arg>
</arguments>
<msg timestamp="20160203 01:36:47.519" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:47.520" starttime="20160203 01:36:47.517"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${location}\n</arg>
</arguments>
<msg timestamp="20160203 01:36:47.523" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:47.524" starttime="20160203 01:36:47.521"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:47.525" starttime="20160203 01:36:47.524"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160203 01:36:47.528" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:47.529" starttime="20160203 01:36:47.526"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ndiamGwHost=${diam_host} \ndiamGwPort=${diam_port} \ndiamGwRealm=${diam_gw_realm} \ndiamGgsnFqdn=${diam_ggsn_fqdn} \ndiamGgsnRealm=${diam_ggsn_realm} \ndiamGgsnVendorId=${diam_ggsn_vendorid} \ndiamGwConnectTimeoutSecs=20</arg>
</arguments>
<msg timestamp="20160203 01:36:47.533" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:47.534" starttime="20160203 01:36:47.530"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:47.536" starttime="20160203 01:36:47.535"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160203 01:36:47.543" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:36:55.504" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 01:36:55.502" starttime="20160203 01:36:47.537"></status>
</kw>
<msg timestamp="20160203 01:36:55.507" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 01:36:55.506" starttime="20160203 01:36:47.489"></status>
</kw>
<msg timestamp="20160203 01:36:55.509" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 01:36:55.508" starttime="20160203 01:36:47.476"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:36:55.511" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160203 01:36:55.511" starttime="20160203 01:36:55.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>1</arg>
<arg>msg=CG Session ended with rc=${rc} other than 1!</arg>
</arguments>
<msg timestamp="20160203 01:36:55.514" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:36:55.515" starttime="20160203 01:36:55.512"></status>
</kw>
<doc>Test will attempt to make a data session for subscriber that has empty monetary account (and no other account to charge). It's expected that test shoud fail

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:36:55.515" starttime="20160203 01:36:45.348"></status>
</test>
<test id="s1-s1-s1-s1-s1-t5" name="Single NOK UnknownLocation Data Session">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:55.529" starttime="20160203 01:36:55.525"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1000000</arg>
</arguments>
<msg timestamp="20160203 01:36:55.531" level="INFO">${INITIAL_BALANCE} = 1000000</msg>
<status status="PASS" endtime="20160203 01:36:55.531" starttime="20160203 01:36:55.530"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160203 01:36:55.542" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160203 01:36:55.542" starttime="20160203 01:36:55.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160203 01:36:55.544" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160203 01:36:55.545" starttime="20160203 01:36:55.543"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160203 01:36:55.547" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160203 01:36:55.548" starttime="20160203 01:36:55.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160203 01:36:55.550" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160203 01:36:55.550" starttime="20160203 01:36:55.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:36:55.553" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160203 01:36:55.553" starttime="20160203 01:36:55.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:36:55.555" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160203 01:36:55.556" starttime="20160203 01:36:55.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160203 01:36:55.558" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:36:55.558" starttime="20160203 01:36:55.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160203 01:36:55.560" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160203 01:36:55.561" starttime="20160203 01:36:55.559"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160203 01:36:55.563" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:36:55.563" starttime="20160203 01:36:55.562"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160203 01:36:55.565" level="INFO">msg=balance=1000000</msg>
<status status="PASS" endtime="20160203 01:36:55.566" starttime="20160203 01:36:55.564"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:36:55.575" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:55.576" starttime="20160203 01:36:55.573"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:55.576" starttime="20160203 01:36:55.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:36:55.580" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:55.581" starttime="20160203 01:36:55.578"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:55.581" starttime="20160203 01:36:55.577"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:36:55.585" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:55.585" starttime="20160203 01:36:55.583"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:55.586" starttime="20160203 01:36:55.582"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:55.587" starttime="20160203 01:36:55.567"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:36:55.590" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:36:55.590" starttime="20160203 01:36:55.588"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:55.592" starttime="20160203 01:36:55.591"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:55.594" starttime="20160203 01:36:55.593"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:55.597" starttime="20160203 01:36:55.595"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:55.599" starttime="20160203 01:36:55.597"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:55.600" starttime="20160203 01:36:55.599"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:55.603" starttime="20160203 01:36:55.601"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:55.605" starttime="20160203 01:36:55.603"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:55.607" starttime="20160203 01:36:55.606"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:55.609" starttime="20160203 01:36:55.608"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:55.611" starttime="20160203 01:36:55.610"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:55.614" starttime="20160203 01:36:55.612"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:55.616" starttime="20160203 01:36:55.614"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:36:55.619" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=1000000']</msg>
<msg timestamp="20160203 01:36:57.601" level="INFO">01:36:57,596 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:57.603" starttime="20160203 01:36:55.618"></status>
</kw>
<msg timestamp="20160203 01:36:57.608" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:36:57.609" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:36:57.606" starttime="20160203 01:36:55.617"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:36:57.630" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:36:57.629" starttime="20160203 01:36:57.623"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:36:57.635" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:36:57.634" starttime="20160203 01:36:57.632"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:36:57.641" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:36:57.640" starttime="20160203 01:36:57.637"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:36:57.651" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:36:57.652" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160203 01:36:57.653" starttime="20160203 01:36:57.647"></status>
</kw>
<msg timestamp="20160203 01:36:57.655" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:36:57.656" level="INFO">${return_log_entry} = 2016-02-03 01:36:57,596 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:57.654" starttime="20160203 01:36:57.643"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:57.667" starttime="20160203 01:36:57.666"></status>
</kw>
<msg timestamp="20160203 01:36:57.669" level="INFO">${return_log_entry} = 2016-02-03 01:36:57,596 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:57.668" starttime="20160203 01:36:57.658"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:57.677" starttime="20160203 01:36:57.675"></status>
</kw>
<msg timestamp="20160203 01:36:57.678" level="INFO">${return_log_entry} = 2016-02-03 01:36:57,596 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:36:57.677" starttime="20160203 01:36:57.670"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:57.686" starttime="20160203 01:36:57.684"></status>
</kw>
<msg timestamp="20160203 01:36:57.688" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:36:57.687" starttime="20160203 01:36:57.679"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:57.698" starttime="20160203 01:36:57.697"></status>
</kw>
<msg timestamp="20160203 01:36:57.700" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:36:57.699" starttime="20160203 01:36:57.689"></status>
</kw>
<msg timestamp="20160203 01:36:57.702" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:36:57.701" starttime="20160203 01:36:57.612"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:57.711" starttime="20160203 01:36:57.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:57.714" starttime="20160203 01:36:57.712"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:57.716" starttime="20160203 01:36:57.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:36:57.726" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:36:57.727" starttime="20160203 01:36:57.724"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:57.728" starttime="20160203 01:36:57.722"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:57.729" starttime="20160203 01:36:57.717"></status>
</kw>
<status status="PASS" endtime="20160203 01:36:57.730" starttime="20160203 01:36:57.703"></status>
</kw>
<msg timestamp="20160203 01:36:57.732" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160203 01:36:57.731" starttime="20160203 01:36:55.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160203 01:36:57.735" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:36:57.735" starttime="20160203 01:36:57.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:36:57.738" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160203 01:36:57.739" starttime="20160203 01:36:57.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Data Session *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:57.741" starttime="20160203 01:36:57.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the data session...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:36:57.744" level="INFO">Running the data session...</msg>
<status status="PASS" endtime="20160203 01:36:57.744" starttime="20160203 01:36:57.742"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Short 767b Data Session">
<doc>Runs a standard data session in total of 767B (CCRi - CCRt). Rating group is added to differentiate between</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${DIAM HPLMN UNKNOWN LOCATION}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${DIAM GW HOST}</arg>
<arg>${DIAM GW PORT}</arg>
<arg>${DIAM GW REALM}</arg>
<arg>${DIAM GGSN FQDN}</arg>
<arg>${DIAM GGSN REALM}</arg>
<arg>${DIAM GGSN VENDORID}</arg>
<arg>${DATA TRAFFIC RATING GROUP}</arg>
</arguments>
<kw type="kw" name="${cgs_filename} = BuiltIn.Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>data767b_rg</arg>
<arg>${rating_group}</arg>
</arguments>
<msg timestamp="20160203 01:36:57.763" level="INFO">${cgs_filename} = data767b_rg6</msg>
<status status="PASS" endtime="20160203 01:36:57.760" starttime="20160203 01:36:57.758"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard Data CGS">
<doc>Runs a standard Data session (meaning a session that needs only location as parameter) for the passed cgs file</doc>
<arguments>
<arg>${cgs_filename}</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${location}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${diam_host}</arg>
<arg>${diam_port}</arg>
<arg>${diam_gw_realm}</arg>
<arg>${diam_ggsn_fqdn}</arg>
<arg>${diam_ggsn_realm}</arg>
<arg>${diam_ggsn_vendorid}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160203 01:36:57.779" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv</msg>
<status status="PASS" endtime="20160203 01:36:57.778" starttime="20160203 01:36:57.776"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160203 01:36:57.783" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv</msg>
<status status="PASS" endtime="20160203 01:36:57.782" starttime="20160203 01:36:57.780"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160203 01:36:57.786" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini</msg>
<status status="PASS" endtime="20160203 01:36:57.786" starttime="20160203 01:36:57.784"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160203 01:36:57.790" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs</msg>
<status status="PASS" endtime="20160203 01:36:57.790" starttime="20160203 01:36:57.788"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:57.792" starttime="20160203 01:36:57.791"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:36:57.795" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:57.796" starttime="20160203 01:36:57.793"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:57.798" starttime="20160203 01:36:57.797"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;location\n</arg>
</arguments>
<msg timestamp="20160203 01:36:57.801" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:57.801" starttime="20160203 01:36:57.799"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${location}\n</arg>
</arguments>
<msg timestamp="20160203 01:36:57.804" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:57.805" starttime="20160203 01:36:57.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:57.807" starttime="20160203 01:36:57.806"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160203 01:36:57.809" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:57.810" starttime="20160203 01:36:57.807"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ndiamGwHost=${diam_host} \ndiamGwPort=${diam_port} \ndiamGwRealm=${diam_gw_realm} \ndiamGgsnFqdn=${diam_ggsn_fqdn} \ndiamGgsnRealm=${diam_ggsn_realm} \ndiamGgsnVendorId=${diam_ggsn_vendorid} \ndiamGwConnectTimeoutSecs=20</arg>
</arguments>
<msg timestamp="20160203 01:36:57.814" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:36:57.814" starttime="20160203 01:36:57.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:36:57.816" starttime="20160203 01:36:57.815"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160203 01:36:57.822" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:37:03.912" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 01:37:03.909" starttime="20160203 01:36:57.817"></status>
</kw>
<msg timestamp="20160203 01:37:03.917" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 01:37:03.915" starttime="20160203 01:36:57.766"></status>
</kw>
<msg timestamp="20160203 01:37:03.919" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 01:37:03.918" starttime="20160203 01:36:57.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:03.921" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160203 01:37:03.922" starttime="20160203 01:37:03.920"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>1</arg>
<arg>msg=CG Session ended with rc=${rc} other than 1!</arg>
</arguments>
<msg timestamp="20160203 01:37:03.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:37:03.925" starttime="20160203 01:37:03.922"></status>
</kw>
<doc>Test will attempt to start a simple data session with unknown location. Test should fail

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:37:03.925" starttime="20160203 01:36:55.518"></status>
</test>
<doc>Testing the simple data session cases with CG

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160203 01:37:03.940" starttime="20160203 01:35:02.554"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160203 01:37:03.975" starttime="20160203 01:35:02.534"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC" id="s1-s1-s1-s2" name="MFC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration" id="s1-s1-s1-s2-s1" name="MFC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/MFC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s1-s1-s2-s1-s1" name="MFC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160203 01:37:04.188" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:37:04.191" level="INFO">${date} = Wed Feb  3 01:37:04 CET 2016</msg>
<status status="PASS" endtime="20160203 01:37:04.190" starttime="20160203 01:37:04.185"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:04.193" level="INFO">Date and time: Wed Feb  3 01:37:04 CET 2016</msg>
<status status="PASS" endtime="20160203 01:37:04.194" starttime="20160203 01:37:04.192"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:04.195" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160203 01:37:04.196" starttime="20160203 01:37:04.194"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:04.229" starttime="20160203 01:37:04.228"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:04.278" starttime="20160203 01:37:04.234"></status>
</kw>
<msg timestamp="20160203 01:37:04.279" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160203 01:37:04.279" starttime="20160203 01:37:04.230"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:37:04.285" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:37:04.773" level="INFO">Read output: Last login: Wed Feb  3 00:35:04 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:37:04.774" starttime="20160203 01:37:04.283"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:04.774" starttime="20160203 01:37:04.280"></status>
</kw>
<msg timestamp="20160203 01:37:04.776" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160203 01:37:04.775" starttime="20160203 01:37:04.222"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:37:04.780" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:37:04.780" starttime="20160203 01:37:04.777"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:37:04.782" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160203 01:37:05.211" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:37:05.213" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:37:05.212" starttime="20160203 01:37:04.781"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:05.218" starttime="20160203 01:37:05.216"></status>
</kw>
<msg timestamp="20160203 01:37:05.219" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:37:05.219" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:37:05.218" starttime="20160203 01:37:05.215"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:05.224" starttime="20160203 01:37:05.223"></status>
</kw>
<msg timestamp="20160203 01:37:05.225" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:05.225" starttime="20160203 01:37:05.220"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160203 01:37:05.227" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:37:05.227" starttime="20160203 01:37:05.226"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:37:05.230" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:37:05.229" starttime="20160203 01:37:05.228"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:05.231" starttime="20160203 01:37:05.230"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:05.237" starttime="20160203 01:37:05.236"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:37:05.240" starttime="20160203 01:37:05.238"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:05.241" starttime="20160203 01:37:05.232"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:05.246" starttime="20160203 01:37:05.245"></status>
</kw>
<msg timestamp="20160203 01:37:05.247" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:37:05.246" starttime="20160203 01:37:05.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:05.248" starttime="20160203 01:37:05.247"></status>
</kw>
<msg timestamp="20160203 01:37:05.250" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160203 01:37:05.251" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:37:05.249" starttime="20160203 01:37:04.206"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:05.280" starttime="20160203 01:37:05.279"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:05.339" starttime="20160203 01:37:05.285"></status>
</kw>
<msg timestamp="20160203 01:37:05.341" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160203 01:37:05.341" starttime="20160203 01:37:05.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:37:05.356" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:37:05.925" level="INFO">Read output: Last login: Wed Feb  3 00:35:08 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:37:05.927" starttime="20160203 01:37:05.353"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:05.929" starttime="20160203 01:37:05.343"></status>
</kw>
<msg timestamp="20160203 01:37:05.933" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160203 01:37:05.932" starttime="20160203 01:37:05.274"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:37:05.945" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:37:05.944" starttime="20160203 01:37:05.935"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:37:05.949" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160203 01:37:06.430" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:37:06.434" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:37:06.432" starttime="20160203 01:37:05.947"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:06.444" starttime="20160203 01:37:06.440"></status>
</kw>
<msg timestamp="20160203 01:37:06.446" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:37:06.447" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:37:06.445" starttime="20160203 01:37:06.436"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:06.459" starttime="20160203 01:37:06.456"></status>
</kw>
<msg timestamp="20160203 01:37:06.461" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:06.460" starttime="20160203 01:37:06.448"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160203 01:37:06.466" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:37:06.465" starttime="20160203 01:37:06.462"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:37:06.471" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:37:06.470" starttime="20160203 01:37:06.467"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:06.474" starttime="20160203 01:37:06.472"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:06.488" starttime="20160203 01:37:06.485"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:37:06.492" starttime="20160203 01:37:06.489"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:06.495" starttime="20160203 01:37:06.476"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:06.506" starttime="20160203 01:37:06.504"></status>
</kw>
<msg timestamp="20160203 01:37:06.509" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:37:06.508" starttime="20160203 01:37:06.496"></status>
</kw>
<msg timestamp="20160203 01:37:06.513" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160203 01:37:06.513" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:37:06.511" starttime="20160203 01:37:05.260"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:06.594" starttime="20160203 01:37:06.590"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:06.665" starttime="20160203 01:37:06.603"></status>
</kw>
<msg timestamp="20160203 01:37:06.667" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160203 01:37:06.666" starttime="20160203 01:37:06.595"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:37:06.679" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:37:07.548" level="INFO">Read output: Last login: Wed Feb  3 00:36:22 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:37:07.549" starttime="20160203 01:37:06.676"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:07.550" starttime="20160203 01:37:06.669"></status>
</kw>
<msg timestamp="20160203 01:37:07.552" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160203 01:37:07.551" starttime="20160203 01:37:06.570"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:37:07.556" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:37:07.556" starttime="20160203 01:37:07.553"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:37:07.558" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160203 01:37:08.173" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:37:08.177" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:37:08.175" starttime="20160203 01:37:07.557"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:08.185" starttime="20160203 01:37:08.182"></status>
</kw>
<msg timestamp="20160203 01:37:08.187" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:37:08.188" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:37:08.186" starttime="20160203 01:37:08.179"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:08.199" starttime="20160203 01:37:08.197"></status>
</kw>
<msg timestamp="20160203 01:37:08.201" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:08.200" starttime="20160203 01:37:08.189"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:37:08.206" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:37:08.205" starttime="20160203 01:37:08.202"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:37:08.210" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:37:08.209" starttime="20160203 01:37:08.207"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:08.213" starttime="20160203 01:37:08.212"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:08.227" starttime="20160203 01:37:08.224"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:37:08.232" starttime="20160203 01:37:08.228"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:08.233" starttime="20160203 01:37:08.215"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:08.243" starttime="20160203 01:37:08.241"></status>
</kw>
<msg timestamp="20160203 01:37:08.245" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:37:08.245" starttime="20160203 01:37:08.235"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:08.249" starttime="20160203 01:37:08.247"></status>
</kw>
<msg timestamp="20160203 01:37:08.253" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160203 01:37:08.254" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:37:08.251" starttime="20160203 01:37:06.535"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:08.303" starttime="20160203 01:37:08.301"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:08.393" starttime="20160203 01:37:08.307"></status>
</kw>
<msg timestamp="20160203 01:37:08.396" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160203 01:37:08.395" starttime="20160203 01:37:08.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:37:08.409" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:37:08.934" level="INFO">Read output: Last login: Wed Feb  3 00:35:18 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:37:08.935" starttime="20160203 01:37:08.406"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:08.936" starttime="20160203 01:37:08.397"></status>
</kw>
<msg timestamp="20160203 01:37:08.937" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160203 01:37:08.937" starttime="20160203 01:37:08.297"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:37:08.943" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:37:08.943" starttime="20160203 01:37:08.938"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:37:08.945" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160203 01:37:09.157" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:37:09.161" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:37:09.159" starttime="20160203 01:37:08.944"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.169" starttime="20160203 01:37:09.165"></status>
</kw>
<msg timestamp="20160203 01:37:09.171" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:37:09.172" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:37:09.170" starttime="20160203 01:37:09.162"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.182" starttime="20160203 01:37:09.180"></status>
</kw>
<msg timestamp="20160203 01:37:09.184" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:09.184" starttime="20160203 01:37:09.173"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:37:09.189" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:37:09.188" starttime="20160203 01:37:09.186"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:37:09.194" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:37:09.193" starttime="20160203 01:37:09.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.197" starttime="20160203 01:37:09.195"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.210" starttime="20160203 01:37:09.207"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.216" starttime="20160203 01:37:09.211"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:09.217" starttime="20160203 01:37:09.199"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.227" starttime="20160203 01:37:09.225"></status>
</kw>
<msg timestamp="20160203 01:37:09.229" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:37:09.229" starttime="20160203 01:37:09.219"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.233" starttime="20160203 01:37:09.231"></status>
</kw>
<msg timestamp="20160203 01:37:09.237" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160203 01:37:09.237" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:37:09.235" starttime="20160203 01:37:08.275"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:09.242" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:37:09.243" starttime="20160203 01:37:09.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:09.247" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:37:09.248" starttime="20160203 01:37:09.244"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:09.253" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:37:09.254" starttime="20160203 01:37:09.250"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:09.258" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:37:09.259" starttime="20160203 01:37:09.255"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160203 01:37:09.263" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:37:09.264" starttime="20160203 01:37:09.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160203 01:37:09.268" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:37:09.269" starttime="20160203 01:37:09.265"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160203 01:37:09.273" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:37:09.274" starttime="20160203 01:37:09.270"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160203 01:37:09.278" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:37:09.279" starttime="20160203 01:37:09.275"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.291" starttime="20160203 01:37:09.287"></status>
</kw>
<msg timestamp="20160203 01:37:09.292" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:37:09.291" starttime="20160203 01:37:09.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160203 01:37:09.294" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:37:09.294" starttime="20160203 01:37:09.292"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:09.295" starttime="20160203 01:37:04.180"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s1-t1" name="Run MFC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.302" starttime="20160203 01:37:09.301"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160203 01:37:09.304" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160203 01:37:09.304" starttime="20160203 01:37:09.303"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>3</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160203 01:37:09.312" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160203 01:37:09.313" starttime="20160203 01:37:09.311"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160203 01:37:09.314" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160203 01:37:09.315" starttime="20160203 01:37:09.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160203 01:37:09.316" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160203 01:37:09.317" starttime="20160203 01:37:09.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160203 01:37:09.318" level="INFO">msg=amount=3</msg>
<status status="PASS" endtime="20160203 01:37:09.319" starttime="20160203 01:37:09.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:37:09.321" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160203 01:37:09.321" starttime="20160203 01:37:09.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:37:09.323" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160203 01:37:09.323" starttime="20160203 01:37:09.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160203 01:37:09.325" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:09.325" starttime="20160203 01:37:09.324"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160203 01:37:09.327" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160203 01:37:09.327" starttime="20160203 01:37:09.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160203 01:37:09.329" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:37:09.329" starttime="20160203 01:37:09.328"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160203 01:37:09.331" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160203 01:37:09.331" starttime="20160203 01:37:09.330"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:09.339" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:09.339" starttime="20160203 01:37:09.337"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:09.340" starttime="20160203 01:37:09.336"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:09.343" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:09.344" starttime="20160203 01:37:09.342"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:09.344" starttime="20160203 01:37:09.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:09.347" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:09.348" starttime="20160203 01:37:09.346"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:09.348" starttime="20160203 01:37:09.345"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:09.349" starttime="20160203 01:37:09.333"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:37:09.351" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:37:09.352" starttime="20160203 01:37:09.349"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.353" starttime="20160203 01:37:09.352"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.355" starttime="20160203 01:37:09.354"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.358" starttime="20160203 01:37:09.356"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.360" starttime="20160203 01:37:09.359"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.362" starttime="20160203 01:37:09.361"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.364" starttime="20160203 01:37:09.363"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.366" starttime="20160203 01:37:09.365"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.368" starttime="20160203 01:37:09.367"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.370" starttime="20160203 01:37:09.369"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.372" starttime="20160203 01:37:09.371"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.374" starttime="20160203 01:37:09.373"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:09.377" starttime="20160203 01:37:09.375"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:37:09.379" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160203 01:37:13.660" level="INFO">01:37:13,656 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:13.661" starttime="20160203 01:37:09.378"></status>
</kw>
<msg timestamp="20160203 01:37:13.665" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:13.666" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:37:13.664" starttime="20160203 01:37:09.377"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:13.680" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:37:13.680" starttime="20160203 01:37:13.677"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:13.685" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:13.684" starttime="20160203 01:37:13.682"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:13.689" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:13.689" starttime="20160203 01:37:13.686"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:13.696" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:13.698" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:13.699" starttime="20160203 01:37:13.693"></status>
</kw>
<msg timestamp="20160203 01:37:13.701" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:13.701" level="INFO">${return_log_entry} = 2016-02-03 01:37:13,656 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:13.700" starttime="20160203 01:37:13.691"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:13.712" starttime="20160203 01:37:13.710"></status>
</kw>
<msg timestamp="20160203 01:37:13.714" level="INFO">${return_log_entry} = 2016-02-03 01:37:13,656 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:13.714" starttime="20160203 01:37:13.703"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:13.725" starttime="20160203 01:37:13.723"></status>
</kw>
<msg timestamp="20160203 01:37:13.727" level="INFO">${return_log_entry} = 2016-02-03 01:37:13,656 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:13.726" starttime="20160203 01:37:13.716"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:13.739" starttime="20160203 01:37:13.736"></status>
</kw>
<msg timestamp="20160203 01:37:13.741" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:13.741" starttime="20160203 01:37:13.729"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:13.758" starttime="20160203 01:37:13.755"></status>
</kw>
<msg timestamp="20160203 01:37:13.760" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:13.759" starttime="20160203 01:37:13.743"></status>
</kw>
<msg timestamp="20160203 01:37:13.762" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:13.761" starttime="20160203 01:37:13.669"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:13.775" starttime="20160203 01:37:13.772"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:13.778" starttime="20160203 01:37:13.776"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:13.781" starttime="20160203 01:37:13.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:37:13.792" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:37:13.792" starttime="20160203 01:37:13.790"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:13.793" starttime="20160203 01:37:13.789"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:13.793" starttime="20160203 01:37:13.783"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:13.794" starttime="20160203 01:37:13.764"></status>
</kw>
<msg timestamp="20160203 01:37:13.795" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160203 01:37:13.795" starttime="20160203 01:37:09.306"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160203 01:37:13.797" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:37:13.798" starttime="20160203 01:37:13.796"></status>
</kw>
<kw type="kw" name="${b_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160203 01:37:13.802" level="INFO">${b_party_msisdn} = 525516001001</msg>
<status status="PASS" endtime="20160203 01:37:13.801" starttime="20160203 01:37:13.798"></status>
</kw>
<kw type="kw" name="${b_party_imsi} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}+1</arg>
</arguments>
<msg timestamp="20160203 01:37:13.805" level="INFO">${b_party_imsi} = 334030880001001</msg>
<status status="PASS" endtime="20160203 01:37:13.805" starttime="20160203 01:37:13.803"></status>
</kw>
<kw type="kw" name="${c_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+2</arg>
</arguments>
<msg timestamp="20160203 01:37:13.809" level="INFO">${c_party_msisdn} = 525516001002</msg>
<status status="PASS" endtime="20160203 01:37:13.809" starttime="20160203 01:37:13.806"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:13.810" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160203 01:37:13.811" starttime="20160203 01:37:13.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MFC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:13.812" starttime="20160203 01:37:13.812"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MFC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:13.814" level="INFO">Running the short MFC call...</msg>
<status status="PASS" endtime="20160203 01:37:13.814" starttime="20160203 01:37:13.813"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MFC 1s">
<doc>Runs a standard MFC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${b_party_imsi}</arg>
<arg>${b_party_msisdn}</arg>
<arg>${c_party_msisdn}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MFC CGS">
<doc>Runs a standard MFC session (meaning a session that needs only mscAddress, mfcAPartyMsisdn and mfcCPartyMsisdn paramters) for the passed cgs file</doc>
<arguments>
<arg>mfc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${rd_imsi}</arg>
<arg>${rd_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mfc_req}</arg>
<arg>${queue_mfc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160203 01:37:13.845" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160203 01:37:13.844" starttime="20160203 01:37:13.841"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160203 01:37:13.850" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160203 01:37:13.849" starttime="20160203 01:37:13.846"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160203 01:37:13.854" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini</msg>
<status status="PASS" endtime="20160203 01:37:13.854" starttime="20160203 01:37:13.851"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160203 01:37:13.860" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs</msg>
<status status="PASS" endtime="20160203 01:37:13.859" starttime="20160203 01:37:13.857"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:13.861" starttime="20160203 01:37:13.860"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${rd_imsi};${rd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:37:13.864" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:13.864" starttime="20160203 01:37:13.862"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:13.885" starttime="20160203 01:37:13.883"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;gmscAddress;mfcAPartyMsisdn;mfcCPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160203 01:37:13.888" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:13.889" starttime="20160203 01:37:13.885"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${msc_address};${cg_msisdn};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:37:13.892" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:13.893" starttime="20160203 01:37:13.889"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:13.894" starttime="20160203 01:37:13.893"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160203 01:37:13.896" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:13.897" starttime="20160203 01:37:13.895"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MFC;${queue_mfc_req};${queue_mfc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160203 01:37:13.900" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:13.900" starttime="20160203 01:37:13.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:13.902" starttime="20160203 01:37:13.901"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160203 01:37:13.909" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:37:26.146" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:37:26.142" starttime="20160203 01:37:13.902"></status>
</kw>
<msg timestamp="20160203 01:37:26.150" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:37:26.148" starttime="20160203 01:37:13.828"></status>
</kw>
<msg timestamp="20160203 01:37:26.154" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:37:26.153" starttime="20160203 01:37:13.816"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:26.158" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160203 01:37:26.159" starttime="20160203 01:37:26.156"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.164" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:37:26.166" starttime="20160203 01:37:26.161"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.169" starttime="20160203 01:37:26.167"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.203" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:26.204" starttime="20160203 01:37:26.199"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:26.206" starttime="20160203 01:37:26.196"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.213" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:26.214" starttime="20160203 01:37:26.210"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:26.216" starttime="20160203 01:37:26.207"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.223" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:26.224" starttime="20160203 01:37:26.220"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:26.226" starttime="20160203 01:37:26.217"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:26.227" starttime="20160203 01:37:26.188"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.232" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:37:26.233" starttime="20160203 01:37:26.229"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.238" starttime="20160203 01:37:26.235"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.242" starttime="20160203 01:37:26.239"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.247" starttime="20160203 01:37:26.244"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.251" starttime="20160203 01:37:26.248"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.254" starttime="20160203 01:37:26.252"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.259" starttime="20160203 01:37:26.256"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:37:26.265" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000']</msg>
<msg timestamp="20160203 01:37:26.548" level="INFO">01:37:26,542 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:37:26,543 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:37:26,543 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36970
01:37:26,544 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000
01:37:26,545 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:37:26,545 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:37:26,546 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:37:26,547 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=3</msg>
<status status="PASS" endtime="20160203 01:37:26.549" starttime="20160203 01:37:26.263"></status>
</kw>
<msg timestamp="20160203 01:37:26.550" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:26.550" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:37:26.549" starttime="20160203 01:37:26.261"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:26.557" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:37:26.556" starttime="20160203 01:37:26.555"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.559" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:26.559" starttime="20160203 01:37:26.557"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.561" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:26.560" starttime="20160203 01:37:26.559"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.564" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:26.567" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:26.567" starttime="20160203 01:37:26.563"></status>
</kw>
<msg timestamp="20160203 01:37:26.568" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:26.568" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,542 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:26.568" starttime="20160203 01:37:26.562"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.574" starttime="20160203 01:37:26.573"></status>
</kw>
<msg timestamp="20160203 01:37:26.575" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,542 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:26.575" starttime="20160203 01:37:26.569"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.580" starttime="20160203 01:37:26.579"></status>
</kw>
<msg timestamp="20160203 01:37:26.581" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,542 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:26.581" starttime="20160203 01:37:26.576"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.586" starttime="20160203 01:37:26.585"></status>
</kw>
<msg timestamp="20160203 01:37:26.587" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:26.587" starttime="20160203 01:37:26.582"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.594" starttime="20160203 01:37:26.593"></status>
</kw>
<msg timestamp="20160203 01:37:26.595" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:26.595" starttime="20160203 01:37:26.588"></status>
</kw>
<msg timestamp="20160203 01:37:26.596" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:26.596" starttime="20160203 01:37:26.551"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:26.603" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160203 01:37:26.602" starttime="20160203 01:37:26.601"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.605" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:26.604" starttime="20160203 01:37:26.603"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.607" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:26.606" starttime="20160203 01:37:26.605"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.610" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:26.612" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:26.613" starttime="20160203 01:37:26.608"></status>
</kw>
<msg timestamp="20160203 01:37:26.614" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:26.614" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,543 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 01:37:26.614" starttime="20160203 01:37:26.607"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.619" starttime="20160203 01:37:26.618"></status>
</kw>
<msg timestamp="20160203 01:37:26.620" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,543 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 01:37:26.620" starttime="20160203 01:37:26.615"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.625" starttime="20160203 01:37:26.624"></status>
</kw>
<msg timestamp="20160203 01:37:26.626" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,543 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 01:37:26.625" starttime="20160203 01:37:26.621"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.631" starttime="20160203 01:37:26.630"></status>
</kw>
<msg timestamp="20160203 01:37:26.632" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160203 01:37:26.631" starttime="20160203 01:37:26.626"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.639" starttime="20160203 01:37:26.638"></status>
</kw>
<msg timestamp="20160203 01:37:26.640" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160203 01:37:26.640" starttime="20160203 01:37:26.632"></status>
</kw>
<msg timestamp="20160203 01:37:26.641" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160203 01:37:26.641" starttime="20160203 01:37:26.597"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:26.648" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160203 01:37:26.647" starttime="20160203 01:37:26.646"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.650" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:26.649" starttime="20160203 01:37:26.648"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.652" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:26.651" starttime="20160203 01:37:26.650"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.655" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:26.657" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:26.658" starttime="20160203 01:37:26.653"></status>
</kw>
<msg timestamp="20160203 01:37:26.659" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:26.659" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,544 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 01:37:26.658" starttime="20160203 01:37:26.652"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.664" starttime="20160203 01:37:26.663"></status>
</kw>
<msg timestamp="20160203 01:37:26.665" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,544 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 01:37:26.665" starttime="20160203 01:37:26.660"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.670" starttime="20160203 01:37:26.669"></status>
</kw>
<msg timestamp="20160203 01:37:26.671" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,544 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 01:37:26.671" starttime="20160203 01:37:26.666"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.676" starttime="20160203 01:37:26.675"></status>
</kw>
<msg timestamp="20160203 01:37:26.677" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160203 01:37:26.677" starttime="20160203 01:37:26.672"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.684" starttime="20160203 01:37:26.683"></status>
</kw>
<msg timestamp="20160203 01:37:26.685" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160203 01:37:26.684" starttime="20160203 01:37:26.678"></status>
</kw>
<msg timestamp="20160203 01:37:26.686" level="INFO">${imsi} = 334030880001000</msg>
<status status="PASS" endtime="20160203 01:37:26.685" starttime="20160203 01:37:26.642"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:26.692" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160203 01:37:26.692" starttime="20160203 01:37:26.691"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.694" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:26.694" starttime="20160203 01:37:26.693"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.696" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:26.696" starttime="20160203 01:37:26.695"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.699" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:26.702" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:26.702" starttime="20160203 01:37:26.698"></status>
</kw>
<msg timestamp="20160203 01:37:26.703" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:26.703" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,543 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36970</msg>
<status status="PASS" endtime="20160203 01:37:26.703" starttime="20160203 01:37:26.697"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.708" starttime="20160203 01:37:26.707"></status>
</kw>
<msg timestamp="20160203 01:37:26.709" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,543 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36970</msg>
<status status="PASS" endtime="20160203 01:37:26.709" starttime="20160203 01:37:26.704"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.714" starttime="20160203 01:37:26.713"></status>
</kw>
<msg timestamp="20160203 01:37:26.715" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,543 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36970</msg>
<status status="PASS" endtime="20160203 01:37:26.714" starttime="20160203 01:37:26.710"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.720" starttime="20160203 01:37:26.719"></status>
</kw>
<msg timestamp="20160203 01:37:26.721" level="INFO">${resultCode} = 36970</msg>
<status status="PASS" endtime="20160203 01:37:26.720" starttime="20160203 01:37:26.716"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.728" starttime="20160203 01:37:26.727"></status>
</kw>
<msg timestamp="20160203 01:37:26.729" level="INFO">${resultCode} = 36970</msg>
<status status="PASS" endtime="20160203 01:37:26.728" starttime="20160203 01:37:26.721"></status>
</kw>
<msg timestamp="20160203 01:37:26.730" level="INFO">${id} = 36970</msg>
<status status="PASS" endtime="20160203 01:37:26.729" starttime="20160203 01:37:26.687"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:26.736" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160203 01:37:26.736" starttime="20160203 01:37:26.734"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.738" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:26.738" starttime="20160203 01:37:26.737"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.740" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:26.740" starttime="20160203 01:37:26.739"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.743" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:26.746" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:26.746" starttime="20160203 01:37:26.742"></status>
</kw>
<msg timestamp="20160203 01:37:26.747" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:26.747" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,545 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 01:37:26.747" starttime="20160203 01:37:26.741"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.752" starttime="20160203 01:37:26.751"></status>
</kw>
<msg timestamp="20160203 01:37:26.753" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,545 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 01:37:26.752" starttime="20160203 01:37:26.748"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.758" starttime="20160203 01:37:26.757"></status>
</kw>
<msg timestamp="20160203 01:37:26.759" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,545 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 01:37:26.758" starttime="20160203 01:37:26.753"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.764" starttime="20160203 01:37:26.762"></status>
</kw>
<msg timestamp="20160203 01:37:26.765" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160203 01:37:26.764" starttime="20160203 01:37:26.759"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.771" starttime="20160203 01:37:26.770"></status>
</kw>
<msg timestamp="20160203 01:37:26.772" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160203 01:37:26.772" starttime="20160203 01:37:26.765"></status>
</kw>
<msg timestamp="20160203 01:37:26.773" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160203 01:37:26.773" starttime="20160203 01:37:26.731"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:26.780" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160203 01:37:26.779" starttime="20160203 01:37:26.778"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.782" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:26.781" starttime="20160203 01:37:26.780"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.784" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:26.783" starttime="20160203 01:37:26.782"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.787" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:26.790" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:26.790" starttime="20160203 01:37:26.785"></status>
</kw>
<msg timestamp="20160203 01:37:26.791" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:26.791" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,545 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:37:26.791" starttime="20160203 01:37:26.784"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.796" starttime="20160203 01:37:26.795"></status>
</kw>
<msg timestamp="20160203 01:37:26.797" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,545 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:37:26.797" starttime="20160203 01:37:26.792"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.802" starttime="20160203 01:37:26.801"></status>
</kw>
<msg timestamp="20160203 01:37:26.803" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,545 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:37:26.802" starttime="20160203 01:37:26.798"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.808" starttime="20160203 01:37:26.806"></status>
</kw>
<msg timestamp="20160203 01:37:26.809" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160203 01:37:26.808" starttime="20160203 01:37:26.803"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.815" starttime="20160203 01:37:26.814"></status>
</kw>
<msg timestamp="20160203 01:37:26.816" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160203 01:37:26.816" starttime="20160203 01:37:26.809"></status>
</kw>
<msg timestamp="20160203 01:37:26.817" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160203 01:37:26.817" starttime="20160203 01:37:26.774"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:26.824" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160203 01:37:26.824" starttime="20160203 01:37:26.822"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.826" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:26.826" starttime="20160203 01:37:26.825"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.828" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:26.828" starttime="20160203 01:37:26.827"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.831" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:26.834" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:26.834" starttime="20160203 01:37:26.830"></status>
</kw>
<msg timestamp="20160203 01:37:26.835" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:26.835" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,546 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:26.835" starttime="20160203 01:37:26.829"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.840" starttime="20160203 01:37:26.839"></status>
</kw>
<msg timestamp="20160203 01:37:26.841" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,546 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:26.841" starttime="20160203 01:37:26.836"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.846" starttime="20160203 01:37:26.845"></status>
</kw>
<msg timestamp="20160203 01:37:26.847" level="INFO">${return_log_entry} = 2016-02-03 01:37:26,546 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:26.846" starttime="20160203 01:37:26.842"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.852" starttime="20160203 01:37:26.851"></status>
</kw>
<msg timestamp="20160203 01:37:26.853" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:26.852" starttime="20160203 01:37:26.847"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.859" starttime="20160203 01:37:26.858"></status>
</kw>
<msg timestamp="20160203 01:37:26.860" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:26.860" starttime="20160203 01:37:26.853"></status>
</kw>
<msg timestamp="20160203 01:37:26.861" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:26.861" starttime="20160203 01:37:26.818"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.867" starttime="20160203 01:37:26.866"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.868" starttime="20160203 01:37:26.867"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.870" starttime="20160203 01:37:26.869"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:37:26.878" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:37:26.878" starttime="20160203 01:37:26.874"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:26.879" starttime="20160203 01:37:26.873"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:26.879" starttime="20160203 01:37:26.870"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:26.880" starttime="20160203 01:37:26.862"></status>
</kw>
<msg timestamp="20160203 01:37:26.882" level="INFO">${rc} = OK</msg>
<msg timestamp="20160203 01:37:26.882" level="INFO">${provId} = 1</msg>
<msg timestamp="20160203 01:37:26.882" level="INFO">${imsi} = 334030880001000</msg>
<msg timestamp="20160203 01:37:26.883" level="INFO">${id} = 36970</msg>
<msg timestamp="20160203 01:37:26.883" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160203 01:37:26.883" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160203 01:37:26.883" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:26.881" starttime="20160203 01:37:26.175"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.896" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:26.896" starttime="20160203 01:37:26.894"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:26.897" starttime="20160203 01:37:26.893"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.900" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:26.900" starttime="20160203 01:37:26.898"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:26.901" starttime="20160203 01:37:26.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.903" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:26.904" starttime="20160203 01:37:26.902"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:26.904" starttime="20160203 01:37:26.901"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:26.905" starttime="20160203 01:37:26.890"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:37:26.907" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:37:26.907" starttime="20160203 01:37:26.906"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.909" starttime="20160203 01:37:26.908"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.911" starttime="20160203 01:37:26.910"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.912" starttime="20160203 01:37:26.911"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.914" starttime="20160203 01:37:26.913"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.916" starttime="20160203 01:37:26.915"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:26.917" starttime="20160203 01:37:26.916"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:37:26.920" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=36970']</msg>
<msg timestamp="20160203 01:37:27.171" level="INFO">01:37:27,166 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:37:27,167 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36971
01:37:27,168 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000
01:37:27,168 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:37:27,169 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:37:27.172" starttime="20160203 01:37:26.919"></status>
</kw>
<msg timestamp="20160203 01:37:27.173" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:27.174" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:37:27.173" starttime="20160203 01:37:26.918"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:27.180" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:37:27.180" starttime="20160203 01:37:27.179"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.182" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:27.182" starttime="20160203 01:37:27.181"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.184" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:27.184" starttime="20160203 01:37:27.183"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.187" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:27.190" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:27.191" starttime="20160203 01:37:27.186"></status>
</kw>
<msg timestamp="20160203 01:37:27.192" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:27.192" level="INFO">${return_log_entry} = 2016-02-03 01:37:27,166 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:27.191" starttime="20160203 01:37:27.185"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.197" starttime="20160203 01:37:27.196"></status>
</kw>
<msg timestamp="20160203 01:37:27.198" level="INFO">${return_log_entry} = 2016-02-03 01:37:27,166 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:27.198" starttime="20160203 01:37:27.193"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.207" starttime="20160203 01:37:27.205"></status>
</kw>
<msg timestamp="20160203 01:37:27.209" level="INFO">${return_log_entry} = 2016-02-03 01:37:27,166 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:27.208" starttime="20160203 01:37:27.199"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.219" starttime="20160203 01:37:27.218"></status>
</kw>
<msg timestamp="20160203 01:37:27.220" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:27.220" starttime="20160203 01:37:27.211"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.232" starttime="20160203 01:37:27.229"></status>
</kw>
<msg timestamp="20160203 01:37:27.234" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:27.233" starttime="20160203 01:37:27.221"></status>
</kw>
<msg timestamp="20160203 01:37:27.236" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:27.235" starttime="20160203 01:37:27.175"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:27.250" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160203 01:37:27.249" starttime="20160203 01:37:27.247"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.255" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:27.254" starttime="20160203 01:37:27.252"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.259" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:27.258" starttime="20160203 01:37:27.256"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.265" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:27.271" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:27.272" starttime="20160203 01:37:27.263"></status>
</kw>
<msg timestamp="20160203 01:37:27.274" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:27.275" level="INFO">${return_log_entry} = 2016-02-03 01:37:27,167 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36971</msg>
<status status="PASS" endtime="20160203 01:37:27.273" starttime="20160203 01:37:27.260"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.285" starttime="20160203 01:37:27.283"></status>
</kw>
<msg timestamp="20160203 01:37:27.287" level="INFO">${return_log_entry} = 2016-02-03 01:37:27,167 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36971</msg>
<status status="PASS" endtime="20160203 01:37:27.287" starttime="20160203 01:37:27.276"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.295" starttime="20160203 01:37:27.293"></status>
</kw>
<msg timestamp="20160203 01:37:27.296" level="INFO">${return_log_entry} = 2016-02-03 01:37:27,167 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36971</msg>
<status status="PASS" endtime="20160203 01:37:27.296" starttime="20160203 01:37:27.289"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.304" starttime="20160203 01:37:27.302"></status>
</kw>
<msg timestamp="20160203 01:37:27.305" level="INFO">${resultCode} = 36971</msg>
<status status="PASS" endtime="20160203 01:37:27.304" starttime="20160203 01:37:27.297"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.315" starttime="20160203 01:37:27.313"></status>
</kw>
<msg timestamp="20160203 01:37:27.316" level="INFO">${resultCode} = 36971</msg>
<status status="PASS" endtime="20160203 01:37:27.315" starttime="20160203 01:37:27.306"></status>
</kw>
<msg timestamp="20160203 01:37:27.318" level="INFO">${accountId} = 36971</msg>
<status status="PASS" endtime="20160203 01:37:27.317" starttime="20160203 01:37:27.239"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:27.327" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160203 01:37:27.326" starttime="20160203 01:37:27.324"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.330" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:27.329" starttime="20160203 01:37:27.328"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.333" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:27.332" starttime="20160203 01:37:27.331"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.337" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:27.342" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:27.342" starttime="20160203 01:37:27.335"></status>
</kw>
<msg timestamp="20160203 01:37:27.344" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:27.344" level="INFO">${return_log_entry} = 2016-02-03 01:37:27,168 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000</msg>
<status status="PASS" endtime="20160203 01:37:27.343" starttime="20160203 01:37:27.334"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.351" starttime="20160203 01:37:27.350"></status>
</kw>
<msg timestamp="20160203 01:37:27.353" level="INFO">${return_log_entry} = 2016-02-03 01:37:27,168 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000</msg>
<status status="PASS" endtime="20160203 01:37:27.352" starttime="20160203 01:37:27.345"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.360" starttime="20160203 01:37:27.358"></status>
</kw>
<msg timestamp="20160203 01:37:27.361" level="INFO">${return_log_entry} = 2016-02-03 01:37:27,168 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000</msg>
<status status="PASS" endtime="20160203 01:37:27.360" starttime="20160203 01:37:27.354"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.368" starttime="20160203 01:37:27.367"></status>
</kw>
<msg timestamp="20160203 01:37:27.370" level="INFO">${resultCode} = 8000000</msg>
<status status="PASS" endtime="20160203 01:37:27.369" starttime="20160203 01:37:27.362"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.379" starttime="20160203 01:37:27.378"></status>
</kw>
<msg timestamp="20160203 01:37:27.381" level="INFO">${resultCode} = 8000000</msg>
<status status="PASS" endtime="20160203 01:37:27.380" starttime="20160203 01:37:27.371"></status>
</kw>
<msg timestamp="20160203 01:37:27.382" level="INFO">${balance} = 8000000</msg>
<status status="PASS" endtime="20160203 01:37:27.382" starttime="20160203 01:37:27.319"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:27.392" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160203 01:37:27.391" starttime="20160203 01:37:27.389"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.394" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:27.394" starttime="20160203 01:37:27.393"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.397" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:27.397" starttime="20160203 01:37:27.395"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.403" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:27.409" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:27.410" starttime="20160203 01:37:27.401"></status>
</kw>
<msg timestamp="20160203 01:37:27.413" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:27.414" level="INFO">${return_log_entry} = 2016-02-03 01:37:27,168 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 01:37:27.412" starttime="20160203 01:37:27.399"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.424" starttime="20160203 01:37:27.421"></status>
</kw>
<msg timestamp="20160203 01:37:27.426" level="INFO">${return_log_entry} = 2016-02-03 01:37:27,168 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 01:37:27.425" starttime="20160203 01:37:27.415"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.436" starttime="20160203 01:37:27.434"></status>
</kw>
<msg timestamp="20160203 01:37:27.438" level="INFO">${return_log_entry} = 2016-02-03 01:37:27,168 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 01:37:27.438" starttime="20160203 01:37:27.427"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.449" starttime="20160203 01:37:27.447"></status>
</kw>
<msg timestamp="20160203 01:37:27.451" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160203 01:37:27.450" starttime="20160203 01:37:27.440"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.466" starttime="20160203 01:37:27.463"></status>
</kw>
<msg timestamp="20160203 01:37:27.468" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160203 01:37:27.467" starttime="20160203 01:37:27.453"></status>
</kw>
<msg timestamp="20160203 01:37:27.470" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160203 01:37:27.469" starttime="20160203 01:37:27.384"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:27.484" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160203 01:37:27.484" starttime="20160203 01:37:27.480"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.489" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:27.488" starttime="20160203 01:37:27.486"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.493" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:27.492" starttime="20160203 01:37:27.490"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.500" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:27.505" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:27.506" starttime="20160203 01:37:27.497"></status>
</kw>
<msg timestamp="20160203 01:37:27.508" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:27.509" level="INFO">${return_log_entry} = 2016-02-03 01:37:27,169 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:37:27.507" starttime="20160203 01:37:27.495"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.519" starttime="20160203 01:37:27.517"></status>
</kw>
<msg timestamp="20160203 01:37:27.521" level="INFO">${return_log_entry} = 2016-02-03 01:37:27,169 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:37:27.520" starttime="20160203 01:37:27.510"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.531" starttime="20160203 01:37:27.529"></status>
</kw>
<msg timestamp="20160203 01:37:27.533" level="INFO">${return_log_entry} = 2016-02-03 01:37:27,169 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:37:27.532" starttime="20160203 01:37:27.522"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.544" starttime="20160203 01:37:27.541"></status>
</kw>
<msg timestamp="20160203 01:37:27.545" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160203 01:37:27.545" starttime="20160203 01:37:27.534"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.557" starttime="20160203 01:37:27.556"></status>
</kw>
<msg timestamp="20160203 01:37:27.559" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160203 01:37:27.558" starttime="20160203 01:37:27.547"></status>
</kw>
<msg timestamp="20160203 01:37:27.561" level="INFO">${currencyId} = 101000</msg>
<status status="PASS" endtime="20160203 01:37:27.560" starttime="20160203 01:37:27.473"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.571" starttime="20160203 01:37:27.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.574" starttime="20160203 01:37:27.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.576" starttime="20160203 01:37:27.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:37:27.591" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:37:27.592" starttime="20160203 01:37:27.585"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:27.593" starttime="20160203 01:37:27.583"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:27.594" starttime="20160203 01:37:27.577"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:27.595" starttime="20160203 01:37:27.563"></status>
</kw>
<msg timestamp="20160203 01:37:27.599" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160203 01:37:27.600" level="INFO">${accId} = 36971</msg>
<msg timestamp="20160203 01:37:27.600" level="INFO">${bal} = 8000000</msg>
<msg timestamp="20160203 01:37:27.601" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160203 01:37:27.601" level="INFO">${curr} = 101000</msg>
<status status="PASS" endtime="20160203 01:37:27.597" starttime="20160203 01:37:26.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.604" starttime="20160203 01:37:27.602"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.607" starttime="20160203 01:37:27.605"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:27.610" level="INFO">Account balance check: 8000000</msg>
<status status="PASS" endtime="20160203 01:37:27.611" starttime="20160203 01:37:27.608"></status>
</kw>
<doc>Test will make a short MFC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MFC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:37:27.612" starttime="20160203 01:37:09.297"></status>
</test>
<doc>Testing the prepaid MFC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:37:27.620" starttime="20160203 01:37:04.029"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:37:27.636" starttime="20160203 01:37:04.012"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:37:27.650" starttime="20160203 01:37:03.995"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC" id="s1-s1-s1-s3" name="MOC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet" id="s1-s1-s1-s3-s1" name="OnNet">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Abandon" id="s1-s1-s1-s3-s1-s1" name="MOC PREPAID ONNET-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Abandon/MOC_PREPAID_ONNET-Abandon-robot-suite.txt" id="s1-s1-s1-s3-s1-s1-s1" name="MOC PREPAID ONNET-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160203 01:37:27.866" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:37:27.874" level="INFO">${date} = Wed Feb  3 01:37:27 CET 2016</msg>
<status status="PASS" endtime="20160203 01:37:27.872" starttime="20160203 01:37:27.860"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:27.879" level="INFO">Date and time: Wed Feb  3 01:37:27 CET 2016</msg>
<status status="PASS" endtime="20160203 01:37:27.881" starttime="20160203 01:37:27.875"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:27.885" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160203 01:37:27.886" starttime="20160203 01:37:27.882"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.929" starttime="20160203 01:37:27.928"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:27.979" starttime="20160203 01:37:27.934"></status>
</kw>
<msg timestamp="20160203 01:37:27.980" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160203 01:37:27.980" starttime="20160203 01:37:27.930"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:37:27.986" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:37:28.552" level="INFO">Read output: Last login: Wed Feb  3 00:37:04 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:37:28.553" starttime="20160203 01:37:27.984"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:28.556" starttime="20160203 01:37:27.981"></status>
</kw>
<msg timestamp="20160203 01:37:28.559" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160203 01:37:28.558" starttime="20160203 01:37:27.924"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:37:28.564" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:37:28.563" starttime="20160203 01:37:28.560"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:37:28.566" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160203 01:37:28.928" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:37:28.929" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:37:28.928" starttime="20160203 01:37:28.565"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:28.932" starttime="20160203 01:37:28.931"></status>
</kw>
<msg timestamp="20160203 01:37:28.933" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:37:28.933" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:37:28.933" starttime="20160203 01:37:28.929"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:28.938" starttime="20160203 01:37:28.937"></status>
</kw>
<msg timestamp="20160203 01:37:28.939" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:28.939" starttime="20160203 01:37:28.934"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160203 01:37:28.941" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:37:28.941" starttime="20160203 01:37:28.939"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:37:28.943" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:37:28.943" starttime="20160203 01:37:28.942"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:28.944" starttime="20160203 01:37:28.943"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:28.950" starttime="20160203 01:37:28.949"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:37:28.953" starttime="20160203 01:37:28.950"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:28.953" starttime="20160203 01:37:28.945"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:28.958" starttime="20160203 01:37:28.957"></status>
</kw>
<msg timestamp="20160203 01:37:28.959" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:37:28.958" starttime="20160203 01:37:28.954"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:28.960" starttime="20160203 01:37:28.959"></status>
</kw>
<msg timestamp="20160203 01:37:28.962" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160203 01:37:28.962" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:37:28.961" starttime="20160203 01:37:27.907"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:28.990" starttime="20160203 01:37:28.989"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:29.050" starttime="20160203 01:37:28.994"></status>
</kw>
<msg timestamp="20160203 01:37:29.052" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160203 01:37:29.051" starttime="20160203 01:37:28.990"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:37:29.057" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:37:29.682" level="INFO">Read output: Last login: Wed Feb  3 00:37:05 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:37:29.683" starttime="20160203 01:37:29.056"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:29.683" starttime="20160203 01:37:29.053"></status>
</kw>
<msg timestamp="20160203 01:37:29.685" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160203 01:37:29.684" starttime="20160203 01:37:28.985"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:37:29.689" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:37:29.689" starttime="20160203 01:37:29.685"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:37:29.691" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160203 01:37:30.169" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:37:30.171" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:37:30.170" starttime="20160203 01:37:29.690"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:30.174" starttime="20160203 01:37:30.173"></status>
</kw>
<msg timestamp="20160203 01:37:30.175" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:37:30.175" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:37:30.175" starttime="20160203 01:37:30.171"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:30.180" starttime="20160203 01:37:30.179"></status>
</kw>
<msg timestamp="20160203 01:37:30.181" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:30.180" starttime="20160203 01:37:30.176"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160203 01:37:30.183" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:37:30.182" starttime="20160203 01:37:30.181"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:37:30.185" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:37:30.184" starttime="20160203 01:37:30.183"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:30.186" starttime="20160203 01:37:30.185"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:30.192" starttime="20160203 01:37:30.191"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:37:30.194" starttime="20160203 01:37:30.193"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:30.195" starttime="20160203 01:37:30.188"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:30.200" starttime="20160203 01:37:30.199"></status>
</kw>
<msg timestamp="20160203 01:37:30.201" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:37:30.201" starttime="20160203 01:37:30.196"></status>
</kw>
<msg timestamp="20160203 01:37:30.202" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160203 01:37:30.203" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:37:30.202" starttime="20160203 01:37:28.971"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:30.231" starttime="20160203 01:37:30.230"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:30.295" starttime="20160203 01:37:30.235"></status>
</kw>
<msg timestamp="20160203 01:37:30.298" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160203 01:37:30.296" starttime="20160203 01:37:30.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:37:30.310" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:37:31.968" level="INFO">Read output: Last login: Wed Feb  3 00:37:06 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:37:31.970" starttime="20160203 01:37:30.307"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:31.971" starttime="20160203 01:37:30.299"></status>
</kw>
<msg timestamp="20160203 01:37:31.973" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160203 01:37:31.973" starttime="20160203 01:37:30.225"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:37:31.978" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:37:31.978" starttime="20160203 01:37:31.974"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:37:31.980" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160203 01:37:32.225" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:37:32.227" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:37:32.226" starttime="20160203 01:37:31.979"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:32.232" starttime="20160203 01:37:32.229"></status>
</kw>
<msg timestamp="20160203 01:37:32.233" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:37:32.233" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:37:32.232" starttime="20160203 01:37:32.228"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:32.238" starttime="20160203 01:37:32.237"></status>
</kw>
<msg timestamp="20160203 01:37:32.239" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:32.238" starttime="20160203 01:37:32.234"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:37:32.241" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:37:32.241" starttime="20160203 01:37:32.240"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:37:32.243" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:37:32.243" starttime="20160203 01:37:32.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:32.244" starttime="20160203 01:37:32.244"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:32.250" starttime="20160203 01:37:32.249"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:37:32.252" starttime="20160203 01:37:32.251"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:32.254" starttime="20160203 01:37:32.246"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:32.258" starttime="20160203 01:37:32.257"></status>
</kw>
<msg timestamp="20160203 01:37:32.259" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:37:32.259" starttime="20160203 01:37:32.255"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:32.261" starttime="20160203 01:37:32.260"></status>
</kw>
<msg timestamp="20160203 01:37:32.262" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160203 01:37:32.263" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:37:32.262" starttime="20160203 01:37:30.212"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:32.291" starttime="20160203 01:37:32.290"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:32.382" starttime="20160203 01:37:32.295"></status>
</kw>
<msg timestamp="20160203 01:37:32.384" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160203 01:37:32.383" starttime="20160203 01:37:32.292"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:37:32.396" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:37:32.880" level="INFO">Read output: Last login: Wed Feb  3 00:37:08 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:37:32.880" starttime="20160203 01:37:32.393"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:32.881" starttime="20160203 01:37:32.386"></status>
</kw>
<msg timestamp="20160203 01:37:32.882" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160203 01:37:32.882" starttime="20160203 01:37:32.286"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:37:32.887" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:37:32.886" starttime="20160203 01:37:32.883"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:37:32.888" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160203 01:37:33.016" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:37:33.018" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:37:33.017" starttime="20160203 01:37:32.887"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.022" starttime="20160203 01:37:33.020"></status>
</kw>
<msg timestamp="20160203 01:37:33.023" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:37:33.023" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:37:33.022" starttime="20160203 01:37:33.019"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.028" starttime="20160203 01:37:33.027"></status>
</kw>
<msg timestamp="20160203 01:37:33.029" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:33.028" starttime="20160203 01:37:33.024"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:37:33.031" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:37:33.030" starttime="20160203 01:37:33.029"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:37:33.033" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:37:33.033" starttime="20160203 01:37:33.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.034" starttime="20160203 01:37:33.033"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.040" starttime="20160203 01:37:33.039"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.042" starttime="20160203 01:37:33.041"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:33.044" starttime="20160203 01:37:33.035"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.049" starttime="20160203 01:37:33.048"></status>
</kw>
<msg timestamp="20160203 01:37:33.050" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:37:33.050" starttime="20160203 01:37:33.045"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.052" starttime="20160203 01:37:33.051"></status>
</kw>
<msg timestamp="20160203 01:37:33.053" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160203 01:37:33.054" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:37:33.052" starttime="20160203 01:37:32.272"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:33.055" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:37:33.056" starttime="20160203 01:37:33.054"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:33.058" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:37:33.058" starttime="20160203 01:37:33.056"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:33.060" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:37:33.060" starttime="20160203 01:37:33.059"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:33.062" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:37:33.063" starttime="20160203 01:37:33.061"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160203 01:37:33.064" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:37:33.065" starttime="20160203 01:37:33.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160203 01:37:33.066" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:37:33.067" starttime="20160203 01:37:33.065"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160203 01:37:33.068" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:37:33.069" starttime="20160203 01:37:33.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160203 01:37:33.070" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:37:33.071" starttime="20160203 01:37:33.069"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.077" starttime="20160203 01:37:33.074"></status>
</kw>
<msg timestamp="20160203 01:37:33.078" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:37:33.077" starttime="20160203 01:37:33.071"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160203 01:37:33.080" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:37:33.080" starttime="20160203 01:37:33.078"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:33.081" starttime="20160203 01:37:27.857"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s1-s1-t1" name="Run MOC Abandon Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.087" starttime="20160203 01:37:33.086"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160203 01:37:33.089" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160203 01:37:33.089" starttime="20160203 01:37:33.088"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160203 01:37:33.096" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160203 01:37:33.097" starttime="20160203 01:37:33.095"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160203 01:37:33.098" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160203 01:37:33.099" starttime="20160203 01:37:33.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160203 01:37:33.100" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160203 01:37:33.101" starttime="20160203 01:37:33.099"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160203 01:37:33.102" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160203 01:37:33.103" starttime="20160203 01:37:33.101"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:37:33.104" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160203 01:37:33.104" starttime="20160203 01:37:33.103"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:37:33.106" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160203 01:37:33.106" starttime="20160203 01:37:33.105"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160203 01:37:33.108" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:33.108" starttime="20160203 01:37:33.107"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160203 01:37:33.110" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160203 01:37:33.110" starttime="20160203 01:37:33.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160203 01:37:33.112" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:37:33.112" starttime="20160203 01:37:33.111"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160203 01:37:33.114" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160203 01:37:33.114" starttime="20160203 01:37:33.113"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:33.121" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:33.121" starttime="20160203 01:37:33.119"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:33.122" starttime="20160203 01:37:33.118"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:33.125" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:33.125" starttime="20160203 01:37:33.123"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:33.126" starttime="20160203 01:37:33.122"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:33.128" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:33.129" starttime="20160203 01:37:33.127"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:33.129" starttime="20160203 01:37:33.126"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:33.130" starttime="20160203 01:37:33.115"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:37:33.132" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:37:33.132" starttime="20160203 01:37:33.130"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.134" starttime="20160203 01:37:33.133"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.136" starttime="20160203 01:37:33.135"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.138" starttime="20160203 01:37:33.136"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.139" starttime="20160203 01:37:33.138"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.140" starttime="20160203 01:37:33.140"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.142" starttime="20160203 01:37:33.141"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.144" starttime="20160203 01:37:33.143"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.145" starttime="20160203 01:37:33.144"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.147" starttime="20160203 01:37:33.146"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.149" starttime="20160203 01:37:33.148"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.151" starttime="20160203 01:37:33.149"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:33.152" starttime="20160203 01:37:33.151"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:37:33.155" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160203 01:37:35.342" level="INFO">01:37:35,338 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:35.343" starttime="20160203 01:37:33.154"></status>
</kw>
<msg timestamp="20160203 01:37:35.347" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:35.348" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:37:35.345" starttime="20160203 01:37:33.153"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:35.361" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:37:35.360" starttime="20160203 01:37:35.357"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:35.366" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:35.366" starttime="20160203 01:37:35.363"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:35.371" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:35.370" starttime="20160203 01:37:35.368"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:35.377" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:35.379" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:35.380" starttime="20160203 01:37:35.375"></status>
</kw>
<msg timestamp="20160203 01:37:35.381" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:35.382" level="INFO">${return_log_entry} = 2016-02-03 01:37:35,338 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:35.381" starttime="20160203 01:37:35.372"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:35.393" starttime="20160203 01:37:35.391"></status>
</kw>
<msg timestamp="20160203 01:37:35.395" level="INFO">${return_log_entry} = 2016-02-03 01:37:35,338 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:35.394" starttime="20160203 01:37:35.384"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:35.405" starttime="20160203 01:37:35.403"></status>
</kw>
<msg timestamp="20160203 01:37:35.407" level="INFO">${return_log_entry} = 2016-02-03 01:37:35,338 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:35.406" starttime="20160203 01:37:35.396"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:35.417" starttime="20160203 01:37:35.415"></status>
</kw>
<msg timestamp="20160203 01:37:35.418" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:35.418" starttime="20160203 01:37:35.408"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:35.426" starttime="20160203 01:37:35.425"></status>
</kw>
<msg timestamp="20160203 01:37:35.427" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:35.427" starttime="20160203 01:37:35.419"></status>
</kw>
<msg timestamp="20160203 01:37:35.428" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:35.428" starttime="20160203 01:37:35.350"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:35.433" starttime="20160203 01:37:35.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:35.435" starttime="20160203 01:37:35.434"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:35.436" starttime="20160203 01:37:35.435"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:37:35.442" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:37:35.443" starttime="20160203 01:37:35.441"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:35.443" starttime="20160203 01:37:35.440"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:35.444" starttime="20160203 01:37:35.437"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:35.444" starttime="20160203 01:37:35.429"></status>
</kw>
<msg timestamp="20160203 01:37:35.446" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160203 01:37:35.445" starttime="20160203 01:37:33.091"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160203 01:37:35.447" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:37:35.448" starttime="20160203 01:37:35.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:35.450" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160203 01:37:35.451" starttime="20160203 01:37:35.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC Abandon *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:35.453" starttime="20160203 01:37:35.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC abandon call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:35.457" level="INFO">Running the MOC abandon call...</msg>
<status status="PASS" endtime="20160203 01:37:35.458" starttime="20160203 01:37:35.455"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC Abandon">
<doc>Runs an abandoned MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-abandon</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160203 01:37:35.489" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv</msg>
<status status="PASS" endtime="20160203 01:37:35.488" starttime="20160203 01:37:35.486"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160203 01:37:35.493" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv</msg>
<status status="PASS" endtime="20160203 01:37:35.493" starttime="20160203 01:37:35.490"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160203 01:37:35.498" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini</msg>
<status status="PASS" endtime="20160203 01:37:35.497" starttime="20160203 01:37:35.495"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160203 01:37:35.502" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-abandon.cgs</msg>
<status status="PASS" endtime="20160203 01:37:35.501" starttime="20160203 01:37:35.499"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:35.505" starttime="20160203 01:37:35.504"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:37:35.511" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:35.512" starttime="20160203 01:37:35.506"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:35.515" starttime="20160203 01:37:35.513"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160203 01:37:35.520" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:35.521" starttime="20160203 01:37:35.516"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:37:35.526" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:35.527" starttime="20160203 01:37:35.522"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:35.530" starttime="20160203 01:37:35.528"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160203 01:37:35.535" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:35.536" starttime="20160203 01:37:35.532"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160203 01:37:35.543" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:35.544" starttime="20160203 01:37:35.537"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:35.547" starttime="20160203 01:37:35.545"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160203 01:37:35.560" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-abandon.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:37:58.830" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:37:58.826" starttime="20160203 01:37:35.548"></status>
</kw>
<msg timestamp="20160203 01:37:58.835" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:37:58.833" starttime="20160203 01:37:35.474"></status>
</kw>
<msg timestamp="20160203 01:37:58.838" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:37:58.836" starttime="20160203 01:37:35.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:58.841" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160203 01:37:58.842" starttime="20160203 01:37:58.839"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160203 01:37:58.847" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:37:58.848" starttime="20160203 01:37:58.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:58.851" starttime="20160203 01:37:58.849"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:58.877" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:58.878" starttime="20160203 01:37:58.873"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:58.879" starttime="20160203 01:37:58.871"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:58.886" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:58.886" starttime="20160203 01:37:58.883"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:58.888" starttime="20160203 01:37:58.881"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:58.894" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:58.895" starttime="20160203 01:37:58.891"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:58.896" starttime="20160203 01:37:58.889"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:58.897" starttime="20160203 01:37:58.865"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:37:58.901" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:37:58.902" starttime="20160203 01:37:58.898"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:58.906" starttime="20160203 01:37:58.903"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:58.910" starttime="20160203 01:37:58.907"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:58.914" starttime="20160203 01:37:58.911"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:58.917" starttime="20160203 01:37:58.915"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:58.920" starttime="20160203 01:37:58.918"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:58.924" starttime="20160203 01:37:58.921"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:37:58.929" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000']</msg>
<msg timestamp="20160203 01:37:59.210" level="INFO">01:37:59,201 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:37:59,202 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:37:59,203 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36977
01:37:59,204 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000
01:37:59,205 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:37:59,206 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:37:59,207 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:37:59,208 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=3</msg>
<status status="PASS" endtime="20160203 01:37:59.210" starttime="20160203 01:37:58.927"></status>
</kw>
<msg timestamp="20160203 01:37:59.212" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:59.212" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:37:59.211" starttime="20160203 01:37:58.925"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:59.219" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:37:59.218" starttime="20160203 01:37:59.217"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.220" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:59.220" starttime="20160203 01:37:59.219"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.222" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:59.222" starttime="20160203 01:37:59.221"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.225" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:59.226" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:59.227" starttime="20160203 01:37:59.224"></status>
</kw>
<msg timestamp="20160203 01:37:59.227" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:59.228" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,201 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:59.227" starttime="20160203 01:37:59.223"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.233" starttime="20160203 01:37:59.232"></status>
</kw>
<msg timestamp="20160203 01:37:59.234" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,201 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:59.234" starttime="20160203 01:37:59.228"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.239" starttime="20160203 01:37:59.238"></status>
</kw>
<msg timestamp="20160203 01:37:59.239" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,201 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:59.239" starttime="20160203 01:37:59.235"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.244" starttime="20160203 01:37:59.243"></status>
</kw>
<msg timestamp="20160203 01:37:59.245" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:59.245" starttime="20160203 01:37:59.240"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.252" starttime="20160203 01:37:59.251"></status>
</kw>
<msg timestamp="20160203 01:37:59.252" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:59.252" starttime="20160203 01:37:59.246"></status>
</kw>
<msg timestamp="20160203 01:37:59.254" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:59.253" starttime="20160203 01:37:59.213"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:59.260" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160203 01:37:59.259" starttime="20160203 01:37:59.258"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.262" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:59.261" starttime="20160203 01:37:59.260"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.264" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:59.264" starttime="20160203 01:37:59.263"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.267" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:59.268" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:59.268" starttime="20160203 01:37:59.266"></status>
</kw>
<msg timestamp="20160203 01:37:59.269" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:59.270" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,202 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 01:37:59.269" starttime="20160203 01:37:59.265"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.274" starttime="20160203 01:37:59.273"></status>
</kw>
<msg timestamp="20160203 01:37:59.275" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,202 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 01:37:59.275" starttime="20160203 01:37:59.270"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.280" starttime="20160203 01:37:59.279"></status>
</kw>
<msg timestamp="20160203 01:37:59.281" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,202 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 01:37:59.280" starttime="20160203 01:37:59.276"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.286" starttime="20160203 01:37:59.284"></status>
</kw>
<msg timestamp="20160203 01:37:59.286" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160203 01:37:59.286" starttime="20160203 01:37:59.281"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.293" starttime="20160203 01:37:59.292"></status>
</kw>
<msg timestamp="20160203 01:37:59.294" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160203 01:37:59.294" starttime="20160203 01:37:59.287"></status>
</kw>
<msg timestamp="20160203 01:37:59.295" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160203 01:37:59.295" starttime="20160203 01:37:59.255"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:59.301" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160203 01:37:59.301" starttime="20160203 01:37:59.299"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.303" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:59.303" starttime="20160203 01:37:59.302"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.305" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:59.305" starttime="20160203 01:37:59.304"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.308" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:59.309" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:59.309" starttime="20160203 01:37:59.307"></status>
</kw>
<msg timestamp="20160203 01:37:59.310" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:59.310" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,204 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 01:37:59.309" starttime="20160203 01:37:59.306"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.315" starttime="20160203 01:37:59.314"></status>
</kw>
<msg timestamp="20160203 01:37:59.315" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,204 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 01:37:59.315" starttime="20160203 01:37:59.311"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.320" starttime="20160203 01:37:59.319"></status>
</kw>
<msg timestamp="20160203 01:37:59.321" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,204 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 01:37:59.321" starttime="20160203 01:37:59.316"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.326" starttime="20160203 01:37:59.325"></status>
</kw>
<msg timestamp="20160203 01:37:59.327" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160203 01:37:59.326" starttime="20160203 01:37:59.322"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.333" starttime="20160203 01:37:59.332"></status>
</kw>
<msg timestamp="20160203 01:37:59.334" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160203 01:37:59.334" starttime="20160203 01:37:59.327"></status>
</kw>
<msg timestamp="20160203 01:37:59.335" level="INFO">${imsi} = 334030880001000</msg>
<status status="PASS" endtime="20160203 01:37:59.335" starttime="20160203 01:37:59.296"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:59.341" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160203 01:37:59.341" starttime="20160203 01:37:59.340"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.343" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:59.343" starttime="20160203 01:37:59.342"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.345" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:59.345" starttime="20160203 01:37:59.344"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.348" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:59.349" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:59.349" starttime="20160203 01:37:59.347"></status>
</kw>
<msg timestamp="20160203 01:37:59.350" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:59.350" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,203 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36977</msg>
<status status="PASS" endtime="20160203 01:37:59.349" starttime="20160203 01:37:59.346"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.355" starttime="20160203 01:37:59.354"></status>
</kw>
<msg timestamp="20160203 01:37:59.355" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,203 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36977</msg>
<status status="PASS" endtime="20160203 01:37:59.355" starttime="20160203 01:37:59.351"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.360" starttime="20160203 01:37:59.359"></status>
</kw>
<msg timestamp="20160203 01:37:59.361" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,203 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36977</msg>
<status status="PASS" endtime="20160203 01:37:59.361" starttime="20160203 01:37:59.356"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.366" starttime="20160203 01:37:59.365"></status>
</kw>
<msg timestamp="20160203 01:37:59.367" level="INFO">${resultCode} = 36977</msg>
<status status="PASS" endtime="20160203 01:37:59.366" starttime="20160203 01:37:59.362"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.373" starttime="20160203 01:37:59.372"></status>
</kw>
<msg timestamp="20160203 01:37:59.374" level="INFO">${resultCode} = 36977</msg>
<status status="PASS" endtime="20160203 01:37:59.374" starttime="20160203 01:37:59.367"></status>
</kw>
<msg timestamp="20160203 01:37:59.375" level="INFO">${id} = 36977</msg>
<status status="PASS" endtime="20160203 01:37:59.375" starttime="20160203 01:37:59.336"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:59.382" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160203 01:37:59.381" starttime="20160203 01:37:59.380"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.384" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:59.383" starttime="20160203 01:37:59.382"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.386" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:59.386" starttime="20160203 01:37:59.384"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.389" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:59.390" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:59.390" starttime="20160203 01:37:59.388"></status>
</kw>
<msg timestamp="20160203 01:37:59.391" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:59.391" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,205 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 01:37:59.391" starttime="20160203 01:37:59.387"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.396" starttime="20160203 01:37:59.395"></status>
</kw>
<msg timestamp="20160203 01:37:59.397" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,205 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 01:37:59.396" starttime="20160203 01:37:59.392"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.401" starttime="20160203 01:37:59.400"></status>
</kw>
<msg timestamp="20160203 01:37:59.402" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,205 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 01:37:59.402" starttime="20160203 01:37:59.397"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.407" starttime="20160203 01:37:59.406"></status>
</kw>
<msg timestamp="20160203 01:37:59.408" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160203 01:37:59.407" starttime="20160203 01:37:59.403"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.415" starttime="20160203 01:37:59.414"></status>
</kw>
<msg timestamp="20160203 01:37:59.415" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160203 01:37:59.415" starttime="20160203 01:37:59.408"></status>
</kw>
<msg timestamp="20160203 01:37:59.416" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160203 01:37:59.416" starttime="20160203 01:37:59.376"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:59.423" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160203 01:37:59.422" starttime="20160203 01:37:59.421"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.424" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:59.424" starttime="20160203 01:37:59.423"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.426" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:59.426" starttime="20160203 01:37:59.425"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.429" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:59.430" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:59.430" starttime="20160203 01:37:59.428"></status>
</kw>
<msg timestamp="20160203 01:37:59.431" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:59.432" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,206 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:37:59.431" starttime="20160203 01:37:59.427"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.436" starttime="20160203 01:37:59.435"></status>
</kw>
<msg timestamp="20160203 01:37:59.437" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,206 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:37:59.437" starttime="20160203 01:37:59.432"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.441" starttime="20160203 01:37:59.440"></status>
</kw>
<msg timestamp="20160203 01:37:59.442" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,206 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:37:59.442" starttime="20160203 01:37:59.438"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.447" starttime="20160203 01:37:59.446"></status>
</kw>
<msg timestamp="20160203 01:37:59.448" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160203 01:37:59.448" starttime="20160203 01:37:59.443"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.455" starttime="20160203 01:37:59.454"></status>
</kw>
<msg timestamp="20160203 01:37:59.455" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160203 01:37:59.455" starttime="20160203 01:37:59.449"></status>
</kw>
<msg timestamp="20160203 01:37:59.457" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160203 01:37:59.456" starttime="20160203 01:37:59.418"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:59.462" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160203 01:37:59.462" starttime="20160203 01:37:59.461"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.464" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:59.464" starttime="20160203 01:37:59.463"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.466" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:59.466" starttime="20160203 01:37:59.465"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.469" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:59.470" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:59.470" starttime="20160203 01:37:59.468"></status>
</kw>
<msg timestamp="20160203 01:37:59.471" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:59.472" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,207 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:59.471" starttime="20160203 01:37:59.467"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.476" starttime="20160203 01:37:59.475"></status>
</kw>
<msg timestamp="20160203 01:37:59.477" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,207 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:59.477" starttime="20160203 01:37:59.472"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.481" starttime="20160203 01:37:59.480"></status>
</kw>
<msg timestamp="20160203 01:37:59.482" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,207 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:59.482" starttime="20160203 01:37:59.478"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.487" starttime="20160203 01:37:59.486"></status>
</kw>
<msg timestamp="20160203 01:37:59.488" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:59.488" starttime="20160203 01:37:59.483"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.494" starttime="20160203 01:37:59.493"></status>
</kw>
<msg timestamp="20160203 01:37:59.495" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:59.495" starttime="20160203 01:37:59.489"></status>
</kw>
<msg timestamp="20160203 01:37:59.496" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:59.496" starttime="20160203 01:37:59.458"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.501" starttime="20160203 01:37:59.500"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.503" starttime="20160203 01:37:59.502"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.504" starttime="20160203 01:37:59.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:37:59.510" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:37:59.510" starttime="20160203 01:37:59.509"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:59.511" starttime="20160203 01:37:59.508"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:59.511" starttime="20160203 01:37:59.505"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:59.512" starttime="20160203 01:37:59.497"></status>
</kw>
<msg timestamp="20160203 01:37:59.514" level="INFO">${rc} = OK</msg>
<msg timestamp="20160203 01:37:59.515" level="INFO">${provId} = 1</msg>
<msg timestamp="20160203 01:37:59.515" level="INFO">${imsi} = 334030880001000</msg>
<msg timestamp="20160203 01:37:59.515" level="INFO">${id} = 36977</msg>
<msg timestamp="20160203 01:37:59.515" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160203 01:37:59.516" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160203 01:37:59.516" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:37:59.513" starttime="20160203 01:37:58.854"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.527" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:59.528" starttime="20160203 01:37:59.526"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:59.528" starttime="20160203 01:37:59.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.531" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:59.532" starttime="20160203 01:37:59.530"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:59.532" starttime="20160203 01:37:59.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.535" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:37:59.535" starttime="20160203 01:37:59.534"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:59.536" starttime="20160203 01:37:59.533"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:59.536" starttime="20160203 01:37:59.522"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.539" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:37:59.539" starttime="20160203 01:37:59.537"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.541" starttime="20160203 01:37:59.540"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.542" starttime="20160203 01:37:59.541"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.544" starttime="20160203 01:37:59.543"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.545" starttime="20160203 01:37:59.545"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.547" starttime="20160203 01:37:59.546"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.549" starttime="20160203 01:37:59.547"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:37:59.551" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=36977']</msg>
<msg timestamp="20160203 01:37:59.759" level="INFO">01:37:59,753 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:37:59,754 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36978
01:37:59,755 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
01:37:59,756 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:37:59,757 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:37:59.759" starttime="20160203 01:37:59.550"></status>
</kw>
<msg timestamp="20160203 01:37:59.760" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:59.761" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:37:59.760" starttime="20160203 01:37:59.549"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:59.768" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:37:59.767" starttime="20160203 01:37:59.766"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.770" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:59.769" starttime="20160203 01:37:59.768"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.772" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:59.771" starttime="20160203 01:37:59.770"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.775" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:59.775" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:59.776" starttime="20160203 01:37:59.773"></status>
</kw>
<msg timestamp="20160203 01:37:59.777" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:59.777" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,753 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:59.776" starttime="20160203 01:37:59.772"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.782" starttime="20160203 01:37:59.781"></status>
</kw>
<msg timestamp="20160203 01:37:59.783" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,753 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:59.782" starttime="20160203 01:37:59.777"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.787" starttime="20160203 01:37:59.786"></status>
</kw>
<msg timestamp="20160203 01:37:59.788" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,753 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:37:59.788" starttime="20160203 01:37:59.783"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.793" starttime="20160203 01:37:59.792"></status>
</kw>
<msg timestamp="20160203 01:37:59.794" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:59.794" starttime="20160203 01:37:59.789"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.800" starttime="20160203 01:37:59.799"></status>
</kw>
<msg timestamp="20160203 01:37:59.801" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:59.801" starttime="20160203 01:37:59.795"></status>
</kw>
<msg timestamp="20160203 01:37:59.802" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:37:59.802" starttime="20160203 01:37:59.762"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:59.808" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160203 01:37:59.808" starttime="20160203 01:37:59.807"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.810" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:59.810" starttime="20160203 01:37:59.809"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.812" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:59.812" starttime="20160203 01:37:59.811"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.815" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:59.816" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:59.816" starttime="20160203 01:37:59.814"></status>
</kw>
<msg timestamp="20160203 01:37:59.817" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:59.817" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,754 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36978</msg>
<status status="PASS" endtime="20160203 01:37:59.817" starttime="20160203 01:37:59.813"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.822" starttime="20160203 01:37:59.821"></status>
</kw>
<msg timestamp="20160203 01:37:59.823" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,754 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36978</msg>
<status status="PASS" endtime="20160203 01:37:59.822" starttime="20160203 01:37:59.818"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.827" starttime="20160203 01:37:59.826"></status>
</kw>
<msg timestamp="20160203 01:37:59.828" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,754 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36978</msg>
<status status="PASS" endtime="20160203 01:37:59.828" starttime="20160203 01:37:59.823"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.833" starttime="20160203 01:37:59.832"></status>
</kw>
<msg timestamp="20160203 01:37:59.834" level="INFO">${resultCode} = 36978</msg>
<status status="PASS" endtime="20160203 01:37:59.834" starttime="20160203 01:37:59.829"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.840" starttime="20160203 01:37:59.839"></status>
</kw>
<msg timestamp="20160203 01:37:59.841" level="INFO">${resultCode} = 36978</msg>
<status status="PASS" endtime="20160203 01:37:59.841" starttime="20160203 01:37:59.835"></status>
</kw>
<msg timestamp="20160203 01:37:59.842" level="INFO">${accountId} = 36978</msg>
<status status="PASS" endtime="20160203 01:37:59.842" starttime="20160203 01:37:59.803"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:59.848" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160203 01:37:59.848" starttime="20160203 01:37:59.847"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.850" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:59.850" starttime="20160203 01:37:59.849"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.852" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:59.852" starttime="20160203 01:37:59.851"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.855" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:59.856" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:59.856" starttime="20160203 01:37:59.854"></status>
</kw>
<msg timestamp="20160203 01:37:59.857" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:59.857" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,755 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160203 01:37:59.856" starttime="20160203 01:37:59.853"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.862" starttime="20160203 01:37:59.861"></status>
</kw>
<msg timestamp="20160203 01:37:59.863" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,755 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160203 01:37:59.862" starttime="20160203 01:37:59.858"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.868" starttime="20160203 01:37:59.867"></status>
</kw>
<msg timestamp="20160203 01:37:59.869" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,755 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160203 01:37:59.868" starttime="20160203 01:37:59.863"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.874" starttime="20160203 01:37:59.872"></status>
</kw>
<msg timestamp="20160203 01:37:59.875" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160203 01:37:59.874" starttime="20160203 01:37:59.869"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.883" starttime="20160203 01:37:59.882"></status>
</kw>
<msg timestamp="20160203 01:37:59.884" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160203 01:37:59.884" starttime="20160203 01:37:59.875"></status>
</kw>
<msg timestamp="20160203 01:37:59.885" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160203 01:37:59.885" starttime="20160203 01:37:59.843"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:59.891" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160203 01:37:59.891" starttime="20160203 01:37:59.890"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.893" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:59.893" starttime="20160203 01:37:59.892"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.895" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:59.895" starttime="20160203 01:37:59.894"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.898" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:59.899" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:59.899" starttime="20160203 01:37:59.897"></status>
</kw>
<msg timestamp="20160203 01:37:59.900" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:59.900" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,756 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 01:37:59.900" starttime="20160203 01:37:59.896"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.905" starttime="20160203 01:37:59.904"></status>
</kw>
<msg timestamp="20160203 01:37:59.906" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,756 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 01:37:59.905" starttime="20160203 01:37:59.901"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.910" starttime="20160203 01:37:59.909"></status>
</kw>
<msg timestamp="20160203 01:37:59.911" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,756 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 01:37:59.911" starttime="20160203 01:37:59.906"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.916" starttime="20160203 01:37:59.915"></status>
</kw>
<msg timestamp="20160203 01:37:59.917" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160203 01:37:59.916" starttime="20160203 01:37:59.912"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.923" starttime="20160203 01:37:59.922"></status>
</kw>
<msg timestamp="20160203 01:37:59.924" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160203 01:37:59.924" starttime="20160203 01:37:59.917"></status>
</kw>
<msg timestamp="20160203 01:37:59.925" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160203 01:37:59.925" starttime="20160203 01:37:59.886"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:37:59.931" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160203 01:37:59.931" starttime="20160203 01:37:59.930"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.933" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:37:59.933" starttime="20160203 01:37:59.932"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.935" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:37:59.935" starttime="20160203 01:37:59.934"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:37:59.938" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:37:59.938" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:37:59.939" starttime="20160203 01:37:59.937"></status>
</kw>
<msg timestamp="20160203 01:37:59.940" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:37:59.940" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,757 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:37:59.939" starttime="20160203 01:37:59.936"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.945" starttime="20160203 01:37:59.944"></status>
</kw>
<msg timestamp="20160203 01:37:59.945" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,757 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:37:59.945" starttime="20160203 01:37:59.941"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.950" starttime="20160203 01:37:59.949"></status>
</kw>
<msg timestamp="20160203 01:37:59.951" level="INFO">${return_log_entry} = 2016-02-03 01:37:59,757 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:37:59.950" starttime="20160203 01:37:59.946"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.956" starttime="20160203 01:37:59.954"></status>
</kw>
<msg timestamp="20160203 01:37:59.956" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160203 01:37:59.956" starttime="20160203 01:37:59.951"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.963" starttime="20160203 01:37:59.962"></status>
</kw>
<msg timestamp="20160203 01:37:59.964" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160203 01:37:59.963" starttime="20160203 01:37:59.957"></status>
</kw>
<msg timestamp="20160203 01:37:59.965" level="INFO">${currencyId} = 101000</msg>
<status status="PASS" endtime="20160203 01:37:59.964" starttime="20160203 01:37:59.926"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.970" starttime="20160203 01:37:59.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.971" starttime="20160203 01:37:59.970"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.972" starttime="20160203 01:37:59.972"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:37:59.978" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:37:59.979" starttime="20160203 01:37:59.977"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:59.979" starttime="20160203 01:37:59.976"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:59.980" starttime="20160203 01:37:59.973"></status>
</kw>
<status status="PASS" endtime="20160203 01:37:59.980" starttime="20160203 01:37:59.965"></status>
</kw>
<msg timestamp="20160203 01:37:59.982" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160203 01:37:59.982" level="INFO">${accId} = 36978</msg>
<msg timestamp="20160203 01:37:59.982" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160203 01:37:59.983" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160203 01:37:59.983" level="INFO">${curr} = 101000</msg>
<status status="PASS" endtime="20160203 01:37:59.981" starttime="20160203 01:37:59.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.984" starttime="20160203 01:37:59.983"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:37:59.986" starttime="20160203 01:37:59.985"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:37:59.987" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160203 01:37:59.988" starttime="20160203 01:37:59.986"></status>
</kw>
<doc>Test will make an abandoned MOC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:37:59.989" starttime="20160203 01:37:33.082"></status>
</test>
<doc>Testing the prepaid MOC call. Calling party abandons the call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:37:59.993" starttime="20160203 01:37:27.710"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:38:00.000" starttime="20160203 01:37:27.695"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Busy" id="s1-s1-s1-s3-s1-s2" name="MOC PREPAID ONNET-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Busy/MOC_PREPAID_ONNET-Busy-robot-suite.txt" id="s1-s1-s1-s3-s1-s2-s1" name="MOC PREPAID ONNET-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160203 01:38:00.166" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:38:00.172" level="INFO">${date} = Wed Feb  3 01:38:00 CET 2016</msg>
<status status="PASS" endtime="20160203 01:38:00.171" starttime="20160203 01:38:00.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:00.176" level="INFO">Date and time: Wed Feb  3 01:38:00 CET 2016</msg>
<status status="PASS" endtime="20160203 01:38:00.178" starttime="20160203 01:38:00.174"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:00.181" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160203 01:38:00.182" starttime="20160203 01:38:00.179"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:00.241" starttime="20160203 01:38:00.239"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:00.311" starttime="20160203 01:38:00.250"></status>
</kw>
<msg timestamp="20160203 01:38:00.313" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160203 01:38:00.312" starttime="20160203 01:38:00.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:38:00.325" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:38:00.896" level="INFO">Read output: Last login: Wed Feb  3 00:37:28 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:38:00.896" starttime="20160203 01:38:00.322"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:00.897" starttime="20160203 01:38:00.315"></status>
</kw>
<msg timestamp="20160203 01:38:00.898" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160203 01:38:00.898" starttime="20160203 01:38:00.230"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:38:00.903" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:38:00.902" starttime="20160203 01:38:00.899"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:38:00.905" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160203 01:38:01.300" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:38:01.304" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:38:01.302" starttime="20160203 01:38:00.903"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:01.313" starttime="20160203 01:38:01.309"></status>
</kw>
<msg timestamp="20160203 01:38:01.315" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:38:01.316" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:38:01.314" starttime="20160203 01:38:01.306"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:01.327" starttime="20160203 01:38:01.325"></status>
</kw>
<msg timestamp="20160203 01:38:01.330" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:01.329" starttime="20160203 01:38:01.317"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160203 01:38:01.334" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:38:01.334" starttime="20160203 01:38:01.331"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:38:01.339" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:38:01.339" starttime="20160203 01:38:01.336"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:01.343" starttime="20160203 01:38:01.341"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:01.356" starttime="20160203 01:38:01.353"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:38:01.362" starttime="20160203 01:38:01.358"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:01.365" starttime="20160203 01:38:01.345"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:01.374" starttime="20160203 01:38:01.372"></status>
</kw>
<msg timestamp="20160203 01:38:01.376" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:38:01.376" starttime="20160203 01:38:01.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:01.380" starttime="20160203 01:38:01.378"></status>
</kw>
<msg timestamp="20160203 01:38:01.383" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160203 01:38:01.384" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:38:01.381" starttime="20160203 01:38:00.203"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:01.445" starttime="20160203 01:38:01.442"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:01.519" starttime="20160203 01:38:01.453"></status>
</kw>
<msg timestamp="20160203 01:38:01.521" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160203 01:38:01.521" starttime="20160203 01:38:01.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:38:01.533" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:38:02.086" level="INFO">Read output: Last login: Wed Feb  3 00:37:29 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:38:02.087" starttime="20160203 01:38:01.530"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:02.088" starttime="20160203 01:38:01.523"></status>
</kw>
<msg timestamp="20160203 01:38:02.090" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160203 01:38:02.090" starttime="20160203 01:38:01.432"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:38:02.095" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:38:02.094" starttime="20160203 01:38:02.091"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:38:02.096" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160203 01:38:02.607" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:38:02.610" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:38:02.609" starttime="20160203 01:38:02.095"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:02.617" starttime="20160203 01:38:02.614"></status>
</kw>
<msg timestamp="20160203 01:38:02.619" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:38:02.620" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:38:02.618" starttime="20160203 01:38:02.612"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:02.630" starttime="20160203 01:38:02.628"></status>
</kw>
<msg timestamp="20160203 01:38:02.632" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:02.631" starttime="20160203 01:38:02.621"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160203 01:38:02.636" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:38:02.635" starttime="20160203 01:38:02.633"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:38:02.640" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:38:02.639" starttime="20160203 01:38:02.637"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:02.643" starttime="20160203 01:38:02.641"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:02.654" starttime="20160203 01:38:02.652"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:38:02.659" starttime="20160203 01:38:02.656"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:02.663" starttime="20160203 01:38:02.645"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:02.668" starttime="20160203 01:38:02.667"></status>
</kw>
<msg timestamp="20160203 01:38:02.669" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:38:02.669" starttime="20160203 01:38:02.664"></status>
</kw>
<msg timestamp="20160203 01:38:02.671" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160203 01:38:02.671" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:38:02.670" starttime="20160203 01:38:01.403"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:02.698" starttime="20160203 01:38:02.697"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:02.760" starttime="20160203 01:38:02.702"></status>
</kw>
<msg timestamp="20160203 01:38:02.762" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160203 01:38:02.762" starttime="20160203 01:38:02.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:38:02.774" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:38:03.313" level="INFO">Read output: Last login: Wed Feb  3 00:37:30 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:38:03.314" starttime="20160203 01:38:02.771"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:03.316" starttime="20160203 01:38:02.764"></status>
</kw>
<msg timestamp="20160203 01:38:03.318" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160203 01:38:03.317" starttime="20160203 01:38:02.692"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:38:03.322" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:38:03.322" starttime="20160203 01:38:03.319"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:38:03.324" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160203 01:38:03.549" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:38:03.551" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:38:03.550" starttime="20160203 01:38:03.323"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:03.559" starttime="20160203 01:38:03.555"></status>
</kw>
<msg timestamp="20160203 01:38:03.561" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:38:03.561" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:38:03.560" starttime="20160203 01:38:03.553"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:03.571" starttime="20160203 01:38:03.569"></status>
</kw>
<msg timestamp="20160203 01:38:03.573" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:03.572" starttime="20160203 01:38:03.563"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:38:03.577" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:38:03.577" starttime="20160203 01:38:03.574"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:38:03.582" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:38:03.581" starttime="20160203 01:38:03.579"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:03.585" starttime="20160203 01:38:03.583"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:03.596" starttime="20160203 01:38:03.594"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:38:03.602" starttime="20160203 01:38:03.597"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:03.604" starttime="20160203 01:38:03.586"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:03.613" starttime="20160203 01:38:03.611"></status>
</kw>
<msg timestamp="20160203 01:38:03.615" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:38:03.614" starttime="20160203 01:38:03.605"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:03.618" starttime="20160203 01:38:03.616"></status>
</kw>
<msg timestamp="20160203 01:38:03.622" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160203 01:38:03.623" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:38:03.620" starttime="20160203 01:38:02.680"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:03.672" starttime="20160203 01:38:03.671"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:03.794" starttime="20160203 01:38:03.676"></status>
</kw>
<msg timestamp="20160203 01:38:03.798" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160203 01:38:03.796" starttime="20160203 01:38:03.673"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:38:03.810" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:38:04.341" level="INFO">Read output: Last login: Wed Feb  3 00:37:32 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:38:04.342" starttime="20160203 01:38:03.808"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:04.343" starttime="20160203 01:38:03.799"></status>
</kw>
<msg timestamp="20160203 01:38:04.345" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160203 01:38:04.345" starttime="20160203 01:38:03.667"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:38:04.350" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:38:04.349" starttime="20160203 01:38:04.346"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:38:04.351" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160203 01:38:04.450" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:38:04.451" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:38:04.451" starttime="20160203 01:38:04.350"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.455" starttime="20160203 01:38:04.453"></status>
</kw>
<msg timestamp="20160203 01:38:04.456" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:38:04.456" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:38:04.455" starttime="20160203 01:38:04.452"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.461" starttime="20160203 01:38:04.460"></status>
</kw>
<msg timestamp="20160203 01:38:04.461" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:04.461" starttime="20160203 01:38:04.457"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:38:04.463" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:38:04.463" starttime="20160203 01:38:04.462"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:38:04.465" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:38:04.465" starttime="20160203 01:38:04.464"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.467" starttime="20160203 01:38:04.466"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.472" starttime="20160203 01:38:04.471"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.476" starttime="20160203 01:38:04.473"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:04.476" starttime="20160203 01:38:04.468"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.481" starttime="20160203 01:38:04.480"></status>
</kw>
<msg timestamp="20160203 01:38:04.482" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:38:04.481" starttime="20160203 01:38:04.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.483" starttime="20160203 01:38:04.482"></status>
</kw>
<msg timestamp="20160203 01:38:04.485" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160203 01:38:04.485" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:38:04.484" starttime="20160203 01:38:03.642"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:04.487" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:38:04.487" starttime="20160203 01:38:04.486"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:04.489" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:38:04.489" starttime="20160203 01:38:04.488"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:04.491" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:38:04.492" starttime="20160203 01:38:04.490"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:04.493" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:38:04.494" starttime="20160203 01:38:04.492"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160203 01:38:04.495" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:04.496" starttime="20160203 01:38:04.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160203 01:38:04.497" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:04.498" starttime="20160203 01:38:04.496"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160203 01:38:04.499" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:04.500" starttime="20160203 01:38:04.498"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160203 01:38:04.501" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:04.501" starttime="20160203 01:38:04.500"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.507" starttime="20160203 01:38:04.505"></status>
</kw>
<msg timestamp="20160203 01:38:04.508" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:38:04.508" starttime="20160203 01:38:04.502"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160203 01:38:04.510" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:38:04.511" starttime="20160203 01:38:04.509"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:04.511" starttime="20160203 01:38:00.160"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s2-s1-t1" name="Run MOC Busy Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.517" starttime="20160203 01:38:04.516"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160203 01:38:04.519" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160203 01:38:04.518" starttime="20160203 01:38:04.518"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160203 01:38:04.526" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160203 01:38:04.526" starttime="20160203 01:38:04.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160203 01:38:04.528" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160203 01:38:04.528" starttime="20160203 01:38:04.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160203 01:38:04.529" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160203 01:38:04.530" starttime="20160203 01:38:04.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160203 01:38:04.531" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160203 01:38:04.532" starttime="20160203 01:38:04.530"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:38:04.533" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:04.534" starttime="20160203 01:38:04.532"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:38:04.535" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160203 01:38:04.535" starttime="20160203 01:38:04.534"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160203 01:38:04.537" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:04.537" starttime="20160203 01:38:04.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160203 01:38:04.539" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160203 01:38:04.539" starttime="20160203 01:38:04.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160203 01:38:04.541" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:38:04.541" starttime="20160203 01:38:04.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160203 01:38:04.543" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160203 01:38:04.543" starttime="20160203 01:38:04.542"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:04.550" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:04.550" starttime="20160203 01:38:04.548"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:04.551" starttime="20160203 01:38:04.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:04.553" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:04.554" starttime="20160203 01:38:04.552"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:04.554" starttime="20160203 01:38:04.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:04.557" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:04.557" starttime="20160203 01:38:04.556"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:04.558" starttime="20160203 01:38:04.555"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:04.558" starttime="20160203 01:38:04.544"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:38:04.560" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:38:04.561" starttime="20160203 01:38:04.559"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.562" starttime="20160203 01:38:04.561"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.564" starttime="20160203 01:38:04.563"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.566" starttime="20160203 01:38:04.565"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.567" starttime="20160203 01:38:04.566"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.568" starttime="20160203 01:38:04.567"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.570" starttime="20160203 01:38:04.569"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.572" starttime="20160203 01:38:04.571"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.573" starttime="20160203 01:38:04.572"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.575" starttime="20160203 01:38:04.574"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.576" starttime="20160203 01:38:04.575"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.578" starttime="20160203 01:38:04.577"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:04.580" starttime="20160203 01:38:04.579"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:38:04.582" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160203 01:38:06.085" level="INFO">01:38:06,081 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:06.086" starttime="20160203 01:38:04.581"></status>
</kw>
<msg timestamp="20160203 01:38:06.090" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:06.090" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:38:06.088" starttime="20160203 01:38:04.580"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:06.103" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:38:06.102" starttime="20160203 01:38:06.100"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:06.107" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:06.106" starttime="20160203 01:38:06.104"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:06.111" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:06.110" starttime="20160203 01:38:06.108"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:06.117" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:06.118" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:06.119" starttime="20160203 01:38:06.114"></status>
</kw>
<msg timestamp="20160203 01:38:06.120" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:06.121" level="INFO">${return_log_entry} = 2016-02-03 01:38:06,081 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:06.120" starttime="20160203 01:38:06.112"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:06.130" starttime="20160203 01:38:06.128"></status>
</kw>
<msg timestamp="20160203 01:38:06.132" level="INFO">${return_log_entry} = 2016-02-03 01:38:06,081 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:06.131" starttime="20160203 01:38:06.122"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:06.141" starttime="20160203 01:38:06.139"></status>
</kw>
<msg timestamp="20160203 01:38:06.143" level="INFO">${return_log_entry} = 2016-02-03 01:38:06,081 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:06.142" starttime="20160203 01:38:06.133"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:06.153" starttime="20160203 01:38:06.151"></status>
</kw>
<msg timestamp="20160203 01:38:06.155" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:06.154" starttime="20160203 01:38:06.144"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:06.166" starttime="20160203 01:38:06.165"></status>
</kw>
<msg timestamp="20160203 01:38:06.167" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:06.166" starttime="20160203 01:38:06.156"></status>
</kw>
<msg timestamp="20160203 01:38:06.168" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:06.168" starttime="20160203 01:38:06.093"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:06.173" starttime="20160203 01:38:06.172"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:06.174" starttime="20160203 01:38:06.174"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:06.176" starttime="20160203 01:38:06.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:38:06.182" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:38:06.182" starttime="20160203 01:38:06.180"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:06.183" starttime="20160203 01:38:06.179"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:06.183" starttime="20160203 01:38:06.176"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:06.184" starttime="20160203 01:38:06.169"></status>
</kw>
<msg timestamp="20160203 01:38:06.185" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160203 01:38:06.184" starttime="20160203 01:38:04.520"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160203 01:38:06.187" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:06.187" starttime="20160203 01:38:06.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:06.189" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160203 01:38:06.189" starttime="20160203 01:38:06.188"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC Busy *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:06.190" starttime="20160203 01:38:06.190"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC busy call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:06.192" level="INFO">Running the MOC busy call...</msg>
<status status="PASS" endtime="20160203 01:38:06.192" starttime="20160203 01:38:06.191"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC Busy">
<doc>Runs an busy MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-busy</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160203 01:38:06.207" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv</msg>
<status status="PASS" endtime="20160203 01:38:06.206" starttime="20160203 01:38:06.205"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160203 01:38:06.209" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv</msg>
<status status="PASS" endtime="20160203 01:38:06.208" starttime="20160203 01:38:06.207"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160203 01:38:06.211" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini</msg>
<status status="PASS" endtime="20160203 01:38:06.210" starttime="20160203 01:38:06.209"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160203 01:38:06.213" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-busy.cgs</msg>
<status status="PASS" endtime="20160203 01:38:06.212" starttime="20160203 01:38:06.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:06.214" starttime="20160203 01:38:06.213"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:38:06.217" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:06.217" starttime="20160203 01:38:06.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:06.219" starttime="20160203 01:38:06.218"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160203 01:38:06.221" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:06.221" starttime="20160203 01:38:06.219"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:38:06.224" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:06.224" starttime="20160203 01:38:06.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:06.226" starttime="20160203 01:38:06.225"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160203 01:38:06.228" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:06.228" starttime="20160203 01:38:06.226"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160203 01:38:06.231" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:06.231" starttime="20160203 01:38:06.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:06.233" starttime="20160203 01:38:06.232"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160203 01:38:06.239" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-busy.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:38:19.665" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:38:19.664" starttime="20160203 01:38:06.233"></status>
</kw>
<msg timestamp="20160203 01:38:19.667" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:38:19.666" starttime="20160203 01:38:06.200"></status>
</kw>
<msg timestamp="20160203 01:38:19.668" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:38:19.667" starttime="20160203 01:38:06.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:19.670" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160203 01:38:19.670" starttime="20160203 01:38:19.669"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160203 01:38:19.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:19.672" starttime="20160203 01:38:19.671"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.674" starttime="20160203 01:38:19.673"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:19.686" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:19.686" starttime="20160203 01:38:19.684"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:19.687" starttime="20160203 01:38:19.683"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:19.689" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:19.690" starttime="20160203 01:38:19.688"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:19.690" starttime="20160203 01:38:19.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:19.693" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:19.694" starttime="20160203 01:38:19.692"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:19.694" starttime="20160203 01:38:19.691"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:19.695" starttime="20160203 01:38:19.680"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:38:19.697" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:38:19.697" starttime="20160203 01:38:19.695"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.699" starttime="20160203 01:38:19.697"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.700" starttime="20160203 01:38:19.699"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.702" starttime="20160203 01:38:19.701"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.703" starttime="20160203 01:38:19.703"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.705" starttime="20160203 01:38:19.704"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.706" starttime="20160203 01:38:19.705"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:38:19.709" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000']</msg>
<msg timestamp="20160203 01:38:19.889" level="INFO">01:38:19,879 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:38:19,880 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:38:19,881 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36980
01:38:19,883 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000
01:38:19,884 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:38:19,885 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:38:19,886 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:38:19,887 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=3</msg>
<status status="PASS" endtime="20160203 01:38:19.890" starttime="20160203 01:38:19.708"></status>
</kw>
<msg timestamp="20160203 01:38:19.891" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:19.891" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:38:19.891" starttime="20160203 01:38:19.707"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:19.898" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:38:19.898" starttime="20160203 01:38:19.896"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:19.900" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:19.900" starttime="20160203 01:38:19.899"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:19.902" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:19.901" starttime="20160203 01:38:19.901"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:19.905" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:19.906" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:19.906" starttime="20160203 01:38:19.904"></status>
</kw>
<msg timestamp="20160203 01:38:19.907" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:19.907" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,879 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:19.906" starttime="20160203 01:38:19.903"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.912" starttime="20160203 01:38:19.911"></status>
</kw>
<msg timestamp="20160203 01:38:19.914" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,879 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:19.913" starttime="20160203 01:38:19.908"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.918" starttime="20160203 01:38:19.917"></status>
</kw>
<msg timestamp="20160203 01:38:19.919" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,879 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:19.919" starttime="20160203 01:38:19.914"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.924" starttime="20160203 01:38:19.923"></status>
</kw>
<msg timestamp="20160203 01:38:19.925" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:19.924" starttime="20160203 01:38:19.920"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.931" starttime="20160203 01:38:19.930"></status>
</kw>
<msg timestamp="20160203 01:38:19.932" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:19.932" starttime="20160203 01:38:19.925"></status>
</kw>
<msg timestamp="20160203 01:38:19.933" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:19.933" starttime="20160203 01:38:19.892"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:19.939" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160203 01:38:19.939" starttime="20160203 01:38:19.938"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:19.941" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:19.941" starttime="20160203 01:38:19.940"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:19.943" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:19.943" starttime="20160203 01:38:19.942"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:19.946" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:19.946" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:19.947" starttime="20160203 01:38:19.945"></status>
</kw>
<msg timestamp="20160203 01:38:19.948" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:19.948" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,880 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 01:38:19.947" starttime="20160203 01:38:19.944"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.953" starttime="20160203 01:38:19.952"></status>
</kw>
<msg timestamp="20160203 01:38:19.953" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,880 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 01:38:19.953" starttime="20160203 01:38:19.949"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.958" starttime="20160203 01:38:19.957"></status>
</kw>
<msg timestamp="20160203 01:38:19.959" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,880 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 01:38:19.959" starttime="20160203 01:38:19.954"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.964" starttime="20160203 01:38:19.962"></status>
</kw>
<msg timestamp="20160203 01:38:19.964" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160203 01:38:19.964" starttime="20160203 01:38:19.960"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.971" starttime="20160203 01:38:19.970"></status>
</kw>
<msg timestamp="20160203 01:38:19.972" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160203 01:38:19.971" starttime="20160203 01:38:19.965"></status>
</kw>
<msg timestamp="20160203 01:38:19.973" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160203 01:38:19.972" starttime="20160203 01:38:19.934"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:19.979" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160203 01:38:19.978" starttime="20160203 01:38:19.977"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:19.981" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:19.980" starttime="20160203 01:38:19.979"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:19.983" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:19.982" starttime="20160203 01:38:19.981"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:19.985" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:19.986" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:19.987" starttime="20160203 01:38:19.984"></status>
</kw>
<msg timestamp="20160203 01:38:19.987" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:19.988" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,883 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:19.987" starttime="20160203 01:38:19.983"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.992" starttime="20160203 01:38:19.991"></status>
</kw>
<msg timestamp="20160203 01:38:19.993" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,883 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:19.993" starttime="20160203 01:38:19.988"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:19.997" starttime="20160203 01:38:19.996"></status>
</kw>
<msg timestamp="20160203 01:38:19.998" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,883 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:19.998" starttime="20160203 01:38:19.994"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.003" starttime="20160203 01:38:20.002"></status>
</kw>
<msg timestamp="20160203 01:38:20.005" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:20.004" starttime="20160203 01:38:19.999"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.011" starttime="20160203 01:38:20.010"></status>
</kw>
<msg timestamp="20160203 01:38:20.012" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:20.011" starttime="20160203 01:38:20.005"></status>
</kw>
<msg timestamp="20160203 01:38:20.013" level="INFO">${imsi} = 334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:20.013" starttime="20160203 01:38:19.974"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:20.019" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160203 01:38:20.019" starttime="20160203 01:38:20.018"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.021" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:20.021" starttime="20160203 01:38:20.020"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.023" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:20.023" starttime="20160203 01:38:20.022"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.026" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:20.027" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:20.027" starttime="20160203 01:38:20.025"></status>
</kw>
<msg timestamp="20160203 01:38:20.028" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:20.028" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,881 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36980</msg>
<status status="PASS" endtime="20160203 01:38:20.027" starttime="20160203 01:38:20.024"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.033" starttime="20160203 01:38:20.032"></status>
</kw>
<msg timestamp="20160203 01:38:20.033" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,881 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36980</msg>
<status status="PASS" endtime="20160203 01:38:20.033" starttime="20160203 01:38:20.029"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.038" starttime="20160203 01:38:20.037"></status>
</kw>
<msg timestamp="20160203 01:38:20.039" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,881 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36980</msg>
<status status="PASS" endtime="20160203 01:38:20.039" starttime="20160203 01:38:20.034"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.044" starttime="20160203 01:38:20.043"></status>
</kw>
<msg timestamp="20160203 01:38:20.045" level="INFO">${resultCode} = 36980</msg>
<status status="PASS" endtime="20160203 01:38:20.044" starttime="20160203 01:38:20.040"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.051" starttime="20160203 01:38:20.050"></status>
</kw>
<msg timestamp="20160203 01:38:20.052" level="INFO">${resultCode} = 36980</msg>
<status status="PASS" endtime="20160203 01:38:20.052" starttime="20160203 01:38:20.045"></status>
</kw>
<msg timestamp="20160203 01:38:20.053" level="INFO">${id} = 36980</msg>
<status status="PASS" endtime="20160203 01:38:20.053" starttime="20160203 01:38:20.014"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:20.059" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160203 01:38:20.059" starttime="20160203 01:38:20.057"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.061" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:20.061" starttime="20160203 01:38:20.060"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.063" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:20.063" starttime="20160203 01:38:20.062"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.066" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:20.067" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:20.067" starttime="20160203 01:38:20.065"></status>
</kw>
<msg timestamp="20160203 01:38:20.068" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:20.068" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,884 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:20.067" starttime="20160203 01:38:20.064"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.073" starttime="20160203 01:38:20.072"></status>
</kw>
<msg timestamp="20160203 01:38:20.073" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,884 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:20.073" starttime="20160203 01:38:20.069"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.078" starttime="20160203 01:38:20.077"></status>
</kw>
<msg timestamp="20160203 01:38:20.079" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,884 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:20.078" starttime="20160203 01:38:20.074"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.084" starttime="20160203 01:38:20.082"></status>
</kw>
<msg timestamp="20160203 01:38:20.085" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:20.084" starttime="20160203 01:38:20.079"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.091" starttime="20160203 01:38:20.090"></status>
</kw>
<msg timestamp="20160203 01:38:20.092" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:20.091" starttime="20160203 01:38:20.085"></status>
</kw>
<msg timestamp="20160203 01:38:20.093" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:20.092" starttime="20160203 01:38:20.054"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:20.099" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160203 01:38:20.098" starttime="20160203 01:38:20.097"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.101" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:20.100" starttime="20160203 01:38:20.099"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.103" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:20.102" starttime="20160203 01:38:20.101"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.106" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:20.106" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:20.107" starttime="20160203 01:38:20.104"></status>
</kw>
<msg timestamp="20160203 01:38:20.107" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:20.108" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,885 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:38:20.107" starttime="20160203 01:38:20.103"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.113" starttime="20160203 01:38:20.112"></status>
</kw>
<msg timestamp="20160203 01:38:20.114" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,885 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:38:20.113" starttime="20160203 01:38:20.108"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.119" starttime="20160203 01:38:20.118"></status>
</kw>
<msg timestamp="20160203 01:38:20.119" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,885 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:38:20.119" starttime="20160203 01:38:20.114"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.125" starttime="20160203 01:38:20.124"></status>
</kw>
<msg timestamp="20160203 01:38:20.126" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160203 01:38:20.125" starttime="20160203 01:38:20.120"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.132" starttime="20160203 01:38:20.131"></status>
</kw>
<msg timestamp="20160203 01:38:20.133" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160203 01:38:20.133" starttime="20160203 01:38:20.126"></status>
</kw>
<msg timestamp="20160203 01:38:20.134" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160203 01:38:20.134" starttime="20160203 01:38:20.094"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:20.140" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160203 01:38:20.140" starttime="20160203 01:38:20.138"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.142" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:20.142" starttime="20160203 01:38:20.141"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.144" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:20.144" starttime="20160203 01:38:20.143"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.147" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:20.147" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:20.148" starttime="20160203 01:38:20.146"></status>
</kw>
<msg timestamp="20160203 01:38:20.149" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:20.149" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,886 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:20.148" starttime="20160203 01:38:20.145"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.153" starttime="20160203 01:38:20.152"></status>
</kw>
<msg timestamp="20160203 01:38:20.154" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,886 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:20.154" starttime="20160203 01:38:20.150"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.159" starttime="20160203 01:38:20.158"></status>
</kw>
<msg timestamp="20160203 01:38:20.160" level="INFO">${return_log_entry} = 2016-02-03 01:38:19,886 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:20.159" starttime="20160203 01:38:20.155"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.165" starttime="20160203 01:38:20.164"></status>
</kw>
<msg timestamp="20160203 01:38:20.166" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:20.165" starttime="20160203 01:38:20.160"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.172" starttime="20160203 01:38:20.171"></status>
</kw>
<msg timestamp="20160203 01:38:20.173" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:20.172" starttime="20160203 01:38:20.166"></status>
</kw>
<msg timestamp="20160203 01:38:20.174" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:20.173" starttime="20160203 01:38:20.135"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.179" starttime="20160203 01:38:20.178"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.180" starttime="20160203 01:38:20.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.184" starttime="20160203 01:38:20.181"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:38:20.191" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:38:20.191" starttime="20160203 01:38:20.190"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:20.192" starttime="20160203 01:38:20.187"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:20.192" starttime="20160203 01:38:20.184"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:20.193" starttime="20160203 01:38:20.175"></status>
</kw>
<msg timestamp="20160203 01:38:20.195" level="INFO">${rc} = OK</msg>
<msg timestamp="20160203 01:38:20.196" level="INFO">${provId} = 1</msg>
<msg timestamp="20160203 01:38:20.196" level="INFO">${imsi} = 334030880001000</msg>
<msg timestamp="20160203 01:38:20.196" level="INFO">${id} = 36980</msg>
<msg timestamp="20160203 01:38:20.197" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160203 01:38:20.197" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160203 01:38:20.197" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:20.194" starttime="20160203 01:38:19.676"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.209" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:20.209" starttime="20160203 01:38:20.207"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:20.210" starttime="20160203 01:38:20.206"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.213" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:20.213" starttime="20160203 01:38:20.212"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:20.214" starttime="20160203 01:38:20.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.217" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:20.217" starttime="20160203 01:38:20.215"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:20.217" starttime="20160203 01:38:20.214"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:20.218" starttime="20160203 01:38:20.203"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.220" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:38:20.220" starttime="20160203 01:38:20.219"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.222" starttime="20160203 01:38:20.221"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.224" starttime="20160203 01:38:20.222"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.225" starttime="20160203 01:38:20.224"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.227" starttime="20160203 01:38:20.226"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.228" starttime="20160203 01:38:20.227"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.230" starttime="20160203 01:38:20.229"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:38:20.232" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=36980']</msg>
<msg timestamp="20160203 01:38:20.495" level="INFO">01:38:20,488 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:38:20,489 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36981
01:38:20,491 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
01:38:20,492 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:38:20,493 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:38:20.496" starttime="20160203 01:38:20.231"></status>
</kw>
<msg timestamp="20160203 01:38:20.497" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:20.497" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:38:20.496" starttime="20160203 01:38:20.230"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:20.503" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:38:20.503" starttime="20160203 01:38:20.502"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.505" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:20.505" starttime="20160203 01:38:20.504"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.507" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:20.507" starttime="20160203 01:38:20.506"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.510" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:20.511" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:20.511" starttime="20160203 01:38:20.509"></status>
</kw>
<msg timestamp="20160203 01:38:20.512" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:20.512" level="INFO">${return_log_entry} = 2016-02-03 01:38:20,488 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:20.511" starttime="20160203 01:38:20.508"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.517" starttime="20160203 01:38:20.516"></status>
</kw>
<msg timestamp="20160203 01:38:20.518" level="INFO">${return_log_entry} = 2016-02-03 01:38:20,488 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:20.517" starttime="20160203 01:38:20.513"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.522" starttime="20160203 01:38:20.521"></status>
</kw>
<msg timestamp="20160203 01:38:20.523" level="INFO">${return_log_entry} = 2016-02-03 01:38:20,488 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:20.523" starttime="20160203 01:38:20.518"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.528" starttime="20160203 01:38:20.527"></status>
</kw>
<msg timestamp="20160203 01:38:20.529" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:20.528" starttime="20160203 01:38:20.524"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.535" starttime="20160203 01:38:20.534"></status>
</kw>
<msg timestamp="20160203 01:38:20.536" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:20.536" starttime="20160203 01:38:20.529"></status>
</kw>
<msg timestamp="20160203 01:38:20.537" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:20.537" starttime="20160203 01:38:20.498"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:20.544" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160203 01:38:20.543" starttime="20160203 01:38:20.542"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.545" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:20.545" starttime="20160203 01:38:20.544"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.547" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:20.547" starttime="20160203 01:38:20.546"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.550" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:20.551" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:20.551" starttime="20160203 01:38:20.549"></status>
</kw>
<msg timestamp="20160203 01:38:20.552" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:20.552" level="INFO">${return_log_entry} = 2016-02-03 01:38:20,489 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36981</msg>
<status status="PASS" endtime="20160203 01:38:20.552" starttime="20160203 01:38:20.548"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.557" starttime="20160203 01:38:20.556"></status>
</kw>
<msg timestamp="20160203 01:38:20.558" level="INFO">${return_log_entry} = 2016-02-03 01:38:20,489 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36981</msg>
<status status="PASS" endtime="20160203 01:38:20.557" starttime="20160203 01:38:20.553"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.562" starttime="20160203 01:38:20.561"></status>
</kw>
<msg timestamp="20160203 01:38:20.563" level="INFO">${return_log_entry} = 2016-02-03 01:38:20,489 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36981</msg>
<status status="PASS" endtime="20160203 01:38:20.562" starttime="20160203 01:38:20.558"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.567" starttime="20160203 01:38:20.566"></status>
</kw>
<msg timestamp="20160203 01:38:20.568" level="INFO">${resultCode} = 36981</msg>
<status status="PASS" endtime="20160203 01:38:20.568" starttime="20160203 01:38:20.563"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.574" starttime="20160203 01:38:20.574"></status>
</kw>
<msg timestamp="20160203 01:38:20.575" level="INFO">${resultCode} = 36981</msg>
<status status="PASS" endtime="20160203 01:38:20.575" starttime="20160203 01:38:20.569"></status>
</kw>
<msg timestamp="20160203 01:38:20.576" level="INFO">${accountId} = 36981</msg>
<status status="PASS" endtime="20160203 01:38:20.576" starttime="20160203 01:38:20.539"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:20.582" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160203 01:38:20.582" starttime="20160203 01:38:20.581"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.584" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:20.584" starttime="20160203 01:38:20.583"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.586" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:20.586" starttime="20160203 01:38:20.585"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.589" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:20.589" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:20.590" starttime="20160203 01:38:20.588"></status>
</kw>
<msg timestamp="20160203 01:38:20.591" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:20.591" level="INFO">${return_log_entry} = 2016-02-03 01:38:20,491 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160203 01:38:20.590" starttime="20160203 01:38:20.587"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.595" starttime="20160203 01:38:20.594"></status>
</kw>
<msg timestamp="20160203 01:38:20.596" level="INFO">${return_log_entry} = 2016-02-03 01:38:20,491 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160203 01:38:20.596" starttime="20160203 01:38:20.591"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.600" starttime="20160203 01:38:20.599"></status>
</kw>
<msg timestamp="20160203 01:38:20.601" level="INFO">${return_log_entry} = 2016-02-03 01:38:20,491 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160203 01:38:20.601" starttime="20160203 01:38:20.597"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.606" starttime="20160203 01:38:20.605"></status>
</kw>
<msg timestamp="20160203 01:38:20.607" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160203 01:38:20.606" starttime="20160203 01:38:20.602"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.613" starttime="20160203 01:38:20.612"></status>
</kw>
<msg timestamp="20160203 01:38:20.614" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160203 01:38:20.613" starttime="20160203 01:38:20.607"></status>
</kw>
<msg timestamp="20160203 01:38:20.615" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160203 01:38:20.614" starttime="20160203 01:38:20.577"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:20.620" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160203 01:38:20.620" starttime="20160203 01:38:20.619"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.622" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:20.622" starttime="20160203 01:38:20.621"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.624" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:20.624" starttime="20160203 01:38:20.623"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.627" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:20.627" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:20.628" starttime="20160203 01:38:20.626"></status>
</kw>
<msg timestamp="20160203 01:38:20.629" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:20.629" level="INFO">${return_log_entry} = 2016-02-03 01:38:20,492 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 01:38:20.628" starttime="20160203 01:38:20.625"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.633" starttime="20160203 01:38:20.632"></status>
</kw>
<msg timestamp="20160203 01:38:20.634" level="INFO">${return_log_entry} = 2016-02-03 01:38:20,492 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 01:38:20.634" starttime="20160203 01:38:20.630"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.639" starttime="20160203 01:38:20.637"></status>
</kw>
<msg timestamp="20160203 01:38:20.639" level="INFO">${return_log_entry} = 2016-02-03 01:38:20,492 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 01:38:20.639" starttime="20160203 01:38:20.635"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.644" starttime="20160203 01:38:20.643"></status>
</kw>
<msg timestamp="20160203 01:38:20.645" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160203 01:38:20.645" starttime="20160203 01:38:20.640"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.651" starttime="20160203 01:38:20.650"></status>
</kw>
<msg timestamp="20160203 01:38:20.652" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160203 01:38:20.652" starttime="20160203 01:38:20.645"></status>
</kw>
<msg timestamp="20160203 01:38:20.653" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160203 01:38:20.653" starttime="20160203 01:38:20.616"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:20.659" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160203 01:38:20.659" starttime="20160203 01:38:20.658"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.661" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:20.661" starttime="20160203 01:38:20.660"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.663" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:20.662" starttime="20160203 01:38:20.661"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.667" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:20.668" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:20.668" starttime="20160203 01:38:20.666"></status>
</kw>
<msg timestamp="20160203 01:38:20.669" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:20.670" level="INFO">${return_log_entry} = 2016-02-03 01:38:20,493 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:38:20.669" starttime="20160203 01:38:20.664"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.674" starttime="20160203 01:38:20.673"></status>
</kw>
<msg timestamp="20160203 01:38:20.675" level="INFO">${return_log_entry} = 2016-02-03 01:38:20,493 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:38:20.675" starttime="20160203 01:38:20.670"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.679" starttime="20160203 01:38:20.679"></status>
</kw>
<msg timestamp="20160203 01:38:20.680" level="INFO">${return_log_entry} = 2016-02-03 01:38:20,493 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:38:20.680" starttime="20160203 01:38:20.676"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.685" starttime="20160203 01:38:20.684"></status>
</kw>
<msg timestamp="20160203 01:38:20.686" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160203 01:38:20.685" starttime="20160203 01:38:20.681"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.692" starttime="20160203 01:38:20.691"></status>
</kw>
<msg timestamp="20160203 01:38:20.693" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160203 01:38:20.692" starttime="20160203 01:38:20.686"></status>
</kw>
<msg timestamp="20160203 01:38:20.694" level="INFO">${currencyId} = 101000</msg>
<status status="PASS" endtime="20160203 01:38:20.693" starttime="20160203 01:38:20.654"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.699" starttime="20160203 01:38:20.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.700" starttime="20160203 01:38:20.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.701" starttime="20160203 01:38:20.701"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:38:20.707" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:38:20.707" starttime="20160203 01:38:20.706"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:20.708" starttime="20160203 01:38:20.705"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:20.708" starttime="20160203 01:38:20.702"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:20.709" starttime="20160203 01:38:20.695"></status>
</kw>
<msg timestamp="20160203 01:38:20.710" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160203 01:38:20.711" level="INFO">${accId} = 36981</msg>
<msg timestamp="20160203 01:38:20.711" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160203 01:38:20.711" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160203 01:38:20.712" level="INFO">${curr} = 101000</msg>
<status status="PASS" endtime="20160203 01:38:20.710" starttime="20160203 01:38:20.199"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.713" starttime="20160203 01:38:20.712"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.714" starttime="20160203 01:38:20.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:20.716" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160203 01:38:20.717" starttime="20160203 01:38:20.715"></status>
</kw>
<doc>Test will make a MOC call to the busy B party.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:38:20.717" starttime="20160203 01:38:04.512"></status>
</test>
<doc>Testing the prepaid MOC call to the busy called party (called party in another call)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:38:20.722" starttime="20160203 01:38:00.022"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:38:20.729" starttime="20160203 01:38:00.006"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoAnswer" id="s1-s1-s1-s3-s1-s3" name="MOC PREPAID ONNET-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoAnswer/MOC_PREPAID_ONNET-NoAnswer-robot-suite.txt" id="s1-s1-s1-s3-s1-s3-s1" name="MOC PREPAID ONNET-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160203 01:38:20.889" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:38:20.894" level="INFO">${date} = Wed Feb  3 01:38:20 CET 2016</msg>
<status status="PASS" endtime="20160203 01:38:20.893" starttime="20160203 01:38:20.886"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:20.896" level="INFO">Date and time: Wed Feb  3 01:38:20 CET 2016</msg>
<status status="PASS" endtime="20160203 01:38:20.896" starttime="20160203 01:38:20.895"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:20.898" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160203 01:38:20.899" starttime="20160203 01:38:20.897"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.925" starttime="20160203 01:38:20.924"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:20.973" starttime="20160203 01:38:20.929"></status>
</kw>
<msg timestamp="20160203 01:38:20.974" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160203 01:38:20.973" starttime="20160203 01:38:20.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:38:20.978" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:38:21.454" level="INFO">Read output: Last login: Wed Feb  3 00:38:00 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:38:21.455" starttime="20160203 01:38:20.977"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:21.456" starttime="20160203 01:38:20.974"></status>
</kw>
<msg timestamp="20160203 01:38:21.458" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160203 01:38:21.457" starttime="20160203 01:38:20.920"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:38:21.462" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:38:21.462" starttime="20160203 01:38:21.459"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:38:21.464" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160203 01:38:21.913" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:38:21.914" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:38:21.913" starttime="20160203 01:38:21.463"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:21.917" starttime="20160203 01:38:21.916"></status>
</kw>
<msg timestamp="20160203 01:38:21.918" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:38:21.918" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:38:21.918" starttime="20160203 01:38:21.915"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:21.923" starttime="20160203 01:38:21.922"></status>
</kw>
<msg timestamp="20160203 01:38:21.924" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:21.923" starttime="20160203 01:38:21.919"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160203 01:38:21.926" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:38:21.925" starttime="20160203 01:38:21.924"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:38:21.927" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:38:21.927" starttime="20160203 01:38:21.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:21.929" starttime="20160203 01:38:21.928"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:21.934" starttime="20160203 01:38:21.933"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:38:21.937" starttime="20160203 01:38:21.934"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:21.938" starttime="20160203 01:38:21.929"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:21.942" starttime="20160203 01:38:21.941"></status>
</kw>
<msg timestamp="20160203 01:38:21.943" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:38:21.942" starttime="20160203 01:38:21.939"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:21.944" starttime="20160203 01:38:21.943"></status>
</kw>
<msg timestamp="20160203 01:38:21.946" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160203 01:38:21.946" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:38:21.945" starttime="20160203 01:38:20.907"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:21.972" starttime="20160203 01:38:21.971"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:22.023" starttime="20160203 01:38:21.976"></status>
</kw>
<msg timestamp="20160203 01:38:22.025" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160203 01:38:22.024" starttime="20160203 01:38:21.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:38:22.029" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:38:23.139" level="INFO">Read output: Last login: Wed Feb  3 00:38:01 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:38:23.140" starttime="20160203 01:38:22.028"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:23.141" starttime="20160203 01:38:22.025"></status>
</kw>
<msg timestamp="20160203 01:38:23.143" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160203 01:38:23.142" starttime="20160203 01:38:21.967"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:38:23.148" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:38:23.147" starttime="20160203 01:38:23.144"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:38:23.149" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160203 01:38:23.617" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:38:23.619" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:38:23.618" starttime="20160203 01:38:23.148"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:23.622" starttime="20160203 01:38:23.621"></status>
</kw>
<msg timestamp="20160203 01:38:23.623" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:38:23.623" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:38:23.623" starttime="20160203 01:38:23.619"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:23.628" starttime="20160203 01:38:23.627"></status>
</kw>
<msg timestamp="20160203 01:38:23.629" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:23.629" starttime="20160203 01:38:23.624"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160203 01:38:23.631" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:38:23.631" starttime="20160203 01:38:23.630"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:38:23.633" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:38:23.633" starttime="20160203 01:38:23.632"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:23.634" starttime="20160203 01:38:23.634"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:23.640" starttime="20160203 01:38:23.639"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:38:23.644" starttime="20160203 01:38:23.641"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:23.645" starttime="20160203 01:38:23.635"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:23.649" starttime="20160203 01:38:23.648"></status>
</kw>
<msg timestamp="20160203 01:38:23.650" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:38:23.649" starttime="20160203 01:38:23.645"></status>
</kw>
<msg timestamp="20160203 01:38:23.651" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160203 01:38:23.652" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:38:23.650" starttime="20160203 01:38:21.955"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:23.678" starttime="20160203 01:38:23.677"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:23.724" starttime="20160203 01:38:23.682"></status>
</kw>
<msg timestamp="20160203 01:38:23.725" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20160203 01:38:23.725" starttime="20160203 01:38:23.679"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:38:23.730" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:38:24.262" level="INFO">Read output: Last login: Wed Feb  3 00:38:03 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:38:24.263" starttime="20160203 01:38:23.729"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:24.264" starttime="20160203 01:38:23.726"></status>
</kw>
<msg timestamp="20160203 01:38:24.266" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20160203 01:38:24.265" starttime="20160203 01:38:23.673"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:38:24.270" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:38:24.270" starttime="20160203 01:38:24.267"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:38:24.272" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160203 01:38:24.525" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:38:24.526" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:38:24.526" starttime="20160203 01:38:24.271"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:24.529" starttime="20160203 01:38:24.528"></status>
</kw>
<msg timestamp="20160203 01:38:24.530" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:38:24.530" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:38:24.530" starttime="20160203 01:38:24.527"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:24.535" starttime="20160203 01:38:24.534"></status>
</kw>
<msg timestamp="20160203 01:38:24.535" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:24.535" starttime="20160203 01:38:24.531"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:38:24.537" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:38:24.537" starttime="20160203 01:38:24.536"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:38:24.539" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:38:24.539" starttime="20160203 01:38:24.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:24.541" starttime="20160203 01:38:24.540"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:24.546" starttime="20160203 01:38:24.545"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:38:24.549" starttime="20160203 01:38:24.546"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:24.550" starttime="20160203 01:38:24.541"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:24.554" starttime="20160203 01:38:24.553"></status>
</kw>
<msg timestamp="20160203 01:38:24.555" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:38:24.554" starttime="20160203 01:38:24.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:24.556" starttime="20160203 01:38:24.555"></status>
</kw>
<msg timestamp="20160203 01:38:24.558" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160203 01:38:24.558" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:38:24.557" starttime="20160203 01:38:23.660"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:24.584" starttime="20160203 01:38:24.583"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:24.631" starttime="20160203 01:38:24.588"></status>
</kw>
<msg timestamp="20160203 01:38:24.634" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20160203 01:38:24.633" starttime="20160203 01:38:24.585"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:38:24.645" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:38:25.020" level="INFO">Read output: Last login: Wed Feb  3 00:38:04 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:38:25.022" starttime="20160203 01:38:24.642"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:25.024" starttime="20160203 01:38:24.635"></status>
</kw>
<msg timestamp="20160203 01:38:25.028" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20160203 01:38:25.026" starttime="20160203 01:38:24.579"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:38:25.037" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:38:25.036" starttime="20160203 01:38:25.029"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:38:25.039" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160203 01:38:25.097" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:38:25.098" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:38:25.098" starttime="20160203 01:38:25.038"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.101" starttime="20160203 01:38:25.100"></status>
</kw>
<msg timestamp="20160203 01:38:25.102" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:38:25.102" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:38:25.102" starttime="20160203 01:38:25.099"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.107" starttime="20160203 01:38:25.106"></status>
</kw>
<msg timestamp="20160203 01:38:25.108" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:25.107" starttime="20160203 01:38:25.103"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:38:25.109" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:38:25.109" starttime="20160203 01:38:25.108"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:38:25.111" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:38:25.111" starttime="20160203 01:38:25.110"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.112" starttime="20160203 01:38:25.112"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.117" starttime="20160203 01:38:25.116"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.120" starttime="20160203 01:38:25.118"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:25.121" starttime="20160203 01:38:25.113"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.131" starttime="20160203 01:38:25.128"></status>
</kw>
<msg timestamp="20160203 01:38:25.133" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:38:25.132" starttime="20160203 01:38:25.123"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.136" starttime="20160203 01:38:25.134"></status>
</kw>
<msg timestamp="20160203 01:38:25.139" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160203 01:38:25.140" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:38:25.137" starttime="20160203 01:38:24.567"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:25.143" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:38:25.144" starttime="20160203 01:38:25.141"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:25.148" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:38:25.148" starttime="20160203 01:38:25.145"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:25.152" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:38:25.153" starttime="20160203 01:38:25.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:25.156" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:38:25.157" starttime="20160203 01:38:25.154"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160203 01:38:25.161" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:25.162" starttime="20160203 01:38:25.159"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160203 01:38:25.165" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:25.166" starttime="20160203 01:38:25.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160203 01:38:25.169" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:25.170" starttime="20160203 01:38:25.167"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160203 01:38:25.173" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:25.174" starttime="20160203 01:38:25.171"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.187" starttime="20160203 01:38:25.181"></status>
</kw>
<msg timestamp="20160203 01:38:25.189" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:38:25.188" starttime="20160203 01:38:25.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160203 01:38:25.193" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:38:25.193" starttime="20160203 01:38:25.190"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:25.195" starttime="20160203 01:38:20.884"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s3-s1-t1" name="Run MOC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.207" starttime="20160203 01:38:25.206"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160203 01:38:25.211" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160203 01:38:25.210" starttime="20160203 01:38:25.208"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160203 01:38:25.226" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160203 01:38:25.227" starttime="20160203 01:38:25.224"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160203 01:38:25.230" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160203 01:38:25.231" starttime="20160203 01:38:25.228"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160203 01:38:25.234" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160203 01:38:25.235" starttime="20160203 01:38:25.232"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160203 01:38:25.238" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160203 01:38:25.239" starttime="20160203 01:38:25.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:38:25.242" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:25.243" starttime="20160203 01:38:25.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:38:25.246" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160203 01:38:25.246" starttime="20160203 01:38:25.244"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160203 01:38:25.250" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:25.250" starttime="20160203 01:38:25.248"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160203 01:38:25.253" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160203 01:38:25.254" starttime="20160203 01:38:25.251"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160203 01:38:25.257" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:38:25.258" starttime="20160203 01:38:25.255"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160203 01:38:25.261" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160203 01:38:25.262" starttime="20160203 01:38:25.259"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:25.276" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:25.277" starttime="20160203 01:38:25.273"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:25.278" starttime="20160203 01:38:25.271"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:25.284" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:25.285" starttime="20160203 01:38:25.282"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:25.286" starttime="20160203 01:38:25.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:25.290" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:25.290" starttime="20160203 01:38:25.289"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:25.291" starttime="20160203 01:38:25.287"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:25.291" starttime="20160203 01:38:25.265"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:38:25.294" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:38:25.294" starttime="20160203 01:38:25.292"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.295" starttime="20160203 01:38:25.294"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.297" starttime="20160203 01:38:25.296"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.299" starttime="20160203 01:38:25.298"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.300" starttime="20160203 01:38:25.299"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.301" starttime="20160203 01:38:25.300"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.303" starttime="20160203 01:38:25.302"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.304" starttime="20160203 01:38:25.303"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.306" starttime="20160203 01:38:25.305"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.307" starttime="20160203 01:38:25.306"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.309" starttime="20160203 01:38:25.308"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.310" starttime="20160203 01:38:25.309"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:25.312" starttime="20160203 01:38:25.311"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:38:25.314" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160203 01:38:26.771" level="INFO">01:38:26,768 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:26.771" starttime="20160203 01:38:25.314"></status>
</kw>
<msg timestamp="20160203 01:38:26.773" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:26.774" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:38:26.773" starttime="20160203 01:38:25.313"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:26.780" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:38:26.779" starttime="20160203 01:38:26.778"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:26.782" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:26.781" starttime="20160203 01:38:26.780"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:26.783" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:26.783" starttime="20160203 01:38:26.782"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:26.786" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:26.787" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:26.787" starttime="20160203 01:38:26.785"></status>
</kw>
<msg timestamp="20160203 01:38:26.788" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:26.788" level="INFO">${return_log_entry} = 2016-02-03 01:38:26,768 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:26.787" starttime="20160203 01:38:26.784"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:26.793" starttime="20160203 01:38:26.792"></status>
</kw>
<msg timestamp="20160203 01:38:26.794" level="INFO">${return_log_entry} = 2016-02-03 01:38:26,768 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:26.793" starttime="20160203 01:38:26.789"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:26.798" starttime="20160203 01:38:26.797"></status>
</kw>
<msg timestamp="20160203 01:38:26.799" level="INFO">${return_log_entry} = 2016-02-03 01:38:26,768 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:26.798" starttime="20160203 01:38:26.794"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:26.803" starttime="20160203 01:38:26.802"></status>
</kw>
<msg timestamp="20160203 01:38:26.804" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:26.804" starttime="20160203 01:38:26.799"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:26.810" starttime="20160203 01:38:26.809"></status>
</kw>
<msg timestamp="20160203 01:38:26.811" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:26.810" starttime="20160203 01:38:26.805"></status>
</kw>
<msg timestamp="20160203 01:38:26.812" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:26.811" starttime="20160203 01:38:26.775"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:26.817" starttime="20160203 01:38:26.816"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:26.818" starttime="20160203 01:38:26.817"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:26.819" starttime="20160203 01:38:26.818"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:38:26.825" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:38:26.825" starttime="20160203 01:38:26.823"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:26.826" starttime="20160203 01:38:26.822"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:26.826" starttime="20160203 01:38:26.820"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:26.827" starttime="20160203 01:38:26.813"></status>
</kw>
<msg timestamp="20160203 01:38:26.828" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160203 01:38:26.827" starttime="20160203 01:38:25.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160203 01:38:26.829" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:26.830" starttime="20160203 01:38:26.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:26.831" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160203 01:38:26.832" starttime="20160203 01:38:26.830"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC NoAnswer *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:26.833" starttime="20160203 01:38:26.832"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC NoAnswer call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:26.834" level="INFO">Running the MOC NoAnswer call...</msg>
<status status="PASS" endtime="20160203 01:38:26.834" starttime="20160203 01:38:26.833"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC NoAnswer">
<doc>Runs an NoAnswer MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-noanswer</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160203 01:38:26.848" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20160203 01:38:26.848" starttime="20160203 01:38:26.847"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160203 01:38:26.850" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20160203 01:38:26.850" starttime="20160203 01:38:26.849"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160203 01:38:26.852" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20160203 01:38:26.852" starttime="20160203 01:38:26.851"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160203 01:38:26.854" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-noanswer.cgs</msg>
<status status="PASS" endtime="20160203 01:38:26.854" starttime="20160203 01:38:26.853"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:26.855" starttime="20160203 01:38:26.854"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:38:26.858" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:26.858" starttime="20160203 01:38:26.856"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:26.859" starttime="20160203 01:38:26.859"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160203 01:38:26.861" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:26.862" starttime="20160203 01:38:26.860"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:38:26.864" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:26.865" starttime="20160203 01:38:26.862"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:26.866" starttime="20160203 01:38:26.865"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160203 01:38:26.868" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:26.868" starttime="20160203 01:38:26.866"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160203 01:38:26.871" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:26.871" starttime="20160203 01:38:26.869"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:26.873" starttime="20160203 01:38:26.872"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160203 01:38:26.879" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-noanswer.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:38:31.219" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:38:31.216" starttime="20160203 01:38:26.873"></status>
</kw>
<msg timestamp="20160203 01:38:31.222" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:38:31.221" starttime="20160203 01:38:26.842"></status>
</kw>
<msg timestamp="20160203 01:38:31.225" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:38:31.224" starttime="20160203 01:38:26.836"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:31.228" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160203 01:38:31.229" starttime="20160203 01:38:31.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.233" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:31.234" starttime="20160203 01:38:31.230"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.237" starttime="20160203 01:38:31.235"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.262" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:31.263" starttime="20160203 01:38:31.259"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:31.264" starttime="20160203 01:38:31.257"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.270" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:31.271" starttime="20160203 01:38:31.268"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:31.272" starttime="20160203 01:38:31.266"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.278" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:31.279" starttime="20160203 01:38:31.275"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:31.280" starttime="20160203 01:38:31.273"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:31.281" starttime="20160203 01:38:31.251"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.286" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:38:31.287" starttime="20160203 01:38:31.282"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.291" starttime="20160203 01:38:31.289"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.294" starttime="20160203 01:38:31.292"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.298" starttime="20160203 01:38:31.296"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.301" starttime="20160203 01:38:31.299"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.304" starttime="20160203 01:38:31.302"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.308" starttime="20160203 01:38:31.306"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:38:31.313" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000']</msg>
<msg timestamp="20160203 01:38:31.535" level="INFO">01:38:31,522 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:38:31,524 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:38:31,525 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36983
01:38:31,527 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000
01:38:31,528 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:38:31,530 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:38:31,531 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:38:31,533 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=3</msg>
<status status="PASS" endtime="20160203 01:38:31.536" starttime="20160203 01:38:31.311"></status>
</kw>
<msg timestamp="20160203 01:38:31.537" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:31.537" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:38:31.536" starttime="20160203 01:38:31.309"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:31.543" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:38:31.543" starttime="20160203 01:38:31.542"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.545" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:31.545" starttime="20160203 01:38:31.544"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.547" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:31.546" starttime="20160203 01:38:31.545"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.549" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:31.550" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:31.550" starttime="20160203 01:38:31.548"></status>
</kw>
<msg timestamp="20160203 01:38:31.551" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:31.552" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,522 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:31.551" starttime="20160203 01:38:31.547"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.556" starttime="20160203 01:38:31.555"></status>
</kw>
<msg timestamp="20160203 01:38:31.557" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,522 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:31.556" starttime="20160203 01:38:31.552"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.561" starttime="20160203 01:38:31.560"></status>
</kw>
<msg timestamp="20160203 01:38:31.562" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,522 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:31.562" starttime="20160203 01:38:31.557"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.567" starttime="20160203 01:38:31.565"></status>
</kw>
<msg timestamp="20160203 01:38:31.567" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:31.567" starttime="20160203 01:38:31.562"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.574" starttime="20160203 01:38:31.573"></status>
</kw>
<msg timestamp="20160203 01:38:31.574" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:31.574" starttime="20160203 01:38:31.568"></status>
</kw>
<msg timestamp="20160203 01:38:31.575" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:31.575" starttime="20160203 01:38:31.538"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:31.581" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160203 01:38:31.581" starttime="20160203 01:38:31.579"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.583" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:31.582" starttime="20160203 01:38:31.581"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.584" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:31.584" starttime="20160203 01:38:31.583"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.587" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:31.588" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:31.588" starttime="20160203 01:38:31.586"></status>
</kw>
<msg timestamp="20160203 01:38:31.589" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:31.589" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,524 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 01:38:31.589" starttime="20160203 01:38:31.585"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.594" starttime="20160203 01:38:31.593"></status>
</kw>
<msg timestamp="20160203 01:38:31.594" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,524 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 01:38:31.594" starttime="20160203 01:38:31.590"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.599" starttime="20160203 01:38:31.598"></status>
</kw>
<msg timestamp="20160203 01:38:31.600" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,524 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 01:38:31.599" starttime="20160203 01:38:31.595"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.604" starttime="20160203 01:38:31.603"></status>
</kw>
<msg timestamp="20160203 01:38:31.605" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160203 01:38:31.605" starttime="20160203 01:38:31.600"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.611" starttime="20160203 01:38:31.610"></status>
</kw>
<msg timestamp="20160203 01:38:31.612" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160203 01:38:31.611" starttime="20160203 01:38:31.605"></status>
</kw>
<msg timestamp="20160203 01:38:31.613" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160203 01:38:31.612" starttime="20160203 01:38:31.576"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:31.618" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160203 01:38:31.618" starttime="20160203 01:38:31.617"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.620" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:31.620" starttime="20160203 01:38:31.619"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.622" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:31.622" starttime="20160203 01:38:31.621"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.625" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:31.625" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:31.626" starttime="20160203 01:38:31.623"></status>
</kw>
<msg timestamp="20160203 01:38:31.626" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:31.627" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,527 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:31.626" starttime="20160203 01:38:31.622"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.631" starttime="20160203 01:38:31.630"></status>
</kw>
<msg timestamp="20160203 01:38:31.632" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,527 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:31.632" starttime="20160203 01:38:31.627"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.636" starttime="20160203 01:38:31.635"></status>
</kw>
<msg timestamp="20160203 01:38:31.637" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,527 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:31.637" starttime="20160203 01:38:31.633"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.642" starttime="20160203 01:38:31.641"></status>
</kw>
<msg timestamp="20160203 01:38:31.643" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:31.643" starttime="20160203 01:38:31.638"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.649" starttime="20160203 01:38:31.648"></status>
</kw>
<msg timestamp="20160203 01:38:31.650" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:31.649" starttime="20160203 01:38:31.643"></status>
</kw>
<msg timestamp="20160203 01:38:31.651" level="INFO">${imsi} = 334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:31.650" starttime="20160203 01:38:31.614"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:31.662" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160203 01:38:31.661" starttime="20160203 01:38:31.660"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.664" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:31.663" starttime="20160203 01:38:31.662"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.665" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:31.665" starttime="20160203 01:38:31.664"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.668" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:31.669" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:31.669" starttime="20160203 01:38:31.667"></status>
</kw>
<msg timestamp="20160203 01:38:31.670" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:31.670" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,525 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36983</msg>
<status status="PASS" endtime="20160203 01:38:31.669" starttime="20160203 01:38:31.666"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.674" starttime="20160203 01:38:31.673"></status>
</kw>
<msg timestamp="20160203 01:38:31.675" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,525 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36983</msg>
<status status="PASS" endtime="20160203 01:38:31.675" starttime="20160203 01:38:31.671"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.679" starttime="20160203 01:38:31.678"></status>
</kw>
<msg timestamp="20160203 01:38:31.680" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,525 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36983</msg>
<status status="PASS" endtime="20160203 01:38:31.680" starttime="20160203 01:38:31.675"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.684" starttime="20160203 01:38:31.683"></status>
</kw>
<msg timestamp="20160203 01:38:31.685" level="INFO">${resultCode} = 36983</msg>
<status status="PASS" endtime="20160203 01:38:31.685" starttime="20160203 01:38:31.681"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.691" starttime="20160203 01:38:31.690"></status>
</kw>
<msg timestamp="20160203 01:38:31.692" level="INFO">${resultCode} = 36983</msg>
<status status="PASS" endtime="20160203 01:38:31.692" starttime="20160203 01:38:31.686"></status>
</kw>
<msg timestamp="20160203 01:38:31.693" level="INFO">${id} = 36983</msg>
<status status="PASS" endtime="20160203 01:38:31.693" starttime="20160203 01:38:31.652"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:31.699" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160203 01:38:31.698" starttime="20160203 01:38:31.697"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.700" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:31.700" starttime="20160203 01:38:31.699"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.702" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:31.702" starttime="20160203 01:38:31.701"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.705" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:31.705" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:31.706" starttime="20160203 01:38:31.704"></status>
</kw>
<msg timestamp="20160203 01:38:31.706" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:31.707" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,528 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:31.706" starttime="20160203 01:38:31.703"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.711" starttime="20160203 01:38:31.710"></status>
</kw>
<msg timestamp="20160203 01:38:31.712" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,528 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:31.711" starttime="20160203 01:38:31.707"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.716" starttime="20160203 01:38:31.715"></status>
</kw>
<msg timestamp="20160203 01:38:31.717" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,528 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:31.716" starttime="20160203 01:38:31.712"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.721" starttime="20160203 01:38:31.720"></status>
</kw>
<msg timestamp="20160203 01:38:31.722" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:31.722" starttime="20160203 01:38:31.717"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.728" starttime="20160203 01:38:31.727"></status>
</kw>
<msg timestamp="20160203 01:38:31.729" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:31.728" starttime="20160203 01:38:31.722"></status>
</kw>
<msg timestamp="20160203 01:38:31.730" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:31.729" starttime="20160203 01:38:31.694"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:31.735" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160203 01:38:31.735" starttime="20160203 01:38:31.734"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.737" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:31.737" starttime="20160203 01:38:31.736"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.739" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:31.738" starttime="20160203 01:38:31.737"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.741" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:31.742" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:31.742" starttime="20160203 01:38:31.740"></status>
</kw>
<msg timestamp="20160203 01:38:31.743" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:31.743" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,530 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:38:31.743" starttime="20160203 01:38:31.739"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.747" starttime="20160203 01:38:31.746"></status>
</kw>
<msg timestamp="20160203 01:38:31.748" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,530 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:38:31.748" starttime="20160203 01:38:31.744"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.753" starttime="20160203 01:38:31.752"></status>
</kw>
<msg timestamp="20160203 01:38:31.753" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,530 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:38:31.753" starttime="20160203 01:38:31.749"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.758" starttime="20160203 01:38:31.757"></status>
</kw>
<msg timestamp="20160203 01:38:31.759" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160203 01:38:31.758" starttime="20160203 01:38:31.754"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.765" starttime="20160203 01:38:31.764"></status>
</kw>
<msg timestamp="20160203 01:38:31.766" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160203 01:38:31.765" starttime="20160203 01:38:31.759"></status>
</kw>
<msg timestamp="20160203 01:38:31.767" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160203 01:38:31.766" starttime="20160203 01:38:31.731"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:31.773" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160203 01:38:31.773" starttime="20160203 01:38:31.771"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.775" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:31.774" starttime="20160203 01:38:31.773"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.776" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:31.776" starttime="20160203 01:38:31.775"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.779" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:31.780" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:31.780" starttime="20160203 01:38:31.778"></status>
</kw>
<msg timestamp="20160203 01:38:31.781" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:31.781" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,531 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:31.781" starttime="20160203 01:38:31.777"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.786" starttime="20160203 01:38:31.785"></status>
</kw>
<msg timestamp="20160203 01:38:31.787" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,531 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:31.786" starttime="20160203 01:38:31.782"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.791" starttime="20160203 01:38:31.790"></status>
</kw>
<msg timestamp="20160203 01:38:31.792" level="INFO">${return_log_entry} = 2016-02-03 01:38:31,531 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:31.792" starttime="20160203 01:38:31.787"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.797" starttime="20160203 01:38:31.795"></status>
</kw>
<msg timestamp="20160203 01:38:31.797" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:31.797" starttime="20160203 01:38:31.793"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.803" starttime="20160203 01:38:31.802"></status>
</kw>
<msg timestamp="20160203 01:38:31.804" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:31.804" starttime="20160203 01:38:31.798"></status>
</kw>
<msg timestamp="20160203 01:38:31.805" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:31.805" starttime="20160203 01:38:31.768"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.810" starttime="20160203 01:38:31.809"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.811" starttime="20160203 01:38:31.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.813" starttime="20160203 01:38:31.812"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:38:31.818" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:38:31.819" starttime="20160203 01:38:31.817"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:31.819" starttime="20160203 01:38:31.816"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:31.819" starttime="20160203 01:38:31.813"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:31.820" starttime="20160203 01:38:31.806"></status>
</kw>
<msg timestamp="20160203 01:38:31.822" level="INFO">${rc} = OK</msg>
<msg timestamp="20160203 01:38:31.822" level="INFO">${provId} = 1</msg>
<msg timestamp="20160203 01:38:31.822" level="INFO">${imsi} = 334030880001000</msg>
<msg timestamp="20160203 01:38:31.822" level="INFO">${id} = 36983</msg>
<msg timestamp="20160203 01:38:31.823" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160203 01:38:31.823" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160203 01:38:31.823" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:31.821" starttime="20160203 01:38:31.240"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.834" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:31.835" starttime="20160203 01:38:31.833"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:31.835" starttime="20160203 01:38:31.832"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.838" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:31.838" starttime="20160203 01:38:31.836"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:31.838" starttime="20160203 01:38:31.836"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.841" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:31.841" starttime="20160203 01:38:31.840"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:31.842" starttime="20160203 01:38:31.839"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:31.842" starttime="20160203 01:38:31.829"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:38:31.844" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:38:31.844" starttime="20160203 01:38:31.843"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.846" starttime="20160203 01:38:31.845"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.848" starttime="20160203 01:38:31.847"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.849" starttime="20160203 01:38:31.848"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.851" starttime="20160203 01:38:31.850"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.852" starttime="20160203 01:38:31.851"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:31.853" starttime="20160203 01:38:31.852"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:38:31.855" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=36983']</msg>
<msg timestamp="20160203 01:38:32.151" level="INFO">01:38:32,143 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:38:32,144 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36984
01:38:32,146 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
01:38:32,147 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:38:32,149 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:38:32.152" starttime="20160203 01:38:31.855"></status>
</kw>
<msg timestamp="20160203 01:38:32.153" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:32.154" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:38:32.153" starttime="20160203 01:38:31.854"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:32.159" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:38:32.159" starttime="20160203 01:38:32.158"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.161" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:32.161" starttime="20160203 01:38:32.160"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.163" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:32.163" starttime="20160203 01:38:32.162"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.166" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:32.167" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:32.167" starttime="20160203 01:38:32.165"></status>
</kw>
<msg timestamp="20160203 01:38:32.168" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:32.168" level="INFO">${return_log_entry} = 2016-02-03 01:38:32,143 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:32.167" starttime="20160203 01:38:32.164"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.172" starttime="20160203 01:38:32.171"></status>
</kw>
<msg timestamp="20160203 01:38:32.173" level="INFO">${return_log_entry} = 2016-02-03 01:38:32,143 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:32.173" starttime="20160203 01:38:32.169"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.177" starttime="20160203 01:38:32.176"></status>
</kw>
<msg timestamp="20160203 01:38:32.178" level="INFO">${return_log_entry} = 2016-02-03 01:38:32,143 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:32.178" starttime="20160203 01:38:32.174"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.183" starttime="20160203 01:38:32.182"></status>
</kw>
<msg timestamp="20160203 01:38:32.183" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:32.183" starttime="20160203 01:38:32.179"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.190" starttime="20160203 01:38:32.189"></status>
</kw>
<msg timestamp="20160203 01:38:32.190" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:32.190" starttime="20160203 01:38:32.184"></status>
</kw>
<msg timestamp="20160203 01:38:32.191" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:32.191" starttime="20160203 01:38:32.155"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:32.197" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160203 01:38:32.197" starttime="20160203 01:38:32.196"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.199" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:32.198" starttime="20160203 01:38:32.198"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.200" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:32.200" starttime="20160203 01:38:32.199"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.203" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:32.204" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:32.204" starttime="20160203 01:38:32.202"></status>
</kw>
<msg timestamp="20160203 01:38:32.205" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:32.205" level="INFO">${return_log_entry} = 2016-02-03 01:38:32,144 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36984</msg>
<status status="PASS" endtime="20160203 01:38:32.205" starttime="20160203 01:38:32.201"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.209" starttime="20160203 01:38:32.208"></status>
</kw>
<msg timestamp="20160203 01:38:32.210" level="INFO">${return_log_entry} = 2016-02-03 01:38:32,144 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36984</msg>
<status status="PASS" endtime="20160203 01:38:32.210" starttime="20160203 01:38:32.206"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.214" starttime="20160203 01:38:32.213"></status>
</kw>
<msg timestamp="20160203 01:38:32.215" level="INFO">${return_log_entry} = 2016-02-03 01:38:32,144 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36984</msg>
<status status="PASS" endtime="20160203 01:38:32.215" starttime="20160203 01:38:32.211"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.221" starttime="20160203 01:38:32.220"></status>
</kw>
<msg timestamp="20160203 01:38:32.222" level="INFO">${resultCode} = 36984</msg>
<status status="PASS" endtime="20160203 01:38:32.221" starttime="20160203 01:38:32.216"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.228" starttime="20160203 01:38:32.227"></status>
</kw>
<msg timestamp="20160203 01:38:32.228" level="INFO">${resultCode} = 36984</msg>
<status status="PASS" endtime="20160203 01:38:32.228" starttime="20160203 01:38:32.222"></status>
</kw>
<msg timestamp="20160203 01:38:32.229" level="INFO">${accountId} = 36984</msg>
<status status="PASS" endtime="20160203 01:38:32.229" starttime="20160203 01:38:32.192"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:32.235" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160203 01:38:32.235" starttime="20160203 01:38:32.234"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.237" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:32.237" starttime="20160203 01:38:32.236"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.239" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:32.238" starttime="20160203 01:38:32.237"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.241" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:32.242" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:32.242" starttime="20160203 01:38:32.240"></status>
</kw>
<msg timestamp="20160203 01:38:32.243" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:32.243" level="INFO">${return_log_entry} = 2016-02-03 01:38:32,146 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160203 01:38:32.243" starttime="20160203 01:38:32.239"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.248" starttime="20160203 01:38:32.247"></status>
</kw>
<msg timestamp="20160203 01:38:32.248" level="INFO">${return_log_entry} = 2016-02-03 01:38:32,146 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160203 01:38:32.248" starttime="20160203 01:38:32.244"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.253" starttime="20160203 01:38:32.252"></status>
</kw>
<msg timestamp="20160203 01:38:32.253" level="INFO">${return_log_entry} = 2016-02-03 01:38:32,146 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160203 01:38:32.253" starttime="20160203 01:38:32.249"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.258" starttime="20160203 01:38:32.257"></status>
</kw>
<msg timestamp="20160203 01:38:32.259" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160203 01:38:32.258" starttime="20160203 01:38:32.254"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.265" starttime="20160203 01:38:32.264"></status>
</kw>
<msg timestamp="20160203 01:38:32.265" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160203 01:38:32.265" starttime="20160203 01:38:32.259"></status>
</kw>
<msg timestamp="20160203 01:38:32.266" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160203 01:38:32.266" starttime="20160203 01:38:32.230"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:32.272" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160203 01:38:32.272" starttime="20160203 01:38:32.270"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.274" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:32.273" starttime="20160203 01:38:32.272"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.275" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:32.275" starttime="20160203 01:38:32.274"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.278" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:32.279" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:32.279" starttime="20160203 01:38:32.277"></status>
</kw>
<msg timestamp="20160203 01:38:32.280" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:32.280" level="INFO">${return_log_entry} = 2016-02-03 01:38:32,147 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 01:38:32.280" starttime="20160203 01:38:32.276"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.284" starttime="20160203 01:38:32.283"></status>
</kw>
<msg timestamp="20160203 01:38:32.285" level="INFO">${return_log_entry} = 2016-02-03 01:38:32,147 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 01:38:32.285" starttime="20160203 01:38:32.281"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.290" starttime="20160203 01:38:32.289"></status>
</kw>
<msg timestamp="20160203 01:38:32.290" level="INFO">${return_log_entry} = 2016-02-03 01:38:32,147 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 01:38:32.290" starttime="20160203 01:38:32.286"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.295" starttime="20160203 01:38:32.294"></status>
</kw>
<msg timestamp="20160203 01:38:32.296" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160203 01:38:32.295" starttime="20160203 01:38:32.291"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.302" starttime="20160203 01:38:32.302"></status>
</kw>
<msg timestamp="20160203 01:38:32.303" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160203 01:38:32.303" starttime="20160203 01:38:32.296"></status>
</kw>
<msg timestamp="20160203 01:38:32.304" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160203 01:38:32.304" starttime="20160203 01:38:32.267"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:32.310" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160203 01:38:32.309" starttime="20160203 01:38:32.308"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.312" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:32.311" starttime="20160203 01:38:32.310"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.313" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:32.313" starttime="20160203 01:38:32.312"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.316" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:32.316" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:32.317" starttime="20160203 01:38:32.315"></status>
</kw>
<msg timestamp="20160203 01:38:32.318" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:32.318" level="INFO">${return_log_entry} = 2016-02-03 01:38:32,149 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:38:32.317" starttime="20160203 01:38:32.314"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.322" starttime="20160203 01:38:32.321"></status>
</kw>
<msg timestamp="20160203 01:38:32.323" level="INFO">${return_log_entry} = 2016-02-03 01:38:32,149 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:38:32.323" starttime="20160203 01:38:32.319"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.327" starttime="20160203 01:38:32.326"></status>
</kw>
<msg timestamp="20160203 01:38:32.328" level="INFO">${return_log_entry} = 2016-02-03 01:38:32,149 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:38:32.328" starttime="20160203 01:38:32.324"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.332" starttime="20160203 01:38:32.331"></status>
</kw>
<msg timestamp="20160203 01:38:32.333" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160203 01:38:32.333" starttime="20160203 01:38:32.329"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.339" starttime="20160203 01:38:32.338"></status>
</kw>
<msg timestamp="20160203 01:38:32.340" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160203 01:38:32.340" starttime="20160203 01:38:32.334"></status>
</kw>
<msg timestamp="20160203 01:38:32.341" level="INFO">${currencyId} = 101000</msg>
<status status="PASS" endtime="20160203 01:38:32.341" starttime="20160203 01:38:32.305"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.346" starttime="20160203 01:38:32.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.347" starttime="20160203 01:38:32.346"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.348" starttime="20160203 01:38:32.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:38:32.354" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:38:32.354" starttime="20160203 01:38:32.352"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:32.355" starttime="20160203 01:38:32.352"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:32.355" starttime="20160203 01:38:32.349"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:32.356" starttime="20160203 01:38:32.342"></status>
</kw>
<msg timestamp="20160203 01:38:32.357" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160203 01:38:32.358" level="INFO">${accId} = 36984</msg>
<msg timestamp="20160203 01:38:32.358" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160203 01:38:32.358" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160203 01:38:32.359" level="INFO">${curr} = 101000</msg>
<status status="PASS" endtime="20160203 01:38:32.357" starttime="20160203 01:38:31.825"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.360" starttime="20160203 01:38:32.359"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.361" starttime="20160203 01:38:32.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:32.363" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160203 01:38:32.363" starttime="20160203 01:38:32.362"></status>
</kw>
<doc>Test will make a MOC call in NoAnswer case

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:38:32.364" starttime="20160203 01:38:25.197"></status>
</test>
<doc>Testing the prepaid MOC call - NoAnswer

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:38:32.368" starttime="20160203 01:38:20.749"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:38:32.375" starttime="20160203 01:38:20.734"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration" id="s1-s1-s1-s3-s1-s4" name="MOC PREPAID ONNET-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/MOC_PREPAID_ONNET-ShortDuration-robot-suite.txt" id="s1-s1-s1-s3-s1-s4-s1" name="MOC PREPAID ONNET-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160203 01:38:32.612" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:38:32.616" level="INFO">${date} = Wed Feb  3 01:38:32 CET 2016</msg>
<status status="PASS" endtime="20160203 01:38:32.615" starttime="20160203 01:38:32.605"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:32.617" level="INFO">Date and time: Wed Feb  3 01:38:32 CET 2016</msg>
<status status="PASS" endtime="20160203 01:38:32.618" starttime="20160203 01:38:32.616"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:32.619" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160203 01:38:32.620" starttime="20160203 01:38:32.618"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.645" starttime="20160203 01:38:32.644"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:32.703" starttime="20160203 01:38:32.649"></status>
</kw>
<msg timestamp="20160203 01:38:32.705" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20160203 01:38:32.704" starttime="20160203 01:38:32.645"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:38:32.716" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:38:33.178" level="INFO">Read output: Last login: Wed Feb  3 00:38:21 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:38:33.179" starttime="20160203 01:38:32.714"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:33.180" starttime="20160203 01:38:32.707"></status>
</kw>
<msg timestamp="20160203 01:38:33.182" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20160203 01:38:33.181" starttime="20160203 01:38:32.640"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:38:33.186" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:38:33.185" starttime="20160203 01:38:33.182"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:38:33.187" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160203 01:38:33.676" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:38:33.678" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:38:33.677" starttime="20160203 01:38:33.186"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:33.684" starttime="20160203 01:38:33.682"></status>
</kw>
<msg timestamp="20160203 01:38:33.686" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:38:33.687" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:38:33.685" starttime="20160203 01:38:33.679"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:33.696" starttime="20160203 01:38:33.694"></status>
</kw>
<msg timestamp="20160203 01:38:33.698" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:33.697" starttime="20160203 01:38:33.688"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160203 01:38:33.702" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:38:33.701" starttime="20160203 01:38:33.699"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:38:33.706" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:38:33.705" starttime="20160203 01:38:33.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:33.708" starttime="20160203 01:38:33.707"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:33.719" starttime="20160203 01:38:33.717"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:38:33.722" starttime="20160203 01:38:33.720"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:33.726" starttime="20160203 01:38:33.710"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:33.735" starttime="20160203 01:38:33.733"></status>
</kw>
<msg timestamp="20160203 01:38:33.736" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:38:33.736" starttime="20160203 01:38:33.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:33.739" starttime="20160203 01:38:33.737"></status>
</kw>
<msg timestamp="20160203 01:38:33.742" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160203 01:38:33.743" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:38:33.741" starttime="20160203 01:38:32.628"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:33.796" starttime="20160203 01:38:33.794"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:33.861" starttime="20160203 01:38:33.804"></status>
</kw>
<msg timestamp="20160203 01:38:33.862" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20160203 01:38:33.862" starttime="20160203 01:38:33.797"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:38:33.868" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:38:34.350" level="INFO">Read output: Last login: Wed Feb  3 00:38:22 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:38:34.350" starttime="20160203 01:38:33.866"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:34.351" starttime="20160203 01:38:33.863"></status>
</kw>
<msg timestamp="20160203 01:38:34.353" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20160203 01:38:34.352" starttime="20160203 01:38:33.785"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:38:34.357" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:38:34.357" starttime="20160203 01:38:34.354"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:38:34.358" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160203 01:38:34.794" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:38:34.795" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:38:34.795" starttime="20160203 01:38:34.357"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:34.798" starttime="20160203 01:38:34.797"></status>
</kw>
<msg timestamp="20160203 01:38:34.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:38:34.799" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:38:34.799" starttime="20160203 01:38:34.796"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:34.804" starttime="20160203 01:38:34.803"></status>
</kw>
<msg timestamp="20160203 01:38:34.804" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:34.804" starttime="20160203 01:38:34.800"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160203 01:38:34.806" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:38:34.806" starttime="20160203 01:38:34.805"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:38:34.808" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:38:34.808" starttime="20160203 01:38:34.807"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:34.809" starttime="20160203 01:38:34.808"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:34.814" starttime="20160203 01:38:34.813"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:38:34.818" starttime="20160203 01:38:34.815"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:34.819" starttime="20160203 01:38:34.810"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:34.823" starttime="20160203 01:38:34.822"></status>
</kw>
<msg timestamp="20160203 01:38:34.824" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:38:34.824" starttime="20160203 01:38:34.820"></status>
</kw>
<msg timestamp="20160203 01:38:34.826" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160203 01:38:34.826" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:38:34.825" starttime="20160203 01:38:33.760"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:34.850" starttime="20160203 01:38:34.849"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:34.900" starttime="20160203 01:38:34.854"></status>
</kw>
<msg timestamp="20160203 01:38:34.902" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20160203 01:38:34.902" starttime="20160203 01:38:34.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:38:34.907" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:38:35.379" level="INFO">Read output: Last login: Wed Feb  3 00:38:24 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:38:35.379" starttime="20160203 01:38:34.906"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:35.380" starttime="20160203 01:38:34.903"></status>
</kw>
<msg timestamp="20160203 01:38:35.382" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20160203 01:38:35.382" starttime="20160203 01:38:34.845"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:38:35.386" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:38:35.386" starttime="20160203 01:38:35.383"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:38:35.388" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160203 01:38:35.604" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:38:35.604" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:38:35.604" starttime="20160203 01:38:35.387"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:35.608" starttime="20160203 01:38:35.606"></status>
</kw>
<msg timestamp="20160203 01:38:35.608" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:38:35.609" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:38:35.608" starttime="20160203 01:38:35.605"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:35.613" starttime="20160203 01:38:35.612"></status>
</kw>
<msg timestamp="20160203 01:38:35.614" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:35.614" starttime="20160203 01:38:35.609"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:38:35.616" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:38:35.615" starttime="20160203 01:38:35.614"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:38:35.617" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:38:35.617" starttime="20160203 01:38:35.616"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:35.619" starttime="20160203 01:38:35.618"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:35.624" starttime="20160203 01:38:35.623"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:38:35.627" starttime="20160203 01:38:35.624"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:35.629" starttime="20160203 01:38:35.619"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:35.640" starttime="20160203 01:38:35.638"></status>
</kw>
<msg timestamp="20160203 01:38:35.642" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:38:35.641" starttime="20160203 01:38:35.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:35.645" starttime="20160203 01:38:35.643"></status>
</kw>
<msg timestamp="20160203 01:38:35.648" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160203 01:38:35.649" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:38:35.646" starttime="20160203 01:38:34.834"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:35.704" starttime="20160203 01:38:35.702"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:35.753" starttime="20160203 01:38:35.712"></status>
</kw>
<msg timestamp="20160203 01:38:35.754" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20160203 01:38:35.754" starttime="20160203 01:38:35.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:38:35.759" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:38:36.188" level="INFO">Read output: Last login: Wed Feb  3 00:38:24 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:38:36.189" starttime="20160203 01:38:35.758"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:36.190" starttime="20160203 01:38:35.755"></status>
</kw>
<msg timestamp="20160203 01:38:36.192" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20160203 01:38:36.191" starttime="20160203 01:38:35.692"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:38:36.196" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:38:36.195" starttime="20160203 01:38:36.193"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:38:36.197" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160203 01:38:36.297" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:38:36.298" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:38:36.297" starttime="20160203 01:38:36.196"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.301" starttime="20160203 01:38:36.300"></status>
</kw>
<msg timestamp="20160203 01:38:36.302" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:38:36.302" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:38:36.301" starttime="20160203 01:38:36.299"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.306" starttime="20160203 01:38:36.305"></status>
</kw>
<msg timestamp="20160203 01:38:36.307" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:36.307" starttime="20160203 01:38:36.302"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:38:36.309" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:38:36.308" starttime="20160203 01:38:36.307"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:38:36.310" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:38:36.310" starttime="20160203 01:38:36.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.312" starttime="20160203 01:38:36.311"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.317" starttime="20160203 01:38:36.316"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.319" starttime="20160203 01:38:36.317"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:36.320" starttime="20160203 01:38:36.312"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.324" starttime="20160203 01:38:36.323"></status>
</kw>
<msg timestamp="20160203 01:38:36.325" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:38:36.324" starttime="20160203 01:38:36.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.326" starttime="20160203 01:38:36.325"></status>
</kw>
<msg timestamp="20160203 01:38:36.328" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160203 01:38:36.328" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:38:36.327" starttime="20160203 01:38:35.666"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:36.329" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:38:36.330" starttime="20160203 01:38:36.328"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:36.332" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:38:36.332" starttime="20160203 01:38:36.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:36.334" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:38:36.334" starttime="20160203 01:38:36.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:36.336" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:38:36.336" starttime="20160203 01:38:36.334"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160203 01:38:36.338" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:36.339" starttime="20160203 01:38:36.337"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160203 01:38:36.340" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:36.341" starttime="20160203 01:38:36.339"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160203 01:38:36.342" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:36.342" starttime="20160203 01:38:36.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160203 01:38:36.344" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:36.344" starttime="20160203 01:38:36.343"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.350" starttime="20160203 01:38:36.347"></status>
</kw>
<msg timestamp="20160203 01:38:36.351" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:38:36.350" starttime="20160203 01:38:36.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160203 01:38:36.353" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:38:36.353" starttime="20160203 01:38:36.351"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:36.353" starttime="20160203 01:38:32.601"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s4-s1-t1" name="Run MOC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.359" starttime="20160203 01:38:36.358"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160203 01:38:36.361" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160203 01:38:36.360" starttime="20160203 01:38:36.360"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160203 01:38:36.367" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160203 01:38:36.368" starttime="20160203 01:38:36.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160203 01:38:36.369" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160203 01:38:36.369" starttime="20160203 01:38:36.368"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160203 01:38:36.371" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160203 01:38:36.371" starttime="20160203 01:38:36.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160203 01:38:36.372" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160203 01:38:36.373" starttime="20160203 01:38:36.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:38:36.374" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:36.374" starttime="20160203 01:38:36.373"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:38:36.376" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160203 01:38:36.376" starttime="20160203 01:38:36.375"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160203 01:38:36.377" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:36.378" starttime="20160203 01:38:36.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160203 01:38:36.379" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160203 01:38:36.380" starttime="20160203 01:38:36.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160203 01:38:36.381" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:38:36.381" starttime="20160203 01:38:36.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160203 01:38:36.383" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160203 01:38:36.383" starttime="20160203 01:38:36.382"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:36.389" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:36.390" starttime="20160203 01:38:36.388"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:36.390" starttime="20160203 01:38:36.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:36.393" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:36.393" starttime="20160203 01:38:36.392"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:36.394" starttime="20160203 01:38:36.391"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:36.396" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:36.397" starttime="20160203 01:38:36.395"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:36.397" starttime="20160203 01:38:36.394"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:36.398" starttime="20160203 01:38:36.384"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:38:36.400" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:38:36.400" starttime="20160203 01:38:36.398"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.402" starttime="20160203 01:38:36.401"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.403" starttime="20160203 01:38:36.402"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.405" starttime="20160203 01:38:36.404"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.406" starttime="20160203 01:38:36.405"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.407" starttime="20160203 01:38:36.406"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.409" starttime="20160203 01:38:36.408"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.410" starttime="20160203 01:38:36.409"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.412" starttime="20160203 01:38:36.411"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.414" starttime="20160203 01:38:36.412"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.415" starttime="20160203 01:38:36.414"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.417" starttime="20160203 01:38:36.416"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:36.418" starttime="20160203 01:38:36.417"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:38:36.420" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160203 01:38:38.988" level="INFO">01:38:38,985 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:38.989" starttime="20160203 01:38:36.420"></status>
</kw>
<msg timestamp="20160203 01:38:38.990" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:38.990" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:38:38.989" starttime="20160203 01:38:36.419"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:38.996" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:38:38.996" starttime="20160203 01:38:38.995"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:38.998" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:38.998" starttime="20160203 01:38:38.997"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:39.000" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:38.999" starttime="20160203 01:38:38.999"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:39.003" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:39.003" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:39.003" starttime="20160203 01:38:39.001"></status>
</kw>
<msg timestamp="20160203 01:38:39.004" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:39.005" level="INFO">${return_log_entry} = 2016-02-03 01:38:38,985 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:39.004" starttime="20160203 01:38:39.000"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:39.009" starttime="20160203 01:38:39.008"></status>
</kw>
<msg timestamp="20160203 01:38:39.010" level="INFO">${return_log_entry} = 2016-02-03 01:38:38,985 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:39.009" starttime="20160203 01:38:39.005"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:39.014" starttime="20160203 01:38:39.013"></status>
</kw>
<msg timestamp="20160203 01:38:39.015" level="INFO">${return_log_entry} = 2016-02-03 01:38:38,985 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:39.014" starttime="20160203 01:38:39.010"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:39.019" starttime="20160203 01:38:39.018"></status>
</kw>
<msg timestamp="20160203 01:38:39.020" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:39.020" starttime="20160203 01:38:39.015"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:39.026" starttime="20160203 01:38:39.026"></status>
</kw>
<msg timestamp="20160203 01:38:39.027" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:39.027" starttime="20160203 01:38:39.021"></status>
</kw>
<msg timestamp="20160203 01:38:39.029" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:39.028" starttime="20160203 01:38:38.991"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:39.033" starttime="20160203 01:38:39.033"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:39.035" starttime="20160203 01:38:39.034"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:39.036" starttime="20160203 01:38:39.035"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:38:39.042" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:38:39.042" starttime="20160203 01:38:39.040"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:39.043" starttime="20160203 01:38:39.039"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:39.043" starttime="20160203 01:38:39.036"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:39.043" starttime="20160203 01:38:39.029"></status>
</kw>
<msg timestamp="20160203 01:38:39.045" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160203 01:38:39.044" starttime="20160203 01:38:36.362"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160203 01:38:39.046" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:39.047" starttime="20160203 01:38:39.045"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:39.048" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160203 01:38:39.048" starttime="20160203 01:38:39.047"></status>
</kw>
<kw type="kw" name="${calling_int} = BuiltIn.Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<msg timestamp="20160203 01:38:39.050" level="INFO">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160203 01:38:39.051" level="INFO">${calling_int} = 525516001000</msg>
<status status="PASS" endtime="20160203 01:38:39.050" starttime="20160203 01:38:39.049"></status>
</kw>
<kw type="kw" name="${called_party} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${calling_int}+1</arg>
</arguments>
<msg timestamp="20160203 01:38:39.054" level="INFO">${called_party} = 525516001001</msg>
<status status="PASS" endtime="20160203 01:38:39.053" starttime="20160203 01:38:39.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:39.055" starttime="20160203 01:38:39.054"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${called_party}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160203 01:38:39.069" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160203 01:38:39.068" starttime="20160203 01:38:39.067"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160203 01:38:39.070" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160203 01:38:39.070" starttime="20160203 01:38:39.069"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160203 01:38:39.072" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20160203 01:38:39.072" starttime="20160203 01:38:39.071"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160203 01:38:39.074" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20160203 01:38:39.074" starttime="20160203 01:38:39.073"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:39.075" starttime="20160203 01:38:39.075"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:38:39.078" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:39.078" starttime="20160203 01:38:39.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:39.079" starttime="20160203 01:38:39.079"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160203 01:38:39.081" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:39.082" starttime="20160203 01:38:39.080"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:38:39.084" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:39.085" starttime="20160203 01:38:39.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:39.086" starttime="20160203 01:38:39.085"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160203 01:38:39.088" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:39.088" starttime="20160203 01:38:39.087"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160203 01:38:39.091" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:39.091" starttime="20160203 01:38:39.089"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:39.093" starttime="20160203 01:38:39.092"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160203 01:38:39.108" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:38:44.393" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:38:44.392" starttime="20160203 01:38:39.093"></status>
</kw>
<msg timestamp="20160203 01:38:44.395" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:38:44.394" starttime="20160203 01:38:39.062"></status>
</kw>
<msg timestamp="20160203 01:38:44.396" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:38:44.396" starttime="20160203 01:38:39.056"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:44.398" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160203 01:38:44.398" starttime="20160203 01:38:44.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.400" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:44.400" starttime="20160203 01:38:44.399"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.401" starttime="20160203 01:38:44.401"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.413" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:44.413" starttime="20160203 01:38:44.411"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:44.414" starttime="20160203 01:38:44.410"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.416" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:44.417" starttime="20160203 01:38:44.415"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:44.417" starttime="20160203 01:38:44.414"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.420" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:44.420" starttime="20160203 01:38:44.419"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:44.421" starttime="20160203 01:38:44.418"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:44.421" starttime="20160203 01:38:44.408"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.423" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:38:44.423" starttime="20160203 01:38:44.422"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.425" starttime="20160203 01:38:44.424"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.426" starttime="20160203 01:38:44.425"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.428" starttime="20160203 01:38:44.427"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.429" starttime="20160203 01:38:44.428"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.430" starttime="20160203 01:38:44.430"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.432" starttime="20160203 01:38:44.431"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:38:44.434" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000']</msg>
<msg timestamp="20160203 01:38:44.665" level="INFO">01:38:44,651 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:38:44,652 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:38:44,654 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36986
01:38:44,656 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000
01:38:44,657 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:38:44,659 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:38:44,660 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:38:44,662 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=3</msg>
<status status="PASS" endtime="20160203 01:38:44.665" starttime="20160203 01:38:44.433"></status>
</kw>
<msg timestamp="20160203 01:38:44.666" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:44.667" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:38:44.666" starttime="20160203 01:38:44.432"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:44.673" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:38:44.673" starttime="20160203 01:38:44.672"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.675" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:44.675" starttime="20160203 01:38:44.674"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.677" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:44.677" starttime="20160203 01:38:44.676"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.680" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:44.680" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:44.681" starttime="20160203 01:38:44.679"></status>
</kw>
<msg timestamp="20160203 01:38:44.681" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:44.682" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,651 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:44.681" starttime="20160203 01:38:44.678"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.686" starttime="20160203 01:38:44.685"></status>
</kw>
<msg timestamp="20160203 01:38:44.687" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,651 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:44.687" starttime="20160203 01:38:44.682"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.691" starttime="20160203 01:38:44.690"></status>
</kw>
<msg timestamp="20160203 01:38:44.692" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,651 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:44.692" starttime="20160203 01:38:44.688"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.696" starttime="20160203 01:38:44.695"></status>
</kw>
<msg timestamp="20160203 01:38:44.697" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:44.697" starttime="20160203 01:38:44.693"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.703" starttime="20160203 01:38:44.702"></status>
</kw>
<msg timestamp="20160203 01:38:44.704" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:44.703" starttime="20160203 01:38:44.698"></status>
</kw>
<msg timestamp="20160203 01:38:44.705" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:44.704" starttime="20160203 01:38:44.668"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:44.710" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160203 01:38:44.710" starttime="20160203 01:38:44.709"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.712" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:44.711" starttime="20160203 01:38:44.711"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.713" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:44.713" starttime="20160203 01:38:44.712"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.716" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:44.716" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:44.717" starttime="20160203 01:38:44.715"></status>
</kw>
<msg timestamp="20160203 01:38:44.717" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:44.718" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,652 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 01:38:44.717" starttime="20160203 01:38:44.714"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.722" starttime="20160203 01:38:44.721"></status>
</kw>
<msg timestamp="20160203 01:38:44.723" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,652 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 01:38:44.722" starttime="20160203 01:38:44.718"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.727" starttime="20160203 01:38:44.726"></status>
</kw>
<msg timestamp="20160203 01:38:44.727" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,652 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 01:38:44.727" starttime="20160203 01:38:44.723"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.732" starttime="20160203 01:38:44.731"></status>
</kw>
<msg timestamp="20160203 01:38:44.733" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160203 01:38:44.732" starttime="20160203 01:38:44.728"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.738" starttime="20160203 01:38:44.737"></status>
</kw>
<msg timestamp="20160203 01:38:44.739" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160203 01:38:44.739" starttime="20160203 01:38:44.733"></status>
</kw>
<msg timestamp="20160203 01:38:44.740" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160203 01:38:44.740" starttime="20160203 01:38:44.705"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:44.745" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160203 01:38:44.745" starttime="20160203 01:38:44.744"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.747" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:44.747" starttime="20160203 01:38:44.746"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.749" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:44.749" starttime="20160203 01:38:44.748"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.751" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:44.752" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:44.752" starttime="20160203 01:38:44.750"></status>
</kw>
<msg timestamp="20160203 01:38:44.753" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:44.753" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,656 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:44.753" starttime="20160203 01:38:44.749"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.757" starttime="20160203 01:38:44.756"></status>
</kw>
<msg timestamp="20160203 01:38:44.758" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,656 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:44.758" starttime="20160203 01:38:44.754"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.762" starttime="20160203 01:38:44.761"></status>
</kw>
<msg timestamp="20160203 01:38:44.763" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,656 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:44.762" starttime="20160203 01:38:44.759"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.767" starttime="20160203 01:38:44.766"></status>
</kw>
<msg timestamp="20160203 01:38:44.768" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:44.768" starttime="20160203 01:38:44.763"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.774" starttime="20160203 01:38:44.773"></status>
</kw>
<msg timestamp="20160203 01:38:44.775" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:44.774" starttime="20160203 01:38:44.769"></status>
</kw>
<msg timestamp="20160203 01:38:44.775" level="INFO">${imsi} = 334030880001000</msg>
<status status="PASS" endtime="20160203 01:38:44.775" starttime="20160203 01:38:44.741"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:44.781" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160203 01:38:44.781" starttime="20160203 01:38:44.780"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.783" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:44.782" starttime="20160203 01:38:44.782"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.784" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:44.784" starttime="20160203 01:38:44.783"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.787" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:44.788" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:44.788" starttime="20160203 01:38:44.786"></status>
</kw>
<msg timestamp="20160203 01:38:44.789" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:44.789" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,654 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36986</msg>
<status status="PASS" endtime="20160203 01:38:44.789" starttime="20160203 01:38:44.785"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.794" starttime="20160203 01:38:44.793"></status>
</kw>
<msg timestamp="20160203 01:38:44.794" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,654 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36986</msg>
<status status="PASS" endtime="20160203 01:38:44.794" starttime="20160203 01:38:44.790"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.799" starttime="20160203 01:38:44.798"></status>
</kw>
<msg timestamp="20160203 01:38:44.799" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,654 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=36986</msg>
<status status="PASS" endtime="20160203 01:38:44.799" starttime="20160203 01:38:44.795"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.804" starttime="20160203 01:38:44.803"></status>
</kw>
<msg timestamp="20160203 01:38:44.805" level="INFO">${resultCode} = 36986</msg>
<status status="PASS" endtime="20160203 01:38:44.804" starttime="20160203 01:38:44.800"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.811" starttime="20160203 01:38:44.810"></status>
</kw>
<msg timestamp="20160203 01:38:44.811" level="INFO">${resultCode} = 36986</msg>
<status status="PASS" endtime="20160203 01:38:44.811" starttime="20160203 01:38:44.805"></status>
</kw>
<msg timestamp="20160203 01:38:44.812" level="INFO">${id} = 36986</msg>
<status status="PASS" endtime="20160203 01:38:44.812" starttime="20160203 01:38:44.776"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:44.818" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160203 01:38:44.818" starttime="20160203 01:38:44.817"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.820" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:44.819" starttime="20160203 01:38:44.818"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.821" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:44.821" starttime="20160203 01:38:44.820"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.824" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:44.824" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:44.825" starttime="20160203 01:38:44.823"></status>
</kw>
<msg timestamp="20160203 01:38:44.826" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:44.826" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,657 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:44.825" starttime="20160203 01:38:44.822"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.830" starttime="20160203 01:38:44.829"></status>
</kw>
<msg timestamp="20160203 01:38:44.831" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,657 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:44.830" starttime="20160203 01:38:44.827"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.835" starttime="20160203 01:38:44.834"></status>
</kw>
<msg timestamp="20160203 01:38:44.836" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,657 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:44.835" starttime="20160203 01:38:44.831"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.840" starttime="20160203 01:38:44.839"></status>
</kw>
<msg timestamp="20160203 01:38:44.841" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:44.840" starttime="20160203 01:38:44.836"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.846" starttime="20160203 01:38:44.846"></status>
</kw>
<msg timestamp="20160203 01:38:44.847" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:44.847" starttime="20160203 01:38:44.841"></status>
</kw>
<msg timestamp="20160203 01:38:44.848" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160203 01:38:44.848" starttime="20160203 01:38:44.813"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:44.854" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160203 01:38:44.853" starttime="20160203 01:38:44.852"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.855" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:44.855" starttime="20160203 01:38:44.854"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.857" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:44.857" starttime="20160203 01:38:44.856"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.860" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:44.860" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:44.861" starttime="20160203 01:38:44.858"></status>
</kw>
<msg timestamp="20160203 01:38:44.861" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:44.861" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,659 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:38:44.861" starttime="20160203 01:38:44.857"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.866" starttime="20160203 01:38:44.865"></status>
</kw>
<msg timestamp="20160203 01:38:44.866" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,659 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:38:44.866" starttime="20160203 01:38:44.862"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.870" starttime="20160203 01:38:44.870"></status>
</kw>
<msg timestamp="20160203 01:38:44.871" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,659 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:38:44.871" starttime="20160203 01:38:44.867"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.876" starttime="20160203 01:38:44.874"></status>
</kw>
<msg timestamp="20160203 01:38:44.876" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160203 01:38:44.876" starttime="20160203 01:38:44.872"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.882" starttime="20160203 01:38:44.881"></status>
</kw>
<msg timestamp="20160203 01:38:44.883" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160203 01:38:44.883" starttime="20160203 01:38:44.877"></status>
</kw>
<msg timestamp="20160203 01:38:44.884" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160203 01:38:44.883" starttime="20160203 01:38:44.849"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:44.889" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160203 01:38:44.889" starttime="20160203 01:38:44.888"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.891" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:44.891" starttime="20160203 01:38:44.890"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.893" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:44.892" starttime="20160203 01:38:44.892"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.895" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:44.896" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:44.896" starttime="20160203 01:38:44.894"></status>
</kw>
<msg timestamp="20160203 01:38:44.897" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:44.897" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,660 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:44.897" starttime="20160203 01:38:44.893"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.902" starttime="20160203 01:38:44.901"></status>
</kw>
<msg timestamp="20160203 01:38:44.902" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,660 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:44.902" starttime="20160203 01:38:44.898"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.906" starttime="20160203 01:38:44.906"></status>
</kw>
<msg timestamp="20160203 01:38:44.907" level="INFO">${return_log_entry} = 2016-02-03 01:38:44,660 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:44.907" starttime="20160203 01:38:44.903"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.911" starttime="20160203 01:38:44.910"></status>
</kw>
<msg timestamp="20160203 01:38:44.912" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:44.912" starttime="20160203 01:38:44.908"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.918" starttime="20160203 01:38:44.917"></status>
</kw>
<msg timestamp="20160203 01:38:44.919" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:44.919" starttime="20160203 01:38:44.913"></status>
</kw>
<msg timestamp="20160203 01:38:44.920" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:44.920" starttime="20160203 01:38:44.885"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.925" starttime="20160203 01:38:44.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.926" starttime="20160203 01:38:44.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.927" starttime="20160203 01:38:44.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:38:44.933" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:38:44.933" starttime="20160203 01:38:44.931"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:44.934" starttime="20160203 01:38:44.931"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:44.934" starttime="20160203 01:38:44.928"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:44.934" starttime="20160203 01:38:44.921"></status>
</kw>
<msg timestamp="20160203 01:38:44.936" level="INFO">${rc} = OK</msg>
<msg timestamp="20160203 01:38:44.936" level="INFO">${provId} = 1</msg>
<msg timestamp="20160203 01:38:44.937" level="INFO">${imsi} = 334030880001000</msg>
<msg timestamp="20160203 01:38:44.937" level="INFO">${id} = 36986</msg>
<msg timestamp="20160203 01:38:44.937" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160203 01:38:44.937" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160203 01:38:44.938" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160203 01:38:44.936" starttime="20160203 01:38:44.403"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.948" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:44.949" starttime="20160203 01:38:44.947"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:44.949" starttime="20160203 01:38:44.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.952" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:44.952" starttime="20160203 01:38:44.951"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:44.953" starttime="20160203 01:38:44.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.955" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:38:44.955" starttime="20160203 01:38:44.954"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:44.956" starttime="20160203 01:38:44.953"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:44.956" starttime="20160203 01:38:44.943"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:38:44.958" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:38:44.958" starttime="20160203 01:38:44.957"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.960" starttime="20160203 01:38:44.959"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.961" starttime="20160203 01:38:44.960"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.963" starttime="20160203 01:38:44.962"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.964" starttime="20160203 01:38:44.963"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.965" starttime="20160203 01:38:44.964"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:44.967" starttime="20160203 01:38:44.966"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:38:44.969" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=36986']</msg>
<msg timestamp="20160203 01:38:45.115" level="INFO">01:38:45,106 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:38:45,108 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36987
01:38:45,110 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000
01:38:45,111 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:38:45,113 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:38:45.116" starttime="20160203 01:38:44.968"></status>
</kw>
<msg timestamp="20160203 01:38:45.117" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:45.118" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:38:45.117" starttime="20160203 01:38:44.967"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:45.123" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:38:45.123" starttime="20160203 01:38:45.122"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.125" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:45.125" starttime="20160203 01:38:45.124"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.127" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:45.126" starttime="20160203 01:38:45.126"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.129" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:45.130" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:45.130" starttime="20160203 01:38:45.128"></status>
</kw>
<msg timestamp="20160203 01:38:45.131" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:45.131" level="INFO">${return_log_entry} = 2016-02-03 01:38:45,106 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:45.131" starttime="20160203 01:38:45.127"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.135" starttime="20160203 01:38:45.135"></status>
</kw>
<msg timestamp="20160203 01:38:45.136" level="INFO">${return_log_entry} = 2016-02-03 01:38:45,106 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:45.136" starttime="20160203 01:38:45.132"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.140" starttime="20160203 01:38:45.139"></status>
</kw>
<msg timestamp="20160203 01:38:45.141" level="INFO">${return_log_entry} = 2016-02-03 01:38:45,106 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:38:45.141" starttime="20160203 01:38:45.137"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.145" starttime="20160203 01:38:45.144"></status>
</kw>
<msg timestamp="20160203 01:38:45.146" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:45.146" starttime="20160203 01:38:45.142"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.152" starttime="20160203 01:38:45.151"></status>
</kw>
<msg timestamp="20160203 01:38:45.153" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:45.152" starttime="20160203 01:38:45.147"></status>
</kw>
<msg timestamp="20160203 01:38:45.154" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:38:45.153" starttime="20160203 01:38:45.119"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:45.159" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160203 01:38:45.159" starttime="20160203 01:38:45.158"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.161" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:45.161" starttime="20160203 01:38:45.160"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.163" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:45.162" starttime="20160203 01:38:45.161"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.165" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:45.166" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:45.166" starttime="20160203 01:38:45.164"></status>
</kw>
<msg timestamp="20160203 01:38:45.167" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:45.167" level="INFO">${return_log_entry} = 2016-02-03 01:38:45,108 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36987</msg>
<status status="PASS" endtime="20160203 01:38:45.167" starttime="20160203 01:38:45.163"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.172" starttime="20160203 01:38:45.171"></status>
</kw>
<msg timestamp="20160203 01:38:45.172" level="INFO">${return_log_entry} = 2016-02-03 01:38:45,108 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36987</msg>
<status status="PASS" endtime="20160203 01:38:45.172" starttime="20160203 01:38:45.168"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.176" starttime="20160203 01:38:45.176"></status>
</kw>
<msg timestamp="20160203 01:38:45.177" level="INFO">${return_log_entry} = 2016-02-03 01:38:45,108 INFO  [log] LowLevelOps.getMainAccount.output.accountId=36987</msg>
<status status="PASS" endtime="20160203 01:38:45.177" starttime="20160203 01:38:45.173"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.181" starttime="20160203 01:38:45.180"></status>
</kw>
<msg timestamp="20160203 01:38:45.182" level="INFO">${resultCode} = 36987</msg>
<status status="PASS" endtime="20160203 01:38:45.182" starttime="20160203 01:38:45.178"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.188" starttime="20160203 01:38:45.187"></status>
</kw>
<msg timestamp="20160203 01:38:45.189" level="INFO">${resultCode} = 36987</msg>
<status status="PASS" endtime="20160203 01:38:45.188" starttime="20160203 01:38:45.183"></status>
</kw>
<msg timestamp="20160203 01:38:45.190" level="INFO">${accountId} = 36987</msg>
<status status="PASS" endtime="20160203 01:38:45.189" starttime="20160203 01:38:45.155"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:45.195" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160203 01:38:45.195" starttime="20160203 01:38:45.194"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.197" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:45.197" starttime="20160203 01:38:45.196"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.199" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:45.198" starttime="20160203 01:38:45.198"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.201" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:45.202" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:45.202" starttime="20160203 01:38:45.200"></status>
</kw>
<msg timestamp="20160203 01:38:45.203" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:45.203" level="INFO">${return_log_entry} = 2016-02-03 01:38:45,110 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000</msg>
<status status="PASS" endtime="20160203 01:38:45.203" starttime="20160203 01:38:45.199"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.207" starttime="20160203 01:38:45.207"></status>
</kw>
<msg timestamp="20160203 01:38:45.208" level="INFO">${return_log_entry} = 2016-02-03 01:38:45,110 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000</msg>
<status status="PASS" endtime="20160203 01:38:45.208" starttime="20160203 01:38:45.204"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.212" starttime="20160203 01:38:45.211"></status>
</kw>
<msg timestamp="20160203 01:38:45.213" level="INFO">${return_log_entry} = 2016-02-03 01:38:45,110 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000</msg>
<status status="PASS" endtime="20160203 01:38:45.213" starttime="20160203 01:38:45.209"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.217" starttime="20160203 01:38:45.216"></status>
</kw>
<msg timestamp="20160203 01:38:45.218" level="INFO">${resultCode} = 8000000</msg>
<status status="PASS" endtime="20160203 01:38:45.218" starttime="20160203 01:38:45.214"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.224" starttime="20160203 01:38:45.223"></status>
</kw>
<msg timestamp="20160203 01:38:45.225" level="INFO">${resultCode} = 8000000</msg>
<status status="PASS" endtime="20160203 01:38:45.224" starttime="20160203 01:38:45.219"></status>
</kw>
<msg timestamp="20160203 01:38:45.226" level="INFO">${balance} = 8000000</msg>
<status status="PASS" endtime="20160203 01:38:45.225" starttime="20160203 01:38:45.191"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:45.231" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160203 01:38:45.231" starttime="20160203 01:38:45.230"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.233" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:45.233" starttime="20160203 01:38:45.232"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.235" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:45.234" starttime="20160203 01:38:45.234"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.237" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:45.238" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:45.238" starttime="20160203 01:38:45.236"></status>
</kw>
<msg timestamp="20160203 01:38:45.239" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:45.239" level="INFO">${return_log_entry} = 2016-02-03 01:38:45,111 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 01:38:45.239" starttime="20160203 01:38:45.235"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.243" starttime="20160203 01:38:45.242"></status>
</kw>
<msg timestamp="20160203 01:38:45.244" level="INFO">${return_log_entry} = 2016-02-03 01:38:45,111 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 01:38:45.244" starttime="20160203 01:38:45.240"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.248" starttime="20160203 01:38:45.247"></status>
</kw>
<msg timestamp="20160203 01:38:45.249" level="INFO">${return_log_entry} = 2016-02-03 01:38:45,111 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 01:38:45.249" starttime="20160203 01:38:45.245"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.253" starttime="20160203 01:38:45.252"></status>
</kw>
<msg timestamp="20160203 01:38:45.254" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160203 01:38:45.254" starttime="20160203 01:38:45.249"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.260" starttime="20160203 01:38:45.259"></status>
</kw>
<msg timestamp="20160203 01:38:45.261" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160203 01:38:45.260" starttime="20160203 01:38:45.255"></status>
</kw>
<msg timestamp="20160203 01:38:45.262" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160203 01:38:45.261" starttime="20160203 01:38:45.227"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:38:45.267" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160203 01:38:45.267" starttime="20160203 01:38:45.266"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.269" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:38:45.268" starttime="20160203 01:38:45.268"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.270" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:38:45.270" starttime="20160203 01:38:45.269"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.273" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:38:45.273" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 01:38:45.274" starttime="20160203 01:38:45.272"></status>
</kw>
<msg timestamp="20160203 01:38:45.275" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:38:45.275" level="INFO">${return_log_entry} = 2016-02-03 01:38:45,113 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:38:45.274" starttime="20160203 01:38:45.271"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.279" starttime="20160203 01:38:45.278"></status>
</kw>
<msg timestamp="20160203 01:38:45.280" level="INFO">${return_log_entry} = 2016-02-03 01:38:45,113 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:38:45.279" starttime="20160203 01:38:45.275"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.284" starttime="20160203 01:38:45.283"></status>
</kw>
<msg timestamp="20160203 01:38:45.285" level="INFO">${return_log_entry} = 2016-02-03 01:38:45,113 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 01:38:45.284" starttime="20160203 01:38:45.280"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.289" starttime="20160203 01:38:45.288"></status>
</kw>
<msg timestamp="20160203 01:38:45.290" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160203 01:38:45.290" starttime="20160203 01:38:45.285"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.296" starttime="20160203 01:38:45.295"></status>
</kw>
<msg timestamp="20160203 01:38:45.296" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160203 01:38:45.296" starttime="20160203 01:38:45.290"></status>
</kw>
<msg timestamp="20160203 01:38:45.297" level="INFO">${currencyId} = 101000</msg>
<status status="PASS" endtime="20160203 01:38:45.297" starttime="20160203 01:38:45.262"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.302" starttime="20160203 01:38:45.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.303" starttime="20160203 01:38:45.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.305" starttime="20160203 01:38:45.304"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:38:45.310" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:38:45.311" starttime="20160203 01:38:45.309"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:45.311" starttime="20160203 01:38:45.308"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:45.311" starttime="20160203 01:38:45.305"></status>
</kw>
<status status="PASS" endtime="20160203 01:38:45.312" starttime="20160203 01:38:45.298"></status>
</kw>
<msg timestamp="20160203 01:38:45.314" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160203 01:38:45.314" level="INFO">${accId} = 36987</msg>
<msg timestamp="20160203 01:38:45.314" level="INFO">${bal} = 8000000</msg>
<msg timestamp="20160203 01:38:45.315" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160203 01:38:45.315" level="INFO">${curr} = 101000</msg>
<status status="PASS" endtime="20160203 01:38:45.313" starttime="20160203 01:38:44.939"></status>
</kw>
<kw type="kw" name="${target_bal} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<msg timestamp="20160203 01:38:45.318" level="INFO">${target_bal} = 8000000</msg>
<status status="PASS" endtime="20160203 01:38:45.318" starttime="20160203 01:38:45.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<msg timestamp="20160203 01:38:45.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:38:45.321" starttime="20160203 01:38:45.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check OK!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:45.322" level="INFO">Account balance check OK!</msg>
<status status="PASS" endtime="20160203 01:38:45.322" starttime="20160203 01:38:45.321"></status>
</kw>
<doc>Test will make a MOC call, duration 1s.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:38:45.323" starttime="20160203 01:38:36.354"></status>
</test>
<doc>Testing the prepaid MOC call, duration is 1s - shorter than one slice (less than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:38:45.327" starttime="20160203 01:38:32.395"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:38:45.334" starttime="20160203 01:38:32.379"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:38:45.346" starttime="20160203 01:37:27.679"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:38:45.367" starttime="20160203 01:37:27.661"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC" id="s1-s1-s1-s4" name="MTC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon" id="s1-s1-s1-s4-s1" name="MTC PREPAID-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon/MTC_PREPAID-Abandon-robot-suite.txt" id="s1-s1-s1-s4-s1-s1" name="MTC PREPAID-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160203 01:38:45.547" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:38:45.551" level="INFO">${date} = Wed Feb  3 01:38:45 CET 2016</msg>
<status status="PASS" endtime="20160203 01:38:45.550" starttime="20160203 01:38:45.542"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:45.555" level="INFO">Date and time: Wed Feb  3 01:38:45 CET 2016</msg>
<status status="PASS" endtime="20160203 01:38:45.556" starttime="20160203 01:38:45.552"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:45.559" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160203 01:38:45.560" starttime="20160203 01:38:45.557"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:45.613" starttime="20160203 01:38:45.611"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:46.037" starttime="20160203 01:38:45.621"></status>
</kw>
<msg timestamp="20160203 01:38:46.039" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20160203 01:38:46.039" starttime="20160203 01:38:45.614"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:38:46.045" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:38:55.988" level="FAIL">No match found for '$' in 3 seconds
Output:
Last login: Wed Feb  3 00:38:32 2016 from 10.105.101.196
.</msg>
<status status="FAIL" endtime="20160203 01:38:55.990" starttime="20160203 01:38:46.044"></status>
</kw>
<status status="FAIL" endtime="20160203 01:38:55.991" starttime="20160203 01:38:46.040"></status>
</kw>
<status status="FAIL" endtime="20160203 01:38:55.992" starttime="20160203 01:38:45.603"></status>
</kw>
<status status="FAIL" endtime="20160203 01:38:55.993" starttime="20160203 01:38:45.577"></status>
</kw>
<status status="FAIL" endtime="20160203 01:38:55.994" starttime="20160203 01:38:45.539"></status>
</kw>
<test id="s1-s1-s1-s4-s1-s1-t1" name="Run MTC Abandon Call">
<doc>Test will make an abandoned MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160203 01:38:55.999" starttime="20160203 01:38:55.995">Parent suite setup failed:
No match found for '$' in 3 seconds
Output:
Last login: Wed Feb  3 00:38:32 2016 from 10.105.101.196
.</status>
</test>
<doc>Testing the abandoned MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160203 01:38:56.002" starttime="20160203 01:38:45.409">Suite setup failed:
No match found for '$' in 3 seconds
Output:
Last login: Wed Feb  3 00:38:32 2016 from 10.105.101.196
.</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160203 01:38:56.006" starttime="20160203 01:38:45.395"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy" id="s1-s1-s1-s4-s2" name="MTC PREPAID-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy/MTC_PREPAID-Busy-robot-suite.txt" id="s1-s1-s1-s4-s2-s1" name="MTC PREPAID-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160203 01:38:56.164" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:38:56.171" level="INFO">${date} = Wed Feb  3 01:38:56 CET 2016</msg>
<status status="PASS" endtime="20160203 01:38:56.170" starttime="20160203 01:38:56.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:56.174" level="INFO">Date and time: Wed Feb  3 01:38:56 CET 2016</msg>
<status status="PASS" endtime="20160203 01:38:56.175" starttime="20160203 01:38:56.172"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:38:56.179" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160203 01:38:56.180" starttime="20160203 01:38:56.177"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:56.233" starttime="20160203 01:38:56.231"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:38:56.728" starttime="20160203 01:38:56.241"></status>
</kw>
<msg timestamp="20160203 01:38:56.730" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20160203 01:38:56.729" starttime="20160203 01:38:56.234"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:38:56.735" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:39:03.216" level="FAIL">No match found for '$' in 3 seconds
Output:
Last login: Wed Feb  3 00:38:55 2016 from 10.105.101.196
id: cannot find name for group ID 20007
.</msg>
<status status="FAIL" endtime="20160203 01:39:03.217" starttime="20160203 01:38:56.734"></status>
</kw>
<status status="FAIL" endtime="20160203 01:39:03.218" starttime="20160203 01:38:56.730"></status>
</kw>
<status status="FAIL" endtime="20160203 01:39:03.219" starttime="20160203 01:38:56.222"></status>
</kw>
<status status="FAIL" endtime="20160203 01:39:03.220" starttime="20160203 01:38:56.197"></status>
</kw>
<status status="FAIL" endtime="20160203 01:39:03.221" starttime="20160203 01:38:56.157"></status>
</kw>
<test id="s1-s1-s1-s4-s2-s1-t1" name="Run MTC Busy Call">
<doc>Test will make a busy MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160203 01:39:03.226" starttime="20160203 01:39:03.223">Parent suite setup failed:
No match found for '$' in 3 seconds
Output:
Last login: Wed Feb  3 00:38:55 2016 from 10.105.101.196
id: cannot find name for group ID 20007
.</status>
</test>
<doc>Testing the prepaid busy MTC call (called party is busy)

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160203 01:39:03.229" starttime="20160203 01:38:56.024">Suite setup failed:
No match found for '$' in 3 seconds
Output:
Last login: Wed Feb  3 00:38:55 2016 from 10.105.101.196
id: cannot find name for group ID 20007
.</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160203 01:39:03.233" starttime="20160203 01:38:56.008"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer" id="s1-s1-s1-s4-s3" name="MTC PREPAID-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer/MTC_PREPAID-NoAnswer-robot-suite.txt" id="s1-s1-s1-s4-s3-s1" name="MTC PREPAID-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160203 01:39:03.364" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:39:03.368" level="INFO">${date} = Wed Feb  3 01:39:03 CET 2016</msg>
<status status="PASS" endtime="20160203 01:39:03.367" starttime="20160203 01:39:03.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:03.372" level="INFO">Date and time: Wed Feb  3 01:39:03 CET 2016</msg>
<status status="PASS" endtime="20160203 01:39:03.373" starttime="20160203 01:39:03.369"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:03.376" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160203 01:39:03.377" starttime="20160203 01:39:03.374"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:03.428" starttime="20160203 01:39:03.427"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:04.337" starttime="20160203 01:39:03.437"></status>
</kw>
<msg timestamp="20160203 01:39:04.341" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20160203 01:39:04.339" starttime="20160203 01:39:03.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:39:04.351" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:39:07.583" level="INFO">Read output: Last login: Wed Feb  3 00:39:00 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:39:07.584" starttime="20160203 01:39:04.349"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:07.585" starttime="20160203 01:39:04.342"></status>
</kw>
<msg timestamp="20160203 01:39:07.587" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20160203 01:39:07.586" starttime="20160203 01:39:03.418"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:39:07.591" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:39:07.591" starttime="20160203 01:39:07.587"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:39:07.593" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160203 01:39:16.686" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:39:16.690" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:39:16.688" starttime="20160203 01:39:07.592"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:16.696" starttime="20160203 01:39:16.693"></status>
</kw>
<msg timestamp="20160203 01:39:16.698" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:39:16.698" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:39:16.697" starttime="20160203 01:39:16.691"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:16.707" starttime="20160203 01:39:16.706"></status>
</kw>
<msg timestamp="20160203 01:39:16.709" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:16.708" starttime="20160203 01:39:16.700"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160203 01:39:16.713" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:39:16.712" starttime="20160203 01:39:16.710"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:39:16.716" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:39:16.716" starttime="20160203 01:39:16.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:16.719" starttime="20160203 01:39:16.718"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:16.729" starttime="20160203 01:39:16.727"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:39:16.735" starttime="20160203 01:39:16.731"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:16.739" starttime="20160203 01:39:16.721"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:16.749" starttime="20160203 01:39:16.747"></status>
</kw>
<msg timestamp="20160203 01:39:16.750" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:39:16.750" starttime="20160203 01:39:16.742"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:16.753" starttime="20160203 01:39:16.751"></status>
</kw>
<msg timestamp="20160203 01:39:16.756" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160203 01:39:16.757" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:39:16.755" starttime="20160203 01:39:03.393"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:16.810" starttime="20160203 01:39:16.808"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:16.876" starttime="20160203 01:39:16.818"></status>
</kw>
<msg timestamp="20160203 01:39:16.878" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20160203 01:39:16.877" starttime="20160203 01:39:16.811"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:39:16.888" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:39:17.411" level="INFO">Read output: Last login: Wed Feb  3 00:38:34 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:39:17.412" starttime="20160203 01:39:16.886"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:17.412" starttime="20160203 01:39:16.879"></status>
</kw>
<msg timestamp="20160203 01:39:17.414" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20160203 01:39:17.414" starttime="20160203 01:39:16.799"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:39:17.419" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:39:17.418" starttime="20160203 01:39:17.415"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:39:17.420" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160203 01:39:17.893" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:39:17.894" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:39:17.894" starttime="20160203 01:39:17.419"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:17.898" starttime="20160203 01:39:17.896"></status>
</kw>
<msg timestamp="20160203 01:39:17.898" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:39:17.899" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:39:17.898" starttime="20160203 01:39:17.895"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:17.903" starttime="20160203 01:39:17.902"></status>
</kw>
<msg timestamp="20160203 01:39:17.903" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:17.903" starttime="20160203 01:39:17.899"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160203 01:39:17.905" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:39:17.905" starttime="20160203 01:39:17.904"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:39:17.907" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:39:17.907" starttime="20160203 01:39:17.906"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:17.908" starttime="20160203 01:39:17.907"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:17.913" starttime="20160203 01:39:17.912"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:39:17.915" starttime="20160203 01:39:17.914"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:17.916" starttime="20160203 01:39:17.909"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:17.922" starttime="20160203 01:39:17.921"></status>
</kw>
<msg timestamp="20160203 01:39:17.923" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:39:17.922" starttime="20160203 01:39:17.918"></status>
</kw>
<msg timestamp="20160203 01:39:17.924" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160203 01:39:17.924" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:39:17.923" starttime="20160203 01:39:16.774"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:17.948" starttime="20160203 01:39:17.947"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:18.072" starttime="20160203 01:39:17.952"></status>
</kw>
<msg timestamp="20160203 01:39:18.077" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20160203 01:39:18.075" starttime="20160203 01:39:17.949"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:39:18.087" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:39:19.422" level="INFO">Read output: Last login: Wed Feb  3 00:38:35 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:39:19.423" starttime="20160203 01:39:18.085"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:19.424" starttime="20160203 01:39:18.078"></status>
</kw>
<msg timestamp="20160203 01:39:19.426" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20160203 01:39:19.425" starttime="20160203 01:39:17.943"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:39:19.430" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:39:19.430" starttime="20160203 01:39:19.427"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:39:19.432" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160203 01:39:20.192" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:39:20.193" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:39:20.192" starttime="20160203 01:39:19.431"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.196" starttime="20160203 01:39:20.195"></status>
</kw>
<msg timestamp="20160203 01:39:20.197" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:39:20.197" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:39:20.197" starttime="20160203 01:39:20.194"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.201" starttime="20160203 01:39:20.201"></status>
</kw>
<msg timestamp="20160203 01:39:20.202" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:20.202" starttime="20160203 01:39:20.198"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:39:20.204" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:39:20.203" starttime="20160203 01:39:20.203"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:39:20.205" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:39:20.205" starttime="20160203 01:39:20.204"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.207" starttime="20160203 01:39:20.206"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.212" starttime="20160203 01:39:20.211"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.213" starttime="20160203 01:39:20.212"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:20.214" starttime="20160203 01:39:20.208"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.219" starttime="20160203 01:39:20.218"></status>
</kw>
<msg timestamp="20160203 01:39:20.219" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:39:20.219" starttime="20160203 01:39:20.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.221" starttime="20160203 01:39:20.220"></status>
</kw>
<msg timestamp="20160203 01:39:20.222" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160203 01:39:20.222" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:39:20.221" starttime="20160203 01:39:17.932"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.251" starttime="20160203 01:39:20.250"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.305" starttime="20160203 01:39:20.254"></status>
</kw>
<msg timestamp="20160203 01:39:20.307" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20160203 01:39:20.307" starttime="20160203 01:39:20.251"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:39:20.318" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:39:20.822" level="INFO">Read output: Last login: Wed Feb  3 00:38:35 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:39:20.823" starttime="20160203 01:39:20.316"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:20.824" starttime="20160203 01:39:20.309"></status>
</kw>
<msg timestamp="20160203 01:39:20.825" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20160203 01:39:20.825" starttime="20160203 01:39:20.245"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:39:20.830" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:39:20.829" starttime="20160203 01:39:20.826"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:39:20.832" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160203 01:39:20.921" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:39:20.923" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:39:20.922" starttime="20160203 01:39:20.831"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.929" starttime="20160203 01:39:20.926"></status>
</kw>
<msg timestamp="20160203 01:39:20.931" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:39:20.931" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:39:20.930" starttime="20160203 01:39:20.924"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.940" starttime="20160203 01:39:20.938"></status>
</kw>
<msg timestamp="20160203 01:39:20.941" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:20.941" starttime="20160203 01:39:20.933"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:39:20.945" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:39:20.945" starttime="20160203 01:39:20.943"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:39:20.949" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:39:20.948" starttime="20160203 01:39:20.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.952" starttime="20160203 01:39:20.950"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.962" starttime="20160203 01:39:20.960"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.968" starttime="20160203 01:39:20.964"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:20.969" starttime="20160203 01:39:20.953"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.978" starttime="20160203 01:39:20.975"></status>
</kw>
<msg timestamp="20160203 01:39:20.979" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:39:20.978" starttime="20160203 01:39:20.970"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:20.982" starttime="20160203 01:39:20.980"></status>
</kw>
<msg timestamp="20160203 01:39:20.984" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160203 01:39:20.985" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:39:20.984" starttime="20160203 01:39:20.230"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:20.988" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:39:20.989" starttime="20160203 01:39:20.986"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:20.993" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:39:20.993" starttime="20160203 01:39:20.990"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:20.997" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:39:20.998" starttime="20160203 01:39:20.995"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:21.001" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:39:21.002" starttime="20160203 01:39:20.999"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160203 01:39:21.006" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:39:21.007" starttime="20160203 01:39:21.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160203 01:39:21.011" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:39:21.011" starttime="20160203 01:39:21.009"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160203 01:39:21.015" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:39:21.016" starttime="20160203 01:39:21.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160203 01:39:21.019" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:39:21.020" starttime="20160203 01:39:21.017"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:21.032" starttime="20160203 01:39:21.027"></status>
</kw>
<msg timestamp="20160203 01:39:21.034" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:39:21.033" starttime="20160203 01:39:21.021"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160203 01:39:21.038" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:39:21.039" starttime="20160203 01:39:21.035"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:21.039" starttime="20160203 01:39:03.358"></status>
</kw>
<test id="s1-s1-s1-s4-s3-s1-t1" name="Run MTC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:21.045" starttime="20160203 01:39:21.044"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160203 01:39:21.046" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160203 01:39:21.046" starttime="20160203 01:39:21.045"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160203 01:39:21.053" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160203 01:39:21.053" starttime="20160203 01:39:21.052"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160203 01:39:21.054" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160203 01:39:21.055" starttime="20160203 01:39:21.053"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160203 01:39:21.056" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160203 01:39:21.056" starttime="20160203 01:39:21.055"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160203 01:39:21.058" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160203 01:39:21.058" starttime="20160203 01:39:21.057"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:39:21.059" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160203 01:39:21.060" starttime="20160203 01:39:21.058"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:39:21.061" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160203 01:39:21.061" starttime="20160203 01:39:21.060"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160203 01:39:21.063" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:39:21.063" starttime="20160203 01:39:21.062"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160203 01:39:21.064" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160203 01:39:21.065" starttime="20160203 01:39:21.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160203 01:39:21.066" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:39:21.066" starttime="20160203 01:39:21.065"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160203 01:39:21.068" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160203 01:39:21.068" starttime="20160203 01:39:21.067"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:39:21.074" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:21.075" starttime="20160203 01:39:21.073"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:21.075" starttime="20160203 01:39:21.072"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:39:21.078" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:21.078" starttime="20160203 01:39:21.076"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:21.078" starttime="20160203 01:39:21.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:39:21.081" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:21.081" starttime="20160203 01:39:21.080"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:21.082" starttime="20160203 01:39:21.079"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:21.082" starttime="20160203 01:39:21.069"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:39:21.084" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:39:21.084" starttime="20160203 01:39:21.083"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:21.086" starttime="20160203 01:39:21.085"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:21.087" starttime="20160203 01:39:21.086"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:21.089" starttime="20160203 01:39:21.088"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:21.090" starttime="20160203 01:39:21.089"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:21.091" starttime="20160203 01:39:21.091"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:21.093" starttime="20160203 01:39:21.092"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:21.094" starttime="20160203 01:39:21.093"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:21.096" starttime="20160203 01:39:21.095"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:21.097" starttime="20160203 01:39:21.096"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:21.099" starttime="20160203 01:39:21.098"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:21.100" starttime="20160203 01:39:21.099"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:21.102" starttime="20160203 01:39:21.101"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:39:21.104" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160203 01:39:26.847" level="INFO">01:39:26,841 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:39:26.848" starttime="20160203 01:39:21.103"></status>
</kw>
<msg timestamp="20160203 01:39:26.852" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:39:26.853" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:39:26.850" starttime="20160203 01:39:21.102"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:39:26.866" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:39:26.865" starttime="20160203 01:39:26.863"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:39:26.870" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:39:26.869" starttime="20160203 01:39:26.867"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:39:26.873" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:39:26.872" starttime="20160203 01:39:26.871"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:39:26.879" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:39:26.880" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160203 01:39:26.881" starttime="20160203 01:39:26.876"></status>
</kw>
<msg timestamp="20160203 01:39:26.882" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:39:26.883" level="INFO">${return_log_entry} = 2016-02-03 01:39:26,841 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:39:26.882" starttime="20160203 01:39:26.874"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:26.893" starttime="20160203 01:39:26.891"></status>
</kw>
<msg timestamp="20160203 01:39:26.894" level="INFO">${return_log_entry} = 2016-02-03 01:39:26,841 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:39:26.894" starttime="20160203 01:39:26.884"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:26.903" starttime="20160203 01:39:26.901"></status>
</kw>
<msg timestamp="20160203 01:39:26.905" level="INFO">${return_log_entry} = 2016-02-03 01:39:26,841 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:39:26.904" starttime="20160203 01:39:26.895"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:26.914" starttime="20160203 01:39:26.912"></status>
</kw>
<msg timestamp="20160203 01:39:26.916" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:26.915" starttime="20160203 01:39:26.906"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:26.929" starttime="20160203 01:39:26.927"></status>
</kw>
<msg timestamp="20160203 01:39:26.930" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:26.929" starttime="20160203 01:39:26.917"></status>
</kw>
<msg timestamp="20160203 01:39:26.932" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:26.932" starttime="20160203 01:39:26.856"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:26.942" starttime="20160203 01:39:26.940"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:26.945" starttime="20160203 01:39:26.943"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:26.947" starttime="20160203 01:39:26.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:39:26.959" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:39:26.960" starttime="20160203 01:39:26.956"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:26.961" starttime="20160203 01:39:26.954"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:26.962" starttime="20160203 01:39:26.948"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:26.963" starttime="20160203 01:39:26.934"></status>
</kw>
<msg timestamp="20160203 01:39:26.966" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160203 01:39:26.964" starttime="20160203 01:39:21.047"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160203 01:39:26.972" level="INFO">${calling_party_msisdn} = 525516001001</msg>
<status status="PASS" endtime="20160203 01:39:26.971" starttime="20160203 01:39:26.967"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160203 01:39:26.975" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:39:26.976" starttime="20160203 01:39:26.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:26.978" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160203 01:39:26.979" starttime="20160203 01:39:26.977"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:26.982" starttime="20160203 01:39:26.980"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:26.984" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160203 01:39:26.985" starttime="20160203 01:39:26.983"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC NoAnswer">
<doc>Runs a noAnswer non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-noanswer</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160203 01:39:27.014" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20160203 01:39:27.013" starttime="20160203 01:39:27.011"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160203 01:39:27.018" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20160203 01:39:27.017" starttime="20160203 01:39:27.015"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160203 01:39:27.022" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20160203 01:39:27.021" starttime="20160203 01:39:27.019"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160203 01:39:27.026" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs</msg>
<status status="PASS" endtime="20160203 01:39:27.025" starttime="20160203 01:39:27.023"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:27.028" starttime="20160203 01:39:27.027"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:39:27.034" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:27.035" starttime="20160203 01:39:27.029"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:27.037" starttime="20160203 01:39:27.036"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160203 01:39:27.040" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:27.040" starttime="20160203 01:39:27.039"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:39:27.043" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:27.043" starttime="20160203 01:39:27.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:27.044" starttime="20160203 01:39:27.044"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160203 01:39:27.046" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:27.047" starttime="20160203 01:39:27.045"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160203 01:39:27.049" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:27.050" starttime="20160203 01:39:27.047"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:27.051" starttime="20160203 01:39:27.050"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160203 01:39:27.058" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:39:36.070" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:39:36.067" starttime="20160203 01:39:27.051"></status>
</kw>
<msg timestamp="20160203 01:39:36.073" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:39:36.072" starttime="20160203 01:39:27.000"></status>
</kw>
<msg timestamp="20160203 01:39:36.076" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:39:36.075" starttime="20160203 01:39:26.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:36.079" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160203 01:39:36.080" starttime="20160203 01:39:36.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160203 01:39:36.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:39:36.085" starttime="20160203 01:39:36.082"></status>
</kw>
<doc>Test will make the no answer MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:39:36.086" starttime="20160203 01:39:21.040"></status>
</test>
<doc>Testing the prepaid the no answer MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:39:36.095" starttime="20160203 01:39:03.248"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:39:36.110" starttime="20160203 01:39:03.235"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration" id="s1-s1-s1-s4-s4" name="MTC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration/MTC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s1-s1-s4-s4-s1" name="MTC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160203 01:39:36.301" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:39:36.308" level="INFO">${date} = Wed Feb  3 01:39:36 CET 2016</msg>
<status status="PASS" endtime="20160203 01:39:36.308" starttime="20160203 01:39:36.298"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:36.312" level="INFO">Date and time: Wed Feb  3 01:39:36 CET 2016</msg>
<status status="PASS" endtime="20160203 01:39:36.314" starttime="20160203 01:39:36.310"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:36.317" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160203 01:39:36.318" starttime="20160203 01:39:36.315"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:36.379" starttime="20160203 01:39:36.377"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:36.540" starttime="20160203 01:39:36.388"></status>
</kw>
<msg timestamp="20160203 01:39:36.541" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20160203 01:39:36.541" starttime="20160203 01:39:36.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:39:36.547" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:39:37.218" level="INFO">Read output: Last login: Wed Feb  3 00:39:07 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:39:37.219" starttime="20160203 01:39:36.546"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:37.219" starttime="20160203 01:39:36.542"></status>
</kw>
<msg timestamp="20160203 01:39:37.221" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20160203 01:39:37.220" starttime="20160203 01:39:36.366"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:39:37.225" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:39:37.224" starttime="20160203 01:39:37.222"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:39:37.226" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160203 01:39:37.881" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:39:37.882" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:39:37.881" starttime="20160203 01:39:37.225"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:37.885" starttime="20160203 01:39:37.884"></status>
</kw>
<msg timestamp="20160203 01:39:37.886" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:39:37.886" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:39:37.885" starttime="20160203 01:39:37.883"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:37.890" starttime="20160203 01:39:37.889"></status>
</kw>
<msg timestamp="20160203 01:39:37.891" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:37.890" starttime="20160203 01:39:37.886"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160203 01:39:37.892" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 01:39:37.892" starttime="20160203 01:39:37.891"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:39:37.894" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:39:37.894" starttime="20160203 01:39:37.893"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:37.895" starttime="20160203 01:39:37.895"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:37.900" starttime="20160203 01:39:37.899"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:39:37.903" starttime="20160203 01:39:37.901"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:37.904" starttime="20160203 01:39:37.896"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:37.908" starttime="20160203 01:39:37.907"></status>
</kw>
<msg timestamp="20160203 01:39:37.909" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:39:37.909" starttime="20160203 01:39:37.905"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:37.910" starttime="20160203 01:39:37.909"></status>
</kw>
<msg timestamp="20160203 01:39:37.912" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160203 01:39:37.912" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:39:37.911" starttime="20160203 01:39:36.338"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:37.936" starttime="20160203 01:39:37.935"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:38.029" starttime="20160203 01:39:37.939"></status>
</kw>
<msg timestamp="20160203 01:39:38.034" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20160203 01:39:38.032" starttime="20160203 01:39:37.936"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:39:38.045" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:39:38.535" level="INFO">Read output: Last login: Wed Feb  3 00:39:17 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:39:38.536" starttime="20160203 01:39:38.043"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:38.537" starttime="20160203 01:39:38.035"></status>
</kw>
<msg timestamp="20160203 01:39:38.540" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20160203 01:39:38.539" starttime="20160203 01:39:37.931"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:39:38.544" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:39:38.544" starttime="20160203 01:39:38.540"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:39:38.545" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160203 01:39:38.977" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:39:38.979" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:39:38.978" starttime="20160203 01:39:38.544"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:38.985" starttime="20160203 01:39:38.982"></status>
</kw>
<msg timestamp="20160203 01:39:38.987" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:39:38.988" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:39:38.986" starttime="20160203 01:39:38.980"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:38.997" starttime="20160203 01:39:38.995"></status>
</kw>
<msg timestamp="20160203 01:39:38.998" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:38.998" starttime="20160203 01:39:38.989"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160203 01:39:39.003" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:39:39.002" starttime="20160203 01:39:38.999"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:39:39.007" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:39:39.006" starttime="20160203 01:39:39.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:39.009" starttime="20160203 01:39:39.008"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:39.020" starttime="20160203 01:39:39.018"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:39:39.027" starttime="20160203 01:39:39.021"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:39.028" starttime="20160203 01:39:39.011"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:39.038" starttime="20160203 01:39:39.036"></status>
</kw>
<msg timestamp="20160203 01:39:39.040" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:39:39.039" starttime="20160203 01:39:39.030"></status>
</kw>
<msg timestamp="20160203 01:39:39.043" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160203 01:39:39.044" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:39:39.042" starttime="20160203 01:39:37.920"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:39.096" starttime="20160203 01:39:39.094"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:39.224" starttime="20160203 01:39:39.104"></status>
</kw>
<msg timestamp="20160203 01:39:39.226" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20160203 01:39:39.226" starttime="20160203 01:39:39.098"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:39:39.237" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:39:39.688" level="INFO">Read output: Last login: Wed Feb  3 00:39:18 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:39:39.689" starttime="20160203 01:39:39.234"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:39.689" starttime="20160203 01:39:39.228"></status>
</kw>
<msg timestamp="20160203 01:39:39.690" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20160203 01:39:39.690" starttime="20160203 01:39:39.086"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:39:39.694" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:39:39.694" starttime="20160203 01:39:39.691"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:39:39.696" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160203 01:39:39.906" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:39:39.908" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:39:39.907" starttime="20160203 01:39:39.695"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:39.914" starttime="20160203 01:39:39.911"></status>
</kw>
<msg timestamp="20160203 01:39:39.916" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:39:39.917" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:39:39.916" starttime="20160203 01:39:39.909"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:39.926" starttime="20160203 01:39:39.924"></status>
</kw>
<msg timestamp="20160203 01:39:39.927" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:39.927" starttime="20160203 01:39:39.918"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:39:39.931" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 01:39:39.930" starttime="20160203 01:39:39.928"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:39:39.935" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:39:39.934" starttime="20160203 01:39:39.932"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:39.937" starttime="20160203 01:39:39.936"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:39.948" starttime="20160203 01:39:39.946"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:39:39.954" starttime="20160203 01:39:39.949"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:39.955" starttime="20160203 01:39:39.939"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:39.964" starttime="20160203 01:39:39.962"></status>
</kw>
<msg timestamp="20160203 01:39:39.966" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:39:39.965" starttime="20160203 01:39:39.956"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:39.968" starttime="20160203 01:39:39.967"></status>
</kw>
<msg timestamp="20160203 01:39:39.971" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160203 01:39:39.971" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:39:39.970" starttime="20160203 01:39:39.060"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.025" starttime="20160203 01:39:40.023"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.087" starttime="20160203 01:39:40.032"></status>
</kw>
<msg timestamp="20160203 01:39:40.090" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20160203 01:39:40.089" starttime="20160203 01:39:40.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.100" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:39:40.569" level="INFO">Read output: Last login: Wed Feb  3 00:39:20 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:39:40.570" starttime="20160203 01:39:40.098"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:40.571" starttime="20160203 01:39:40.091"></status>
</kw>
<msg timestamp="20160203 01:39:40.572" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20160203 01:39:40.572" starttime="20160203 01:39:40.013"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 01:39:40.576" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 01:39:40.576" starttime="20160203 01:39:40.573"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 01:39:40.577" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160203 01:39:40.668" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:39:40.669" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:39:40.669" starttime="20160203 01:39:40.577"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.676" starttime="20160203 01:39:40.673"></status>
</kw>
<msg timestamp="20160203 01:39:40.678" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 01:39:40.678" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 01:39:40.677" starttime="20160203 01:39:40.671"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.689" starttime="20160203 01:39:40.686"></status>
</kw>
<msg timestamp="20160203 01:39:40.690" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:40.690" starttime="20160203 01:39:40.679"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 01:39:40.694" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 01:39:40.693" starttime="20160203 01:39:40.691"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 01:39:40.698" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:39:40.697" starttime="20160203 01:39:40.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.700" starttime="20160203 01:39:40.699"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.711" starttime="20160203 01:39:40.709"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.716" starttime="20160203 01:39:40.713"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:40.719" starttime="20160203 01:39:40.702"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.728" starttime="20160203 01:39:40.726"></status>
</kw>
<msg timestamp="20160203 01:39:40.729" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:39:40.729" starttime="20160203 01:39:40.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.732" starttime="20160203 01:39:40.731"></status>
</kw>
<msg timestamp="20160203 01:39:40.736" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160203 01:39:40.736" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:39:40.734" starttime="20160203 01:39:39.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:40.740" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 01:39:40.741" starttime="20160203 01:39:40.737"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:40.744" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 01:39:40.745" starttime="20160203 01:39:40.742"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:40.748" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 01:39:40.749" starttime="20160203 01:39:40.746"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:40.752" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 01:39:40.753" starttime="20160203 01:39:40.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160203 01:39:40.756" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:39:40.757" starttime="20160203 01:39:40.754"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160203 01:39:40.760" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:39:40.761" starttime="20160203 01:39:40.758"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160203 01:39:40.764" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:39:40.765" starttime="20160203 01:39:40.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160203 01:39:40.768" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:39:40.769" starttime="20160203 01:39:40.766"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.781" starttime="20160203 01:39:40.775"></status>
</kw>
<msg timestamp="20160203 01:39:40.782" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:39:40.782" starttime="20160203 01:39:40.770"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.786" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 01:39:40.787" starttime="20160203 01:39:40.783"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:40.788" starttime="20160203 01:39:36.295"></status>
</kw>
<test id="s1-s1-s1-s4-s4-s1-t1" name="Run MTC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.800" starttime="20160203 01:39:40.798"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160203 01:39:40.803" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160203 01:39:40.802" starttime="20160203 01:39:40.801"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.817" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160203 01:39:40.818" starttime="20160203 01:39:40.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.821" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160203 01:39:40.822" starttime="20160203 01:39:40.819"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.825" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160203 01:39:40.825" starttime="20160203 01:39:40.823"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.828" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160203 01:39:40.829" starttime="20160203 01:39:40.826"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.832" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160203 01:39:40.833" starttime="20160203 01:39:40.830"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.835" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160203 01:39:40.836" starttime="20160203 01:39:40.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.839" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:39:40.840" starttime="20160203 01:39:40.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.843" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160203 01:39:40.843" starttime="20160203 01:39:40.841"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.846" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:39:40.847" starttime="20160203 01:39:40.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.850" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160203 01:39:40.851" starttime="20160203 01:39:40.848"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.864" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:40.865" starttime="20160203 01:39:40.861"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:40.866" starttime="20160203 01:39:40.859"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.871" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:40.872" starttime="20160203 01:39:40.869"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:40.873" starttime="20160203 01:39:40.867"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.878" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:40.879" starttime="20160203 01:39:40.876"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:40.880" starttime="20160203 01:39:40.874"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:40.881" starttime="20160203 01:39:40.853"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:39:40.885" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:39:40.886" starttime="20160203 01:39:40.882"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.889" starttime="20160203 01:39:40.887"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.892" starttime="20160203 01:39:40.890"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.896" starttime="20160203 01:39:40.894"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.899" starttime="20160203 01:39:40.897"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.901" starttime="20160203 01:39:40.900"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.904" starttime="20160203 01:39:40.902"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.908" starttime="20160203 01:39:40.906"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.911" starttime="20160203 01:39:40.909"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.914" starttime="20160203 01:39:40.912"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.915" starttime="20160203 01:39:40.914"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.917" starttime="20160203 01:39:40.916"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:40.918" starttime="20160203 01:39:40.917"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:39:40.920" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160203 01:39:42.930" level="INFO">01:39:42,924 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:39:42.931" starttime="20160203 01:39:40.920"></status>
</kw>
<msg timestamp="20160203 01:39:42.934" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:39:42.935" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:39:42.933" starttime="20160203 01:39:40.919"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:39:42.947" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:39:42.946" starttime="20160203 01:39:42.944"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:39:42.950" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:39:42.950" starttime="20160203 01:39:42.948"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:39:42.954" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:39:42.953" starttime="20160203 01:39:42.952"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:39:42.960" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:39:42.961" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160203 01:39:42.962" starttime="20160203 01:39:42.957"></status>
</kw>
<msg timestamp="20160203 01:39:42.963" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:39:42.964" level="INFO">${return_log_entry} = 2016-02-03 01:39:42,924 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:39:42.963" starttime="20160203 01:39:42.955"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:42.973" starttime="20160203 01:39:42.971"></status>
</kw>
<msg timestamp="20160203 01:39:42.975" level="INFO">${return_log_entry} = 2016-02-03 01:39:42,924 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:39:42.974" starttime="20160203 01:39:42.965"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:42.984" starttime="20160203 01:39:42.982"></status>
</kw>
<msg timestamp="20160203 01:39:42.985" level="INFO">${return_log_entry} = 2016-02-03 01:39:42,924 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:39:42.985" starttime="20160203 01:39:42.976"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:42.995" starttime="20160203 01:39:42.993"></status>
</kw>
<msg timestamp="20160203 01:39:42.996" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:42.996" starttime="20160203 01:39:42.987"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:43.010" starttime="20160203 01:39:43.008"></status>
</kw>
<msg timestamp="20160203 01:39:43.012" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:43.011" starttime="20160203 01:39:42.998"></status>
</kw>
<msg timestamp="20160203 01:39:43.015" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:43.014" starttime="20160203 01:39:42.937"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:43.025" starttime="20160203 01:39:43.023"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:43.028" starttime="20160203 01:39:43.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:43.031" starttime="20160203 01:39:43.029"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:39:43.040" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:39:43.041" starttime="20160203 01:39:43.039"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:43.041" starttime="20160203 01:39:43.037"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:43.042" starttime="20160203 01:39:43.032"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:43.042" starttime="20160203 01:39:43.017"></status>
</kw>
<msg timestamp="20160203 01:39:43.043" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160203 01:39:43.043" starttime="20160203 01:39:40.806"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160203 01:39:43.046" level="INFO">${calling_party_msisdn} = 525516001001</msg>
<status status="PASS" endtime="20160203 01:39:43.046" starttime="20160203 01:39:43.044"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160203 01:39:43.048" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:39:43.048" starttime="20160203 01:39:43.047"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:43.049" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160203 01:39:43.050" starttime="20160203 01:39:43.049"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:43.051" starttime="20160203 01:39:43.050"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:43.052" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160203 01:39:43.053" starttime="20160203 01:39:43.051"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC 1s">
<doc>Runs a standard (i.e. non-roaming) MTC 1s session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160203 01:39:43.066" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160203 01:39:43.065" starttime="20160203 01:39:43.064"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160203 01:39:43.067" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160203 01:39:43.067" starttime="20160203 01:39:43.066"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160203 01:39:43.069" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini</msg>
<status status="PASS" endtime="20160203 01:39:43.069" starttime="20160203 01:39:43.068"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160203 01:39:43.071" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs</msg>
<status status="PASS" endtime="20160203 01:39:43.071" starttime="20160203 01:39:43.070"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:43.072" starttime="20160203 01:39:43.071"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:39:43.075" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:43.075" starttime="20160203 01:39:43.073"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:43.076" starttime="20160203 01:39:43.075"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160203 01:39:43.078" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:43.078" starttime="20160203 01:39:43.077"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 01:39:43.081" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:43.081" starttime="20160203 01:39:43.079"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:43.082" starttime="20160203 01:39:43.082"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160203 01:39:43.084" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:43.085" starttime="20160203 01:39:43.083"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160203 01:39:43.087" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:43.088" starttime="20160203 01:39:43.085"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:43.089" starttime="20160203 01:39:43.088"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160203 01:39:43.095" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:39:48.131" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:39:48.129" starttime="20160203 01:39:43.089"></status>
</kw>
<msg timestamp="20160203 01:39:48.132" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:39:48.131" starttime="20160203 01:39:43.059"></status>
</kw>
<msg timestamp="20160203 01:39:48.133" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:39:48.133" starttime="20160203 01:39:43.054"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:48.135" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160203 01:39:48.135" starttime="20160203 01:39:48.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160203 01:39:48.137" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:39:48.137" starttime="20160203 01:39:48.136"></status>
</kw>
<doc>Test will make a short MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:39:48.138" starttime="20160203 01:39:40.790"></status>
</test>
<doc>Testing the prepaid MTC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:39:48.142" starttime="20160203 01:39:36.152"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:39:48.149" starttime="20160203 01:39:36.120"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160203 01:39:48.159" starttime="20160203 01:38:45.381"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160203 01:39:48.191" starttime="20160203 01:35:02.515"></status>
</suite>
<doc>This robot framework initialization file is used to globaly assign tags to
all test suites located in or below the current folder
For a complete list of tags allowed for folder assignement
see &lt;workspace root&gt;/tagging-rules.txt</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160203 01:39:48.255" starttime="20160203 01:35:02.493"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd" id="s1-s2" name="Ussd">
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd/MVNA_MEX" id="s1-s2-s1" name="MVNA MEX">
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd/MVNA_MEX/ussd-robot-suite.txt" id="s1-s2-s1-s1" name="Ussd-Robot-Suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160203 01:39:48.473" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:39:48.478" level="INFO">${time} = Wed Feb  3 01:39:48 CET 2016</msg>
<status status="PASS" endtime="20160203 01:39:48.477" starttime="20160203 01:39:48.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:48.480" level="INFO">Date and time: Wed Feb  3 01:39:48 CET 2016</msg>
<status status="PASS" endtime="20160203 01:39:48.480" starttime="20160203 01:39:48.479"></status>
</kw>
<kw type="kw" name="${conn_id} = SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${USSD HOST}</arg>
</arguments>
<msg timestamp="20160203 01:39:48.693" level="INFO">${conn_id} = 36</msg>
<status status="PASS" endtime="20160203 01:39:48.692" starttime="20160203 01:39:48.481"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${conn_id}</arg>
</arguments>
<msg timestamp="20160203 01:39:48.696" level="INFO">${conn_id} = 36</msg>
<status status="PASS" endtime="20160203 01:39:48.696" starttime="20160203 01:39:48.695"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USSD USER}</arg>
<arg>${USSD PWD}</arg>
</arguments>
<msg timestamp="20160203 01:39:48.697" level="INFO">Logging into '10.105.119.167:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:39:50.327" level="INFO">Read output: Last login: Tue Feb  2 08:09:24 2016 from 10.105.101.196
id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:39:50.329" level="INFO">${output_login} = Last login: Tue Feb  2 08:09:24 2016 from 10.105.101.196
id: cannot find name for group ID 20007
</msg>
<status status="PASS" endtime="20160203 01:39:50.328" starttime="20160203 01:39:48.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160203 01:39:50.331" level="INFO">Last login: Tue Feb  2 08:09:24 2016 from 10.105.101.196
id: cannot find name for group ID 20007
</msg>
<status status="PASS" endtime="20160203 01:39:50.331" starttime="20160203 01:39:50.330"></status>
</kw>
<kw type="kw" name="SSHLibrary.Put File">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/robot_testsuites/ussd/tool/USSDtest.py</arg>
<arg>${USSD HOME}/ussd/</arg>
</arguments>
<msg timestamp="20160203 01:39:50.624" level="INFO">'/opt/robot/robotworkspace/robot_testsuites/ussd/tool/USSDtest.py' -&gt; '/home/qa_automation//ussd//USSDtest.py'</msg>
<status status="PASS" endtime="20160203 01:39:50.625" starttime="20160203 01:39:50.332"></status>
</kw>
<kw type="kw" name="SSHLibrary.File Should Exist">
<doc>Fails if the given `path` does NOT point to an existing file.</doc>
<arguments>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:50.628" starttime="20160203 01:39:50.626"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ussd_tool}</arg>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<msg timestamp="20160203 01:39:50.637" level="INFO">${ussd_tool} = /home/qa_automation/ussd/USSDtest.py</msg>
<status status="PASS" endtime="20160203 01:39:50.637" starttime="20160203 01:39:50.628"></status>
</kw>
<kw type="kw" name="Create Subscriber">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160203 01:39:50.641" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160203 01:39:50.641" starttime="20160203 01:39:50.640"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160203 01:39:50.648" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160203 01:39:50.648" starttime="20160203 01:39:50.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160203 01:39:50.650" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160203 01:39:50.650" starttime="20160203 01:39:50.649"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160203 01:39:50.651" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160203 01:39:50.652" starttime="20160203 01:39:50.650"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160203 01:39:50.653" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160203 01:39:50.653" starttime="20160203 01:39:50.652"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:39:50.655" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160203 01:39:50.655" starttime="20160203 01:39:50.654"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160203 01:39:50.656" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160203 01:39:50.657" starttime="20160203 01:39:50.656"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160203 01:39:50.658" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160203 01:39:50.659" starttime="20160203 01:39:50.657"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160203 01:39:50.660" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160203 01:39:50.661" starttime="20160203 01:39:50.659"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160203 01:39:50.662" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160203 01:39:50.662" starttime="20160203 01:39:50.661"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160203 01:39:50.664" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160203 01:39:50.664" starttime="20160203 01:39:50.663"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 01:39:50.670" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:50.671" starttime="20160203 01:39:50.669"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:50.671" starttime="20160203 01:39:50.668"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 01:39:50.674" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:50.674" starttime="20160203 01:39:50.673"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:50.675" starttime="20160203 01:39:50.672"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 01:39:50.677" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:39:50.678" starttime="20160203 01:39:50.676"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:50.678" starttime="20160203 01:39:50.675"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:50.679" starttime="20160203 01:39:50.665"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 01:39:50.681" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 01:39:50.681" starttime="20160203 01:39:50.679"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:50.682" starttime="20160203 01:39:50.681"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:50.684" starttime="20160203 01:39:50.683"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:50.685" starttime="20160203 01:39:50.684"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:50.687" starttime="20160203 01:39:50.686"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:50.688" starttime="20160203 01:39:50.687"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:50.689" starttime="20160203 01:39:50.688"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:50.691" starttime="20160203 01:39:50.690"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:50.692" starttime="20160203 01:39:50.691"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:50.694" starttime="20160203 01:39:50.693"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:50.697" starttime="20160203 01:39:50.694"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:50.698" starttime="20160203 01:39:50.697"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:50.700" starttime="20160203 01:39:50.699"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:39:50.702" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160203 01:39:52.870" level="INFO">01:39:52,863 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:39:52.872" starttime="20160203 01:39:50.701"></status>
</kw>
<msg timestamp="20160203 01:39:52.877" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:39:52.878" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 01:39:52.874" starttime="20160203 01:39:50.700"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 01:39:52.892" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160203 01:39:52.891" starttime="20160203 01:39:52.888"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:39:52.896" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 01:39:52.895" starttime="20160203 01:39:52.893"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 01:39:52.900" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 01:39:52.899" starttime="20160203 01:39:52.897"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 01:39:52.906" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:39:52.908" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160203 01:39:52.908" starttime="20160203 01:39:52.903"></status>
</kw>
<msg timestamp="20160203 01:39:52.910" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 01:39:52.911" level="INFO">${return_log_entry} = 2016-02-03 01:39:52,863 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:39:52.909" starttime="20160203 01:39:52.901"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:52.923" starttime="20160203 01:39:52.921"></status>
</kw>
<msg timestamp="20160203 01:39:52.926" level="INFO">${return_log_entry} = 2016-02-03 01:39:52,863 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:39:52.925" starttime="20160203 01:39:52.912"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:52.936" starttime="20160203 01:39:52.934"></status>
</kw>
<msg timestamp="20160203 01:39:52.938" level="INFO">${return_log_entry} = 2016-02-03 01:39:52,863 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 01:39:52.937" starttime="20160203 01:39:52.927"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:52.948" starttime="20160203 01:39:52.946"></status>
</kw>
<msg timestamp="20160203 01:39:52.950" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:52.949" starttime="20160203 01:39:52.939"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:52.965" starttime="20160203 01:39:52.963"></status>
</kw>
<msg timestamp="20160203 01:39:52.966" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:52.966" starttime="20160203 01:39:52.951"></status>
</kw>
<msg timestamp="20160203 01:39:52.968" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 01:39:52.968" starttime="20160203 01:39:52.881"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:52.978" starttime="20160203 01:39:52.977"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:52.981" starttime="20160203 01:39:52.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:39:52.984" starttime="20160203 01:39:52.982"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 01:39:52.996" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 01:39:52.997" starttime="20160203 01:39:52.993"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:52.998" starttime="20160203 01:39:52.991"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:52.998" starttime="20160203 01:39:52.985"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:53.000" starttime="20160203 01:39:52.970"></status>
</kw>
<msg timestamp="20160203 01:39:53.003" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160203 01:39:53.002" starttime="20160203 01:39:50.643"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160203 01:39:53.006" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:39:53.007" starttime="20160203 01:39:53.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:39:53.010" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160203 01:39:53.011" starttime="20160203 01:39:53.008"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:53.012" starttime="20160203 01:39:50.638"></status>
</kw>
<status status="PASS" endtime="20160203 01:39:53.014" starttime="20160203 01:39:48.468"></status>
</kw>
<test id="s1-s2-s1-s1-t1" name="Test USSD Start">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160203 01:39:53.037" level="INFO">[1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516</msg>
<status status="PASS" endtime="20160203 01:39:53.038" starttime="20160203 01:39:53.028"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160203 01:39:56.041" level="FAIL">No match found for 'User input:' in 3 seconds
Output:
.</msg>
<status status="FAIL" endtime="20160203 01:39:56.043" starttime="20160203 01:39:53.039"></status>
</kw>
<status status="FAIL" endtime="20160203 01:39:56.044" starttime="20160203 01:39:53.022"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MVNA_MEX_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160203 01:39:56.046" starttime="20160203 01:39:53.016">No match found for 'User input:' in 3 seconds
Output:
.</status>
</test>
<test id="s1-s2-s1-s1-t2" name="Test USSD Check Balance">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160203 01:39:56.058" level="INFO">/home/qa_automation/ussd/USSDtest.py 525516001000 963 525516</msg>
<status status="PASS" endtime="20160203 01:39:56.059" starttime="20160203 01:39:56.053"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160203 01:39:58.636" level="INFO">=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<msg timestamp="20160203 01:39:58.639" level="INFO">${output} = =====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160203 01:39:58.638" starttime="20160203 01:39:56.059"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160203 01:39:58.641" level="INFO">USSD Start: =====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160203 01:39:58.641" starttime="20160203 01:39:58.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160203 01:40:00.643" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160203 01:40:00.645" starttime="20160203 01:39:58.641"></status>
</kw>
<msg timestamp="20160203 01:40:00.650" level="INFO">${output} = =====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160203 01:40:00.648" starttime="20160203 01:39:56.050"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Checking the balance</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:40:00.653" level="INFO">Checking the balance</msg>
<status status="PASS" endtime="20160203 01:40:00.654" starttime="20160203 01:40:00.651"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160203 01:40:02.656" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160203 01:40:02.658" starttime="20160203 01:40:00.655"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Tu saldo es: 10 Pesos</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.663" starttime="20160203 01:40:02.660"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.676" starttime="20160203 01:40:02.674"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:40:02.679" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:40:02.744" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:02.746" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:40:02.745" starttime="20160203 01:40:02.677"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.749" starttime="20160203 01:40:02.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.752" starttime="20160203 01:40:02.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.754" starttime="20160203 01:40:02.753"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:40:02.758" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160203 01:40:02.880" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:02.882" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:40:02.882" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:40:02.881" starttime="20160203 01:40:02.755"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.891" starttime="20160203 01:40:02.884"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.894" starttime="20160203 01:40:02.892"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.896" starttime="20160203 01:40:02.895"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.899" starttime="20160203 01:40:02.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.902" starttime="20160203 01:40:02.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.904" starttime="20160203 01:40:02.903"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.907" starttime="20160203 01:40:02.905"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.910" starttime="20160203 01:40:02.908"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.913" starttime="20160203 01:40:02.911"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.915" starttime="20160203 01:40:02.914"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:02.918" starttime="20160203 01:40:02.916"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:02.919" starttime="20160203 01:40:02.667"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MVNA_MEX_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:40:02.920" starttime="20160203 01:39:56.047"></status>
</test>
<test id="s1-s2-s1-s1-t3" name="Test USSD Check My Number">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160203 01:40:02.939" level="INFO">=====================</msg>
<status status="PASS" endtime="20160203 01:40:02.940" starttime="20160203 01:40:02.935"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160203 01:40:02.946" level="INFO">Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<msg timestamp="20160203 01:40:02.947" level="INFO">${output} = Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160203 01:40:02.947" starttime="20160203 01:40:02.941"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160203 01:40:02.950" level="INFO">USSD Start: Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160203 01:40:02.951" starttime="20160203 01:40:02.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160203 01:40:04.955" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160203 01:40:04.957" starttime="20160203 01:40:02.952"></status>
</kw>
<msg timestamp="20160203 01:40:04.960" level="INFO">${output} = Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160203 01:40:04.959" starttime="20160203 01:40:02.930"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Checking My Number</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:40:04.963" level="INFO">Checking My Number</msg>
<status status="PASS" endtime="20160203 01:40:04.964" starttime="20160203 01:40:04.962"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160203 01:40:06.967" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160203 01:40:06.969" starttime="20160203 01:40:04.965"></status>
</kw>
<kw type="kw" name="${msisdn} = String.Get Substring">
<doc>Returns a substring from `start` index to `end` index.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>2</arg>
</arguments>
<msg timestamp="20160203 01:40:06.974" level="INFO">${msisdn} = 5516001000</msg>
<status status="PASS" endtime="20160203 01:40:06.973" starttime="20160203 01:40:06.971"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Tu numero es ${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:06.977" starttime="20160203 01:40:06.975"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:06.988" starttime="20160203 01:40:06.985"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:40:06.990" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:40:07.211" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:07.214" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:40:07.213" starttime="20160203 01:40:06.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:07.217" starttime="20160203 01:40:07.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:07.220" starttime="20160203 01:40:07.218"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:07.222" starttime="20160203 01:40:07.221"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:40:07.226" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160203 01:40:07.285" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:07.287" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:40:07.288" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:40:07.286" starttime="20160203 01:40:07.223"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:07.295" starttime="20160203 01:40:07.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:07.298" starttime="20160203 01:40:07.296"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:07.300" starttime="20160203 01:40:07.299"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:07.303" starttime="20160203 01:40:07.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:07.306" starttime="20160203 01:40:07.304"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:07.308" starttime="20160203 01:40:07.307"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:07.311" starttime="20160203 01:40:07.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:07.314" starttime="20160203 01:40:07.312"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:07.316" starttime="20160203 01:40:07.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:07.319" starttime="20160203 01:40:07.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:07.322" starttime="20160203 01:40:07.320"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:07.323" starttime="20160203 01:40:06.979"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MVNA_MEX_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:40:07.325" starttime="20160203 01:40:02.922"></status>
</test>
<test id="s1-s2-s1-s1-t4" name="Test USSD Switch Data On-Off">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160203 01:40:07.343" level="INFO">Killed</msg>
<status status="PASS" endtime="20160203 01:40:07.344" starttime="20160203 01:40:07.340"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160203 01:40:07.353" level="INFO">[1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<msg timestamp="20160203 01:40:07.354" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF...</msg>
<status status="PASS" endtime="20160203 01:40:07.353" starttime="20160203 01:40:07.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160203 01:40:07.358" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160203 01:40:07.359" starttime="20160203 01:40:07.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160203 01:40:09.362" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160203 01:40:09.363" starttime="20160203 01:40:07.360"></status>
</kw>
<msg timestamp="20160203 01:40:09.367" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF...</msg>
<status status="PASS" endtime="20160203 01:40:09.366" starttime="20160203 01:40:07.334"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160203 01:40:11.370" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160203 01:40:11.372" starttime="20160203 01:40:09.369"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for data switch change</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:40:11.375" level="INFO">Pressing 1 for data switch change</msg>
<status status="PASS" endtime="20160203 01:40:11.376" starttime="20160203 01:40:11.374"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160203 01:40:11.380" level="INFO">Killed</msg>
<status status="PASS" endtime="20160203 01:40:11.380" starttime="20160203 01:40:11.378"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160203 01:40:11.389" level="INFO">[1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<msg timestamp="20160203 01:40:11.390" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF...</msg>
<status status="PASS" endtime="20160203 01:40:11.390" starttime="20160203 01:40:11.381"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Estado actual: On</arg>
</arguments>
<msg timestamp="20160203 01:40:11.396" level="FAIL">'[1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:' does not contain 'Estado actual: On'</msg>
<status status="FAIL" endtime="20160203 01:40:11.397" starttime="20160203 01:40:11.392"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MVNA_MEX_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160203 01:40:11.399" starttime="20160203 01:40:07.327">'[1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:' does not contain 'Estado actual: On'</status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:40:11.432" starttime="20160203 01:40:11.421"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:11.433" starttime="20160203 01:40:11.415"></status>
</kw>
<doc>This suite uses USSDtest.py class to test the USSD interface. Various test cases (scenarios) will be checked for truu operator on
MVNA_MEX platform</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160203 01:40:11.434" starttime="20160203 01:39:48.315"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160203 01:40:11.472" starttime="20160203 01:39:48.302"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160203 01:40:11.508" starttime="20160203 01:39:48.287"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr" id="s1-s3" name="Xdr">
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification" id="s1-s3-s1" name="XDR-ticket-verification">
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/XDR_Test-robot-suite.txt" id="s1-s3-s1-s1" name="XDR Test-robot-suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160203 01:40:11.665" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160203 01:40:11.669" level="INFO">${time} = Wed Feb  3 01:40:11 CET 2016</msg>
<status status="PASS" endtime="20160203 01:40:11.668" starttime="20160203 01:40:11.657"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:40:11.672" level="INFO">Date and time: Wed Feb  3 01:40:11 CET 2016</msg>
<status status="PASS" endtime="20160203 01:40:11.673" starttime="20160203 01:40:11.670"></status>
</kw>
<kw type="kw" name="NTP Check on XDR">
<doc>Called at suite setup to check if ntp is up and running</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:11.741" starttime="20160203 01:40:11.680"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160203 01:40:11.744" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:40:13.045" level="INFO">Read output: Last login: Wed Feb  3 00:39:38 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$[m</msg>
<msg timestamp="20160203 01:40:13.048" level="INFO">${output_login} = Last login: Wed Feb  3 00:39:38 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$[m </msg>
<status status="PASS" endtime="20160203 01:40:13.047" starttime="20160203 01:40:11.742"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160203 01:40:13.052" level="INFO">Last login: Wed Feb  3 00:39:38 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$[m </msg>
<status status="PASS" endtime="20160203 01:40:13.052" starttime="20160203 01:40:13.049"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ntpstat</arg>
</arguments>
<msg timestamp="20160203 01:40:13.055" level="INFO">Executing command 'ntpstat'.</msg>
<msg timestamp="20160203 01:40:13.161" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:13.163" level="INFO">${output} = synchronised to NTP server (10.189.251.100) at stratum 3 
   time correct to within 63 ms
   polling server every 1024 s</msg>
<status status="PASS" endtime="20160203 01:40:13.162" starttime="20160203 01:40:13.054"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:40:13.166" starttime="20160203 01:40:13.164"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>synchronised to NTP server</arg>
<arg>msg=NTP sync problem!</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:13.172" starttime="20160203 01:40:13.170"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NTP is synced</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:40:13.175" level="INFO">NTP is synced</msg>
<status status="PASS" endtime="20160203 01:40:13.175" starttime="20160203 01:40:13.173"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:13.176" starttime="20160203 01:40:11.674"></status>
</kw>
<kw type="kw" name="Log The XDR Version">
<doc>Called at suite setup procedure to check if XDR is running and to see which version is there.</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:13.274" starttime="20160203 01:40:13.218"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160203 01:40:13.278" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:40:14.486" level="INFO">Read output: Last login: Wed Feb  3 00:40:12 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$[m</msg>
<msg timestamp="20160203 01:40:14.489" level="INFO">${output_login} = Last login: Wed Feb  3 00:40:12 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$[m </msg>
<status status="PASS" endtime="20160203 01:40:14.488" starttime="20160203 01:40:13.276"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160203 01:40:14.493" level="INFO">Last login: Wed Feb  3 00:40:12 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$[m </msg>
<status status="PASS" endtime="20160203 01:40:14.494" starttime="20160203 01:40:14.491"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-xdr status</arg>
</arguments>
<msg timestamp="20160203 01:40:14.496" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160203 01:40:14.986" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:14.988" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:40:14.987" starttime="20160203 01:40:14.495"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR Version and pid: ${output}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:40:14.991" level="INFO">XDR Version and pid: I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 01:40:14.992" starttime="20160203 01:40:14.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running PID:</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:14.995" starttime="20160203 01:40:14.993"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:40:15.002" starttime="20160203 01:40:14.997"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:15.004" starttime="20160203 01:40:13.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SUT:${SUT_RESOURCE}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:40:15.008" level="INFO">SUT:/opt/robot/robotworkspace/suts/MVNA-MEX-resource.txt</msg>
<status status="PASS" endtime="20160203 01:40:15.009" starttime="20160203 01:40:15.006"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR IP address:${XDR HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:40:15.012" level="INFO">XDR IP address:10.105.119.171</msg>
<status status="PASS" endtime="20160203 01:40:15.013" starttime="20160203 01:40:15.010"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Using ${SUT RELEASE TAG PREFIX} tickets</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:40:15.016" level="INFO">Using R6.1 tickets</msg>
<status status="PASS" endtime="20160203 01:40:15.017" starttime="20160203 01:40:15.014"></status>
</kw>
<kw type="kw" name="Check AMQ Availability">
<doc>Called at suite setup procedure to check if AMQ is UP</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${AMQ-XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:15.078" starttime="20160203 01:40:15.025"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160203 01:40:15.081" level="INFO">Logging into '10.105.119.124:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:40:16.946" level="INFO">Read output: Last login: Tue Feb  2 08:09:48 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb19 ~]$[m</msg>
<msg timestamp="20160203 01:40:16.948" level="INFO">${output_login} = Last login: Tue Feb  2 08:09:48 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb19 ~]$[m </msg>
<status status="PASS" endtime="20160203 01:40:16.947" starttime="20160203 01:40:15.079"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>netstat -an | grep ${AMQ-XDR PORT}</arg>
</arguments>
<msg timestamp="20160203 01:40:16.949" level="INFO">Executing command 'netstat -an | grep 61626'.</msg>
<msg timestamp="20160203 01:40:17.074" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:17.075" level="INFO">${output} = tcp        0      0 :::61626                    :::*                        LISTEN      
tcp        0      0 ::ffff:10.105.119.124:61626 ::ffff:10.105.119.135:49480 ESTABLISHED 
tcp        0      0 ::...</msg>
<status status="PASS" endtime="20160203 01:40:17.075" starttime="20160203 01:40:16.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>LISTEN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:17.077" starttime="20160203 01:40:17.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${output}=</arg>
<arg>Execute Command</arg>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} query -QQueue=${AMQ-XDR CRCE CDR QUEUE} | grep ConsumerCount</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:17.078" starttime="20160203 01:40:17.078"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} status</arg>
</arguments>
<msg timestamp="20160203 01:40:17.080" level="INFO">Executing command 'sudo /etc/init.d/amq-xdr-tb19 status'.</msg>
<msg timestamp="20160203 01:40:17.458" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:17.459" level="INFO">${output} = INFO: Using default configuration
(you can configure options in one of these file: /etc/default/activemq /root/.activemqrc)

INFO: Invoke the following command to create a configuration file
/etc/init...</msg>
<status status="PASS" endtime="20160203 01:40:17.459" starttime="20160203 01:40:17.079"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>ActiveMQ is running</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:17.461" starttime="20160203 01:40:17.460"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${count}=</arg>
<arg>Get Substring</arg>
<arg>${output}</arg>
<arg>16</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:17.462" starttime="20160203 01:40:17.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Evaluate</arg>
<arg>0 &lt; ${count}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:17.463" starttime="20160203 01:40:17.463"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:40:17.466" starttime="20160203 01:40:17.464"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:17.467" starttime="20160203 01:40:15.019"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>AMQ and consumers are UP</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 01:40:17.468" level="INFO">AMQ and consumers are UP</msg>
<status status="PASS" endtime="20160203 01:40:17.469" starttime="20160203 01:40:17.468"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${XDR DB HOST}:${XDR DB PORT}/${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:17.541" starttime="20160203 01:40:17.469"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:17.637" starttime="20160203 01:40:17.551"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:17.638" starttime="20160203 01:40:17.548"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:18.576" starttime="20160203 01:40:17.647"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:18.577" starttime="20160203 01:40:17.644"></status>
</kw>
<kw type="kw" name="${JNDI_PROVIDER_URL} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>tcp://${AMQ-XDR HOST}:${AMQ-XDR PORT}?jms.useAsyncSend=false</arg>
</arguments>
<msg timestamp="20160203 01:40:18.580" level="INFO">${JNDI_PROVIDER_URL} = tcp://10.105.119.124:61626?jms.useAsyncSend=false</msg>
<status status="PASS" endtime="20160203 01:40:18.580" starttime="20160203 01:40:18.578"></status>
</kw>
<kw type="kw" name="JMSLibrary.Init Provider">
<doc></doc>
<arguments>
<arg>${INITIAL_CONTEXT_FACTORY}</arg>
<arg>${JNDI_PROVIDER_URL}</arg>
<arg>connect=true</arg>
<arg>start=true</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:18.960" starttime="20160203 01:40:18.581"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:18.962" starttime="20160203 01:40:11.654"></status>
</kw>
<test id="s1-s3-s1-s1-t1" name="Test MOC ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC}</arg>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:19.021" starttime="20160203 01:40:19.019"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:19.074" starttime="20160203 01:40:19.030"></status>
</kw>
<msg timestamp="20160203 01:40:19.075" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160203 01:40:19.075" starttime="20160203 01:40:19.022"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:40:19.081" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:40:19.562" level="INFO">Read output: Last login: Wed Feb  3 00:40:13 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:40:19.563" starttime="20160203 01:40:19.080"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:19.564" starttime="20160203 01:40:19.076"></status>
</kw>
<msg timestamp="20160203 01:40:19.565" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160203 01:40:19.564" starttime="20160203 01:40:19.010"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:19.570" starttime="20160203 01:40:19.569"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:40:19.572" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160203 01:40:19.575" starttime="20160203 01:40:19.571"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:19.576" starttime="20160203 01:40:19.566"></status>
</kw>
<msg timestamp="20160203 01:40:19.577" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160203 01:40:19.576" starttime="20160203 01:40:18.997"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:19.590" starttime="20160203 01:40:19.587"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:19.590" starttime="20160203 01:40:19.583"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:19.602" starttime="20160203 01:40:19.594"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:19.695" starttime="20160203 01:40:19.603"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:19.696" starttime="20160203 01:40:19.591"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160203 01:40:29.698" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160203 01:40:29.699" starttime="20160203 01:40:19.696"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.710" starttime="20160203 01:40:29.708"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160203 01:40:29.713" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160203 01:40:29.713" starttime="20160203 01:40:29.710"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160203 01:40:29.717" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160203 01:40:29.718" starttime="20160203 01:40:29.714"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.724" starttime="20160203 01:40:29.723"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:40:29.725" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:40:29.782" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:29.783" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:40:29.782" starttime="20160203 01:40:29.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.784" starttime="20160203 01:40:29.783"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.785" starttime="20160203 01:40:29.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.786" starttime="20160203 01:40:29.785"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:40:29.788" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160203 01:40:29.914" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:29.915" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:40:29.915" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:40:29.915" starttime="20160203 01:40:29.787"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.919" starttime="20160203 01:40:29.916"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.920" starttime="20160203 01:40:29.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.921" starttime="20160203 01:40:29.920"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.922" starttime="20160203 01:40:29.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.923" starttime="20160203 01:40:29.923"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.925" starttime="20160203 01:40:29.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.926" starttime="20160203 01:40:29.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.927" starttime="20160203 01:40:29.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.929" starttime="20160203 01:40:29.928"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.930" starttime="20160203 01:40:29.929"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:29.931" starttime="20160203 01:40:29.931"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:29.932" starttime="20160203 01:40:29.718"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:40:29.933" level="INFO">Starting command 'cat tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160203 01:40:29.937" starttime="20160203 01:40:29.932"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:40:29.938" level="INFO">Reading output of command 'cat tmpfilemonitor4.log'.</msg>
<msg timestamp="20160203 01:40:29.984" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:29.984" level="INFO">${stdout_string} = [2016-02-03 00:40:19,731][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:40:29.984" starttime="20160203 01:40:29.937"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:40:29.986" level="INFO">Executing command 'rm tmpfilemonitor4.log'.</msg>
<msg timestamp="20160203 01:40:30.076" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160203 01:40:30.076" starttime="20160203 01:40:29.985"></status>
</kw>
<msg timestamp="20160203 01:40:30.078" level="INFO">${tailed_text} = [2016-02-03 00:40:19,731][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:40:30.078" starttime="20160203 01:40:29.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160203 01:40:30.084" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/MOC_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/MOC_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:40:30.084" starttime="20160203 01:40:30.082"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:30.084" starttime="20160203 01:40:30.079"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:30.089" starttime="20160203 01:40:30.088"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:40:30.091" starttime="20160203 01:40:30.090"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:30.093" starttime="20160203 01:40:30.085"></status>
</kw>
<msg timestamp="20160203 01:40:30.094" level="INFO">${tailed_text} = [2016-02-03 00:40:19,731][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:40:30.093" starttime="20160203 01:40:29.701"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:30.109" starttime="20160203 01:40:30.108"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:30.126" starttime="20160203 01:40:30.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:30.127" starttime="20160203 01:40:30.127"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160203 01:40:30.129" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:40:30.130" level="INFO">${queryResultSetLines} = 1000639|6.1|101|CDR|1|CRCE|crce01|2015-02-23 11:06:11.236|2015-02-22 09:15:50.025|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|Charge|null|BasicSession|530...</msg>
<status status="PASS" endtime="20160203 01:40:30.130" starttime="20160203 01:40:30.128"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:30.131" starttime="20160203 01:40:30.130"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160203 01:40:30.133" level="INFO">1 lines returned</msg>
<msg timestamp="20160203 01:40:30.133" level="INFO">@{queryResultSet} = [ 1000639|6.1|101|CDR|1|CRCE|crce01|2015-02-23 11:06:11.236|2015-02-22 09:15:50.025|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|Charge|null|BasicSession|5...</msg>
<status status="PASS" endtime="20160203 01:40:30.133" starttime="20160203 01:40:30.132"></status>
</kw>
<msg timestamp="20160203 01:40:30.135" level="INFO">@{queryRows} = [ 1000639|6.1|101|CDR|1|CRCE|crce01|2015-02-23 11:06:11.236|2015-02-22 09:15:50.025|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|Charge|null|BasicSession|5...</msg>
<status status="PASS" endtime="20160203 01:40:30.135" starttime="20160203 01:40:30.105"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160203 01:40:30.137" level="INFO">Length is 1</msg>
<msg timestamp="20160203 01:40:30.137" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160203 01:40:30.137" starttime="20160203 01:40:30.135"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160203 01:40:30.139" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160203 01:40:30.139" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160203 01:40:30.139" starttime="20160203 01:40:30.138"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160203 01:40:30.144" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:40:30.144" starttime="20160203 01:40:30.143"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:30.144" starttime="20160203 01:40:30.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:30.147" starttime="20160203 01:40:30.145"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:30.148" starttime="20160203 01:40:30.101"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:30.151" starttime="20160203 01:40:30.148"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:30.151" starttime="20160203 01:40:18.975"></status>
</kw>
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. 

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:40:30.152" starttime="20160203 01:40:18.964"></status>
</test>
<test id="s1-s3-s1-s1-t2" name="Test SMS ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SMS}</arg>
<arg>SMS</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:30.180" starttime="20160203 01:40:30.179"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:30.242" starttime="20160203 01:40:30.184"></status>
</kw>
<msg timestamp="20160203 01:40:30.245" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160203 01:40:30.244" starttime="20160203 01:40:30.181"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:40:30.256" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:40:30.697" level="INFO">Read output: Last login: Wed Feb  3 00:40:19 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:40:30.698" starttime="20160203 01:40:30.253"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:30.699" starttime="20160203 01:40:30.246"></status>
</kw>
<msg timestamp="20160203 01:40:30.700" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160203 01:40:30.700" starttime="20160203 01:40:30.175"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:30.706" starttime="20160203 01:40:30.704"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:40:30.707" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160203 01:40:30.711" starttime="20160203 01:40:30.706"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:30.711" starttime="20160203 01:40:30.701"></status>
</kw>
<msg timestamp="20160203 01:40:30.712" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160203 01:40:30.712" starttime="20160203 01:40:30.169"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:30.745" starttime="20160203 01:40:30.722"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:30.745" starttime="20160203 01:40:30.719"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:30.751" starttime="20160203 01:40:30.750"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:30.763" starttime="20160203 01:40:30.751"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:30.763" starttime="20160203 01:40:30.746"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160203 01:40:40.766" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160203 01:40:40.767" starttime="20160203 01:40:30.764"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.778" starttime="20160203 01:40:40.777"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160203 01:40:40.781" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160203 01:40:40.781" starttime="20160203 01:40:40.778"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160203 01:40:40.786" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160203 01:40:40.787" starttime="20160203 01:40:40.782"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.793" starttime="20160203 01:40:40.791"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:40:40.794" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:40:40.850" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:40.851" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:40:40.850" starttime="20160203 01:40:40.793"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.852" starttime="20160203 01:40:40.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.853" starttime="20160203 01:40:40.853"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.855" starttime="20160203 01:40:40.854"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:40:40.857" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160203 01:40:40.946" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:40.947" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:40:40.947" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:40:40.946" starttime="20160203 01:40:40.855"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.950" starttime="20160203 01:40:40.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.952" starttime="20160203 01:40:40.951"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.953" starttime="20160203 01:40:40.952"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.954" starttime="20160203 01:40:40.953"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.955" starttime="20160203 01:40:40.955"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.957" starttime="20160203 01:40:40.956"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.958" starttime="20160203 01:40:40.957"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.959" starttime="20160203 01:40:40.958"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.960" starttime="20160203 01:40:40.960"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.962" starttime="20160203 01:40:40.961"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:40.963" starttime="20160203 01:40:40.962"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:40.963" starttime="20160203 01:40:40.788"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:40:40.965" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160203 01:40:40.968" starttime="20160203 01:40:40.964"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:40:40.969" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20160203 01:40:42.472" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:42.473" level="INFO">${stdout_string} = [2016-02-03 00:40:30,800][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:40:42.472" starttime="20160203 01:40:40.969"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:40:42.475" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20160203 01:40:42.564" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160203 01:40:42.564" starttime="20160203 01:40:42.474"></status>
</kw>
<msg timestamp="20160203 01:40:42.565" level="INFO">${tailed_text} = [2016-02-03 00:40:30,800][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:40:42.565" starttime="20160203 01:40:40.773"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160203 01:40:42.571" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/SMS_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/SMS_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:40:42.571" starttime="20160203 01:40:42.569"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:42.572" starttime="20160203 01:40:42.566"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:42.577" starttime="20160203 01:40:42.576"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:40:42.578" starttime="20160203 01:40:42.577"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:42.580" starttime="20160203 01:40:42.572"></status>
</kw>
<msg timestamp="20160203 01:40:42.582" level="INFO">${tailed_text} = [2016-02-03 00:40:30,800][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:40:42.581" starttime="20160203 01:40:40.769"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:42.597" starttime="20160203 01:40:42.596"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:42.601" starttime="20160203 01:40:42.597"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:42.602" starttime="20160203 01:40:42.601"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160203 01:40:42.604" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:40:42.605" level="INFO">${queryResultSetLines} = 1000640|6.1|101|CDR|1|CRCE|crce01|2015-02-23 09:36:19.022|2015-02-22 15:00:50.025|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.0|Charge|null|0|53099204199974...</msg>
<status status="PASS" endtime="20160203 01:40:42.604" starttime="20160203 01:40:42.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:42.606" starttime="20160203 01:40:42.605"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160203 01:40:42.607" level="INFO">1 lines returned</msg>
<msg timestamp="20160203 01:40:42.608" level="INFO">@{queryResultSet} = [ 1000640|6.1|101|CDR|1|CRCE|crce01|2015-02-23 09:36:19.022|2015-02-22 15:00:50.025|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.0|Charge|null|0|530992041999...</msg>
<status status="PASS" endtime="20160203 01:40:42.607" starttime="20160203 01:40:42.606"></status>
</kw>
<msg timestamp="20160203 01:40:42.609" level="INFO">@{queryRows} = [ 1000640|6.1|101|CDR|1|CRCE|crce01|2015-02-23 09:36:19.022|2015-02-22 15:00:50.025|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.0|Charge|null|0|530992041999...</msg>
<status status="PASS" endtime="20160203 01:40:42.608" starttime="20160203 01:40:42.592"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160203 01:40:42.610" level="INFO">Length is 1</msg>
<msg timestamp="20160203 01:40:42.611" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160203 01:40:42.611" starttime="20160203 01:40:42.609"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160203 01:40:42.612" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160203 01:40:42.613" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160203 01:40:42.613" starttime="20160203 01:40:42.611"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160203 01:40:42.617" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:40:42.618" starttime="20160203 01:40:42.616"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:42.618" starttime="20160203 01:40:42.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:42.621" starttime="20160203 01:40:42.618"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:42.621" starttime="20160203 01:40:42.588"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:42.624" starttime="20160203 01:40:42.622"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:42.625" starttime="20160203 01:40:30.158"></status>
</kw>
<doc>Send the SMS XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:40:42.626" starttime="20160203 01:40:30.154"></status>
</test>
<test id="s1-s3-s1-s1-t3" name="Test DATA ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${DATA}</arg>
<arg>DATA</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:42.652" starttime="20160203 01:40:42.652"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:42.713" starttime="20160203 01:40:42.656"></status>
</kw>
<msg timestamp="20160203 01:40:42.715" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160203 01:40:42.715" starttime="20160203 01:40:42.653"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:40:42.726" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:40:43.149" level="INFO">Read output: Last login: Wed Feb  3 00:40:30 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:40:43.150" starttime="20160203 01:40:42.724"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:43.151" starttime="20160203 01:40:42.717"></status>
</kw>
<msg timestamp="20160203 01:40:43.153" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160203 01:40:43.152" starttime="20160203 01:40:42.647"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:43.159" starttime="20160203 01:40:43.157"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:40:43.160" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160203 01:40:43.164" starttime="20160203 01:40:43.159"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:43.164" starttime="20160203 01:40:43.154"></status>
</kw>
<msg timestamp="20160203 01:40:43.165" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160203 01:40:43.165" starttime="20160203 01:40:42.641"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:43.219" starttime="20160203 01:40:43.175"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:43.220" starttime="20160203 01:40:43.172"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:43.225" starttime="20160203 01:40:43.224"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:43.238" starttime="20160203 01:40:43.225"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:43.238" starttime="20160203 01:40:43.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160203 01:40:53.240" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160203 01:40:53.242" starttime="20160203 01:40:43.239"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.253" starttime="20160203 01:40:53.251"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160203 01:40:53.256" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160203 01:40:53.256" starttime="20160203 01:40:53.253"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160203 01:40:53.261" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160203 01:40:53.261" starttime="20160203 01:40:53.257"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.266" starttime="20160203 01:40:53.265"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:40:53.267" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:40:53.321" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:53.321" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:40:53.321" starttime="20160203 01:40:53.267"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.323" starttime="20160203 01:40:53.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.324" starttime="20160203 01:40:53.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.325" starttime="20160203 01:40:53.324"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:40:53.327" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160203 01:40:53.410" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:53.411" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:40:53.411" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:40:53.410" starttime="20160203 01:40:53.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.414" starttime="20160203 01:40:53.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.416" starttime="20160203 01:40:53.415"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.417" starttime="20160203 01:40:53.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.418" starttime="20160203 01:40:53.417"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.419" starttime="20160203 01:40:53.419"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.421" starttime="20160203 01:40:53.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.422" starttime="20160203 01:40:53.421"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.423" starttime="20160203 01:40:53.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.425" starttime="20160203 01:40:53.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.426" starttime="20160203 01:40:53.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.427" starttime="20160203 01:40:53.426"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:53.427" starttime="20160203 01:40:53.262"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:40:53.429" level="INFO">Starting command 'cat tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160203 01:40:53.432" starttime="20160203 01:40:53.428"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:40:53.434" level="INFO">Reading output of command 'cat tmpfilemonitor6.log'.</msg>
<msg timestamp="20160203 01:40:53.478" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:40:53.479" level="INFO">${stdout_string} = [2016-02-03 00:40:43,277][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:40:53.478" starttime="20160203 01:40:53.433"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:40:53.481" level="INFO">Executing command 'rm tmpfilemonitor6.log'.</msg>
<msg timestamp="20160203 01:40:53.567" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160203 01:40:53.568" starttime="20160203 01:40:53.480"></status>
</kw>
<msg timestamp="20160203 01:40:53.569" level="INFO">${tailed_text} = [2016-02-03 00:40:43,277][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:40:53.569" starttime="20160203 01:40:53.248"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160203 01:40:53.575" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/DATA_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/DATA_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:40:53.575" starttime="20160203 01:40:53.572"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:53.575" starttime="20160203 01:40:53.569"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.580" starttime="20160203 01:40:53.579"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.582" starttime="20160203 01:40:53.581"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:53.583" starttime="20160203 01:40:53.576"></status>
</kw>
<msg timestamp="20160203 01:40:53.585" level="INFO">${tailed_text} = [2016-02-03 00:40:43,277][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:40:53.585" starttime="20160203 01:40:53.244"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.600" starttime="20160203 01:40:53.600"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.632" starttime="20160203 01:40:53.601"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.634" starttime="20160203 01:40:53.633"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160203 01:40:53.635" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:40:53.636" level="INFO">${queryResultSetLines} = 1000641|6.1|101|CDR|1|CRCE|crce01|2015-02-23 09:37:42.312|2015-02-22 09:37:06|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|FinalCommit|null|BasicSession|5...</msg>
<status status="PASS" endtime="20160203 01:40:53.636" starttime="20160203 01:40:53.634"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.637" starttime="20160203 01:40:53.637"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160203 01:40:53.639" level="INFO">1 lines returned</msg>
<msg timestamp="20160203 01:40:53.639" level="INFO">@{queryResultSet} = [ 1000641|6.1|101|CDR|1|CRCE|crce01|2015-02-23 09:37:42.312|2015-02-22 09:37:06|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|FinalCommit|null|BasicSession...</msg>
<status status="PASS" endtime="20160203 01:40:53.639" starttime="20160203 01:40:53.638"></status>
</kw>
<msg timestamp="20160203 01:40:53.640" level="INFO">@{queryRows} = [ 1000641|6.1|101|CDR|1|CRCE|crce01|2015-02-23 09:37:42.312|2015-02-22 09:37:06|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|FinalCommit|null|BasicSession...</msg>
<status status="PASS" endtime="20160203 01:40:53.640" starttime="20160203 01:40:53.596"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160203 01:40:53.642" level="INFO">Length is 1</msg>
<msg timestamp="20160203 01:40:53.643" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160203 01:40:53.642" starttime="20160203 01:40:53.641"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160203 01:40:53.644" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160203 01:40:53.645" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160203 01:40:53.644" starttime="20160203 01:40:53.643"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160203 01:40:53.649" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:40:53.649" starttime="20160203 01:40:53.648"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:53.650" starttime="20160203 01:40:53.645"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.653" starttime="20160203 01:40:53.650"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:53.653" starttime="20160203 01:40:53.592"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.656" starttime="20160203 01:40:53.654"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:53.657" starttime="20160203 01:40:42.631"></status>
</kw>
<doc>Send the DATA XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:40:53.658" starttime="20160203 01:40:42.627"></status>
</test>
<test id="s1-s3-s1-s1-t4" name="Test CRCE Recharge ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Rec}</arg>
<arg>CRCE_Rec</arg>
<arg>crce_recharge</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.685" starttime="20160203 01:40:53.685"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:53.755" starttime="20160203 01:40:53.689"></status>
</kw>
<msg timestamp="20160203 01:40:53.757" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160203 01:40:53.756" starttime="20160203 01:40:53.686"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:40:53.768" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:40:54.200" level="INFO">Read output: Last login: Wed Feb  3 00:40:42 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:40:54.201" starttime="20160203 01:40:53.766"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:54.202" starttime="20160203 01:40:53.758"></status>
</kw>
<msg timestamp="20160203 01:40:54.204" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160203 01:40:54.203" starttime="20160203 01:40:53.680"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:54.210" starttime="20160203 01:40:54.209"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:40:54.211" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160203 01:40:54.215" starttime="20160203 01:40:54.210"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:54.216" starttime="20160203 01:40:54.205"></status>
</kw>
<msg timestamp="20160203 01:40:54.217" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160203 01:40:54.216" starttime="20160203 01:40:53.674"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:57.349" starttime="20160203 01:40:54.228"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:57.351" starttime="20160203 01:40:54.223"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:57.356" starttime="20160203 01:40:57.355"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:40:57.366" starttime="20160203 01:40:57.356"></status>
</kw>
<status status="PASS" endtime="20160203 01:40:57.367" starttime="20160203 01:40:57.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160203 01:41:07.368" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160203 01:41:07.370" starttime="20160203 01:40:57.367"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.381" starttime="20160203 01:41:07.380"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160203 01:41:07.384" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160203 01:41:07.384" starttime="20160203 01:41:07.381"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160203 01:41:07.388" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160203 01:41:07.389" starttime="20160203 01:41:07.385"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.393" starttime="20160203 01:41:07.392"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:41:07.395" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:41:07.450" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:41:07.451" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:41:07.451" starttime="20160203 01:41:07.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.452" starttime="20160203 01:41:07.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.454" starttime="20160203 01:41:07.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.455" starttime="20160203 01:41:07.454"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:41:07.457" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160203 01:41:07.543" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:41:07.543" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:41:07.544" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:41:07.543" starttime="20160203 01:41:07.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.547" starttime="20160203 01:41:07.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.548" starttime="20160203 01:41:07.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.549" starttime="20160203 01:41:07.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.551" starttime="20160203 01:41:07.550"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.552" starttime="20160203 01:41:07.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.553" starttime="20160203 01:41:07.552"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.554" starttime="20160203 01:41:07.553"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.556" starttime="20160203 01:41:07.555"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.557" starttime="20160203 01:41:07.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.558" starttime="20160203 01:41:07.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.559" starttime="20160203 01:41:07.559"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:07.560" starttime="20160203 01:41:07.389"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:41:07.561" level="INFO">Starting command 'cat tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160203 01:41:07.565" starttime="20160203 01:41:07.560"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:41:07.566" level="INFO">Reading output of command 'cat tmpfilemonitor7.log'.</msg>
<msg timestamp="20160203 01:41:07.608" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:41:07.609" level="INFO">${stdout_string} = [2016-02-03 00:40:57,440][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:41:07.608" starttime="20160203 01:41:07.565"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:41:07.610" level="INFO">Executing command 'rm tmpfilemonitor7.log'.</msg>
<msg timestamp="20160203 01:41:07.697" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160203 01:41:07.697" starttime="20160203 01:41:07.609"></status>
</kw>
<msg timestamp="20160203 01:41:07.698" level="INFO">${tailed_text} = [2016-02-03 00:40:57,440][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:41:07.698" starttime="20160203 01:41:07.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160203 01:41:07.704" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_Rec_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_Rec_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:41:07.704" starttime="20160203 01:41:07.702"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:07.705" starttime="20160203 01:41:07.699"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.710" starttime="20160203 01:41:07.709"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.711" starttime="20160203 01:41:07.710"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:07.712" starttime="20160203 01:41:07.705"></status>
</kw>
<msg timestamp="20160203 01:41:07.713" level="INFO">${tailed_text} = [2016-02-03 00:40:57,440][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:41:07.713" starttime="20160203 01:41:07.372"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.729" starttime="20160203 01:41:07.728"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.980" starttime="20160203 01:41:07.729"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.981" starttime="20160203 01:41:07.981"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160203 01:41:07.983" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:41:07.984" level="INFO">${queryResultSetLines} = 1276877|6.1|110|RECHARGE|1|CRCE|crce01|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|tarif...</msg>
<status status="PASS" endtime="20160203 01:41:07.983" starttime="20160203 01:41:07.982"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:07.985" starttime="20160203 01:41:07.984"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160203 01:41:07.986" level="INFO">1 lines returned</msg>
<msg timestamp="20160203 01:41:07.987" level="INFO">@{queryResultSet} = [ 1276877|6.1|110|RECHARGE|1|CRCE|crce01|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|tar...</msg>
<status status="PASS" endtime="20160203 01:41:07.987" starttime="20160203 01:41:07.986"></status>
</kw>
<msg timestamp="20160203 01:41:07.988" level="INFO">@{queryRows} = [ 1276877|6.1|110|RECHARGE|1|CRCE|crce01|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|tar...</msg>
<status status="PASS" endtime="20160203 01:41:07.988" starttime="20160203 01:41:07.724"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160203 01:41:07.990" level="INFO">Length is 1</msg>
<msg timestamp="20160203 01:41:07.990" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160203 01:41:07.990" starttime="20160203 01:41:07.989"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160203 01:41:07.992" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160203 01:41:07.992" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160203 01:41:07.992" starttime="20160203 01:41:07.991"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160203 01:41:07.997" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:41:07.997" starttime="20160203 01:41:07.996"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:07.997" starttime="20160203 01:41:07.993"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:08.000" starttime="20160203 01:41:07.998"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:08.001" starttime="20160203 01:41:07.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:08.004" starttime="20160203 01:41:08.002"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:08.005" starttime="20160203 01:40:53.664"></status>
</kw>
<doc>Send the CRCE Recharge XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:41:08.006" starttime="20160203 01:40:53.659"></status>
</test>
<test id="s1-s3-s1-s1-t5" name="Test CRCE Confirmation ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Conf}</arg>
<arg>CRCE_Conf</arg>
<arg>crce_conf</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:08.033" starttime="20160203 01:41:08.032"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:08.092" starttime="20160203 01:41:08.036"></status>
</kw>
<msg timestamp="20160203 01:41:08.094" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160203 01:41:08.093" starttime="20160203 01:41:08.033"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:41:08.105" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:41:08.527" level="INFO">Read output: Last login: Wed Feb  3 00:40:53 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:41:08.528" starttime="20160203 01:41:08.102"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:08.530" starttime="20160203 01:41:08.095"></status>
</kw>
<msg timestamp="20160203 01:41:08.532" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160203 01:41:08.531" starttime="20160203 01:41:08.027"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:08.541" starttime="20160203 01:41:08.540"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:41:08.543" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160203 01:41:08.546" starttime="20160203 01:41:08.542"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:08.547" starttime="20160203 01:41:08.534"></status>
</kw>
<msg timestamp="20160203 01:41:08.548" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160203 01:41:08.548" starttime="20160203 01:41:08.022"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:09.757" starttime="20160203 01:41:08.558"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:09.758" starttime="20160203 01:41:08.554"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:09.763" starttime="20160203 01:41:09.762"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:09.774" starttime="20160203 01:41:09.764"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:09.775" starttime="20160203 01:41:09.759"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160203 01:41:19.777" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160203 01:41:19.779" starttime="20160203 01:41:09.775"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.790" starttime="20160203 01:41:19.789"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160203 01:41:19.793" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160203 01:41:19.793" starttime="20160203 01:41:19.791"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160203 01:41:19.798" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160203 01:41:19.799" starttime="20160203 01:41:19.794"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.803" starttime="20160203 01:41:19.802"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:41:19.805" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:41:19.853" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:41:19.854" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:41:19.854" starttime="20160203 01:41:19.804"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.855" starttime="20160203 01:41:19.855"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.857" starttime="20160203 01:41:19.856"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.858" starttime="20160203 01:41:19.857"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:41:19.860" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160203 01:41:19.950" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:41:19.952" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:41:19.952" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:41:19.951" starttime="20160203 01:41:19.859"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.959" starttime="20160203 01:41:19.954"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.961" starttime="20160203 01:41:19.960"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.964" starttime="20160203 01:41:19.963"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.967" starttime="20160203 01:41:19.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.970" starttime="20160203 01:41:19.968"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.973" starttime="20160203 01:41:19.971"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.977" starttime="20160203 01:41:19.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.980" starttime="20160203 01:41:19.978"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.983" starttime="20160203 01:41:19.981"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.987" starttime="20160203 01:41:19.984"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:19.989" starttime="20160203 01:41:19.988"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:19.990" starttime="20160203 01:41:19.799"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:41:19.994" level="INFO">Starting command 'cat tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160203 01:41:19.998" starttime="20160203 01:41:19.992"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:41:20.001" level="INFO">Reading output of command 'cat tmpfilemonitor8.log'.</msg>
<msg timestamp="20160203 01:41:20.045" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:41:20.047" level="INFO">${stdout_string} = [2016-02-03 00:41:09,779][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:41:20.046" starttime="20160203 01:41:19.999"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:41:20.051" level="INFO">Executing command 'rm tmpfilemonitor8.log'.</msg>
<msg timestamp="20160203 01:41:20.140" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160203 01:41:20.141" starttime="20160203 01:41:20.048"></status>
</kw>
<msg timestamp="20160203 01:41:20.144" level="INFO">${tailed_text} = [2016-02-03 00:41:09,779][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:41:20.142" starttime="20160203 01:41:19.786"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160203 01:41:20.155" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_Conf_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_Conf_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:41:20.156" starttime="20160203 01:41:20.151"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:20.157" starttime="20160203 01:41:20.145"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:20.165" starttime="20160203 01:41:20.164"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:41:20.167" starttime="20160203 01:41:20.166"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:20.168" starttime="20160203 01:41:20.158"></status>
</kw>
<msg timestamp="20160203 01:41:20.170" level="INFO">${tailed_text} = [2016-02-03 00:41:09,779][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:41:20.169" starttime="20160203 01:41:19.782"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:20.185" starttime="20160203 01:41:20.185"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:20.271" starttime="20160203 01:41:20.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:20.272" starttime="20160203 01:41:20.272"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160203 01:41:20.274" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:41:20.275" level="INFO">${queryResultSetLines} = 1095121|6.1|130|CONF|1|CRCE|crce01|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff|1|null...</msg>
<status status="PASS" endtime="20160203 01:41:20.275" starttime="20160203 01:41:20.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:20.276" starttime="20160203 01:41:20.275"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160203 01:41:20.278" level="INFO">1 lines returned</msg>
<msg timestamp="20160203 01:41:20.278" level="INFO">@{queryResultSet} = [ 1095121|6.1|130|CONF|1|CRCE|crce01|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff|1|nu...</msg>
<status status="PASS" endtime="20160203 01:41:20.278" starttime="20160203 01:41:20.277"></status>
</kw>
<msg timestamp="20160203 01:41:20.279" level="INFO">@{queryRows} = [ 1095121|6.1|130|CONF|1|CRCE|crce01|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff|1|nu...</msg>
<status status="PASS" endtime="20160203 01:41:20.279" starttime="20160203 01:41:20.181"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160203 01:41:20.281" level="INFO">Length is 1</msg>
<msg timestamp="20160203 01:41:20.282" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160203 01:41:20.281" starttime="20160203 01:41:20.280"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160203 01:41:20.283" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160203 01:41:20.284" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160203 01:41:20.283" starttime="20160203 01:41:20.282"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160203 01:41:20.288" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:41:20.289" starttime="20160203 01:41:20.287"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:20.289" starttime="20160203 01:41:20.284"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:20.292" starttime="20160203 01:41:20.290"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:20.293" starttime="20160203 01:41:20.176"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:20.296" starttime="20160203 01:41:20.293"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:20.296" starttime="20160203 01:41:08.011"></status>
</kw>
<doc>Send the CRCE Confirmation XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:41:20.297" starttime="20160203 01:41:08.007"></status>
</test>
<test id="s1-s3-s1-s1-t6" name="Test CRCE AccountChange ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Acc}</arg>
<arg>CRCE_Acc</arg>
<arg>crce_accountchange</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:20.352" starttime="20160203 01:41:20.351"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:20.398" starttime="20160203 01:41:20.356"></status>
</kw>
<msg timestamp="20160203 01:41:20.398" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160203 01:41:20.398" starttime="20160203 01:41:20.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:41:20.403" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:41:21.478" level="INFO">Read output: Last login: Wed Feb  3 00:41:08 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:41:21.478" starttime="20160203 01:41:20.402"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:21.479" starttime="20160203 01:41:20.399"></status>
</kw>
<msg timestamp="20160203 01:41:21.481" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160203 01:41:21.480" starttime="20160203 01:41:20.346"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:21.486" starttime="20160203 01:41:21.485"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:41:21.488" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160203 01:41:21.491" starttime="20160203 01:41:21.487"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:21.492" starttime="20160203 01:41:21.482"></status>
</kw>
<msg timestamp="20160203 01:41:21.493" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160203 01:41:21.492" starttime="20160203 01:41:20.339"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:25.104" starttime="20160203 01:41:21.502"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:25.106" starttime="20160203 01:41:21.499"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:25.112" starttime="20160203 01:41:25.111"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:25.124" starttime="20160203 01:41:25.113"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:25.124" starttime="20160203 01:41:25.108"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160203 01:41:35.126" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160203 01:41:35.128" starttime="20160203 01:41:25.125"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.148" starttime="20160203 01:41:35.145"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160203 01:41:35.155" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160203 01:41:35.154" starttime="20160203 01:41:35.149"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160203 01:41:35.159" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160203 01:41:35.160" starttime="20160203 01:41:35.155"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.166" starttime="20160203 01:41:35.164"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:41:35.168" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:41:35.225" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:41:35.226" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:41:35.226" starttime="20160203 01:41:35.167"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.228" starttime="20160203 01:41:35.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.230" starttime="20160203 01:41:35.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.232" starttime="20160203 01:41:35.231"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:41:35.236" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160203 01:41:35.319" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:41:35.321" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:41:35.321" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:41:35.320" starttime="20160203 01:41:35.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.327" starttime="20160203 01:41:35.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.329" starttime="20160203 01:41:35.328"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.332" starttime="20160203 01:41:35.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.334" starttime="20160203 01:41:35.333"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.336" starttime="20160203 01:41:35.335"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.339" starttime="20160203 01:41:35.337"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.341" starttime="20160203 01:41:35.339"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.344" starttime="20160203 01:41:35.342"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.346" starttime="20160203 01:41:35.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.348" starttime="20160203 01:41:35.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.350" starttime="20160203 01:41:35.349"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:35.351" starttime="20160203 01:41:35.161"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:41:35.354" level="INFO">Starting command 'cat tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160203 01:41:35.359" starttime="20160203 01:41:35.352"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:41:35.361" level="INFO">Reading output of command 'cat tmpfilemonitor9.log'.</msg>
<msg timestamp="20160203 01:41:35.405" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:41:35.406" level="INFO">${stdout_string} = [2016-02-03 00:41:25,174][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:41:35.406" starttime="20160203 01:41:35.360"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:41:35.409" level="INFO">Executing command 'rm tmpfilemonitor9.log'.</msg>
<msg timestamp="20160203 01:41:35.493" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160203 01:41:35.494" starttime="20160203 01:41:35.407"></status>
</kw>
<msg timestamp="20160203 01:41:35.495" level="INFO">${tailed_text} = [2016-02-03 00:41:25,174][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:41:35.494" starttime="20160203 01:41:35.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160203 01:41:35.500" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_Acc_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_Acc_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:41:35.501" starttime="20160203 01:41:35.498"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:35.501" starttime="20160203 01:41:35.495"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.507" starttime="20160203 01:41:35.505"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.508" starttime="20160203 01:41:35.507"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:35.509" starttime="20160203 01:41:35.502"></status>
</kw>
<msg timestamp="20160203 01:41:35.511" level="INFO">${tailed_text} = [2016-02-03 00:41:25,174][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:41:35.510" starttime="20160203 01:41:35.131"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.527" starttime="20160203 01:41:35.526"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.848" starttime="20160203 01:41:35.528"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.849" starttime="20160203 01:41:35.848"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160203 01:41:35.851" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:41:35.852" level="INFO">${queryResultSetLines} = 1328533|6.1|140|ACCOUNT_CHANGE|1|CRCE|crce01|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0|t|OK|NONE|n...</msg>
<status status="PASS" endtime="20160203 01:41:35.851" starttime="20160203 01:41:35.850"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.853" starttime="20160203 01:41:35.852"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160203 01:41:35.854" level="INFO">1 lines returned</msg>
<msg timestamp="20160203 01:41:35.855" level="INFO">@{queryResultSet} = [ 1328533|6.1|140|ACCOUNT_CHANGE|1|CRCE|crce01|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0|t|OK|NONE...</msg>
<status status="PASS" endtime="20160203 01:41:35.855" starttime="20160203 01:41:35.853"></status>
</kw>
<msg timestamp="20160203 01:41:35.856" level="INFO">@{queryRows} = [ 1328533|6.1|140|ACCOUNT_CHANGE|1|CRCE|crce01|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0|t|OK|NONE...</msg>
<status status="PASS" endtime="20160203 01:41:35.856" starttime="20160203 01:41:35.523"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160203 01:41:35.858" level="INFO">Length is 1</msg>
<msg timestamp="20160203 01:41:35.858" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160203 01:41:35.858" starttime="20160203 01:41:35.856"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160203 01:41:35.859" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160203 01:41:35.860" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160203 01:41:35.860" starttime="20160203 01:41:35.859"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160203 01:41:35.864" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:41:35.865" starttime="20160203 01:41:35.863"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:35.865" starttime="20160203 01:41:35.861"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.868" starttime="20160203 01:41:35.866"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:35.868" starttime="20160203 01:41:35.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.871" starttime="20160203 01:41:35.869"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:35.872" starttime="20160203 01:41:20.303"></status>
</kw>
<doc>Send the CRCE AccountChange ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:41:35.873" starttime="20160203 01:41:20.299"></status>
</test>
<test id="s1-s3-s1-s1-t7" name="Test Customer EDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${Cust_EDR}</arg>
<arg>Cust_EDR</arg>
<arg>customer_edr</arg>
<arg>customerid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.899" starttime="20160203 01:41:35.898"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:35.942" starttime="20160203 01:41:35.902"></status>
</kw>
<msg timestamp="20160203 01:41:35.943" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160203 01:41:35.943" starttime="20160203 01:41:35.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:41:35.948" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:41:36.387" level="INFO">Read output: Last login: Wed Feb  3 00:41:21 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:41:36.389" starttime="20160203 01:41:35.947"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:36.390" starttime="20160203 01:41:35.944"></status>
</kw>
<msg timestamp="20160203 01:41:36.393" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160203 01:41:36.392" starttime="20160203 01:41:35.893"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:36.404" starttime="20160203 01:41:36.402"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:41:36.407" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160203 01:41:36.412" starttime="20160203 01:41:36.405"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:36.413" starttime="20160203 01:41:36.395"></status>
</kw>
<msg timestamp="20160203 01:41:36.415" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160203 01:41:36.414" starttime="20160203 01:41:35.888"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:36.500" starttime="20160203 01:41:36.424"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:36.501" starttime="20160203 01:41:36.421"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:36.505" starttime="20160203 01:41:36.505"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:36.517" starttime="20160203 01:41:36.506"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:36.518" starttime="20160203 01:41:36.501"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160203 01:41:46.521" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160203 01:41:46.522" starttime="20160203 01:41:36.518"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.532" starttime="20160203 01:41:46.531"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160203 01:41:46.536" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160203 01:41:46.536" starttime="20160203 01:41:46.532"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160203 01:41:46.541" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160203 01:41:46.542" starttime="20160203 01:41:46.536"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.546" starttime="20160203 01:41:46.545"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:41:46.548" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:41:46.601" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:41:46.602" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:41:46.601" starttime="20160203 01:41:46.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.603" starttime="20160203 01:41:46.602"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.604" starttime="20160203 01:41:46.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.605" starttime="20160203 01:41:46.605"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:41:46.607" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160203 01:41:46.695" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:41:46.695" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:41:46.696" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:41:46.695" starttime="20160203 01:41:46.606"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.699" starttime="20160203 01:41:46.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.700" starttime="20160203 01:41:46.700"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.702" starttime="20160203 01:41:46.701"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.703" starttime="20160203 01:41:46.702"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.704" starttime="20160203 01:41:46.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.705" starttime="20160203 01:41:46.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.707" starttime="20160203 01:41:46.706"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.708" starttime="20160203 01:41:46.707"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.709" starttime="20160203 01:41:46.708"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.710" starttime="20160203 01:41:46.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.712" starttime="20160203 01:41:46.711"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:46.712" starttime="20160203 01:41:46.542"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:41:46.713" level="INFO">Starting command 'cat tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160203 01:41:46.717" starttime="20160203 01:41:46.713"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:41:46.718" level="INFO">Reading output of command 'cat tmpfilemonitor10.log'.</msg>
<msg timestamp="20160203 01:41:46.762" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:41:46.763" level="INFO">${stdout_string} = [2016-02-03 00:41:36,561][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|910|1|soa01|240...</msg>
<status status="PASS" endtime="20160203 01:41:46.763" starttime="20160203 01:41:46.718"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:41:46.765" level="INFO">Executing command 'rm tmpfilemonitor10.log'.</msg>
<msg timestamp="20160203 01:41:46.850" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160203 01:41:46.850" starttime="20160203 01:41:46.764"></status>
</kw>
<msg timestamp="20160203 01:41:46.852" level="INFO">${tailed_text} = [2016-02-03 00:41:36,561][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|910|1|soa01|240...</msg>
<status status="PASS" endtime="20160203 01:41:46.851" starttime="20160203 01:41:46.528"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160203 01:41:46.860" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/Cust_EDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/Cust_EDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:41:46.860" starttime="20160203 01:41:46.857"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:46.861" starttime="20160203 01:41:46.852"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.866" starttime="20160203 01:41:46.865"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.868" starttime="20160203 01:41:46.867"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:46.869" starttime="20160203 01:41:46.861"></status>
</kw>
<msg timestamp="20160203 01:41:46.870" level="INFO">${tailed_text} = [2016-02-03 00:41:36,561][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|910|1|soa01|240...</msg>
<status status="PASS" endtime="20160203 01:41:46.870" starttime="20160203 01:41:46.524"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.885" starttime="20160203 01:41:46.884"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.891" starttime="20160203 01:41:46.886"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.893" starttime="20160203 01:41:46.892"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160203 01:41:46.894" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:41:46.895" level="INFO">${queryResultSetLines} = 1000076|6.1|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.|
</msg>
<status status="PASS" endtime="20160203 01:41:46.895" starttime="20160203 01:41:46.893"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.896" starttime="20160203 01:41:46.896"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160203 01:41:46.898" level="INFO">1 lines returned</msg>
<msg timestamp="20160203 01:41:46.898" level="INFO">@{queryResultSet} = [ 1000076|6.1|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.| ]</msg>
<status status="PASS" endtime="20160203 01:41:46.898" starttime="20160203 01:41:46.897"></status>
</kw>
<msg timestamp="20160203 01:41:46.899" level="INFO">@{queryRows} = [ 1000076|6.1|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.| ]</msg>
<status status="PASS" endtime="20160203 01:41:46.899" starttime="20160203 01:41:46.881"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160203 01:41:46.901" level="INFO">Length is 1</msg>
<msg timestamp="20160203 01:41:46.902" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160203 01:41:46.901" starttime="20160203 01:41:46.900"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160203 01:41:46.903" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160203 01:41:46.904" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160203 01:41:46.903" starttime="20160203 01:41:46.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160203 01:41:46.908" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:41:46.908" starttime="20160203 01:41:46.907"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:46.909" starttime="20160203 01:41:46.904"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.911" starttime="20160203 01:41:46.909"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:46.912" starttime="20160203 01:41:46.877"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.915" starttime="20160203 01:41:46.912"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:46.916" starttime="20160203 01:41:35.878"></status>
</kw>
<doc>Send the CRM EDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:41:46.917" starttime="20160203 01:41:35.874"></status>
</test>
<test id="s1-s3-s1-s1-t8" name="Test Customer SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SDR_IME}</arg>
<arg>SDR_IME</arg>
<arg>inotif_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.945" starttime="20160203 01:41:46.944"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:46.993" starttime="20160203 01:41:46.949"></status>
</kw>
<msg timestamp="20160203 01:41:46.993" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160203 01:41:46.993" starttime="20160203 01:41:46.945"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:41:46.998" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:41:47.433" level="INFO">Read output: Last login: Wed Feb  3 00:41:36 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:41:47.434" starttime="20160203 01:41:46.997"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:47.435" starttime="20160203 01:41:46.994"></status>
</kw>
<msg timestamp="20160203 01:41:47.437" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160203 01:41:47.437" starttime="20160203 01:41:46.940"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:47.443" starttime="20160203 01:41:47.442"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:41:47.445" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20160203 01:41:47.449" starttime="20160203 01:41:47.443"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:47.449" starttime="20160203 01:41:47.438"></status>
</kw>
<msg timestamp="20160203 01:41:47.450" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160203 01:41:47.450" starttime="20160203 01:41:46.933"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:47.628" starttime="20160203 01:41:47.461"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:47.629" starttime="20160203 01:41:47.458"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:47.634" starttime="20160203 01:41:47.633"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:47.646" starttime="20160203 01:41:47.635"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:47.647" starttime="20160203 01:41:47.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160203 01:41:57.648" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160203 01:41:57.649" starttime="20160203 01:41:47.647"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.659" starttime="20160203 01:41:57.658"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160203 01:41:57.662" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160203 01:41:57.662" starttime="20160203 01:41:57.659"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160203 01:41:57.667" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160203 01:41:57.668" starttime="20160203 01:41:57.662"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.673" starttime="20160203 01:41:57.672"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:41:57.674" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:41:57.723" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:41:57.724" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:41:57.723" starttime="20160203 01:41:57.674"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.725" starttime="20160203 01:41:57.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.726" starttime="20160203 01:41:57.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.727" starttime="20160203 01:41:57.726"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:41:57.729" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160203 01:41:57.819" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:41:57.819" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:41:57.820" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:41:57.819" starttime="20160203 01:41:57.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.823" starttime="20160203 01:41:57.820"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.825" starttime="20160203 01:41:57.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.826" starttime="20160203 01:41:57.825"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.827" starttime="20160203 01:41:57.827"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.829" starttime="20160203 01:41:57.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.830" starttime="20160203 01:41:57.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.831" starttime="20160203 01:41:57.830"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.833" starttime="20160203 01:41:57.832"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.835" starttime="20160203 01:41:57.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.836" starttime="20160203 01:41:57.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:57.837" starttime="20160203 01:41:57.836"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:57.838" starttime="20160203 01:41:57.668"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:41:57.839" level="INFO">Starting command 'cat tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20160203 01:41:57.843" starttime="20160203 01:41:57.838"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:41:57.844" level="INFO">Reading output of command 'cat tmpfilemonitor11.log'.</msg>
<msg timestamp="20160203 01:41:57.890" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:41:57.890" level="INFO">${stdout_string} = [2016-02-03 00:41:47,643][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160203 01:41:57.890" starttime="20160203 01:41:57.843"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:41:57.892" level="INFO">Executing command 'rm tmpfilemonitor11.log'.</msg>
<msg timestamp="20160203 01:41:57.990" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160203 01:41:57.990" starttime="20160203 01:41:57.891"></status>
</kw>
<msg timestamp="20160203 01:41:57.991" level="INFO">${tailed_text} = [2016-02-03 00:41:47,643][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160203 01:41:57.991" starttime="20160203 01:41:57.654"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160203 01:41:57.996" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/SDR_IME_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/SDR_IME_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:41:57.997" starttime="20160203 01:41:57.994"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:57.997" starttime="20160203 01:41:57.991"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:58.002" starttime="20160203 01:41:58.001"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:41:58.003" starttime="20160203 01:41:58.002"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:58.005" starttime="20160203 01:41:57.998"></status>
</kw>
<msg timestamp="20160203 01:41:58.006" level="INFO">${tailed_text} = [2016-02-03 00:41:47,643][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160203 01:41:58.006" starttime="20160203 01:41:57.651"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:58.021" starttime="20160203 01:41:58.021"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:58.026" starttime="20160203 01:41:58.022"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:58.027" starttime="20160203 01:41:58.027"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160203 01:41:58.029" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:41:58.030" level="INFO">${queryResultSetLines} = 1001129|6.1|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|6.1|null|NEW|2015-02-23 23...</msg>
<status status="PASS" endtime="20160203 01:41:58.030" starttime="20160203 01:41:58.028"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:58.031" starttime="20160203 01:41:58.030"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160203 01:41:58.032" level="INFO">1 lines returned</msg>
<msg timestamp="20160203 01:41:58.033" level="INFO">@{queryResultSet} = [ 1001129|6.1|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|6.1|null|NEW|2015-02-23 ...</msg>
<status status="PASS" endtime="20160203 01:41:58.033" starttime="20160203 01:41:58.032"></status>
</kw>
<msg timestamp="20160203 01:41:58.034" level="INFO">@{queryRows} = [ 1001129|6.1|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|6.1|null|NEW|2015-02-23 ...</msg>
<status status="PASS" endtime="20160203 01:41:58.034" starttime="20160203 01:41:58.017"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160203 01:41:58.036" level="INFO">Length is 1</msg>
<msg timestamp="20160203 01:41:58.036" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160203 01:41:58.036" starttime="20160203 01:41:58.035"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160203 01:41:58.038" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160203 01:41:58.038" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160203 01:41:58.038" starttime="20160203 01:41:58.037"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160203 01:41:58.043" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:41:58.043" starttime="20160203 01:41:58.042"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:58.044" starttime="20160203 01:41:58.039"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:58.046" starttime="20160203 01:41:58.044"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:58.047" starttime="20160203 01:41:58.013"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:58.050" starttime="20160203 01:41:58.047"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:58.050" starttime="20160203 01:41:46.923"></status>
</kw>
<doc>Send the CRM SDR IME ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:41:58.051" starttime="20160203 01:41:46.919"></status>
</test>
<test id="s1-s3-s1-s1-t9" name="Test Customer IVR SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${IVR_SDR}</arg>
<arg>IVR_SDR</arg>
<arg>ivr_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:58.078" starttime="20160203 01:41:58.078"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:58.124" starttime="20160203 01:41:58.082"></status>
</kw>
<msg timestamp="20160203 01:41:58.125" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160203 01:41:58.124" starttime="20160203 01:41:58.079"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:41:58.129" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:41:58.587" level="INFO">Read output: Last login: Wed Feb  3 00:41:47 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:41:58.587" starttime="20160203 01:41:58.128"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:58.588" starttime="20160203 01:41:58.125"></status>
</kw>
<msg timestamp="20160203 01:41:58.589" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160203 01:41:58.588" starttime="20160203 01:41:58.073"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:58.594" starttime="20160203 01:41:58.593"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:41:58.596" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20160203 01:41:58.600" starttime="20160203 01:41:58.595"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:58.600" starttime="20160203 01:41:58.590"></status>
</kw>
<msg timestamp="20160203 01:41:58.601" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160203 01:41:58.601" starttime="20160203 01:41:58.068"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:58.760" starttime="20160203 01:41:58.611"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:58.760" starttime="20160203 01:41:58.607"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:58.765" starttime="20160203 01:41:58.764"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:41:58.775" starttime="20160203 01:41:58.765"></status>
</kw>
<status status="PASS" endtime="20160203 01:41:58.776" starttime="20160203 01:41:58.761"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160203 01:42:08.777" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160203 01:42:08.778" starttime="20160203 01:41:58.776"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.788" starttime="20160203 01:42:08.787"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160203 01:42:08.791" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160203 01:42:08.791" starttime="20160203 01:42:08.789"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160203 01:42:08.796" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160203 01:42:08.797" starttime="20160203 01:42:08.792"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.802" starttime="20160203 01:42:08.801"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:42:08.803" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:42:08.859" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:42:08.860" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:42:08.859" starttime="20160203 01:42:08.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.861" starttime="20160203 01:42:08.860"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.862" starttime="20160203 01:42:08.861"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.863" starttime="20160203 01:42:08.863"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:42:08.865" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160203 01:42:08.956" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:42:08.957" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:42:08.957" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:42:08.956" starttime="20160203 01:42:08.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.961" starttime="20160203 01:42:08.958"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.962" starttime="20160203 01:42:08.961"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.963" starttime="20160203 01:42:08.962"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.964" starttime="20160203 01:42:08.963"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.966" starttime="20160203 01:42:08.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.967" starttime="20160203 01:42:08.966"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.969" starttime="20160203 01:42:08.968"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.970" starttime="20160203 01:42:08.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.971" starttime="20160203 01:42:08.970"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.972" starttime="20160203 01:42:08.972"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:08.973" starttime="20160203 01:42:08.973"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:08.974" starttime="20160203 01:42:08.797"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:42:08.975" level="INFO">Starting command 'cat tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20160203 01:42:08.979" starttime="20160203 01:42:08.975"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:42:08.980" level="INFO">Reading output of command 'cat tmpfilemonitor12.log'.</msg>
<msg timestamp="20160203 01:42:09.026" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:42:09.027" level="INFO">${stdout_string} = [2016-02-03 00:41:58,774][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=1.0|601|2015-02-23T...</msg>
<status status="PASS" endtime="20160203 01:42:09.027" starttime="20160203 01:42:08.980"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:42:09.029" level="INFO">Executing command 'rm tmpfilemonitor12.log'.</msg>
<msg timestamp="20160203 01:42:09.117" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160203 01:42:09.117" starttime="20160203 01:42:09.028"></status>
</kw>
<msg timestamp="20160203 01:42:09.119" level="INFO">${tailed_text} = [2016-02-03 00:41:58,774][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=1.0|601|2015-02-23T...</msg>
<status status="PASS" endtime="20160203 01:42:09.118" starttime="20160203 01:42:08.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160203 01:42:09.124" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/IVR_SDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/IVR_SDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:42:09.124" starttime="20160203 01:42:09.122"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:09.125" starttime="20160203 01:42:09.119"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:09.129" starttime="20160203 01:42:09.128"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:42:09.131" starttime="20160203 01:42:09.130"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:09.132" starttime="20160203 01:42:09.125"></status>
</kw>
<msg timestamp="20160203 01:42:09.133" level="INFO">${tailed_text} = [2016-02-03 00:41:58,774][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=1.0|601|2015-02-23T...</msg>
<status status="PASS" endtime="20160203 01:42:09.133" starttime="20160203 01:42:08.780"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:09.148" starttime="20160203 01:42:09.148"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:09.161" starttime="20160203 01:42:09.149"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:09.162" starttime="20160203 01:42:09.161"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160203 01:42:09.164" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:42:09.165" level="INFO">${queryResultSetLines} = 1000994|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0|A...</msg>
<status status="PASS" endtime="20160203 01:42:09.164" starttime="20160203 01:42:09.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:09.166" starttime="20160203 01:42:09.165"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160203 01:42:09.167" level="INFO">1 lines returned</msg>
<msg timestamp="20160203 01:42:09.168" level="INFO">@{queryResultSet} = [ 1000994|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0...</msg>
<status status="PASS" endtime="20160203 01:42:09.168" starttime="20160203 01:42:09.166"></status>
</kw>
<msg timestamp="20160203 01:42:09.169" level="INFO">@{queryRows} = [ 1000994|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0...</msg>
<status status="PASS" endtime="20160203 01:42:09.169" starttime="20160203 01:42:09.144"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160203 01:42:09.171" level="INFO">Length is 1</msg>
<msg timestamp="20160203 01:42:09.171" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160203 01:42:09.171" starttime="20160203 01:42:09.169"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160203 01:42:09.172" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160203 01:42:09.173" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160203 01:42:09.173" starttime="20160203 01:42:09.172"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160203 01:42:09.177" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:42:09.178" starttime="20160203 01:42:09.176"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:09.178" starttime="20160203 01:42:09.174"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:09.181" starttime="20160203 01:42:09.179"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:09.181" starttime="20160203 01:42:09.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:09.184" starttime="20160203 01:42:09.182"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:09.185" starttime="20160203 01:41:58.057"></status>
</kw>
<doc>Send the IVR SDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:42:09.185" starttime="20160203 01:41:58.053"></status>
</test>
<test id="s1-s3-s1-s1-t10" name="Test Customer PROV SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${PROV_SDR}</arg>
<arg>PROV_SDR</arg>
<arg>prov_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:09.212" starttime="20160203 01:42:09.211"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:09.259" starttime="20160203 01:42:09.216"></status>
</kw>
<msg timestamp="20160203 01:42:09.259" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160203 01:42:09.259" starttime="20160203 01:42:09.213"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:42:09.264" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:42:09.739" level="INFO">Read output: Last login: Wed Feb  3 00:41:58 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:42:09.740" starttime="20160203 01:42:09.263"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:09.740" starttime="20160203 01:42:09.260"></status>
</kw>
<msg timestamp="20160203 01:42:09.742" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160203 01:42:09.741" starttime="20160203 01:42:09.207"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:09.748" starttime="20160203 01:42:09.747"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:42:09.750" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20160203 01:42:09.754" starttime="20160203 01:42:09.748"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:09.754" starttime="20160203 01:42:09.743"></status>
</kw>
<msg timestamp="20160203 01:42:09.755" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160203 01:42:09.755" starttime="20160203 01:42:09.201"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:11.259" starttime="20160203 01:42:09.766"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:11.261" starttime="20160203 01:42:09.762"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:11.266" starttime="20160203 01:42:11.265"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:11.280" starttime="20160203 01:42:11.266"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:11.280" starttime="20160203 01:42:11.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160203 01:42:21.283" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160203 01:42:21.284" starttime="20160203 01:42:11.281"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.293" starttime="20160203 01:42:21.292"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160203 01:42:21.297" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160203 01:42:21.297" starttime="20160203 01:42:21.294"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160203 01:42:21.302" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160203 01:42:21.302" starttime="20160203 01:42:21.298"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.307" starttime="20160203 01:42:21.306"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:42:21.308" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:42:21.366" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:42:21.367" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:42:21.367" starttime="20160203 01:42:21.308"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.369" starttime="20160203 01:42:21.368"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.370" starttime="20160203 01:42:21.369"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.371" starttime="20160203 01:42:21.370"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:42:21.373" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160203 01:42:21.460" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:42:21.461" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:42:21.461" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:42:21.461" starttime="20160203 01:42:21.371"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.465" starttime="20160203 01:42:21.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.466" starttime="20160203 01:42:21.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.467" starttime="20160203 01:42:21.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.468" starttime="20160203 01:42:21.468"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.470" starttime="20160203 01:42:21.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.471" starttime="20160203 01:42:21.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.472" starttime="20160203 01:42:21.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.473" starttime="20160203 01:42:21.473"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.474" starttime="20160203 01:42:21.474"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.476" starttime="20160203 01:42:21.475"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.477" starttime="20160203 01:42:21.476"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:21.477" starttime="20160203 01:42:21.303"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:42:21.479" level="INFO">Starting command 'cat tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20160203 01:42:21.482" starttime="20160203 01:42:21.478"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:42:21.483" level="INFO">Reading output of command 'cat tmpfilemonitor13.log'.</msg>
<msg timestamp="20160203 01:42:21.526" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:42:21.527" level="INFO">${stdout_string} = [2016-02-03 00:42:11,275][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160203 01:42:21.526" starttime="20160203 01:42:21.482"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:42:21.528" level="INFO">Executing command 'rm tmpfilemonitor13.log'.</msg>
<msg timestamp="20160203 01:42:21.613" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160203 01:42:21.613" starttime="20160203 01:42:21.527"></status>
</kw>
<msg timestamp="20160203 01:42:21.614" level="INFO">${tailed_text} = [2016-02-03 00:42:11,275][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160203 01:42:21.614" starttime="20160203 01:42:21.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160203 01:42:21.619" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/PROV_SDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/PROV_SDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:42:21.619" starttime="20160203 01:42:21.617"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:21.620" starttime="20160203 01:42:21.615"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.625" starttime="20160203 01:42:21.624"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.626" starttime="20160203 01:42:21.625"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:21.630" starttime="20160203 01:42:21.621"></status>
</kw>
<msg timestamp="20160203 01:42:21.631" level="INFO">${tailed_text} = [2016-02-03 00:42:11,275][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160203 01:42:21.631" starttime="20160203 01:42:21.285"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.646" starttime="20160203 01:42:21.645"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.684" starttime="20160203 01:42:21.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.685" starttime="20160203 01:42:21.685"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160203 01:42:21.687" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:42:21.688" level="INFO">${queryResultSetLines} = 1052928|6.1|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|null|...</msg>
<status status="PASS" endtime="20160203 01:42:21.687" starttime="20160203 01:42:21.686"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.689" starttime="20160203 01:42:21.688"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160203 01:42:21.690" level="INFO">1 lines returned</msg>
<msg timestamp="20160203 01:42:21.691" level="INFO">@{queryResultSet} = [ 1052928|6.1|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|nul...</msg>
<status status="PASS" endtime="20160203 01:42:21.691" starttime="20160203 01:42:21.689"></status>
</kw>
<msg timestamp="20160203 01:42:21.692" level="INFO">@{queryRows} = [ 1052928|6.1|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|nul...</msg>
<status status="PASS" endtime="20160203 01:42:21.691" starttime="20160203 01:42:21.642"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160203 01:42:21.693" level="INFO">Length is 1</msg>
<msg timestamp="20160203 01:42:21.694" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160203 01:42:21.694" starttime="20160203 01:42:21.692"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160203 01:42:21.695" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160203 01:42:21.696" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160203 01:42:21.696" starttime="20160203 01:42:21.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160203 01:42:21.700" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:42:21.700" starttime="20160203 01:42:21.699"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:21.701" starttime="20160203 01:42:21.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.703" starttime="20160203 01:42:21.701"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:21.704" starttime="20160203 01:42:21.638"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.707" starttime="20160203 01:42:21.704"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:21.707" starttime="20160203 01:42:09.191"></status>
</kw>
<doc>Send the PROV SDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:42:21.708" starttime="20160203 01:42:09.187"></status>
</test>
<test id="s1-s3-s1-s1-t11" name="Test MoneyTX ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MoneyTX}</arg>
<arg>MoneyTX</arg>
<arg>crce_moneytx</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.734" starttime="20160203 01:42:21.733"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:21.784" starttime="20160203 01:42:21.737"></status>
</kw>
<msg timestamp="20160203 01:42:21.785" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160203 01:42:21.784" starttime="20160203 01:42:21.735"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:42:21.789" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:42:22.518" level="INFO">Read output: Last login: Wed Feb  3 00:42:09 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:42:22.519" starttime="20160203 01:42:21.788"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:22.520" starttime="20160203 01:42:21.785"></status>
</kw>
<msg timestamp="20160203 01:42:22.522" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160203 01:42:22.521" starttime="20160203 01:42:21.729"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:22.528" starttime="20160203 01:42:22.527"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:42:22.530" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20160203 01:42:22.534" starttime="20160203 01:42:22.528"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:22.535" starttime="20160203 01:42:22.523"></status>
</kw>
<msg timestamp="20160203 01:42:22.536" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160203 01:42:22.535" starttime="20160203 01:42:21.724"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:22.654" starttime="20160203 01:42:22.546"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:22.654" starttime="20160203 01:42:22.543"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:22.659" starttime="20160203 01:42:22.658"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:22.669" starttime="20160203 01:42:22.659"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:22.670" starttime="20160203 01:42:22.655"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160203 01:42:32.671" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160203 01:42:32.672" starttime="20160203 01:42:22.670"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.681" starttime="20160203 01:42:32.680"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160203 01:42:32.685" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160203 01:42:32.684" starttime="20160203 01:42:32.682"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160203 01:42:32.689" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160203 01:42:32.689" starttime="20160203 01:42:32.685"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.694" starttime="20160203 01:42:32.693"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:42:32.695" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:42:32.739" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:42:32.740" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:42:32.739" starttime="20160203 01:42:32.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.741" starttime="20160203 01:42:32.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.742" starttime="20160203 01:42:32.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.743" starttime="20160203 01:42:32.743"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:42:32.745" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160203 01:42:32.829" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:42:32.830" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:42:32.830" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:42:32.830" starttime="20160203 01:42:32.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.833" starttime="20160203 01:42:32.831"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.835" starttime="20160203 01:42:32.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.836" starttime="20160203 01:42:32.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.837" starttime="20160203 01:42:32.836"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.838" starttime="20160203 01:42:32.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.839" starttime="20160203 01:42:32.839"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.841" starttime="20160203 01:42:32.840"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.842" starttime="20160203 01:42:32.841"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.843" starttime="20160203 01:42:32.842"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.844" starttime="20160203 01:42:32.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.845" starttime="20160203 01:42:32.845"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:32.846" starttime="20160203 01:42:32.690"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:42:32.847" level="INFO">Starting command 'cat tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20160203 01:42:32.850" starttime="20160203 01:42:32.846"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:42:32.852" level="INFO">Reading output of command 'cat tmpfilemonitor14.log'.</msg>
<msg timestamp="20160203 01:42:32.893" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:42:32.894" level="INFO">${stdout_string} = [2016-02-03 00:42:22,668][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|120|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:42:32.894" starttime="20160203 01:42:32.851"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:42:32.895" level="INFO">Executing command 'rm tmpfilemonitor14.log'.</msg>
<msg timestamp="20160203 01:42:32.969" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160203 01:42:32.970" starttime="20160203 01:42:32.894"></status>
</kw>
<msg timestamp="20160203 01:42:32.971" level="INFO">${tailed_text} = [2016-02-03 00:42:22,668][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|120|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:42:32.970" starttime="20160203 01:42:32.677"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160203 01:42:32.976" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/MoneyTX_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/MoneyTX_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:42:32.976" starttime="20160203 01:42:32.974"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:32.977" starttime="20160203 01:42:32.971"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.981" starttime="20160203 01:42:32.980"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:42:32.983" starttime="20160203 01:42:32.982"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:32.984" starttime="20160203 01:42:32.977"></status>
</kw>
<msg timestamp="20160203 01:42:32.985" level="INFO">${tailed_text} = [2016-02-03 00:42:22,668][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|120|true|1|CRCE...</msg>
<status status="PASS" endtime="20160203 01:42:32.985" starttime="20160203 01:42:32.673"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:33.001" starttime="20160203 01:42:33.000"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:33.005" starttime="20160203 01:42:33.001"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:33.006" starttime="20160203 01:42:33.006"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160203 01:42:33.008" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:42:33.009" level="INFO">${queryResultSetLines} = 1000118|6.1|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|1|...</msg>
<status status="PASS" endtime="20160203 01:42:33.008" starttime="20160203 01:42:33.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:33.010" starttime="20160203 01:42:33.009"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160203 01:42:33.011" level="INFO">1 lines returned</msg>
<msg timestamp="20160203 01:42:33.012" level="INFO">@{queryResultSet} = [ 1000118|6.1|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|...</msg>
<status status="PASS" endtime="20160203 01:42:33.011" starttime="20160203 01:42:33.010"></status>
</kw>
<msg timestamp="20160203 01:42:33.013" level="INFO">@{queryRows} = [ 1000118|6.1|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|...</msg>
<status status="PASS" endtime="20160203 01:42:33.012" starttime="20160203 01:42:32.996"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160203 01:42:33.015" level="INFO">Length is 1</msg>
<msg timestamp="20160203 01:42:33.015" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160203 01:42:33.015" starttime="20160203 01:42:33.014"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160203 01:42:33.016" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160203 01:42:33.017" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160203 01:42:33.017" starttime="20160203 01:42:33.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160203 01:42:33.021" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:42:33.022" starttime="20160203 01:42:33.020"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:33.022" starttime="20160203 01:42:33.018"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:33.025" starttime="20160203 01:42:33.023"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:33.025" starttime="20160203 01:42:32.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:33.028" starttime="20160203 01:42:33.026"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:33.029" starttime="20160203 01:42:21.713"></status>
</kw>
<doc>Send the MoneyTX CRCE ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:42:33.030" starttime="20160203 01:42:21.710"></status>
</test>
<test id="s1-s3-s1-s1-t12" name="Test SwapSIM ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${swapSIM}</arg>
<arg>swapSIM</arg>
<arg>crce_simswap</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:33.056" starttime="20160203 01:42:33.056"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:33.105" starttime="20160203 01:42:33.060"></status>
</kw>
<msg timestamp="20160203 01:42:33.107" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160203 01:42:33.107" starttime="20160203 01:42:33.057"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:42:33.111" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:42:33.600" level="INFO">Read output: Last login: Wed Feb  3 00:42:21 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:42:33.600" starttime="20160203 01:42:33.110"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:33.601" starttime="20160203 01:42:33.108"></status>
</kw>
<msg timestamp="20160203 01:42:33.602" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160203 01:42:33.601" starttime="20160203 01:42:33.051"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:33.607" starttime="20160203 01:42:33.606"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:42:33.609" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20160203 01:42:33.612" starttime="20160203 01:42:33.608"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:33.613" starttime="20160203 01:42:33.603"></status>
</kw>
<msg timestamp="20160203 01:42:33.614" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160203 01:42:33.613" starttime="20160203 01:42:33.046"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:33.786" starttime="20160203 01:42:33.623"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:33.787" starttime="20160203 01:42:33.620"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:33.792" starttime="20160203 01:42:33.791"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:33.803" starttime="20160203 01:42:33.793"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:33.804" starttime="20160203 01:42:33.788"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160203 01:42:43.805" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160203 01:42:43.806" starttime="20160203 01:42:33.804"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.816" starttime="20160203 01:42:43.814"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160203 01:42:43.819" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160203 01:42:43.818" starttime="20160203 01:42:43.816"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160203 01:42:43.823" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160203 01:42:43.823" starttime="20160203 01:42:43.819"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.828" starttime="20160203 01:42:43.827"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:42:43.829" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:42:43.869" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:42:43.870" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:42:43.870" starttime="20160203 01:42:43.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.871" starttime="20160203 01:42:43.870"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.872" starttime="20160203 01:42:43.872"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.874" starttime="20160203 01:42:43.873"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:42:43.875" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160203 01:42:43.955" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:42:43.956" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:42:43.956" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:42:43.955" starttime="20160203 01:42:43.874"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.959" starttime="20160203 01:42:43.957"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.960" starttime="20160203 01:42:43.960"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.962" starttime="20160203 01:42:43.961"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.963" starttime="20160203 01:42:43.962"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.964" starttime="20160203 01:42:43.963"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.965" starttime="20160203 01:42:43.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.967" starttime="20160203 01:42:43.966"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.968" starttime="20160203 01:42:43.967"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.969" starttime="20160203 01:42:43.968"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.970" starttime="20160203 01:42:43.970"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:43.971" starttime="20160203 01:42:43.971"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:43.972" starttime="20160203 01:42:43.824"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:42:43.973" level="INFO">Starting command 'cat tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20160203 01:42:43.977" starttime="20160203 01:42:43.972"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:42:43.978" level="INFO">Reading output of command 'cat tmpfilemonitor15.log'.</msg>
<msg timestamp="20160203 01:42:44.023" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:42:44.024" level="INFO">${stdout_string} = [2016-02-03 00:42:33,801][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|160|true|16|CRC...</msg>
<status status="PASS" endtime="20160203 01:42:44.023" starttime="20160203 01:42:43.977"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:42:44.026" level="INFO">Executing command 'rm tmpfilemonitor15.log'.</msg>
<msg timestamp="20160203 01:42:44.108" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160203 01:42:44.109" starttime="20160203 01:42:44.025"></status>
</kw>
<msg timestamp="20160203 01:42:44.110" level="INFO">${tailed_text} = [2016-02-03 00:42:33,801][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|160|true|16|CRC...</msg>
<status status="PASS" endtime="20160203 01:42:44.110" starttime="20160203 01:42:43.811"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160203 01:42:44.115" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/swapSIM_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/swapSIM_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:42:44.116" starttime="20160203 01:42:44.114"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:44.116" starttime="20160203 01:42:44.111"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:44.121" starttime="20160203 01:42:44.120"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:42:44.122" starttime="20160203 01:42:44.121"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:44.125" starttime="20160203 01:42:44.117"></status>
</kw>
<msg timestamp="20160203 01:42:44.126" level="INFO">${tailed_text} = [2016-02-03 00:42:33,801][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|160|true|16|CRC...</msg>
<status status="PASS" endtime="20160203 01:42:44.126" starttime="20160203 01:42:43.808"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:44.141" starttime="20160203 01:42:44.141"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:44.146" starttime="20160203 01:42:44.142"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:44.147" starttime="20160203 01:42:44.146"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160203 01:42:44.148" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:42:44.149" level="INFO">${queryResultSetLines} = 1001662|6.1|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|nul...</msg>
<status status="PASS" endtime="20160203 01:42:44.149" starttime="20160203 01:42:44.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:44.150" starttime="20160203 01:42:44.150"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160203 01:42:44.152" level="INFO">1 lines returned</msg>
<msg timestamp="20160203 01:42:44.152" level="INFO">@{queryResultSet} = [ 1001662|6.1|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|n...</msg>
<status status="PASS" endtime="20160203 01:42:44.152" starttime="20160203 01:42:44.151"></status>
</kw>
<msg timestamp="20160203 01:42:44.153" level="INFO">@{queryRows} = [ 1001662|6.1|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|n...</msg>
<status status="PASS" endtime="20160203 01:42:44.153" starttime="20160203 01:42:44.137"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160203 01:42:44.155" level="INFO">Length is 1</msg>
<msg timestamp="20160203 01:42:44.155" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160203 01:42:44.155" starttime="20160203 01:42:44.154"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160203 01:42:44.157" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160203 01:42:44.157" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160203 01:42:44.157" starttime="20160203 01:42:44.156"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160203 01:42:44.161" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:42:44.162" starttime="20160203 01:42:44.160"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:44.162" starttime="20160203 01:42:44.158"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:44.165" starttime="20160203 01:42:44.163"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:44.166" starttime="20160203 01:42:44.133"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:44.168" starttime="20160203 01:42:44.166"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:44.169" starttime="20160203 01:42:33.035"></status>
</kw>
<doc>Send the swapSIM CRCE ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:42:44.170" starttime="20160203 01:42:33.031"></status>
</test>
<test id="s1-s3-s1-s1-t13" name="Test MOC NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${MOC_NOK}</arg>
<arg>MOC_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160203 01:42:44.182" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160203 01:42:44.183" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160203 01:42:44.183" starttime="20160203 01:42:44.180"></status>
</kw>
<status status="FAIL" endtime="20160203 01:42:44.183" starttime="20160203 01:42:44.176"></status>
</kw>
<doc>Send the invalid MOC XDR ticket with following changes: Version (Header, Mandatory, changed), Provider (H,M,empty), Success (H,M,changed), CRCE Operation (B,M, changed), TrafficType (B,M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160203 01:42:44.184" starttime="20160203 01:42:44.171">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-s3-s1-s1-t14" name="Test SMS NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${SMS_NOK}</arg>
<arg>SMS_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160203 01:42:44.196" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160203 01:42:44.197" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160203 01:42:44.197" starttime="20160203 01:42:44.195"></status>
</kw>
<status status="FAIL" endtime="20160203 01:42:44.197" starttime="20160203 01:42:44.190"></status>
</kw>
<doc>Send the invalid SMS XDR ticket with following changes: Version (Header, Mandatory, changed), TrafficType (B, M, mpty), CRCE Result Code (B, M, changed). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160203 01:42:44.198" starttime="20160203 01:42:44.186">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-s3-s1-s1-t15" name="Test DATA NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${DATA_NOK}</arg>
<arg>DATA_NOK</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160203 01:42:44.209" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160203 01:42:44.210" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160203 01:42:44.211" starttime="20160203 01:42:44.208"></status>
</kw>
<status status="FAIL" endtime="20160203 01:42:44.211" starttime="20160203 01:42:44.204"></status>
</kw>
<doc>Send the invalid DATA XDR ticket with following changes: Application (Header, Mandatory, empty), Tariff (B, M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160203 01:42:44.212" starttime="20160203 01:42:44.200">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-s3-s1-s1-t16" name="Test MOC NOK - Invalid ASCII ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC_NOK_ASCII}</arg>
<arg>MOC_NOK_ASCII</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:44.238" starttime="20160203 01:42:44.237"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:44.283" starttime="20160203 01:42:44.242"></status>
</kw>
<msg timestamp="20160203 01:42:44.284" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160203 01:42:44.283" starttime="20160203 01:42:44.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 01:42:44.289" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 01:42:44.702" level="INFO">Read output: Last login: Wed Feb  3 00:42:33 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 01:42:44.703" starttime="20160203 01:42:44.287"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:44.704" starttime="20160203 01:42:44.284"></status>
</kw>
<msg timestamp="20160203 01:42:44.705" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160203 01:42:44.704" starttime="20160203 01:42:44.233"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:44.710" starttime="20160203 01:42:44.709"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:42:44.712" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20160203 01:42:44.715" starttime="20160203 01:42:44.711"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:44.716" starttime="20160203 01:42:44.706"></status>
</kw>
<msg timestamp="20160203 01:42:44.717" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160203 01:42:44.716" starttime="20160203 01:42:44.228"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:44.730" starttime="20160203 01:42:44.726"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:44.731" starttime="20160203 01:42:44.723"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:44.735" starttime="20160203 01:42:44.735"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:44.764" starttime="20160203 01:42:44.736"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:44.764" starttime="20160203 01:42:44.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160203 01:42:54.766" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160203 01:42:54.769" starttime="20160203 01:42:44.765"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.779" starttime="20160203 01:42:54.778"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160203 01:42:54.782" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160203 01:42:54.782" starttime="20160203 01:42:54.779"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160203 01:42:54.786" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160203 01:42:54.786" starttime="20160203 01:42:54.783"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.791" starttime="20160203 01:42:54.790"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160203 01:42:54.793" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160203 01:42:54.842" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:42:54.843" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160203 01:42:54.843" starttime="20160203 01:42:54.792"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.844" starttime="20160203 01:42:54.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.846" starttime="20160203 01:42:54.845"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.847" starttime="20160203 01:42:54.846"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160203 01:42:54.849" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160203 01:42:54.935" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:42:54.936" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160203 01:42:54.936" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 01:42:54.935" starttime="20160203 01:42:54.847"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.939" starttime="20160203 01:42:54.936"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.940" starttime="20160203 01:42:54.940"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.942" starttime="20160203 01:42:54.941"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.943" starttime="20160203 01:42:54.942"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.944" starttime="20160203 01:42:54.943"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.945" starttime="20160203 01:42:54.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.946" starttime="20160203 01:42:54.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.948" starttime="20160203 01:42:54.947"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.949" starttime="20160203 01:42:54.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.950" starttime="20160203 01:42:54.949"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:54.951" starttime="20160203 01:42:54.951"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:54.952" starttime="20160203 01:42:54.787"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:42:54.953" level="INFO">Starting command 'cat tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20160203 01:42:54.956" starttime="20160203 01:42:54.952"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:42:54.958" level="INFO">Reading output of command 'cat tmpfilemonitor16.log'.</msg>
<msg timestamp="20160203 01:42:54.999" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 01:42:55.000" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20160203 01:42:54.999" starttime="20160203 01:42:54.957"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160203 01:42:55.001" level="INFO">Executing command 'rm tmpfilemonitor16.log'.</msg>
<msg timestamp="20160203 01:42:55.089" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160203 01:42:55.089" starttime="20160203 01:42:55.000"></status>
</kw>
<msg timestamp="20160203 01:42:55.091" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20160203 01:42:55.090" starttime="20160203 01:42:54.775"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160203 01:42:55.096" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/MOC_NOK_ASCII_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/MOC_NOK_ASCII_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 01:42:55.096" starttime="20160203 01:42:55.094"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:55.097" starttime="20160203 01:42:55.091"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:55.101" starttime="20160203 01:42:55.100"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:42:55.103" starttime="20160203 01:42:55.102"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:55.106" starttime="20160203 01:42:55.097"></status>
</kw>
<msg timestamp="20160203 01:42:55.107" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20160203 01:42:55.107" starttime="20160203 01:42:54.771"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:55.122" starttime="20160203 01:42:55.122"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:55.126" starttime="20160203 01:42:55.123"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:55.128" starttime="20160203 01:42:55.127"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160203 01:42:55.130" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160203 01:42:55.130" level="INFO">${queryResultSetLines} = </msg>
<status status="PASS" endtime="20160203 01:42:55.130" starttime="20160203 01:42:55.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:55.132" starttime="20160203 01:42:55.131"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160203 01:42:55.133" level="INFO">0 lines returned</msg>
<msg timestamp="20160203 01:42:55.134" level="INFO">@{queryResultSet} = [ ]</msg>
<status status="PASS" endtime="20160203 01:42:55.133" starttime="20160203 01:42:55.132"></status>
</kw>
<msg timestamp="20160203 01:42:55.134" level="INFO">@{queryRows} = [ ]</msg>
<status status="PASS" endtime="20160203 01:42:55.134" starttime="20160203 01:42:55.118"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160203 01:42:55.136" level="INFO">Length is 0</msg>
<msg timestamp="20160203 01:42:55.137" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20160203 01:42:55.136" starttime="20160203 01:42:55.135"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160203 01:42:55.138" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160203 01:42:55.139" level="INFO">${length_s} = 0</msg>
<status status="PASS" endtime="20160203 01:42:55.138" starttime="20160203 01:42:55.137"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:55.142" starttime="20160203 01:42:55.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160203 01:42:55.146" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 01:42:55.146" starttime="20160203 01:42:55.145"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:55.146" starttime="20160203 01:42:55.142"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:55.147" starttime="20160203 01:42:55.114"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160203 01:42:55.150" starttime="20160203 01:42:55.147"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:55.150" starttime="20160203 01:42:44.217"></status>
</kw>
<doc>Send the MOC XDR ticket with invalid ASCII garbage in it

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 01:42:55.151" starttime="20160203 01:42:44.213"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20160203 01:42:55.181" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20160203 01:42:55.181" starttime="20160203 01:42:55.180"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 01:42:55.183" starttime="20160203 01:42:55.182"></status>
</kw>
<status status="PASS" endtime="20160203 01:42:55.183" starttime="20160203 01:42:55.177"></status>
</kw>
<doc>Main goal of the test suite is to check behaviour of XDR in several basic positive cases and a few negative (NOK) cases.
It uses Robot Framework's JMSLibrary to send tickets of different types (MOC, SMS, DATA,...) to AMQ where XDR consumers should process them.
After that XDR's log will be analysed and finally DB should be checked if ticket has landed also there.
Negative tests (NOK) test different (but not all) mandatory fields (empty field, different values than predefined) according to
XDR Specification v5.3.2. Each NOK test has modified different fields - which exactly is specified in test description of the test itself</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:42:55.184" starttime="20160203 01:40:11.562"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:42:55.245" starttime="20160203 01:40:11.549"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 01:42:55.307" starttime="20160203 01:40:11.531"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160203 01:42:55.393" starttime="20160203 01:35:02.295"></status>
</suite>
<statistics>
<total>
<stat pass="25" fail="6">Critical Tests</stat>
<stat pass="25" fail="9">All Tests</stat>
</total>
<tag>
<stat pass="0" info="non-critical" doc="" combined="" fail="3" links="">noncritical</stat>
<stat pass="10" info="" doc="" combined="" fail="4" links="">calls</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">ComponentTest</stat>
<stat pass="3" info="" doc="" combined="" fail="2" links="">DATA_only</stat>
<stat pass="25" info="" doc="" combined="" fail="9" links="">matko.sanseovic</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">MFC_only</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">MOC_only</stat>
<stat pass="2" info="" doc="" combined="" fail="2" links="">MTC_only</stat>
<stat pass="23" info="" doc="" combined="" fail="7" links="">MTEL_supported</stat>
<stat pass="2" info="" doc="" combined="" fail="2" links="">MVNA_MEX_specific</stat>
<stat pass="23" info="" doc="" combined="" fail="7" links="">MVNA_MEX_supported</stat>
<stat pass="20" info="" doc="" combined="" fail="5" links="">SMARTSPACE_supported</stat>
<stat pass="6" info="" doc="" combined="" fail="0" links="">test</stat>
<stat pass="20" info="" doc="" combined="" fail="5" links="">TNZ_supported</stat>
<stat pass="2" info="" doc="" combined="" fail="2" links="">USSD_only</stat>
<stat pass="10" info="" doc="" combined="" fail="5" links="">VIRGIN_COLUMBIA_supported</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">XDR_only</stat>
</tag>
<suite>
<stat pass="25" id="s1" fail="9" name="Robot Testsuites">Robot Testsuites</stat>
<stat pass="10" id="s1-s1" fail="4" name="Basic">Robot Testsuites.Basic</stat>
<stat pass="10" id="s1-s1-s1" fail="4" name="PrePaid">Robot Testsuites.Basic.PrePaid</stat>
<stat pass="3" id="s1-s1-s1-s1" fail="2" name="DATA">Robot Testsuites.Basic.PrePaid.DATA</stat>
<stat pass="3" id="s1-s1-s1-s1-s1" fail="2" name="Data-Regression-Suite">Robot Testsuites.Basic.PrePaid.DATA.Data-Regression-Suite</stat>
<stat pass="1" id="s1-s1-s1-s2" fail="0" name="MFC">Robot Testsuites.Basic.PrePaid.MFC</stat>
<stat pass="1" id="s1-s1-s1-s2-s1" fail="0" name="MFC PREPAID-ShortDuration">Robot Testsuites.Basic.PrePaid.MFC.MFC PREPAID-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s1" fail="0" name="MFC PREPAID-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MFC.MFC PREPAID-ShortDuration.MFC PREPAID-ShortDuration-robot-suite</stat>
<stat pass="4" id="s1-s1-s1-s3" fail="0" name="MOC">Robot Testsuites.Basic.PrePaid.MOC</stat>
<stat pass="4" id="s1-s1-s1-s3-s1" fail="0" name="OnNet">Robot Testsuites.Basic.PrePaid.MOC.OnNet</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s1" fail="0" name="MOC PREPAID ONNET-Abandon">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Abandon</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s1-s1" fail="0" name="MOC PREPAID ONNET-Abandon-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Abandon.MOC PREPAID ONNET-Abandon-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s2" fail="0" name="MOC PREPAID ONNET-Busy">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Busy</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s2-s1" fail="0" name="MOC PREPAID ONNET-Busy-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Busy.MOC PREPAID ONNET-Busy-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s3" fail="0" name="MOC PREPAID ONNET-NoAnswer">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoAnswer</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s3-s1" fail="0" name="MOC PREPAID ONNET-NoAnswer-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoAnswer.MOC PREPAID ONNET-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s4" fail="0" name="MOC PREPAID ONNET-ShortDuration">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s4-s1" fail="0" name="MOC PREPAID ONNET-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ShortDuration.MOC PREPAID ONNET-ShortDuration-robot-suite</stat>
<stat pass="2" id="s1-s1-s1-s4" fail="2" name="MTC">Robot Testsuites.Basic.PrePaid.MTC</stat>
<stat pass="0" id="s1-s1-s1-s4-s1" fail="1" name="MTC PREPAID-Abandon">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Abandon</stat>
<stat pass="0" id="s1-s1-s1-s4-s1-s1" fail="1" name="MTC PREPAID-Abandon-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Abandon.MTC PREPAID-Abandon-robot-suite</stat>
<stat pass="0" id="s1-s1-s1-s4-s2" fail="1" name="MTC PREPAID-Busy">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Busy</stat>
<stat pass="0" id="s1-s1-s1-s4-s2-s1" fail="1" name="MTC PREPAID-Busy-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Busy.MTC PREPAID-Busy-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s4-s3" fail="0" name="MTC PREPAID-NoAnswer">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-NoAnswer</stat>
<stat pass="1" id="s1-s1-s1-s4-s3-s1" fail="0" name="MTC PREPAID-NoAnswer-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-NoAnswer.MTC PREPAID-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s4-s4" fail="0" name="MTC PREPAID-ShortDuration">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s4-s4-s1" fail="0" name="MTC PREPAID-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-ShortDuration.MTC PREPAID-ShortDuration-robot-suite</stat>
<stat pass="2" id="s1-s2" fail="2" name="Ussd">Robot Testsuites.Ussd</stat>
<stat pass="2" id="s1-s2-s1" fail="2" name="MVNA MEX">Robot Testsuites.Ussd.MVNA MEX</stat>
<stat pass="2" id="s1-s2-s1-s1" fail="2" name="Ussd-Robot-Suite">Robot Testsuites.Ussd.MVNA MEX.Ussd-Robot-Suite</stat>
<stat pass="13" id="s1-s3" fail="3" name="Xdr">Robot Testsuites.Xdr</stat>
<stat pass="13" id="s1-s3-s1" fail="3" name="XDR-ticket-verification">Robot Testsuites.Xdr.XDR-ticket-verification</stat>
<stat pass="13" id="s1-s3-s1-s1" fail="3" name="XDR Test-robot-suite">Robot Testsuites.Xdr.XDR-ticket-verification.XDR Test-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
