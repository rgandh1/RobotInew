<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20160205 07:56:06.521">
<suite source="/opt/robot/robotworkspace/robot_testsuites" id="s1" name="Robot Testsuites">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic" id="s1-s1" name="Basic">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid" id="s1-s1-s1" name="PrePaid">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/DATA" id="s1-s1-s1-s1" name="DATA">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/DATA/data-regression-suite.txt" id="s1-s1-s1-s1-s1" name="Data-Regression-Suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 07:56:08.114" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 07:56:08.117" level="INFO">${date} = Fri Feb  5 07:56:08 CET 2016</msg>
<status status="PASS" endtime="20160205 07:56:08.117" starttime="20160205 07:56:08.101"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:56:08.121" level="INFO">Date and time: Fri Feb  5 07:56:08 CET 2016</msg>
<status status="PASS" endtime="20160205 07:56:08.122" starttime="20160205 07:56:08.119"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:56:08.126" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160205 07:56:08.127" starttime="20160205 07:56:08.124"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:08.188" starttime="20160205 07:56:08.186"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:08.380" starttime="20160205 07:56:08.202"></status>
</kw>
<msg timestamp="20160205 07:56:08.383" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160205 07:56:08.382" starttime="20160205 07:56:08.189"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 07:56:08.404" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 07:56:10.639" level="INFO">Read output: Last login: Fri Feb  5 02:33:15 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 07:56:10.641" starttime="20160205 07:56:08.398"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:10.642" starttime="20160205 07:56:08.386"></status>
</kw>
<msg timestamp="20160205 07:56:10.646" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160205 07:56:10.645" starttime="20160205 07:56:08.173"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 07:56:10.653" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 07:56:10.652" starttime="20160205 07:56:10.647"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 07:56:10.656" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160205 07:56:11.730" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 07:56:11.733" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 07:56:11.732" starttime="20160205 07:56:10.654"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:11.740" starttime="20160205 07:56:11.737"></status>
</kw>
<msg timestamp="20160205 07:56:11.741" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 07:56:11.742" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 07:56:11.741" starttime="20160205 07:56:11.734"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:11.750" starttime="20160205 07:56:11.749"></status>
</kw>
<msg timestamp="20160205 07:56:11.752" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:56:11.751" starttime="20160205 07:56:11.743"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 07:56:11.756" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 07:56:11.755" starttime="20160205 07:56:11.753"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 07:56:11.760" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 07:56:11.760" starttime="20160205 07:56:11.758"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:11.763" starttime="20160205 07:56:11.762"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:11.776" starttime="20160205 07:56:11.774"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 07:56:11.780" starttime="20160205 07:56:11.778"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:11.783" starttime="20160205 07:56:11.765"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:11.791" starttime="20160205 07:56:11.789"></status>
</kw>
<msg timestamp="20160205 07:56:11.792" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 07:56:11.791" starttime="20160205 07:56:11.785"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:11.795" starttime="20160205 07:56:11.793"></status>
</kw>
<msg timestamp="20160205 07:56:11.798" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 07:56:11.798" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 07:56:11.797" starttime="20160205 07:56:08.144"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:11.845" starttime="20160205 07:56:11.843"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:11.898" starttime="20160205 07:56:11.851"></status>
</kw>
<msg timestamp="20160205 07:56:11.900" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160205 07:56:11.899" starttime="20160205 07:56:11.846"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 07:56:11.908" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 07:56:14.410" level="INFO">Read output: Last login: Fri Feb  5 02:36:25 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 07:56:14.412" starttime="20160205 07:56:11.906"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:14.413" starttime="20160205 07:56:11.901"></status>
</kw>
<msg timestamp="20160205 07:56:14.417" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160205 07:56:14.415" starttime="20160205 07:56:11.833"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 07:56:14.423" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 07:56:14.423" starttime="20160205 07:56:14.418"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 07:56:14.426" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 07:56:16.102" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 07:56:16.105" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 07:56:16.104" starttime="20160205 07:56:14.424"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:16.111" starttime="20160205 07:56:16.108"></status>
</kw>
<msg timestamp="20160205 07:56:16.112" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 07:56:16.113" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 07:56:16.112" starttime="20160205 07:56:16.106"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:16.120" starttime="20160205 07:56:16.118"></status>
</kw>
<msg timestamp="20160205 07:56:16.121" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:56:16.121" starttime="20160205 07:56:16.114"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 07:56:16.125" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 07:56:16.124" starttime="20160205 07:56:16.122"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 07:56:16.128" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 07:56:16.128" starttime="20160205 07:56:16.126"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:16.130" starttime="20160205 07:56:16.129"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:16.143" starttime="20160205 07:56:16.141"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 07:56:16.147" starttime="20160205 07:56:16.144"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:16.150" starttime="20160205 07:56:16.132"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:16.169" starttime="20160205 07:56:16.165"></status>
</kw>
<msg timestamp="20160205 07:56:16.172" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 07:56:16.171" starttime="20160205 07:56:16.154"></status>
</kw>
<msg timestamp="20160205 07:56:16.177" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 07:56:16.178" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 07:56:16.175" starttime="20160205 07:56:11.811"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:16.281" starttime="20160205 07:56:16.277"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:16.342" starttime="20160205 07:56:16.294"></status>
</kw>
<msg timestamp="20160205 07:56:16.344" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160205 07:56:16.343" starttime="20160205 07:56:16.283"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 07:56:16.352" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 07:56:18.180" level="INFO">Read output: Last login: Fri Feb  5 02:33:18 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 07:56:18.182" starttime="20160205 07:56:16.350"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:18.184" starttime="20160205 07:56:16.345"></status>
</kw>
<msg timestamp="20160205 07:56:18.188" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160205 07:56:18.187" starttime="20160205 07:56:16.257"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 07:56:18.195" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 07:56:18.194" starttime="20160205 07:56:18.189"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 07:56:18.198" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 07:56:19.255" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 07:56:19.258" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 07:56:19.257" starttime="20160205 07:56:18.196"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:19.264" starttime="20160205 07:56:19.261"></status>
</kw>
<msg timestamp="20160205 07:56:19.265" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 07:56:19.266" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 07:56:19.265" starttime="20160205 07:56:19.259"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:19.273" starttime="20160205 07:56:19.271"></status>
</kw>
<msg timestamp="20160205 07:56:19.274" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:56:19.274" starttime="20160205 07:56:19.267"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 07:56:19.277" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 07:56:19.277" starttime="20160205 07:56:19.275"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 07:56:19.281" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 07:56:19.280" starttime="20160205 07:56:19.279"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:19.283" starttime="20160205 07:56:19.282"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:19.294" starttime="20160205 07:56:19.292"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 07:56:19.299" starttime="20160205 07:56:19.295"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:19.300" starttime="20160205 07:56:19.285"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:19.307" starttime="20160205 07:56:19.305"></status>
</kw>
<msg timestamp="20160205 07:56:19.308" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 07:56:19.307" starttime="20160205 07:56:19.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:19.311" starttime="20160205 07:56:19.309"></status>
</kw>
<msg timestamp="20160205 07:56:19.313" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 07:56:19.313" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 07:56:19.312" starttime="20160205 07:56:16.206"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:19.357" starttime="20160205 07:56:19.356"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:19.406" starttime="20160205 07:56:19.363"></status>
</kw>
<msg timestamp="20160205 07:56:19.408" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160205 07:56:19.408" starttime="20160205 07:56:19.358"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 07:56:19.417" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 07:56:21.303" level="INFO">Read output: Last login: Fri Feb  5 02:33:18 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 07:56:21.305" starttime="20160205 07:56:19.414"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:21.312" starttime="20160205 07:56:19.409"></status>
</kw>
<msg timestamp="20160205 07:56:21.315" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160205 07:56:21.315" starttime="20160205 07:56:19.347"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 07:56:21.322" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 07:56:21.321" starttime="20160205 07:56:21.317"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 07:56:21.325" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 07:56:21.696" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 07:56:21.698" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 07:56:21.697" starttime="20160205 07:56:21.323"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:21.704" starttime="20160205 07:56:21.701"></status>
</kw>
<msg timestamp="20160205 07:56:21.705" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 07:56:21.705" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 07:56:21.704" starttime="20160205 07:56:21.699"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:21.712" starttime="20160205 07:56:21.711"></status>
</kw>
<msg timestamp="20160205 07:56:21.714" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:56:21.713" starttime="20160205 07:56:21.706"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 07:56:21.717" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 07:56:21.716" starttime="20160205 07:56:21.715"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 07:56:21.725" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 07:56:21.724" starttime="20160205 07:56:21.718"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:21.730" starttime="20160205 07:56:21.727"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:21.753" starttime="20160205 07:56:21.749"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 07:56:21.760" starttime="20160205 07:56:21.755"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:21.763" starttime="20160205 07:56:21.734"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:21.777" starttime="20160205 07:56:21.773"></status>
</kw>
<msg timestamp="20160205 07:56:21.780" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 07:56:21.779" starttime="20160205 07:56:21.765"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:21.786" starttime="20160205 07:56:21.782"></status>
</kw>
<msg timestamp="20160205 07:56:21.791" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 07:56:21.792" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 07:56:21.788" starttime="20160205 07:56:19.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:56:21.798" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 07:56:21.800" starttime="20160205 07:56:21.794"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:56:21.806" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 07:56:21.808" starttime="20160205 07:56:21.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:56:21.814" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 07:56:21.817" starttime="20160205 07:56:21.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:56:21.823" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 07:56:21.825" starttime="20160205 07:56:21.819"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 07:56:21.831" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 07:56:21.832" starttime="20160205 07:56:21.827"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 07:56:21.838" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 07:56:21.840" starttime="20160205 07:56:21.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 07:56:21.846" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 07:56:21.847" starttime="20160205 07:56:21.842"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 07:56:21.853" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 07:56:21.854" starttime="20160205 07:56:21.849"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:21.873" starttime="20160205 07:56:21.865"></status>
</kw>
<msg timestamp="20160205 07:56:21.876" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 07:56:21.875" starttime="20160205 07:56:21.856"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 07:56:21.884" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 07:56:21.885" starttime="20160205 07:56:21.878"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:21.887" starttime="20160205 07:56:08.092"></status>
</kw>
<test id="s1-s1-s1-s1-s1-t1" name="Single Data Session 767b">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:21.898" starttime="20160205 07:56:21.897"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 07:56:21.901" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 07:56:21.901" starttime="20160205 07:56:21.900"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 07:56:21.923" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 07:56:21.923" starttime="20160205 07:56:21.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 07:56:21.929" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 07:56:21.930" starttime="20160205 07:56:21.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 07:56:21.936" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 07:56:21.937" starttime="20160205 07:56:21.932"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 07:56:21.942" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 07:56:21.943" starttime="20160205 07:56:21.939"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 07:56:21.949" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 07:56:21.950" starttime="20160205 07:56:21.945"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 07:56:21.956" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 07:56:21.957" starttime="20160205 07:56:21.952"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 07:56:21.962" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 07:56:21.963" starttime="20160205 07:56:21.959"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 07:56:21.969" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 07:56:21.970" starttime="20160205 07:56:21.966"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 07:56:21.976" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 07:56:21.977" starttime="20160205 07:56:21.972"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 07:56:21.982" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 07:56:21.984" starttime="20160205 07:56:21.979"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 07:56:22.011" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:22.013" starttime="20160205 07:56:22.004"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:22.015" starttime="20160205 07:56:22.000"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 07:56:22.025" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:22.026" starttime="20160205 07:56:22.020"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:22.028" starttime="20160205 07:56:22.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 07:56:22.038" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:22.040" starttime="20160205 07:56:22.034"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:22.041" starttime="20160205 07:56:22.030"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:22.043" starttime="20160205 07:56:21.988"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 07:56:22.053" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 07:56:22.054" starttime="20160205 07:56:22.046"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:22.060" starttime="20160205 07:56:22.056"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:22.066" starttime="20160205 07:56:22.062"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:22.072" starttime="20160205 07:56:22.068"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:22.077" starttime="20160205 07:56:22.074"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:22.082" starttime="20160205 07:56:22.079"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:22.088" starttime="20160205 07:56:22.084"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:22.094" starttime="20160205 07:56:22.090"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:22.099" starttime="20160205 07:56:22.096"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:22.105" starttime="20160205 07:56:22.101"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:22.111" starttime="20160205 07:56:22.107"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:22.119" starttime="20160205 07:56:22.113"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:22.124" starttime="20160205 07:56:22.121"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 07:56:22.132" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 07:56:35.795" level="INFO">07:56:22,312 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/ext] for external libraries
07:56:22,313 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
07:56:24,118 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
07:56:24,138 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.119.125]
07:56:24,139 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
07:56:24,139 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
07:56:24,139 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [1]
07:56:24,139 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [334030880001000]
07:56:24,139 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [525516001000]
07:56:24,139 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
07:56:24,140 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [3]
07:56:24,140 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
07:56:24,140 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
07:56:24,140 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
07:56:24,140 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
07:56:24,152 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
07:56:24,160 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
07:56:24,613 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
07:56:24,676 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
07:56:24,833 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
07:56:24,833 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
07:56:29,983 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
07:56:29,987 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
07:56:30,079 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
07:56:30,079 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
07:56:30,079 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
07:56:30,079 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
07:56:30,147 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
07:56:30,447 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
07:56:30,478 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
07:56:30,480 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
07:56:30,482 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
07:56:30,482 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
07:56:32,678 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
07:56:32,678 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
07:56:32,682 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
07:56:32,683 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
07:56:32,683 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
07:56:32,683 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
07:56:32,718 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
07:56:32,722 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
07:56:32,746 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
07:56:32,748 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
07:56:32,749 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
07:56:32,749 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
07:56:33,224 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
07:56:33,224 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
07:56:33,228 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
07:56:33,228 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
07:56:33,228 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
07:56:33,228 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
07:56:33,262 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
07:56:33,267 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
07:56:33,289 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
07:56:33,290 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
07:56:33,292 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
07:56:33,292 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
07:56:34,538 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
07:56:34,538 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
07:56:34,542 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
07:56:34,542 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
07:56:34,542 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
07:56:34,542 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
07:56:34,575 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
07:56:34,578 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
07:56:34,599 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
07:56:34,600 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
07:56:34,602 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
07:56:34,602 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
07:56:35,088 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
07:56:35,088 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
07:56:35,095 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
07:56:35,095 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
07:56:35,095 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
07:56:35,095 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
07:56:35,127 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
07:56:35,137 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
07:56:35,157 INFO  [SoapUITestCaseRunner] running step [setBalance]
07:56:35,159 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
07:56:35,161 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
07:56:35,161 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
07:56:35,664 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
07:56:35,665 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
07:56:35,670 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
07:56:35,671 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
07:56:35,671 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
07:56:35,671 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
07:56:35,703 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
07:56:35,708 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
07:56:35,730 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
07:56:35,758 INFO  [SoapUITestCaseRunner] running step [finish_successful]
07:56:35,791 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
07:56:35,792 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 11604ms, status: FINISHED
07:56:35,792 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 11604ms</msg>
<status status="PASS" endtime="20160205 07:56:35.798" starttime="20160205 07:56:22.130"></status>
</kw>
<msg timestamp="20160205 07:56:35.801" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 07:56:35.802" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 07:56:35.799" starttime="20160205 07:56:22.126"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 07:56:35.816" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 07:56:35.816" starttime="20160205 07:56:35.813"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 07:56:35.820" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 07:56:35.819" starttime="20160205 07:56:35.818"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 07:56:35.823" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 07:56:35.823" starttime="20160205 07:56:35.821"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 07:56:35.829" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 07:56:35.834" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 07:56:35.835" starttime="20160205 07:56:35.827"></status>
</kw>
<msg timestamp="20160205 07:56:35.836" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 07:56:35.836" level="INFO">${return_log_entry} = 2016-02-05 07:56:35,791 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:56:35.835" starttime="20160205 07:56:35.824"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:35.845" starttime="20160205 07:56:35.843"></status>
</kw>
<msg timestamp="20160205 07:56:35.846" level="INFO">${return_log_entry} = 2016-02-05 07:56:35,791 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:56:35.846" starttime="20160205 07:56:35.838"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:35.854" starttime="20160205 07:56:35.852"></status>
</kw>
<msg timestamp="20160205 07:56:35.855" level="INFO">${return_log_entry} = 2016-02-05 07:56:35,791 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:56:35.855" starttime="20160205 07:56:35.847"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:35.863" starttime="20160205 07:56:35.861"></status>
</kw>
<msg timestamp="20160205 07:56:35.864" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:56:35.863" starttime="20160205 07:56:35.856"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:35.874" starttime="20160205 07:56:35.872"></status>
</kw>
<msg timestamp="20160205 07:56:35.875" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:56:35.874" starttime="20160205 07:56:35.865"></status>
</kw>
<msg timestamp="20160205 07:56:35.876" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:56:35.876" starttime="20160205 07:56:35.804"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:35.887" starttime="20160205 07:56:35.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:35.889" starttime="20160205 07:56:35.888"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:35.891" starttime="20160205 07:56:35.890"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 07:56:35.903" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 07:56:35.904" starttime="20160205 07:56:35.898"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:35.905" starttime="20160205 07:56:35.897"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:35.905" starttime="20160205 07:56:35.892"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:35.906" starttime="20160205 07:56:35.878"></status>
</kw>
<msg timestamp="20160205 07:56:35.908" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 07:56:35.907" starttime="20160205 07:56:21.904"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 07:56:35.911" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 07:56:35.911" starttime="20160205 07:56:35.909"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:56:35.914" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 07:56:35.914" starttime="20160205 07:56:35.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Data Session *******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:35.916" starttime="20160205 07:56:35.915"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the data session...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:56:35.919" level="INFO">Running the data session...</msg>
<status status="PASS" endtime="20160205 07:56:35.919" starttime="20160205 07:56:35.917"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Short 767b Data Session">
<doc>Runs a standard data session in total of 767B (CCRi - CCRt). Rating group is added to differentiate between</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${DIAM HPLMN LOCATION}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${DIAM GW HOST}</arg>
<arg>${DIAM GW PORT}</arg>
<arg>${DIAM GW REALM}</arg>
<arg>${DIAM GGSN FQDN}</arg>
<arg>${DIAM GGSN REALM}</arg>
<arg>${DIAM GGSN VENDORID}</arg>
<arg>${DATA TRAFFIC RATING GROUP}</arg>
</arguments>
<kw type="kw" name="${cgs_filename} = BuiltIn.Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>data767b_rg</arg>
<arg>${rating_group}</arg>
</arguments>
<msg timestamp="20160205 07:56:35.935" level="INFO">${cgs_filename} = data767b_rg6</msg>
<status status="PASS" endtime="20160205 07:56:35.935" starttime="20160205 07:56:35.933"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard Data CGS">
<doc>Runs a standard Data session (meaning a session that needs only location as parameter) for the passed cgs file</doc>
<arguments>
<arg>${cgs_filename}</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${location}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${diam_host}</arg>
<arg>${diam_port}</arg>
<arg>${diam_gw_realm}</arg>
<arg>${diam_ggsn_fqdn}</arg>
<arg>${diam_ggsn_realm}</arg>
<arg>${diam_ggsn_vendorid}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 07:56:35.950" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv</msg>
<status status="PASS" endtime="20160205 07:56:35.950" starttime="20160205 07:56:35.948"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 07:56:35.953" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv</msg>
<status status="PASS" endtime="20160205 07:56:35.953" starttime="20160205 07:56:35.951"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 07:56:35.957" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini</msg>
<status status="PASS" endtime="20160205 07:56:35.956" starttime="20160205 07:56:35.954"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 07:56:35.960" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs</msg>
<status status="PASS" endtime="20160205 07:56:35.959" starttime="20160205 07:56:35.957"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:35.962" starttime="20160205 07:56:35.960"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 07:56:35.966" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:35.966" starttime="20160205 07:56:35.963"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:35.968" starttime="20160205 07:56:35.967"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;location\n</arg>
</arguments>
<msg timestamp="20160205 07:56:35.972" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:35.972" starttime="20160205 07:56:35.969"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${location}\n</arg>
</arguments>
<msg timestamp="20160205 07:56:35.976" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:35.977" starttime="20160205 07:56:35.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:35.979" starttime="20160205 07:56:35.978"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 07:56:35.982" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:35.983" starttime="20160205 07:56:35.980"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ndiamGwHost=${diam_host} \ndiamGwPort=${diam_port} \ndiamGwRealm=${diam_gw_realm} \ndiamGgsnFqdn=${diam_ggsn_fqdn} \ndiamGgsnRealm=${diam_ggsn_realm} \ndiamGgsnVendorId=${diam_ggsn_vendorid} \ndiamGwConnectTimeoutSecs=20</arg>
</arguments>
<msg timestamp="20160205 07:56:35.988" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:35.989" starttime="20160205 07:56:35.984"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:35.991" starttime="20160205 07:56:35.990"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 07:56:36.002" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 07:56:47.067" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 07:56:47.063" starttime="20160205 07:56:35.992"></status>
</kw>
<msg timestamp="20160205 07:56:47.075" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 07:56:47.073" starttime="20160205 07:56:35.937"></status>
</kw>
<msg timestamp="20160205 07:56:47.080" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 07:56:47.078" starttime="20160205 07:56:35.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:56:47.085" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 07:56:47.087" starttime="20160205 07:56:47.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 07:56:47.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 07:56:47.097" starttime="20160205 07:56:47.090"></status>
</kw>
<doc>Test will make a short data session in total of 767 bytes

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 07:56:47.099" starttime="20160205 07:56:21.888"></status>
</test>
<test id="s1-s1-s1-s1-s1-t2" name="CG Short Multislice Data Session">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:47.129" starttime="20160205 07:56:47.126"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 07:56:47.135" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 07:56:47.134" starttime="20160205 07:56:47.131"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 07:56:47.164" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 07:56:47.165" starttime="20160205 07:56:47.161"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 07:56:47.170" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 07:56:47.172" starttime="20160205 07:56:47.167"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 07:56:47.177" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 07:56:47.178" starttime="20160205 07:56:47.173"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 07:56:47.183" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 07:56:47.184" starttime="20160205 07:56:47.180"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 07:56:47.189" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 07:56:47.191" starttime="20160205 07:56:47.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 07:56:47.196" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 07:56:47.197" starttime="20160205 07:56:47.192"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 07:56:47.202" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 07:56:47.203" starttime="20160205 07:56:47.199"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 07:56:47.208" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 07:56:47.209" starttime="20160205 07:56:47.205"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 07:56:47.215" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 07:56:47.216" starttime="20160205 07:56:47.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 07:56:47.221" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 07:56:47.222" starttime="20160205 07:56:47.217"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 07:56:47.245" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:47.246" starttime="20160205 07:56:47.240"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:47.248" starttime="20160205 07:56:47.237"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 07:56:47.257" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:47.259" starttime="20160205 07:56:47.253"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:47.260" starttime="20160205 07:56:47.250"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 07:56:47.265" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:47.266" starttime="20160205 07:56:47.263"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:47.266" starttime="20160205 07:56:47.262"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:47.267" starttime="20160205 07:56:47.226"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 07:56:47.271" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 07:56:47.271" starttime="20160205 07:56:47.268"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:47.273" starttime="20160205 07:56:47.272"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:47.276" starttime="20160205 07:56:47.274"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:47.278" starttime="20160205 07:56:47.277"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:47.281" starttime="20160205 07:56:47.279"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:47.283" starttime="20160205 07:56:47.281"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:47.285" starttime="20160205 07:56:47.283"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:47.288" starttime="20160205 07:56:47.286"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:47.291" starttime="20160205 07:56:47.288"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:47.293" starttime="20160205 07:56:47.292"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:47.296" starttime="20160205 07:56:47.294"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:47.298" starttime="20160205 07:56:47.297"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:47.301" starttime="20160205 07:56:47.299"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 07:56:47.304" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 07:56:51.305" level="INFO">07:56:51,304 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:56:51.306" starttime="20160205 07:56:47.303"></status>
</kw>
<msg timestamp="20160205 07:56:51.308" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 07:56:51.309" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 07:56:51.308" starttime="20160205 07:56:47.302"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 07:56:51.319" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 07:56:51.318" starttime="20160205 07:56:51.316"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 07:56:51.322" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 07:56:51.321" starttime="20160205 07:56:51.320"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 07:56:51.324" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 07:56:51.324" starttime="20160205 07:56:51.323"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 07:56:51.329" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 07:56:51.330" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 07:56:51.330" starttime="20160205 07:56:51.327"></status>
</kw>
<msg timestamp="20160205 07:56:51.332" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 07:56:51.332" level="INFO">${return_log_entry} = 2016-02-05 07:56:51,304 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:56:51.331" starttime="20160205 07:56:51.325"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:51.339" starttime="20160205 07:56:51.337"></status>
</kw>
<msg timestamp="20160205 07:56:51.340" level="INFO">${return_log_entry} = 2016-02-05 07:56:51,304 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:56:51.340" starttime="20160205 07:56:51.333"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:51.347" starttime="20160205 07:56:51.345"></status>
</kw>
<msg timestamp="20160205 07:56:51.348" level="INFO">${return_log_entry} = 2016-02-05 07:56:51,304 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:56:51.348" starttime="20160205 07:56:51.341"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:51.356" starttime="20160205 07:56:51.354"></status>
</kw>
<msg timestamp="20160205 07:56:51.357" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:56:51.356" starttime="20160205 07:56:51.349"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:51.366" starttime="20160205 07:56:51.365"></status>
</kw>
<msg timestamp="20160205 07:56:51.367" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:56:51.367" starttime="20160205 07:56:51.358"></status>
</kw>
<msg timestamp="20160205 07:56:51.369" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:56:51.368" starttime="20160205 07:56:51.310"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:51.377" starttime="20160205 07:56:51.376"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:51.380" starttime="20160205 07:56:51.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:51.382" starttime="20160205 07:56:51.381"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 07:56:51.391" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 07:56:51.392" starttime="20160205 07:56:51.389"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:51.392" starttime="20160205 07:56:51.387"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:51.393" starttime="20160205 07:56:51.383"></status>
</kw>
<status status="PASS" endtime="20160205 07:56:51.394" starttime="20160205 07:56:51.370"></status>
</kw>
<msg timestamp="20160205 07:56:51.396" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 07:56:51.395" starttime="20160205 07:56:47.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 07:56:51.398" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 07:56:51.399" starttime="20160205 07:56:51.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:56:51.401" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 07:56:51.402" starttime="20160205 07:56:51.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Data Session *******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:51.404" starttime="20160205 07:56:51.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the data session...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:56:51.406" level="INFO">Running the data session...</msg>
<status status="PASS" endtime="20160205 07:56:51.407" starttime="20160205 07:56:51.405"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Short Multislice Data Session">
<doc>Runs a standard data session with two session updates before session is closed (CCRi - CCRu - CCRu - CCRt).Rating group is</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${DIAM HPLMN LOCATION}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${DIAM GW HOST}</arg>
<arg>${DIAM GW PORT}</arg>
<arg>${DIAM GW REALM}</arg>
<arg>${DIAM GGSN FQDN}</arg>
<arg>${DIAM GGSN REALM}</arg>
<arg>${DIAM GGSN VENDORID}</arg>
<arg>${DATA TRAFFIC RATING GROUP}</arg>
</arguments>
<kw type="kw" name="${cgs_filename} = BuiltIn.Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>dataSessionUpdate_rg</arg>
<arg>${rating_group}</arg>
</arguments>
<msg timestamp="20160205 07:56:51.422" level="INFO">${cgs_filename} = dataSessionUpdate_rg6</msg>
<status status="PASS" endtime="20160205 07:56:51.421" starttime="20160205 07:56:51.420"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard Data CGS">
<doc>Runs a standard Data session (meaning a session that needs only location as parameter) for the passed cgs file</doc>
<arguments>
<arg>${cgs_filename}</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${location}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${diam_host}</arg>
<arg>${diam_port}</arg>
<arg>${diam_gw_realm}</arg>
<arg>${diam_ggsn_fqdn}</arg>
<arg>${diam_ggsn_realm}</arg>
<arg>${diam_ggsn_vendorid}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 07:56:51.437" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv</msg>
<status status="PASS" endtime="20160205 07:56:51.436" starttime="20160205 07:56:51.435"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 07:56:51.440" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv</msg>
<status status="PASS" endtime="20160205 07:56:51.439" starttime="20160205 07:56:51.438"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 07:56:51.443" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini</msg>
<status status="PASS" endtime="20160205 07:56:51.442" starttime="20160205 07:56:51.441"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 07:56:51.446" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/dataSessionUpdate_rg6.cgs</msg>
<status status="PASS" endtime="20160205 07:56:51.445" starttime="20160205 07:56:51.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:51.448" starttime="20160205 07:56:51.447"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 07:56:51.452" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:51.452" starttime="20160205 07:56:51.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:51.454" starttime="20160205 07:56:51.453"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;location\n</arg>
</arguments>
<msg timestamp="20160205 07:56:51.458" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:51.458" starttime="20160205 07:56:51.455"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${location}\n</arg>
</arguments>
<msg timestamp="20160205 07:56:51.462" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:51.462" starttime="20160205 07:56:51.459"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:51.464" starttime="20160205 07:56:51.463"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 07:56:51.468" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:51.468" starttime="20160205 07:56:51.465"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ndiamGwHost=${diam_host} \ndiamGwPort=${diam_port} \ndiamGwRealm=${diam_gw_realm} \ndiamGgsnFqdn=${diam_ggsn_fqdn} \ndiamGgsnRealm=${diam_ggsn_realm} \ndiamGgsnVendorId=${diam_ggsn_vendorid} \ndiamGwConnectTimeoutSecs=20</arg>
</arguments>
<msg timestamp="20160205 07:56:51.474" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:56:51.474" starttime="20160205 07:56:51.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:56:51.476" starttime="20160205 07:56:51.475"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 07:56:51.484" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/dataSessionUpdate_rg6.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 07:57:17.635" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 07:57:17.633" starttime="20160205 07:56:51.477"></status>
</kw>
<msg timestamp="20160205 07:57:17.640" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 07:57:17.639" starttime="20160205 07:56:51.424"></status>
</kw>
<msg timestamp="20160205 07:57:17.642" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 07:57:17.641" starttime="20160205 07:56:51.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:57:17.645" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 07:57:17.645" starttime="20160205 07:57:17.643"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 07:57:17.648" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 07:57:17.649" starttime="20160205 07:57:17.646"></status>
</kw>
<doc>Test creates the data session, sends two updates of the session and finally closes the session. Session consumes 9.77 MB

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 07:57:17.650" starttime="20160205 07:56:47.106"></status>
</test>
<test id="s1-s1-s1-s1-s1-t3" name="Single NOK BalanceExhausted Data Session">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:17.664" starttime="20160205 07:57:17.663"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>100000</arg>
<arg>'${SUT PROJECT TAG PREFIX}'=='MVNA_MEX'</arg>
<arg>100000</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MVNA_MEX'</arg>
<arg>100000</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:17.674" starttime="20160205 07:57:17.670"></status>
</kw>
<msg timestamp="20160205 07:57:17.675" level="INFO">${INITIAL_BALANCE} = 100000</msg>
<status status="PASS" endtime="20160205 07:57:17.675" starttime="20160205 07:57:17.665"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 07:57:17.688" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 07:57:17.688" starttime="20160205 07:57:17.686"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 07:57:17.690" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 07:57:17.691" starttime="20160205 07:57:17.689"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 07:57:17.693" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 07:57:17.694" starttime="20160205 07:57:17.692"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 07:57:17.696" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 07:57:17.696" starttime="20160205 07:57:17.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 07:57:17.699" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 07:57:17.699" starttime="20160205 07:57:17.697"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 07:57:17.701" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 07:57:17.702" starttime="20160205 07:57:17.700"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 07:57:17.704" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 07:57:17.705" starttime="20160205 07:57:17.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 07:57:17.707" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 07:57:17.707" starttime="20160205 07:57:17.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 07:57:17.710" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 07:57:17.710" starttime="20160205 07:57:17.708"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 07:57:17.712" level="INFO">msg=balance=100000</msg>
<status status="PASS" endtime="20160205 07:57:17.713" starttime="20160205 07:57:17.711"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 07:57:17.726" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:17.726" starttime="20160205 07:57:17.722"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:17.727" starttime="20160205 07:57:17.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 07:57:17.731" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:17.732" starttime="20160205 07:57:17.729"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:17.732" starttime="20160205 07:57:17.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 07:57:17.737" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:17.738" starttime="20160205 07:57:17.735"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:17.738" starttime="20160205 07:57:17.733"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:17.739" starttime="20160205 07:57:17.715"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 07:57:17.743" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 07:57:17.743" starttime="20160205 07:57:17.740"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:17.746" starttime="20160205 07:57:17.744"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:17.748" starttime="20160205 07:57:17.746"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:17.751" starttime="20160205 07:57:17.749"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:17.753" starttime="20160205 07:57:17.751"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:17.755" starttime="20160205 07:57:17.754"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:17.757" starttime="20160205 07:57:17.756"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:17.760" starttime="20160205 07:57:17.758"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:17.763" starttime="20160205 07:57:17.761"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:17.765" starttime="20160205 07:57:17.763"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:17.767" starttime="20160205 07:57:17.766"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:17.770" starttime="20160205 07:57:17.768"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:17.772" starttime="20160205 07:57:17.771"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 07:57:17.776" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=100000']</msg>
<msg timestamp="20160205 07:57:21.371" level="INFO">07:57:21,370 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:57:21.372" starttime="20160205 07:57:17.775"></status>
</kw>
<msg timestamp="20160205 07:57:21.375" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 07:57:21.375" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 07:57:21.374" starttime="20160205 07:57:17.773"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 07:57:21.385" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 07:57:21.385" starttime="20160205 07:57:21.383"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 07:57:21.388" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 07:57:21.388" starttime="20160205 07:57:21.386"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 07:57:21.391" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 07:57:21.390" starttime="20160205 07:57:21.389"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 07:57:21.395" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 07:57:21.398" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 07:57:21.399" starttime="20160205 07:57:21.393"></status>
</kw>
<msg timestamp="20160205 07:57:21.400" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 07:57:21.400" level="INFO">${return_log_entry} = 2016-02-05 07:57:21,370 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:57:21.399" starttime="20160205 07:57:21.392"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:21.407" starttime="20160205 07:57:21.406"></status>
</kw>
<msg timestamp="20160205 07:57:21.408" level="INFO">${return_log_entry} = 2016-02-05 07:57:21,370 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:57:21.408" starttime="20160205 07:57:21.401"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:21.415" starttime="20160205 07:57:21.414"></status>
</kw>
<msg timestamp="20160205 07:57:21.416" level="INFO">${return_log_entry} = 2016-02-05 07:57:21,370 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:57:21.416" starttime="20160205 07:57:21.409"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:21.424" starttime="20160205 07:57:21.422"></status>
</kw>
<msg timestamp="20160205 07:57:21.425" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:57:21.424" starttime="20160205 07:57:21.417"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:21.434" starttime="20160205 07:57:21.432"></status>
</kw>
<msg timestamp="20160205 07:57:21.435" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:57:21.434" starttime="20160205 07:57:21.426"></status>
</kw>
<msg timestamp="20160205 07:57:21.436" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:57:21.436" starttime="20160205 07:57:21.377"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:21.445" starttime="20160205 07:57:21.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:21.447" starttime="20160205 07:57:21.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:21.450" starttime="20160205 07:57:21.448"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 07:57:21.459" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 07:57:21.460" starttime="20160205 07:57:21.457"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:21.460" starttime="20160205 07:57:21.455"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:21.461" starttime="20160205 07:57:21.450"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:21.462" starttime="20160205 07:57:21.438"></status>
</kw>
<msg timestamp="20160205 07:57:21.464" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 07:57:21.463" starttime="20160205 07:57:17.677"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 07:57:21.466" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 07:57:21.467" starttime="20160205 07:57:21.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:57:21.469" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 07:57:21.470" starttime="20160205 07:57:21.468"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE LOG FILE PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:21.500" starttime="20160205 07:57:21.498"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:21.564" starttime="20160205 07:57:21.505"></status>
</kw>
<msg timestamp="20160205 07:57:21.567" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160205 07:57:21.566" starttime="20160205 07:57:21.500"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 07:57:21.584" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 07:57:22.802" level="INFO">Read output: Last login: Fri Feb  5 06:56:16 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 07:57:22.804" starttime="20160205 07:57:21.580"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:22.805" starttime="20160205 07:57:21.570"></status>
</kw>
<msg timestamp="20160205 07:57:22.808" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160205 07:57:22.807" starttime="20160205 07:57:21.491"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:22.820" starttime="20160205 07:57:22.818"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 07:57:22.823" level="INFO">Starting command 'tail -0f /var/log/inew/crce/6.1.23/negret-0.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160205 07:57:22.827" starttime="20160205 07:57:22.821"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:22.828" starttime="20160205 07:57:22.812"></status>
</kw>
<msg timestamp="20160205 07:57:22.830" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160205 07:57:22.829" starttime="20160205 07:57:21.482"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Data Session *******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:22.832" starttime="20160205 07:57:22.831"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the data session...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:57:22.834" level="INFO">Running the data session...</msg>
<status status="PASS" endtime="20160205 07:57:22.835" starttime="20160205 07:57:22.833"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Short Multislice Data Session">
<doc>Runs a standard data session with two session updates before session is closed (CCRi - CCRu - CCRu - CCRt).Rating group is</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${DIAM HPLMN LOCATION}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${DIAM GW HOST}</arg>
<arg>${DIAM GW PORT}</arg>
<arg>${DIAM GW REALM}</arg>
<arg>${DIAM GGSN FQDN}</arg>
<arg>${DIAM GGSN REALM}</arg>
<arg>${DIAM GGSN VENDORID}</arg>
<arg>${DATA TRAFFIC RATING GROUP}</arg>
</arguments>
<kw type="kw" name="${cgs_filename} = BuiltIn.Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>dataSessionUpdate_rg</arg>
<arg>${rating_group}</arg>
</arguments>
<msg timestamp="20160205 07:57:22.849" level="INFO">${cgs_filename} = dataSessionUpdate_rg6</msg>
<status status="PASS" endtime="20160205 07:57:22.849" starttime="20160205 07:57:22.847"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard Data CGS">
<doc>Runs a standard Data session (meaning a session that needs only location as parameter) for the passed cgs file</doc>
<arguments>
<arg>${cgs_filename}</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${location}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${diam_host}</arg>
<arg>${diam_port}</arg>
<arg>${diam_gw_realm}</arg>
<arg>${diam_ggsn_fqdn}</arg>
<arg>${diam_ggsn_realm}</arg>
<arg>${diam_ggsn_vendorid}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 07:57:22.863" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv</msg>
<status status="PASS" endtime="20160205 07:57:22.863" starttime="20160205 07:57:22.861"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 07:57:22.866" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv</msg>
<status status="PASS" endtime="20160205 07:57:22.866" starttime="20160205 07:57:22.864"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 07:57:22.869" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini</msg>
<status status="PASS" endtime="20160205 07:57:22.869" starttime="20160205 07:57:22.867"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 07:57:22.872" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/dataSessionUpdate_rg6.cgs</msg>
<status status="PASS" endtime="20160205 07:57:22.872" starttime="20160205 07:57:22.870"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:22.874" starttime="20160205 07:57:22.873"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 07:57:22.878" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:22.879" starttime="20160205 07:57:22.875"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:22.881" starttime="20160205 07:57:22.880"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;location\n</arg>
</arguments>
<msg timestamp="20160205 07:57:22.884" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:22.885" starttime="20160205 07:57:22.882"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${location}\n</arg>
</arguments>
<msg timestamp="20160205 07:57:22.888" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:22.889" starttime="20160205 07:57:22.886"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:22.891" starttime="20160205 07:57:22.890"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 07:57:22.895" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:22.896" starttime="20160205 07:57:22.893"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ndiamGwHost=${diam_host} \ndiamGwPort=${diam_port} \ndiamGwRealm=${diam_gw_realm} \ndiamGgsnFqdn=${diam_ggsn_fqdn} \ndiamGgsnRealm=${diam_ggsn_realm} \ndiamGgsnVendorId=${diam_ggsn_vendorid} \ndiamGwConnectTimeoutSecs=20</arg>
</arguments>
<msg timestamp="20160205 07:57:22.901" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:22.901" starttime="20160205 07:57:22.896"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:22.903" starttime="20160205 07:57:22.902"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 07:57:22.913" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/dataSessionUpdate_rg6.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 07:57:36.997" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 07:57:36.993" starttime="20160205 07:57:22.904"></status>
</kw>
<msg timestamp="20160205 07:57:37.004" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 07:57:37.001" starttime="20160205 07:57:22.851"></status>
</kw>
<msg timestamp="20160205 07:57:37.008" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 07:57:37.006" starttime="20160205 07:57:22.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:57:37.015" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 07:57:37.016" starttime="20160205 07:57:37.011"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>rc=${rc}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:57:37.022" level="INFO">rc=1</msg>
<status status="PASS" endtime="20160205 07:57:37.023" starttime="20160205 07:57:37.018"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${status}</arg>
<arg>Run Keyword If</arg>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>Should Be Equal As Numbers</arg>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:37.029" starttime="20160205 07:57:37.025"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>Else If</arg>
<arg>'${SUT PROJECT TAG PREFIX}'=='MVNA_MEX'</arg>
<arg>Should Be Equal As Numbers</arg>
<arg>${rc}</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:37.034" starttime="20160205 07:57:37.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20160205 07:57:42.042" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20160205 07:57:42.047" starttime="20160205 07:57:37.037"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/CRCE_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.080" starttime="20160205 07:57:42.077"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 07:57:42.091" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 07:57:42.090" starttime="20160205 07:57:42.082"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.105" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 07:57:42.106" starttime="20160205 07:57:42.093"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.123" starttime="20160205 07:57:42.120"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 07:57:42.128" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 07:57:42.238" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 07:57:42.240" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 07:57:42.239" starttime="20160205 07:57:42.125"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.242" starttime="20160205 07:57:42.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.244" starttime="20160205 07:57:42.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.246" starttime="20160205 07:57:42.245"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 07:57:42.249" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 07:57:42.335" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 07:57:42.336" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 07:57:42.337" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 07:57:42.336" starttime="20160205 07:57:42.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.342" starttime="20160205 07:57:42.338"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.344" starttime="20160205 07:57:42.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.346" starttime="20160205 07:57:42.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.349" starttime="20160205 07:57:42.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.351" starttime="20160205 07:57:42.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.353" starttime="20160205 07:57:42.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.356" starttime="20160205 07:57:42.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.358" starttime="20160205 07:57:42.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.360" starttime="20160205 07:57:42.359"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.362" starttime="20160205 07:57:42.361"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.365" starttime="20160205 07:57:42.363"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:42.365" starttime="20160205 07:57:42.108"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 07:57:42.368" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160205 07:57:42.372" starttime="20160205 07:57:42.366"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 07:57:42.373" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20160205 07:57:42.426" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 07:57:42.428" level="INFO">${stdout_string} = [2016-02-05 06:57:27,065][  INFO][196911][                     TraceInterceptorImpl.invoke()] reserve(DataReservationRequest [accumulatedData=0, accumulatedDuration=0, apn=inew.com, bearerType=GPRS, c...</msg>
<status status="PASS" endtime="20160205 07:57:42.427" starttime="20160205 07:57:42.372"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 07:57:42.433" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20160205 07:57:42.527" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 07:57:42.529" starttime="20160205 07:57:42.430"></status>
</kw>
<msg timestamp="20160205 07:57:42.532" level="INFO">${tailed_text} = [2016-02-05 06:57:27,065][  INFO][196911][                     TraceInterceptorImpl.invoke()] reserve(DataReservationRequest [accumulatedData=0, accumulatedDuration=0, apn=inew.com, bearerType=GPRS, c...</msg>
<status status="PASS" endtime="20160205 07:57:42.531" starttime="20160205 07:57:42.065"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.549" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:42.550" starttime="20160205 07:57:42.543"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:42.552" starttime="20160205 07:57:42.534"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.569" starttime="20160205 07:57:42.566"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.574" starttime="20160205 07:57:42.571"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:42.578" starttime="20160205 07:57:42.554"></status>
</kw>
<msg timestamp="20160205 07:57:42.581" level="INFO">${tailed_text} = [2016-02-05 06:57:27,065][  INFO][196911][                     TraceInterceptorImpl.invoke()] reserve(DataReservationRequest [accumulatedData=0, accumulatedDuration=0, apn=inew.com, bearerType=GPRS, c...</msg>
<status status="PASS" endtime="20160205 07:57:42.580" starttime="20160205 07:57:42.052"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>responseCode=INSUFFICIENT_FUNDS</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.586" starttime="20160205 07:57:42.583"></status>
</kw>
<doc>Test starts the data session, should send two updates of the session but in the mean time amount that was available on the balance is
exhausted. Session consumes 9.77 MB

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 07:57:42.588" starttime="20160205 07:57:17.653"></status>
</test>
<test id="s1-s1-s1-s1-s1-t4" name="Single NOK NoBalance Data Session">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.618" starttime="20160205 07:57:42.616"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20160205 07:57:42.624" level="INFO">${INITIAL_BALANCE} = 0</msg>
<status status="PASS" endtime="20160205 07:57:42.623" starttime="20160205 07:57:42.620"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.650" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 07:57:42.651" starttime="20160205 07:57:42.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.656" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 07:57:42.657" starttime="20160205 07:57:42.653"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.662" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 07:57:42.663" starttime="20160205 07:57:42.659"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.668" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 07:57:42.669" starttime="20160205 07:57:42.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.674" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 07:57:42.675" starttime="20160205 07:57:42.670"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.680" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 07:57:42.681" starttime="20160205 07:57:42.677"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.685" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 07:57:42.686" starttime="20160205 07:57:42.682"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.691" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 07:57:42.692" starttime="20160205 07:57:42.688"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.697" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 07:57:42.698" starttime="20160205 07:57:42.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.703" level="INFO">msg=balance=0</msg>
<status status="PASS" endtime="20160205 07:57:42.704" starttime="20160205 07:57:42.700"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.726" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:42.727" starttime="20160205 07:57:42.722"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:42.729" starttime="20160205 07:57:42.718"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.738" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:42.739" starttime="20160205 07:57:42.734"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:42.740" starttime="20160205 07:57:42.731"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.749" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:42.750" starttime="20160205 07:57:42.745"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:42.751" starttime="20160205 07:57:42.742"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:42.753" starttime="20160205 07:57:42.708"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 07:57:42.760" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 07:57:42.760" starttime="20160205 07:57:42.755"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.763" starttime="20160205 07:57:42.762"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.766" starttime="20160205 07:57:42.764"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.768" starttime="20160205 07:57:42.766"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.770" starttime="20160205 07:57:42.769"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.772" starttime="20160205 07:57:42.771"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.774" starttime="20160205 07:57:42.773"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.776" starttime="20160205 07:57:42.775"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.779" starttime="20160205 07:57:42.777"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.781" starttime="20160205 07:57:42.780"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.784" starttime="20160205 07:57:42.782"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.786" starttime="20160205 07:57:42.785"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:42.788" starttime="20160205 07:57:42.787"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 07:57:42.792" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=0']</msg>
<msg timestamp="20160205 07:57:44.663" level="INFO">07:57:44,660 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:57:44.664" starttime="20160205 07:57:42.791"></status>
</kw>
<msg timestamp="20160205 07:57:44.669" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 07:57:44.669" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 07:57:44.667" starttime="20160205 07:57:42.789"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 07:57:44.689" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 07:57:44.688" starttime="20160205 07:57:44.684"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 07:57:44.695" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 07:57:44.694" starttime="20160205 07:57:44.691"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 07:57:44.701" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 07:57:44.700" starttime="20160205 07:57:44.697"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 07:57:44.710" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 07:57:44.712" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 07:57:44.713" starttime="20160205 07:57:44.706"></status>
</kw>
<msg timestamp="20160205 07:57:44.715" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 07:57:44.716" level="INFO">${return_log_entry} = 2016-02-05 07:57:44,660 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:57:44.714" starttime="20160205 07:57:44.703"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:44.730" starttime="20160205 07:57:44.727"></status>
</kw>
<msg timestamp="20160205 07:57:44.733" level="INFO">${return_log_entry} = 2016-02-05 07:57:44,660 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:57:44.732" starttime="20160205 07:57:44.718"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:44.746" starttime="20160205 07:57:44.743"></status>
</kw>
<msg timestamp="20160205 07:57:44.749" level="INFO">${return_log_entry} = 2016-02-05 07:57:44,660 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:57:44.748" starttime="20160205 07:57:44.734"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:44.762" starttime="20160205 07:57:44.760"></status>
</kw>
<msg timestamp="20160205 07:57:44.763" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:57:44.763" starttime="20160205 07:57:44.751"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:44.772" starttime="20160205 07:57:44.771"></status>
</kw>
<msg timestamp="20160205 07:57:44.773" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:57:44.772" starttime="20160205 07:57:44.764"></status>
</kw>
<msg timestamp="20160205 07:57:44.774" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:57:44.774" starttime="20160205 07:57:44.673"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:44.782" starttime="20160205 07:57:44.781"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:44.784" starttime="20160205 07:57:44.783"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:44.786" starttime="20160205 07:57:44.785"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 07:57:44.794" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 07:57:44.795" starttime="20160205 07:57:44.792"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:44.795" starttime="20160205 07:57:44.791"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:44.796" starttime="20160205 07:57:44.787"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:44.796" starttime="20160205 07:57:44.775"></status>
</kw>
<msg timestamp="20160205 07:57:44.798" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 07:57:44.797" starttime="20160205 07:57:42.628"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 07:57:44.801" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 07:57:44.801" starttime="20160205 07:57:44.799"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:57:44.803" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 07:57:44.804" starttime="20160205 07:57:44.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Data Session *******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:44.805" starttime="20160205 07:57:44.804"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the data session...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:57:44.807" level="INFO">Running the data session...</msg>
<status status="PASS" endtime="20160205 07:57:44.808" starttime="20160205 07:57:44.806"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Short 767b Data Session">
<doc>Runs a standard data session in total of 767B (CCRi - CCRt). Rating group is added to differentiate between</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${DIAM HPLMN LOCATION}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${DIAM GW HOST}</arg>
<arg>${DIAM GW PORT}</arg>
<arg>${DIAM GW REALM}</arg>
<arg>${DIAM GGSN FQDN}</arg>
<arg>${DIAM GGSN REALM}</arg>
<arg>${DIAM GGSN VENDORID}</arg>
<arg>${DATA TRAFFIC RATING GROUP}</arg>
</arguments>
<kw type="kw" name="${cgs_filename} = BuiltIn.Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>data767b_rg</arg>
<arg>${rating_group}</arg>
</arguments>
<msg timestamp="20160205 07:57:44.822" level="INFO">${cgs_filename} = data767b_rg6</msg>
<status status="PASS" endtime="20160205 07:57:44.821" starttime="20160205 07:57:44.820"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard Data CGS">
<doc>Runs a standard Data session (meaning a session that needs only location as parameter) for the passed cgs file</doc>
<arguments>
<arg>${cgs_filename}</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${location}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${diam_host}</arg>
<arg>${diam_port}</arg>
<arg>${diam_gw_realm}</arg>
<arg>${diam_ggsn_fqdn}</arg>
<arg>${diam_ggsn_realm}</arg>
<arg>${diam_ggsn_vendorid}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 07:57:44.835" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv</msg>
<status status="PASS" endtime="20160205 07:57:44.835" starttime="20160205 07:57:44.833"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 07:57:44.838" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv</msg>
<status status="PASS" endtime="20160205 07:57:44.837" starttime="20160205 07:57:44.836"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 07:57:44.840" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini</msg>
<status status="PASS" endtime="20160205 07:57:44.840" starttime="20160205 07:57:44.839"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 07:57:44.843" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs</msg>
<status status="PASS" endtime="20160205 07:57:44.843" starttime="20160205 07:57:44.841"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:44.845" starttime="20160205 07:57:44.844"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 07:57:44.849" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:44.849" starttime="20160205 07:57:44.846"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:44.851" starttime="20160205 07:57:44.850"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;location\n</arg>
</arguments>
<msg timestamp="20160205 07:57:44.854" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:44.855" starttime="20160205 07:57:44.852"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${location}\n</arg>
</arguments>
<msg timestamp="20160205 07:57:44.858" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:44.858" starttime="20160205 07:57:44.855"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:44.860" starttime="20160205 07:57:44.859"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 07:57:44.863" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:44.863" starttime="20160205 07:57:44.861"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ndiamGwHost=${diam_host} \ndiamGwPort=${diam_port} \ndiamGwRealm=${diam_gw_realm} \ndiamGgsnFqdn=${diam_ggsn_fqdn} \ndiamGgsnRealm=${diam_ggsn_realm} \ndiamGgsnVendorId=${diam_ggsn_vendorid} \ndiamGwConnectTimeoutSecs=20</arg>
</arguments>
<msg timestamp="20160205 07:57:44.868" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:44.869" starttime="20160205 07:57:44.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:44.871" starttime="20160205 07:57:44.869"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 07:57:44.883" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 07:57:51.738" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 07:57:51.737" starttime="20160205 07:57:44.871"></status>
</kw>
<msg timestamp="20160205 07:57:51.740" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 07:57:51.740" starttime="20160205 07:57:44.824"></status>
</kw>
<msg timestamp="20160205 07:57:51.743" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 07:57:51.742" starttime="20160205 07:57:44.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:57:51.745" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 07:57:51.746" starttime="20160205 07:57:51.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>1</arg>
<arg>msg=CG Session ended with rc=${rc} other than 1!</arg>
</arguments>
<msg timestamp="20160205 07:57:51.749" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 07:57:51.749" starttime="20160205 07:57:51.747"></status>
</kw>
<doc>Test will attempt to make a data session for subscriber that has empty monetary account (and no other account to charge). It's expected that test shoud fail

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 07:57:51.750" starttime="20160205 07:57:42.594"></status>
</test>
<test id="s1-s1-s1-s1-s1-t5" name="Single NOK UnknownLocation Data Session">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:51.762" starttime="20160205 07:57:51.761"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1000000</arg>
</arguments>
<msg timestamp="20160205 07:57:51.765" level="INFO">${INITIAL_BALANCE} = 1000000</msg>
<status status="PASS" endtime="20160205 07:57:51.764" starttime="20160205 07:57:51.763"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 07:57:51.776" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 07:57:51.777" starttime="20160205 07:57:51.775"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 07:57:51.779" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 07:57:51.779" starttime="20160205 07:57:51.777"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 07:57:51.781" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 07:57:51.782" starttime="20160205 07:57:51.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 07:57:51.784" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 07:57:51.785" starttime="20160205 07:57:51.783"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 07:57:51.787" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 07:57:51.787" starttime="20160205 07:57:51.785"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 07:57:51.789" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 07:57:51.790" starttime="20160205 07:57:51.788"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 07:57:51.792" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 07:57:51.792" starttime="20160205 07:57:51.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 07:57:51.794" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 07:57:51.795" starttime="20160205 07:57:51.793"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 07:57:51.797" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 07:57:51.797" starttime="20160205 07:57:51.795"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 07:57:51.799" level="INFO">msg=balance=1000000</msg>
<status status="PASS" endtime="20160205 07:57:51.800" starttime="20160205 07:57:51.798"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 07:57:51.809" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:51.810" starttime="20160205 07:57:51.807"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:51.810" starttime="20160205 07:57:51.806"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 07:57:51.814" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:51.815" starttime="20160205 07:57:51.812"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:51.815" starttime="20160205 07:57:51.811"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 07:57:51.819" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:51.819" starttime="20160205 07:57:51.817"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:51.820" starttime="20160205 07:57:51.816"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:51.821" starttime="20160205 07:57:51.801"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 07:57:51.823" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 07:57:51.824" starttime="20160205 07:57:51.821"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:51.826" starttime="20160205 07:57:51.825"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:51.828" starttime="20160205 07:57:51.827"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:51.831" starttime="20160205 07:57:51.829"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:51.832" starttime="20160205 07:57:51.831"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:51.834" starttime="20160205 07:57:51.833"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:51.836" starttime="20160205 07:57:51.835"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:51.839" starttime="20160205 07:57:51.837"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:51.841" starttime="20160205 07:57:51.839"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:51.843" starttime="20160205 07:57:51.842"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:51.845" starttime="20160205 07:57:51.844"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:51.847" starttime="20160205 07:57:51.846"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:51.849" starttime="20160205 07:57:51.848"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 07:57:51.853" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=1000000']</msg>
<msg timestamp="20160205 07:57:55.508" level="INFO">07:57:55,505 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:57:55.510" starttime="20160205 07:57:51.851"></status>
</kw>
<msg timestamp="20160205 07:57:55.513" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 07:57:55.513" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 07:57:55.512" starttime="20160205 07:57:51.850"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 07:57:55.522" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 07:57:55.521" starttime="20160205 07:57:55.520"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 07:57:55.524" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 07:57:55.524" starttime="20160205 07:57:55.522"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 07:57:55.527" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 07:57:55.526" starttime="20160205 07:57:55.525"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 07:57:55.531" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 07:57:55.531" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 07:57:55.532" starttime="20160205 07:57:55.529"></status>
</kw>
<msg timestamp="20160205 07:57:55.533" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 07:57:55.533" level="INFO">${return_log_entry} = 2016-02-05 07:57:55,505 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:57:55.532" starttime="20160205 07:57:55.527"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:55.540" starttime="20160205 07:57:55.538"></status>
</kw>
<msg timestamp="20160205 07:57:55.541" level="INFO">${return_log_entry} = 2016-02-05 07:57:55,505 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:57:55.540" starttime="20160205 07:57:55.534"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:55.547" starttime="20160205 07:57:55.546"></status>
</kw>
<msg timestamp="20160205 07:57:55.548" level="INFO">${return_log_entry} = 2016-02-05 07:57:55,505 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 07:57:55.548" starttime="20160205 07:57:55.542"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:55.554" starttime="20160205 07:57:55.553"></status>
</kw>
<msg timestamp="20160205 07:57:55.555" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:57:55.555" starttime="20160205 07:57:55.549"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:55.564" starttime="20160205 07:57:55.562"></status>
</kw>
<msg timestamp="20160205 07:57:55.565" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:57:55.564" starttime="20160205 07:57:55.556"></status>
</kw>
<msg timestamp="20160205 07:57:55.566" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 07:57:55.566" starttime="20160205 07:57:55.514"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:55.574" starttime="20160205 07:57:55.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:55.576" starttime="20160205 07:57:55.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:55.578" starttime="20160205 07:57:55.576"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 07:57:55.586" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 07:57:55.586" starttime="20160205 07:57:55.584"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:55.587" starttime="20160205 07:57:55.582"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:55.587" starttime="20160205 07:57:55.578"></status>
</kw>
<status status="PASS" endtime="20160205 07:57:55.588" starttime="20160205 07:57:55.567"></status>
</kw>
<msg timestamp="20160205 07:57:55.590" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 07:57:55.589" starttime="20160205 07:57:51.767"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 07:57:55.592" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 07:57:55.593" starttime="20160205 07:57:55.591"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:57:55.594" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 07:57:55.595" starttime="20160205 07:57:55.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Data Session *******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:55.597" starttime="20160205 07:57:55.596"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the data session...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:57:55.599" level="INFO">Running the data session...</msg>
<status status="PASS" endtime="20160205 07:57:55.599" starttime="20160205 07:57:55.598"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Short 767b Data Session">
<doc>Runs a standard data session in total of 767B (CCRi - CCRt). Rating group is added to differentiate between</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${DIAM HPLMN UNKNOWN LOCATION}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${DIAM GW HOST}</arg>
<arg>${DIAM GW PORT}</arg>
<arg>${DIAM GW REALM}</arg>
<arg>${DIAM GGSN FQDN}</arg>
<arg>${DIAM GGSN REALM}</arg>
<arg>${DIAM GGSN VENDORID}</arg>
<arg>${DATA TRAFFIC RATING GROUP}</arg>
</arguments>
<kw type="kw" name="${cgs_filename} = BuiltIn.Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>data767b_rg</arg>
<arg>${rating_group}</arg>
</arguments>
<msg timestamp="20160205 07:57:55.612" level="INFO">${cgs_filename} = data767b_rg6</msg>
<status status="PASS" endtime="20160205 07:57:55.612" starttime="20160205 07:57:55.610"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard Data CGS">
<doc>Runs a standard Data session (meaning a session that needs only location as parameter) for the passed cgs file</doc>
<arguments>
<arg>${cgs_filename}</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${location}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${diam_host}</arg>
<arg>${diam_port}</arg>
<arg>${diam_gw_realm}</arg>
<arg>${diam_ggsn_fqdn}</arg>
<arg>${diam_ggsn_realm}</arg>
<arg>${diam_ggsn_vendorid}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 07:57:55.625" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv</msg>
<status status="PASS" endtime="20160205 07:57:55.624" starttime="20160205 07:57:55.623"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 07:57:55.627" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv</msg>
<status status="PASS" endtime="20160205 07:57:55.627" starttime="20160205 07:57:55.626"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 07:57:55.630" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini</msg>
<status status="PASS" endtime="20160205 07:57:55.630" starttime="20160205 07:57:55.628"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 07:57:55.632" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs</msg>
<status status="PASS" endtime="20160205 07:57:55.632" starttime="20160205 07:57:55.631"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:55.634" starttime="20160205 07:57:55.633"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 07:57:55.638" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:55.638" starttime="20160205 07:57:55.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:55.640" starttime="20160205 07:57:55.639"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;location\n</arg>
</arguments>
<msg timestamp="20160205 07:57:55.643" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:55.644" starttime="20160205 07:57:55.641"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${location}\n</arg>
</arguments>
<msg timestamp="20160205 07:57:55.646" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:55.647" starttime="20160205 07:57:55.644"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:55.649" starttime="20160205 07:57:55.648"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 07:57:55.651" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:55.652" starttime="20160205 07:57:55.649"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ndiamGwHost=${diam_host} \ndiamGwPort=${diam_port} \ndiamGwRealm=${diam_gw_realm} \ndiamGgsnFqdn=${diam_ggsn_fqdn} \ndiamGgsnRealm=${diam_ggsn_realm} \ndiamGgsnVendorId=${diam_ggsn_vendorid} \ndiamGwConnectTimeoutSecs=20</arg>
</arguments>
<msg timestamp="20160205 07:57:55.656" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 07:57:55.657" starttime="20160205 07:57:55.653"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 07:57:55.659" starttime="20160205 07:57:55.658"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 07:57:55.666" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 07:58:01.901" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 07:58:01.897" starttime="20160205 07:57:55.659"></status>
</kw>
<msg timestamp="20160205 07:58:01.905" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 07:58:01.903" starttime="20160205 07:57:55.614"></status>
</kw>
<msg timestamp="20160205 07:58:01.909" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 07:58:01.907" starttime="20160205 07:57:55.601"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 07:58:01.917" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 07:58:01.918" starttime="20160205 07:58:01.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>1</arg>
<arg>msg=CG Session ended with rc=${rc} other than 1!</arg>
</arguments>
<msg timestamp="20160205 07:58:01.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 07:58:01.926" starttime="20160205 07:58:01.921"></status>
</kw>
<doc>Test will attempt to start a simple data session with unknown location. Test should fail

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 07:58:01.927" starttime="20160205 07:57:51.753"></status>
</test>
<doc>Testing the simple data session cases with CG

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 07:58:01.959" starttime="20160205 07:56:06.999"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 07:58:02.033" starttime="20160205 07:56:06.865"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 07:58:02.100" starttime="20160205 07:56:06.842"></status>
</suite>
<doc>This robot framework initialization file is used to globaly assign tags to
all test suites located in or below the current folder
For a complete list of tags allowed for folder assignement
see &lt;workspace root&gt;/tagging-rules.txt</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 07:58:02.149" starttime="20160205 07:56:06.816"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 07:58:02.178" starttime="20160205 07:56:06.585"></status>
</suite>
<statistics>
<total>
<stat pass="5" fail="0">Critical Tests</stat>
<stat pass="5" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="5" info="" doc="" combined="" fail="0" links="">calls</stat>
<stat pass="5" info="" doc="" combined="" fail="0" links="">DATA_only</stat>
<stat pass="5" info="" doc="" combined="" fail="0" links="">matko.sanseovic</stat>
<stat pass="5" info="" doc="" combined="" fail="0" links="">MTEL_supported</stat>
<stat pass="5" info="" doc="" combined="" fail="0" links="">MVNA_MEX_supported</stat>
</tag>
<suite>
<stat pass="5" id="s1" fail="0" name="Robot Testsuites">Robot Testsuites</stat>
<stat pass="5" id="s1-s1" fail="0" name="Basic">Robot Testsuites.Basic</stat>
<stat pass="5" id="s1-s1-s1" fail="0" name="PrePaid">Robot Testsuites.Basic.PrePaid</stat>
<stat pass="5" id="s1-s1-s1-s1" fail="0" name="DATA">Robot Testsuites.Basic.PrePaid.DATA</stat>
<stat pass="5" id="s1-s1-s1-s1-s1" fail="0" name="Data-Regression-Suite">Robot Testsuites.Basic.PrePaid.DATA.Data-Regression-Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
