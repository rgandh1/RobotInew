<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20160205 03:28:47.340">
<suite source="/opt/robot/robotworkspace/robot_testsuites" id="s1" name="Robot Testsuites">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic" id="s1-s1" name="Basic">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid" id="s1-s1-s1" name="PrePaid">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/DATA" id="s1-s1-s1-s1" name="DATA">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/DATA/data-regression-suite.txt" id="s1-s1-s1-s1-s1" name="Data-Regression-Suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:28:48.709" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:28:48.713" level="INFO">${date} = Fri Feb  5 03:28:48 CET 2016</msg>
<status status="PASS" endtime="20160205 03:28:48.712" starttime="20160205 03:28:48.677"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:28:48.721" level="INFO">Date and time: Fri Feb  5 03:28:48 CET 2016</msg>
<status status="PASS" endtime="20160205 03:28:48.723" starttime="20160205 03:28:48.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:28:48.730" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160205 03:28:48.732" starttime="20160205 03:28:48.725"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:48.811" starttime="20160205 03:28:48.806"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:49.067" starttime="20160205 03:28:48.839"></status>
</kw>
<msg timestamp="20160205 03:28:49.073" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160205 03:28:49.071" starttime="20160205 03:28:48.813"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:28:49.093" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:28:50.655" level="INFO">Read output: Last login: Fri Feb  5 00:39:52 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:28:50.657" starttime="20160205 03:28:49.088"></status>
</kw>
<status status="PASS" endtime="20160205 03:28:50.659" starttime="20160205 03:28:49.076"></status>
</kw>
<msg timestamp="20160205 03:28:50.663" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160205 03:28:50.662" starttime="20160205 03:28:48.784"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:28:50.671" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:28:50.671" starttime="20160205 03:28:50.666"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:28:50.674" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160205 03:28:51.542" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:28:51.545" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:28:51.544" starttime="20160205 03:28:50.672"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:51.551" starttime="20160205 03:28:51.548"></status>
</kw>
<msg timestamp="20160205 03:28:51.552" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:28:51.553" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:28:51.552" starttime="20160205 03:28:51.546"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:51.561" starttime="20160205 03:28:51.559"></status>
</kw>
<msg timestamp="20160205 03:28:51.562" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:28:51.561" starttime="20160205 03:28:51.554"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:28:51.565" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:28:51.565" starttime="20160205 03:28:51.563"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:28:51.570" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:28:51.569" starttime="20160205 03:28:51.567"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:51.572" starttime="20160205 03:28:51.571"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:51.583" starttime="20160205 03:28:51.581"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:28:51.587" starttime="20160205 03:28:51.584"></status>
</kw>
<status status="PASS" endtime="20160205 03:28:51.589" starttime="20160205 03:28:51.574"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:51.596" starttime="20160205 03:28:51.594"></status>
</kw>
<msg timestamp="20160205 03:28:51.597" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:28:51.597" starttime="20160205 03:28:51.590"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:51.600" starttime="20160205 03:28:51.598"></status>
</kw>
<msg timestamp="20160205 03:28:51.602" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:28:51.603" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:28:51.602" starttime="20160205 03:28:48.757"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:51.646" starttime="20160205 03:28:51.644"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:51.710" starttime="20160205 03:28:51.652"></status>
</kw>
<msg timestamp="20160205 03:28:51.713" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160205 03:28:51.712" starttime="20160205 03:28:51.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:28:51.732" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:28:53.111" level="INFO">Read output: Last login: Fri Feb  5 00:43:16 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:28:53.113" starttime="20160205 03:28:51.727"></status>
</kw>
<status status="PASS" endtime="20160205 03:28:53.115" starttime="20160205 03:28:51.716"></status>
</kw>
<msg timestamp="20160205 03:28:53.118" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160205 03:28:53.117" starttime="20160205 03:28:51.636"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:28:53.125" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:28:53.124" starttime="20160205 03:28:53.119"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:28:53.129" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:28:54.037" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:28:54.039" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:28:54.038" starttime="20160205 03:28:53.127"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:54.045" starttime="20160205 03:28:54.043"></status>
</kw>
<msg timestamp="20160205 03:28:54.046" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:28:54.047" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:28:54.046" starttime="20160205 03:28:54.040"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:54.054" starttime="20160205 03:28:54.052"></status>
</kw>
<msg timestamp="20160205 03:28:54.055" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:28:54.054" starttime="20160205 03:28:54.048"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:28:54.058" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:28:54.058" starttime="20160205 03:28:54.056"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:28:54.061" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:28:54.061" starttime="20160205 03:28:54.059"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:54.064" starttime="20160205 03:28:54.062"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:54.076" starttime="20160205 03:28:54.074"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:28:54.079" starttime="20160205 03:28:54.077"></status>
</kw>
<status status="PASS" endtime="20160205 03:28:54.081" starttime="20160205 03:28:54.065"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:54.087" starttime="20160205 03:28:54.086"></status>
</kw>
<msg timestamp="20160205 03:28:54.089" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:28:54.088" starttime="20160205 03:28:54.082"></status>
</kw>
<msg timestamp="20160205 03:28:54.091" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:28:54.091" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:28:54.090" starttime="20160205 03:28:51.615"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:54.145" starttime="20160205 03:28:54.143"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:54.196" starttime="20160205 03:28:54.150"></status>
</kw>
<msg timestamp="20160205 03:28:54.197" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160205 03:28:54.197" starttime="20160205 03:28:54.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:28:54.205" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:28:55.008" level="INFO">Read output: Last login: Fri Feb  5 00:39:54 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:28:55.009" starttime="20160205 03:28:54.203"></status>
</kw>
<status status="PASS" endtime="20160205 03:28:55.010" starttime="20160205 03:28:54.198"></status>
</kw>
<msg timestamp="20160205 03:28:55.013" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160205 03:28:55.012" starttime="20160205 03:28:54.135"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:28:55.018" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:28:55.018" starttime="20160205 03:28:55.014"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:28:55.021" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:28:55.791" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:28:55.792" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:28:55.792" starttime="20160205 03:28:55.019"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:55.798" starttime="20160205 03:28:55.796"></status>
</kw>
<msg timestamp="20160205 03:28:55.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:28:55.799" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:28:55.799" starttime="20160205 03:28:55.794"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:55.806" starttime="20160205 03:28:55.805"></status>
</kw>
<msg timestamp="20160205 03:28:55.807" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:28:55.807" starttime="20160205 03:28:55.800"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:28:55.810" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:28:55.810" starttime="20160205 03:28:55.808"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:28:55.813" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:28:55.813" starttime="20160205 03:28:55.811"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:55.816" starttime="20160205 03:28:55.814"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:55.825" starttime="20160205 03:28:55.823"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:28:55.828" starttime="20160205 03:28:55.826"></status>
</kw>
<status status="PASS" endtime="20160205 03:28:55.829" starttime="20160205 03:28:55.817"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:55.835" starttime="20160205 03:28:55.834"></status>
</kw>
<msg timestamp="20160205 03:28:55.836" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:28:55.836" starttime="20160205 03:28:55.830"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:55.839" starttime="20160205 03:28:55.837"></status>
</kw>
<msg timestamp="20160205 03:28:55.841" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:28:55.842" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:28:55.840" starttime="20160205 03:28:54.114"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:55.881" starttime="20160205 03:28:55.879"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:55.917" starttime="20160205 03:28:55.886"></status>
</kw>
<msg timestamp="20160205 03:28:55.919" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160205 03:28:55.918" starttime="20160205 03:28:55.882"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:28:55.927" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:28:56.605" level="INFO">Read output: Last login: Fri Feb  5 00:39:55 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:28:56.607" starttime="20160205 03:28:55.926"></status>
</kw>
<status status="PASS" endtime="20160205 03:28:56.608" starttime="20160205 03:28:55.920"></status>
</kw>
<msg timestamp="20160205 03:28:56.610" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160205 03:28:56.610" starttime="20160205 03:28:55.871"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:28:56.630" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:28:56.629" starttime="20160205 03:28:56.611"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:28:56.633" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:28:56.742" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:28:56.744" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:28:56.743" starttime="20160205 03:28:56.631"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:56.757" starttime="20160205 03:28:56.752"></status>
</kw>
<msg timestamp="20160205 03:28:56.759" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:28:56.760" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:28:56.758" starttime="20160205 03:28:56.747"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:56.774" starttime="20160205 03:28:56.771"></status>
</kw>
<msg timestamp="20160205 03:28:56.777" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:28:56.776" starttime="20160205 03:28:56.762"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:28:56.783" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:28:56.783" starttime="20160205 03:28:56.779"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:28:56.790" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:28:56.789" starttime="20160205 03:28:56.786"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:56.795" starttime="20160205 03:28:56.792"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:56.816" starttime="20160205 03:28:56.812"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:28:56.824" starttime="20160205 03:28:56.818"></status>
</kw>
<status status="PASS" endtime="20160205 03:28:56.826" starttime="20160205 03:28:56.799"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:56.839" starttime="20160205 03:28:56.836"></status>
</kw>
<msg timestamp="20160205 03:28:56.842" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:28:56.841" starttime="20160205 03:28:56.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:56.847" starttime="20160205 03:28:56.844"></status>
</kw>
<msg timestamp="20160205 03:28:56.852" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:28:56.853" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:28:56.850" starttime="20160205 03:28:55.853"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:28:56.859" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:28:56.861" starttime="20160205 03:28:56.855"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:28:56.867" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:28:56.869" starttime="20160205 03:28:56.863"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:28:56.875" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:28:56.877" starttime="20160205 03:28:56.870"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:28:56.879" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:28:56.880" starttime="20160205 03:28:56.878"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:28:56.883" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:28:56.883" starttime="20160205 03:28:56.881"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:28:56.886" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:28:56.886" starttime="20160205 03:28:56.884"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:28:56.889" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:28:56.890" starttime="20160205 03:28:56.887"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:28:56.892" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:28:56.893" starttime="20160205 03:28:56.890"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:56.901" starttime="20160205 03:28:56.898"></status>
</kw>
<msg timestamp="20160205 03:28:56.902" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:28:56.902" starttime="20160205 03:28:56.893"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:28:56.905" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:28:56.906" starttime="20160205 03:28:56.903"></status>
</kw>
<status status="PASS" endtime="20160205 03:28:56.907" starttime="20160205 03:28:48.664"></status>
</kw>
<test id="s1-s1-s1-s1-s1-t1" name="Single Data Session 767b">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:56.917" starttime="20160205 03:28:56.916"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:28:56.920" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:28:56.919" starttime="20160205 03:28:56.918"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:28:56.932" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 03:28:56.933" starttime="20160205 03:28:56.931"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:28:56.935" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:28:56.935" starttime="20160205 03:28:56.933"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:28:56.939" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:28:56.939" starttime="20160205 03:28:56.936"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:28:56.941" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 03:28:56.942" starttime="20160205 03:28:56.940"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:28:56.944" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 03:28:56.945" starttime="20160205 03:28:56.943"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:28:56.947" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 03:28:56.948" starttime="20160205 03:28:56.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:28:56.950" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:28:56.950" starttime="20160205 03:28:56.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:28:56.953" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 03:28:56.953" starttime="20160205 03:28:56.951"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:28:56.955" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:28:56.956" starttime="20160205 03:28:56.954"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:28:56.958" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:28:56.959" starttime="20160205 03:28:56.957"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:28:56.982" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:28:56.983" starttime="20160205 03:28:56.967"></status>
</kw>
<status status="PASS" endtime="20160205 03:28:56.984" starttime="20160205 03:28:56.966"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:28:56.988" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:28:56.989" starttime="20160205 03:28:56.986"></status>
</kw>
<status status="PASS" endtime="20160205 03:28:56.989" starttime="20160205 03:28:56.984"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:28:56.994" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:28:56.994" starttime="20160205 03:28:56.992"></status>
</kw>
<status status="PASS" endtime="20160205 03:28:56.995" starttime="20160205 03:28:56.990"></status>
</kw>
<status status="PASS" endtime="20160205 03:28:56.996" starttime="20160205 03:28:56.961"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:28:56.999" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:28:57.000" starttime="20160205 03:28:56.997"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:57.003" starttime="20160205 03:28:57.002"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:57.006" starttime="20160205 03:28:57.004"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:57.009" starttime="20160205 03:28:57.007"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:57.011" starttime="20160205 03:28:57.010"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:57.013" starttime="20160205 03:28:57.012"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:57.016" starttime="20160205 03:28:57.014"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:57.018" starttime="20160205 03:28:57.017"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:57.021" starttime="20160205 03:28:57.019"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:57.024" starttime="20160205 03:28:57.022"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:57.026" starttime="20160205 03:28:57.025"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:57.029" starttime="20160205 03:28:57.027"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:28:57.032" starttime="20160205 03:28:57.030"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:28:57.035" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:29:07.457" level="INFO">03:28:57,211 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/ext] for external libraries
03:28:57,213 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
03:28:59,128 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
03:28:59,145 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.119.125]
03:28:59,145 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
03:28:59,145 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
03:28:59,145 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [1]
03:28:59,145 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [334030880001000]
03:28:59,146 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [525516001000]
03:28:59,146 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
03:28:59,146 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [3]
03:28:59,146 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
03:28:59,146 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
03:28:59,146 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
03:28:59,147 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
03:28:59,156 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
03:28:59,162 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
03:28:59,592 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
03:28:59,654 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
03:28:59,858 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:28:59,858 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
03:29:02,910 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:29:02,914 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:29:03,088 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:29:03,088 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:29:03,088 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:29:03,088 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
03:29:03,172 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
03:29:03,443 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
03:29:03,469 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
03:29:03,471 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:29:03,473 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:29:03,473 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
03:29:05,732 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:29:05,732 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:29:05,736 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:29:05,736 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:29:05,736 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:29:05,736 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
03:29:05,771 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
03:29:05,774 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
03:29:05,796 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
03:29:05,798 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:29:05,800 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:29:05,800 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
03:29:06,026 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:29:06,026 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:29:06,029 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:29:06,029 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:29:06,029 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:29:06,029 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
03:29:06,062 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
03:29:06,067 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
03:29:06,087 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
03:29:06,088 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:29:06,090 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:29:06,090 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
03:29:06,381 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:29:06,381 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:29:06,385 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:29:06,385 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:29:06,385 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:29:06,385 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
03:29:06,417 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
03:29:06,420 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
03:29:06,440 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
03:29:06,442 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:29:06,443 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:29:06,444 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
03:29:06,791 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:29:06,791 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:29:06,798 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:29:06,798 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:29:06,798 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:29:06,798 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
03:29:06,829 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
03:29:06,839 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
03:29:06,859 INFO  [SoapUITestCaseRunner] running step [setBalance]
03:29:06,861 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:29:06,862 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:29:06,862 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
03:29:07,308 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:29:07,309 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:29:07,314 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:29:07,315 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:29:07,315 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:29:07,315 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
03:29:07,346 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
03:29:07,351 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
03:29:07,372 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
03:29:07,401 INFO  [SoapUITestCaseRunner] running step [finish_successful]
03:29:07,452 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
03:29:07,453 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 8260ms, status: FINISHED
03:29:07,453 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 8260ms</msg>
<status status="PASS" endtime="20160205 03:29:07.463" starttime="20160205 03:28:57.034"></status>
</kw>
<msg timestamp="20160205 03:29:07.467" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:29:07.468" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:29:07.465" starttime="20160205 03:28:57.033"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:29:07.487" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:29:07.486" starttime="20160205 03:29:07.482"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:29:07.492" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:29:07.491" starttime="20160205 03:29:07.489"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:29:07.497" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:29:07.496" starttime="20160205 03:29:07.494"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:29:07.505" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:29:07.511" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:29:07.512" starttime="20160205 03:29:07.502"></status>
</kw>
<msg timestamp="20160205 03:29:07.514" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:29:07.514" level="INFO">${return_log_entry} = 2016-02-05 03:29:07,452 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:29:07.513" starttime="20160205 03:29:07.499"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:07.525" starttime="20160205 03:29:07.523"></status>
</kw>
<msg timestamp="20160205 03:29:07.526" level="INFO">${return_log_entry} = 2016-02-05 03:29:07,452 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:29:07.526" starttime="20160205 03:29:07.516"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:07.535" starttime="20160205 03:29:07.533"></status>
</kw>
<msg timestamp="20160205 03:29:07.536" level="INFO">${return_log_entry} = 2016-02-05 03:29:07,452 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:29:07.536" starttime="20160205 03:29:07.527"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:07.546" starttime="20160205 03:29:07.543"></status>
</kw>
<msg timestamp="20160205 03:29:07.547" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:29:07.547" starttime="20160205 03:29:07.538"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:07.559" starttime="20160205 03:29:07.557"></status>
</kw>
<msg timestamp="20160205 03:29:07.561" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:29:07.560" starttime="20160205 03:29:07.549"></status>
</kw>
<msg timestamp="20160205 03:29:07.563" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:29:07.562" starttime="20160205 03:29:07.470"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:07.579" starttime="20160205 03:29:07.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:07.582" starttime="20160205 03:29:07.580"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:07.585" starttime="20160205 03:29:07.583"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:29:07.599" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:29:07.600" starttime="20160205 03:29:07.593"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:07.601" starttime="20160205 03:29:07.591"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:07.601" starttime="20160205 03:29:07.586"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:07.602" starttime="20160205 03:29:07.564"></status>
</kw>
<msg timestamp="20160205 03:29:07.605" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:29:07.604" starttime="20160205 03:28:56.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:29:07.608" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:29:07.609" starttime="20160205 03:29:07.606"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:29:07.611" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:29:07.612" starttime="20160205 03:29:07.610"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Data Session *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:07.615" starttime="20160205 03:29:07.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the data session...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:29:07.618" level="INFO">Running the data session...</msg>
<status status="PASS" endtime="20160205 03:29:07.619" starttime="20160205 03:29:07.616"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Short 767b Data Session">
<doc>Runs a standard data session in total of 767B (CCRi - CCRt). Rating group is added to differentiate between</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${DIAM HPLMN LOCATION}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${DIAM GW HOST}</arg>
<arg>${DIAM GW PORT}</arg>
<arg>${DIAM GW REALM}</arg>
<arg>${DIAM GGSN FQDN}</arg>
<arg>${DIAM GGSN REALM}</arg>
<arg>${DIAM GGSN VENDORID}</arg>
<arg>${DATA TRAFFIC RATING GROUP}</arg>
</arguments>
<kw type="kw" name="${cgs_filename} = BuiltIn.Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>data767b_rg</arg>
<arg>${rating_group}</arg>
</arguments>
<msg timestamp="20160205 03:29:07.635" level="INFO">${cgs_filename} = data767b_rg6</msg>
<status status="PASS" endtime="20160205 03:29:07.634" starttime="20160205 03:29:07.633"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard Data CGS">
<doc>Runs a standard Data session (meaning a session that needs only location as parameter) for the passed cgs file</doc>
<arguments>
<arg>${cgs_filename}</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${location}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${diam_host}</arg>
<arg>${diam_port}</arg>
<arg>${diam_gw_realm}</arg>
<arg>${diam_ggsn_fqdn}</arg>
<arg>${diam_ggsn_realm}</arg>
<arg>${diam_ggsn_vendorid}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:29:07.649" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:29:07.648" starttime="20160205 03:29:07.647"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:29:07.651" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:29:07.651" starttime="20160205 03:29:07.649"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:29:07.654" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:29:07.654" starttime="20160205 03:29:07.652"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:29:07.657" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs</msg>
<status status="PASS" endtime="20160205 03:29:07.657" starttime="20160205 03:29:07.655"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:07.659" starttime="20160205 03:29:07.658"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:29:07.698" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:07.699" starttime="20160205 03:29:07.660"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:07.701" starttime="20160205 03:29:07.700"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;location\n</arg>
</arguments>
<msg timestamp="20160205 03:29:07.722" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:07.722" starttime="20160205 03:29:07.702"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${location}\n</arg>
</arguments>
<msg timestamp="20160205 03:29:07.726" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:07.727" starttime="20160205 03:29:07.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:07.729" starttime="20160205 03:29:07.727"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:29:07.734" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:07.734" starttime="20160205 03:29:07.729"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ndiamGwHost=${diam_host} \ndiamGwPort=${diam_port} \ndiamGwRealm=${diam_gw_realm} \ndiamGgsnFqdn=${diam_ggsn_fqdn} \ndiamGgsnRealm=${diam_ggsn_realm} \ndiamGgsnVendorId=${diam_ggsn_vendorid} \ndiamGwConnectTimeoutSecs=20</arg>
</arguments>
<msg timestamp="20160205 03:29:07.739" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:07.740" starttime="20160205 03:29:07.735"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:07.742" starttime="20160205 03:29:07.741"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:29:07.754" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:29:18.049" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 03:29:18.047" starttime="20160205 03:29:07.743"></status>
</kw>
<msg timestamp="20160205 03:29:18.053" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 03:29:18.052" starttime="20160205 03:29:07.637"></status>
</kw>
<msg timestamp="20160205 03:29:18.055" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 03:29:18.054" starttime="20160205 03:29:07.621"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:29:18.057" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:29:18.058" starttime="20160205 03:29:18.056"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:29:18.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160205 03:29:18.084" level="FAIL">CG Session ended with rc 1: 1.0 != 0.0</msg>
<status status="FAIL" endtime="20160205 03:29:18.085" starttime="20160205 03:29:18.059"></status>
</kw>
<doc>Test will make a short data session in total of 767 bytes

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160205 03:29:18.087" starttime="20160205 03:28:56.908">CG Session ended with rc 1: 1.0 != 0.0</status>
</test>
<test id="s1-s1-s1-s1-s1-t2" name="CG Short Multislice Data Session">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:18.103" starttime="20160205 03:29:18.102"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:29:18.107" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:29:18.106" starttime="20160205 03:29:18.105"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:29:18.121" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 03:29:18.121" starttime="20160205 03:29:18.119"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:29:18.124" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:29:18.125" starttime="20160205 03:29:18.123"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:29:18.127" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:29:18.128" starttime="20160205 03:29:18.126"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:29:18.131" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 03:29:18.131" starttime="20160205 03:29:18.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:29:18.133" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 03:29:18.134" starttime="20160205 03:29:18.132"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:29:18.136" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 03:29:18.137" starttime="20160205 03:29:18.135"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:29:18.139" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:29:18.140" starttime="20160205 03:29:18.138"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:29:18.142" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 03:29:18.143" starttime="20160205 03:29:18.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:29:18.145" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:29:18.145" starttime="20160205 03:29:18.143"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:29:18.148" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:29:18.148" starttime="20160205 03:29:18.146"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:29:18.158" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:18.159" starttime="20160205 03:29:18.156"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:18.159" starttime="20160205 03:29:18.154"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:29:18.163" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:18.164" starttime="20160205 03:29:18.162"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:18.165" starttime="20160205 03:29:18.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:29:18.169" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:18.169" starttime="20160205 03:29:18.167"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:18.170" starttime="20160205 03:29:18.166"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:18.171" starttime="20160205 03:29:18.150"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:29:18.175" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:29:18.175" starttime="20160205 03:29:18.172"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:18.178" starttime="20160205 03:29:18.176"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:18.180" starttime="20160205 03:29:18.178"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:18.183" starttime="20160205 03:29:18.181"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:18.185" starttime="20160205 03:29:18.183"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:18.187" starttime="20160205 03:29:18.185"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:18.189" starttime="20160205 03:29:18.188"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:18.192" starttime="20160205 03:29:18.190"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:18.195" starttime="20160205 03:29:18.192"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:18.197" starttime="20160205 03:29:18.195"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:18.200" starttime="20160205 03:29:18.198"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:18.202" starttime="20160205 03:29:18.200"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:18.204" starttime="20160205 03:29:18.203"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:29:18.208" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:29:20.274" level="INFO">03:29:20,273 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:29:20.276" starttime="20160205 03:29:18.207"></status>
</kw>
<msg timestamp="20160205 03:29:20.279" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:29:20.279" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:29:20.277" starttime="20160205 03:29:18.205"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:29:20.292" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:29:20.292" starttime="20160205 03:29:20.289"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:29:20.296" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:29:20.295" starttime="20160205 03:29:20.293"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:29:20.300" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:29:20.299" starttime="20160205 03:29:20.297"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:29:20.306" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:29:20.308" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:29:20.309" starttime="20160205 03:29:20.303"></status>
</kw>
<msg timestamp="20160205 03:29:20.311" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:29:20.311" level="INFO">${return_log_entry} = 2016-02-05 03:29:20,273 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:29:20.310" starttime="20160205 03:29:20.301"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:20.321" starttime="20160205 03:29:20.319"></status>
</kw>
<msg timestamp="20160205 03:29:20.322" level="INFO">${return_log_entry} = 2016-02-05 03:29:20,273 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:29:20.322" starttime="20160205 03:29:20.313"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:20.331" starttime="20160205 03:29:20.329"></status>
</kw>
<msg timestamp="20160205 03:29:20.333" level="INFO">${return_log_entry} = 2016-02-05 03:29:20,273 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:29:20.332" starttime="20160205 03:29:20.324"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:20.343" starttime="20160205 03:29:20.340"></status>
</kw>
<msg timestamp="20160205 03:29:20.345" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:29:20.344" starttime="20160205 03:29:20.334"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:20.357" starttime="20160205 03:29:20.355"></status>
</kw>
<msg timestamp="20160205 03:29:20.359" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:29:20.358" starttime="20160205 03:29:20.346"></status>
</kw>
<msg timestamp="20160205 03:29:20.361" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:29:20.360" starttime="20160205 03:29:20.281"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:20.373" starttime="20160205 03:29:20.371"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:20.377" starttime="20160205 03:29:20.374"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:20.379" starttime="20160205 03:29:20.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:29:20.388" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:29:20.388" starttime="20160205 03:29:20.386"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:20.389" starttime="20160205 03:29:20.384"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:20.390" starttime="20160205 03:29:20.380"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:20.390" starttime="20160205 03:29:20.363"></status>
</kw>
<msg timestamp="20160205 03:29:20.392" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:29:20.391" starttime="20160205 03:29:18.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:29:20.394" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:29:20.395" starttime="20160205 03:29:20.393"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:29:20.397" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:29:20.400" starttime="20160205 03:29:20.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Data Session *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:20.402" starttime="20160205 03:29:20.401"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the data session...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:29:20.404" level="INFO">Running the data session...</msg>
<status status="PASS" endtime="20160205 03:29:20.405" starttime="20160205 03:29:20.403"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Short Multislice Data Session">
<doc>Runs a standard data session with two session updates before session is closed (CCRi - CCRu - CCRu - CCRt).Rating group is</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${DIAM HPLMN LOCATION}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${DIAM GW HOST}</arg>
<arg>${DIAM GW PORT}</arg>
<arg>${DIAM GW REALM}</arg>
<arg>${DIAM GGSN FQDN}</arg>
<arg>${DIAM GGSN REALM}</arg>
<arg>${DIAM GGSN VENDORID}</arg>
<arg>${DATA TRAFFIC RATING GROUP}</arg>
</arguments>
<kw type="kw" name="${cgs_filename} = BuiltIn.Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>dataSessionUpdate_rg</arg>
<arg>${rating_group}</arg>
</arguments>
<msg timestamp="20160205 03:29:20.418" level="INFO">${cgs_filename} = dataSessionUpdate_rg6</msg>
<status status="PASS" endtime="20160205 03:29:20.418" starttime="20160205 03:29:20.416"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard Data CGS">
<doc>Runs a standard Data session (meaning a session that needs only location as parameter) for the passed cgs file</doc>
<arguments>
<arg>${cgs_filename}</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${location}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${diam_host}</arg>
<arg>${diam_port}</arg>
<arg>${diam_gw_realm}</arg>
<arg>${diam_ggsn_fqdn}</arg>
<arg>${diam_ggsn_realm}</arg>
<arg>${diam_ggsn_vendorid}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:29:20.432" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:29:20.431" starttime="20160205 03:29:20.430"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:29:20.434" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:29:20.434" starttime="20160205 03:29:20.433"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:29:20.437" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:29:20.437" starttime="20160205 03:29:20.435"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:29:20.440" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/dataSessionUpdate_rg6.cgs</msg>
<status status="PASS" endtime="20160205 03:29:20.440" starttime="20160205 03:29:20.438"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:20.442" starttime="20160205 03:29:20.441"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:29:20.455" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:20.455" starttime="20160205 03:29:20.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:20.457" starttime="20160205 03:29:20.456"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;location\n</arg>
</arguments>
<msg timestamp="20160205 03:29:20.461" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:20.462" starttime="20160205 03:29:20.458"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${location}\n</arg>
</arguments>
<msg timestamp="20160205 03:29:20.465" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:20.466" starttime="20160205 03:29:20.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:20.467" starttime="20160205 03:29:20.466"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:29:20.472" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:20.472" starttime="20160205 03:29:20.468"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ndiamGwHost=${diam_host} \ndiamGwPort=${diam_port} \ndiamGwRealm=${diam_gw_realm} \ndiamGgsnFqdn=${diam_ggsn_fqdn} \ndiamGgsnRealm=${diam_ggsn_realm} \ndiamGgsnVendorId=${diam_ggsn_vendorid} \ndiamGwConnectTimeoutSecs=20</arg>
</arguments>
<msg timestamp="20160205 03:29:20.477" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:20.478" starttime="20160205 03:29:20.473"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:20.480" starttime="20160205 03:29:20.479"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:29:20.488" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/dataSessionUpdate_rg6.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:29:46.852" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:29:46.847" starttime="20160205 03:29:20.481"></status>
</kw>
<msg timestamp="20160205 03:29:46.859" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:29:46.858" starttime="20160205 03:29:20.420"></status>
</kw>
<msg timestamp="20160205 03:29:46.863" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:29:46.862" starttime="20160205 03:29:20.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:29:46.868" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:29:46.870" starttime="20160205 03:29:46.865"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:29:46.877" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:29:46.878" starttime="20160205 03:29:46.872"></status>
</kw>
<doc>Test creates the data session, sends two updates of the session and finally closes the session. Session consumes 9.77 MB

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:29:46.880" starttime="20160205 03:29:18.091"></status>
</test>
<test id="s1-s1-s1-s1-s1-t3" name="Single NOK BalanceExhausted Data Session">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:46.910" starttime="20160205 03:29:46.906"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>100000</arg>
<arg>'${SUT PROJECT TAG PREFIX}'=='MVNA_MEX'</arg>
<arg>100000</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MVNA_MEX'</arg>
<arg>100000</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:46.927" starttime="20160205 03:29:46.920"></status>
</kw>
<msg timestamp="20160205 03:29:46.929" level="INFO">${INITIAL_BALANCE} = 100000</msg>
<status status="PASS" endtime="20160205 03:29:46.928" starttime="20160205 03:29:46.911"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:29:46.954" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 03:29:46.956" starttime="20160205 03:29:46.951"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:29:46.960" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:29:46.961" starttime="20160205 03:29:46.957"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:29:46.966" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:29:46.967" starttime="20160205 03:29:46.963"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:29:46.972" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 03:29:46.973" starttime="20160205 03:29:46.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:29:46.978" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 03:29:46.979" starttime="20160205 03:29:46.975"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:29:46.984" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 03:29:46.985" starttime="20160205 03:29:46.981"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:29:46.989" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:29:46.991" starttime="20160205 03:29:46.986"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:29:46.995" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 03:29:46.996" starttime="20160205 03:29:46.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:29:47.002" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:29:47.002" starttime="20160205 03:29:46.998"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:29:47.005" level="INFO">msg=balance=100000</msg>
<status status="PASS" endtime="20160205 03:29:47.005" starttime="20160205 03:29:47.003"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:29:47.015" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:47.016" starttime="20160205 03:29:47.013"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:47.016" starttime="20160205 03:29:47.011"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:29:47.020" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:47.021" starttime="20160205 03:29:47.019"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:47.021" starttime="20160205 03:29:47.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:29:47.026" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:47.026" starttime="20160205 03:29:47.024"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:47.027" starttime="20160205 03:29:47.022"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:47.028" starttime="20160205 03:29:47.007"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:29:47.031" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:29:47.031" starttime="20160205 03:29:47.029"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:47.034" starttime="20160205 03:29:47.032"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:47.036" starttime="20160205 03:29:47.035"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:47.038" starttime="20160205 03:29:47.037"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:47.040" starttime="20160205 03:29:47.039"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:47.042" starttime="20160205 03:29:47.041"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:47.045" starttime="20160205 03:29:47.043"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:47.047" starttime="20160205 03:29:47.045"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:47.049" starttime="20160205 03:29:47.048"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:47.052" starttime="20160205 03:29:47.050"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:47.054" starttime="20160205 03:29:47.052"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:47.056" starttime="20160205 03:29:47.055"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:47.059" starttime="20160205 03:29:47.057"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:29:47.062" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=100000']</msg>
<msg timestamp="20160205 03:29:49.532" level="INFO">03:29:49,529 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:29:49.534" starttime="20160205 03:29:47.061"></status>
</kw>
<msg timestamp="20160205 03:29:49.536" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:29:49.537" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:29:49.535" starttime="20160205 03:29:47.060"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:29:49.547" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:29:49.546" starttime="20160205 03:29:49.544"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:29:49.550" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:29:49.549" starttime="20160205 03:29:49.548"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:29:49.552" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:29:49.552" starttime="20160205 03:29:49.551"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:29:49.557" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:29:49.558" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:29:49.558" starttime="20160205 03:29:49.555"></status>
</kw>
<msg timestamp="20160205 03:29:49.560" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:29:49.560" level="INFO">${return_log_entry} = 2016-02-05 03:29:49,529 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:29:49.559" starttime="20160205 03:29:49.553"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:49.568" starttime="20160205 03:29:49.566"></status>
</kw>
<msg timestamp="20160205 03:29:49.569" level="INFO">${return_log_entry} = 2016-02-05 03:29:49,529 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:29:49.569" starttime="20160205 03:29:49.561"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:49.576" starttime="20160205 03:29:49.574"></status>
</kw>
<msg timestamp="20160205 03:29:49.577" level="INFO">${return_log_entry} = 2016-02-05 03:29:49,529 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:29:49.577" starttime="20160205 03:29:49.570"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:49.585" starttime="20160205 03:29:49.583"></status>
</kw>
<msg timestamp="20160205 03:29:49.586" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:29:49.585" starttime="20160205 03:29:49.578"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:49.595" starttime="20160205 03:29:49.594"></status>
</kw>
<msg timestamp="20160205 03:29:49.596" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:29:49.596" starttime="20160205 03:29:49.587"></status>
</kw>
<msg timestamp="20160205 03:29:49.598" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:29:49.598" starttime="20160205 03:29:49.539"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:49.606" starttime="20160205 03:29:49.604"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:49.608" starttime="20160205 03:29:49.606"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:49.610" starttime="20160205 03:29:49.608"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:29:49.618" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:29:49.619" starttime="20160205 03:29:49.616"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:49.619" starttime="20160205 03:29:49.615"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:49.620" starttime="20160205 03:29:49.611"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:49.621" starttime="20160205 03:29:49.599"></status>
</kw>
<msg timestamp="20160205 03:29:49.623" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:29:49.622" starttime="20160205 03:29:46.933"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:29:49.625" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:29:49.625" starttime="20160205 03:29:49.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:29:49.628" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:29:49.628" starttime="20160205 03:29:49.626"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE LOG FILE PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:49.656" starttime="20160205 03:29:49.655"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:49.705" starttime="20160205 03:29:49.661"></status>
</kw>
<msg timestamp="20160205 03:29:49.706" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160205 03:29:49.705" starttime="20160205 03:29:49.657"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:29:49.717" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:29:50.213" level="INFO">Read output: Last login: Fri Feb  5 02:28:54 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:29:50.214" starttime="20160205 03:29:49.715"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:50.215" starttime="20160205 03:29:49.707"></status>
</kw>
<msg timestamp="20160205 03:29:50.218" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160205 03:29:50.217" starttime="20160205 03:29:49.648"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:50.226" starttime="20160205 03:29:50.225"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:29:50.229" level="INFO">Starting command 'tail -0f /var/log/inew/crce/6.1.23/negret-0.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160205 03:29:50.233" starttime="20160205 03:29:50.227"></status>
</kw>
<status status="PASS" endtime="20160205 03:29:50.234" starttime="20160205 03:29:50.220"></status>
</kw>
<msg timestamp="20160205 03:29:50.236" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160205 03:29:50.235" starttime="20160205 03:29:49.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Data Session *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:50.238" starttime="20160205 03:29:50.237"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the data session...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:29:50.240" level="INFO">Running the data session...</msg>
<status status="PASS" endtime="20160205 03:29:50.241" starttime="20160205 03:29:50.239"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Short Multislice Data Session">
<doc>Runs a standard data session with two session updates before session is closed (CCRi - CCRu - CCRu - CCRt).Rating group is</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${DIAM HPLMN LOCATION}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${DIAM GW HOST}</arg>
<arg>${DIAM GW PORT}</arg>
<arg>${DIAM GW REALM}</arg>
<arg>${DIAM GGSN FQDN}</arg>
<arg>${DIAM GGSN REALM}</arg>
<arg>${DIAM GGSN VENDORID}</arg>
<arg>${DATA TRAFFIC RATING GROUP}</arg>
</arguments>
<kw type="kw" name="${cgs_filename} = BuiltIn.Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>dataSessionUpdate_rg</arg>
<arg>${rating_group}</arg>
</arguments>
<msg timestamp="20160205 03:29:50.255" level="INFO">${cgs_filename} = dataSessionUpdate_rg6</msg>
<status status="PASS" endtime="20160205 03:29:50.254" starttime="20160205 03:29:50.253"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard Data CGS">
<doc>Runs a standard Data session (meaning a session that needs only location as parameter) for the passed cgs file</doc>
<arguments>
<arg>${cgs_filename}</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${location}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${diam_host}</arg>
<arg>${diam_port}</arg>
<arg>${diam_gw_realm}</arg>
<arg>${diam_ggsn_fqdn}</arg>
<arg>${diam_ggsn_realm}</arg>
<arg>${diam_ggsn_vendorid}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:29:50.268" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:29:50.267" starttime="20160205 03:29:50.266"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:29:50.271" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:29:50.270" starttime="20160205 03:29:50.269"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:29:50.273" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:29:50.273" starttime="20160205 03:29:50.272"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:29:50.276" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/dataSessionUpdate_rg6.cgs</msg>
<status status="PASS" endtime="20160205 03:29:50.276" starttime="20160205 03:29:50.274"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:50.279" starttime="20160205 03:29:50.277"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:29:50.282" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:50.283" starttime="20160205 03:29:50.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:50.285" starttime="20160205 03:29:50.284"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;location\n</arg>
</arguments>
<msg timestamp="20160205 03:29:50.288" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:50.288" starttime="20160205 03:29:50.286"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${location}\n</arg>
</arguments>
<msg timestamp="20160205 03:29:50.292" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:50.292" starttime="20160205 03:29:50.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:50.294" starttime="20160205 03:29:50.293"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:29:50.297" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:50.298" starttime="20160205 03:29:50.295"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ndiamGwHost=${diam_host} \ndiamGwPort=${diam_port} \ndiamGwRealm=${diam_gw_realm} \ndiamGgsnFqdn=${diam_ggsn_fqdn} \ndiamGgsnRealm=${diam_ggsn_realm} \ndiamGgsnVendorId=${diam_ggsn_vendorid} \ndiamGwConnectTimeoutSecs=20</arg>
</arguments>
<msg timestamp="20160205 03:29:50.302" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:29:50.303" starttime="20160205 03:29:50.298"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:29:50.305" starttime="20160205 03:29:50.304"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:29:50.314" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/dataSessionUpdate_rg6.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/dataSessionUpdate_rg6-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:30:04.433" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 03:30:04.429" starttime="20160205 03:29:50.306"></status>
</kw>
<msg timestamp="20160205 03:30:04.439" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 03:30:04.437" starttime="20160205 03:29:50.257"></status>
</kw>
<msg timestamp="20160205 03:30:04.443" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 03:30:04.441" starttime="20160205 03:29:50.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:04.449" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:30:04.450" starttime="20160205 03:30:04.445"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>rc=${rc}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:04.455" level="INFO">rc=1</msg>
<status status="PASS" endtime="20160205 03:30:04.457" starttime="20160205 03:30:04.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${status}</arg>
<arg>Run Keyword If</arg>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>Should Be Equal As Numbers</arg>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:04.462" starttime="20160205 03:30:04.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>Else If</arg>
<arg>'${SUT PROJECT TAG PREFIX}'=='MVNA_MEX'</arg>
<arg>Should Be Equal As Numbers</arg>
<arg>${rc}</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:04.467" starttime="20160205 03:30:04.464"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20160205 03:30:09.473" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20160205 03:30:09.475" starttime="20160205 03:30:04.469"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/CRCE_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.510" starttime="20160205 03:30:09.506"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:30:09.521" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:30:09.520" starttime="20160205 03:30:09.512"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:30:09.560" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:30:09.561" starttime="20160205 03:30:09.523"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.578" starttime="20160205 03:30:09.574"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:30:09.582" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:30:09.635" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:30:09.637" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:30:09.636" starttime="20160205 03:30:09.580"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.642" starttime="20160205 03:30:09.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.647" starttime="20160205 03:30:09.644"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.651" starttime="20160205 03:30:09.648"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:30:09.658" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:30:09.815" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:30:09.817" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:30:09.818" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:30:09.816" starttime="20160205 03:30:09.653"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.828" starttime="20160205 03:30:09.820"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.832" starttime="20160205 03:30:09.830"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.837" starttime="20160205 03:30:09.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.842" starttime="20160205 03:30:09.839"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.846" starttime="20160205 03:30:09.843"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.851" starttime="20160205 03:30:09.848"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.857" starttime="20160205 03:30:09.853"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.862" starttime="20160205 03:30:09.858"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.866" starttime="20160205 03:30:09.863"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.871" starttime="20160205 03:30:09.868"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:09.875" starttime="20160205 03:30:09.873"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:09.878" starttime="20160205 03:30:09.564"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:30:09.883" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160205 03:30:09.888" starttime="20160205 03:30:09.879"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:30:09.892" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20160205 03:30:09.933" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:30:09.935" level="INFO">${stdout_string} = [2016-02-05 02:29:54,664][  INFO][180781][                     TraceInterceptorImpl.invoke()] reserve(DataReservationRequest [accumulatedData=0, accumulatedDuration=0, apn=inew.com, bearerType=GPRS, c...</msg>
<status status="PASS" endtime="20160205 03:30:09.934" starttime="20160205 03:30:09.889"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:30:09.940" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20160205 03:30:10.035" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:30:10.037" starttime="20160205 03:30:09.937"></status>
</kw>
<msg timestamp="20160205 03:30:10.042" level="INFO">${tailed_text} = [2016-02-05 02:29:54,664][  INFO][180781][                     TraceInterceptorImpl.invoke()] reserve(DataReservationRequest [accumulatedData=0, accumulatedDuration=0, apn=inew.com, bearerType=GPRS, c...</msg>
<status status="PASS" endtime="20160205 03:30:10.040" starttime="20160205 03:30:09.493"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:30:10.058" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:10.059" starttime="20160205 03:30:10.052"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:10.060" starttime="20160205 03:30:10.044"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.076" starttime="20160205 03:30:10.073"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.081" starttime="20160205 03:30:10.078"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:10.084" starttime="20160205 03:30:10.063"></status>
</kw>
<msg timestamp="20160205 03:30:10.088" level="INFO">${tailed_text} = [2016-02-05 02:29:54,664][  INFO][180781][                     TraceInterceptorImpl.invoke()] reserve(DataReservationRequest [accumulatedData=0, accumulatedDuration=0, apn=inew.com, bearerType=GPRS, c...</msg>
<status status="PASS" endtime="20160205 03:30:10.086" starttime="20160205 03:30:09.481"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>responseCode=INSUFFICIENT_FUNDS</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.093" starttime="20160205 03:30:10.090"></status>
</kw>
<doc>Test starts the data session, should send two updates of the session but in the mean time amount that was available on the balance is
exhausted. Session consumes 9.77 MB

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:30:10.095" starttime="20160205 03:29:46.887"></status>
</test>
<test id="s1-s1-s1-s1-s1-t4" name="Single NOK NoBalance Data Session">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.124" starttime="20160205 03:30:10.121"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20160205 03:30:10.129" level="INFO">${INITIAL_BALANCE} = 0</msg>
<status status="PASS" endtime="20160205 03:30:10.128" starttime="20160205 03:30:10.126"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:30:10.154" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 03:30:10.155" starttime="20160205 03:30:10.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:30:10.159" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:30:10.161" starttime="20160205 03:30:10.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:30:10.166" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:30:10.167" starttime="20160205 03:30:10.162"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:30:10.172" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 03:30:10.174" starttime="20160205 03:30:10.169"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:30:10.179" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 03:30:10.180" starttime="20160205 03:30:10.176"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:30:10.184" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 03:30:10.185" starttime="20160205 03:30:10.181"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:30:10.190" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:30:10.191" starttime="20160205 03:30:10.187"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:30:10.195" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 03:30:10.197" starttime="20160205 03:30:10.193"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:30:10.201" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:30:10.202" starttime="20160205 03:30:10.198"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:30:10.207" level="INFO">msg=balance=0</msg>
<status status="PASS" endtime="20160205 03:30:10.208" starttime="20160205 03:30:10.204"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:30:10.242" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:10.243" starttime="20160205 03:30:10.223"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:10.244" starttime="20160205 03:30:10.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:30:10.252" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:10.253" starttime="20160205 03:30:10.249"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:10.253" starttime="20160205 03:30:10.246"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:30:10.259" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:10.260" starttime="20160205 03:30:10.256"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:10.262" starttime="20160205 03:30:10.254"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:10.264" starttime="20160205 03:30:10.212"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:30:10.268" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:30:10.268" starttime="20160205 03:30:10.265"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.271" starttime="20160205 03:30:10.269"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.273" starttime="20160205 03:30:10.272"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.276" starttime="20160205 03:30:10.274"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.278" starttime="20160205 03:30:10.277"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.280" starttime="20160205 03:30:10.279"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.282" starttime="20160205 03:30:10.281"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.285" starttime="20160205 03:30:10.283"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.288" starttime="20160205 03:30:10.286"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.290" starttime="20160205 03:30:10.288"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.292" starttime="20160205 03:30:10.291"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.295" starttime="20160205 03:30:10.293"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:10.297" starttime="20160205 03:30:10.296"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:30:10.301" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=0']</msg>
<msg timestamp="20160205 03:30:13.092" level="INFO">03:30:13,090 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:30:13.092" starttime="20160205 03:30:10.300"></status>
</kw>
<msg timestamp="20160205 03:30:13.094" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:30:13.095" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:30:13.094" starttime="20160205 03:30:10.298"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:30:13.102" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:30:13.102" starttime="20160205 03:30:13.100"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:30:13.105" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:30:13.105" starttime="20160205 03:30:13.103"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:30:13.107" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:30:13.107" starttime="20160205 03:30:13.106"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:30:13.111" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:30:13.112" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:30:13.113" starttime="20160205 03:30:13.110"></status>
</kw>
<msg timestamp="20160205 03:30:13.114" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:30:13.114" level="INFO">${return_log_entry} = 2016-02-05 03:30:13,090 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:30:13.113" starttime="20160205 03:30:13.108"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:13.120" starttime="20160205 03:30:13.119"></status>
</kw>
<msg timestamp="20160205 03:30:13.121" level="INFO">${return_log_entry} = 2016-02-05 03:30:13,090 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:30:13.121" starttime="20160205 03:30:13.115"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:13.127" starttime="20160205 03:30:13.126"></status>
</kw>
<msg timestamp="20160205 03:30:13.128" level="INFO">${return_log_entry} = 2016-02-05 03:30:13,090 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:30:13.128" starttime="20160205 03:30:13.122"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:13.135" starttime="20160205 03:30:13.133"></status>
</kw>
<msg timestamp="20160205 03:30:13.136" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:30:13.135" starttime="20160205 03:30:13.129"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:13.144" starttime="20160205 03:30:13.143"></status>
</kw>
<msg timestamp="20160205 03:30:13.145" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:30:13.145" starttime="20160205 03:30:13.137"></status>
</kw>
<msg timestamp="20160205 03:30:13.146" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:30:13.146" starttime="20160205 03:30:13.096"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:13.153" starttime="20160205 03:30:13.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:13.155" starttime="20160205 03:30:13.154"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:13.157" starttime="20160205 03:30:13.156"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:30:13.164" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:30:13.165" starttime="20160205 03:30:13.163"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:13.166" starttime="20160205 03:30:13.161"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:13.166" starttime="20160205 03:30:13.158"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:13.167" starttime="20160205 03:30:13.147"></status>
</kw>
<msg timestamp="20160205 03:30:13.169" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:30:13.168" starttime="20160205 03:30:10.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:30:13.171" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:30:13.171" starttime="20160205 03:30:13.170"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:13.173" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:30:13.174" starttime="20160205 03:30:13.172"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Data Session *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:13.176" starttime="20160205 03:30:13.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the data session...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:13.178" level="INFO">Running the data session...</msg>
<status status="PASS" endtime="20160205 03:30:13.178" starttime="20160205 03:30:13.176"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Short 767b Data Session">
<doc>Runs a standard data session in total of 767B (CCRi - CCRt). Rating group is added to differentiate between</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${DIAM HPLMN LOCATION}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${DIAM GW HOST}</arg>
<arg>${DIAM GW PORT}</arg>
<arg>${DIAM GW REALM}</arg>
<arg>${DIAM GGSN FQDN}</arg>
<arg>${DIAM GGSN REALM}</arg>
<arg>${DIAM GGSN VENDORID}</arg>
<arg>${DATA TRAFFIC RATING GROUP}</arg>
</arguments>
<kw type="kw" name="${cgs_filename} = BuiltIn.Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>data767b_rg</arg>
<arg>${rating_group}</arg>
</arguments>
<msg timestamp="20160205 03:30:13.190" level="INFO">${cgs_filename} = data767b_rg6</msg>
<status status="PASS" endtime="20160205 03:30:13.190" starttime="20160205 03:30:13.188"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard Data CGS">
<doc>Runs a standard Data session (meaning a session that needs only location as parameter) for the passed cgs file</doc>
<arguments>
<arg>${cgs_filename}</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${location}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${diam_host}</arg>
<arg>${diam_port}</arg>
<arg>${diam_gw_realm}</arg>
<arg>${diam_ggsn_fqdn}</arg>
<arg>${diam_ggsn_realm}</arg>
<arg>${diam_ggsn_vendorid}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:30:13.202" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:30:13.201" starttime="20160205 03:30:13.200"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:30:13.205" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:30:13.204" starttime="20160205 03:30:13.203"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:30:13.207" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:30:13.207" starttime="20160205 03:30:13.205"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:30:13.210" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs</msg>
<status status="PASS" endtime="20160205 03:30:13.210" starttime="20160205 03:30:13.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:13.212" starttime="20160205 03:30:13.211"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:30:13.215" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:13.216" starttime="20160205 03:30:13.213"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:13.218" starttime="20160205 03:30:13.216"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;location\n</arg>
</arguments>
<msg timestamp="20160205 03:30:13.220" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:13.221" starttime="20160205 03:30:13.218"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${location}\n</arg>
</arguments>
<msg timestamp="20160205 03:30:13.224" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:13.224" starttime="20160205 03:30:13.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:13.226" starttime="20160205 03:30:13.225"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:30:13.229" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:13.230" starttime="20160205 03:30:13.227"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ndiamGwHost=${diam_host} \ndiamGwPort=${diam_port} \ndiamGwRealm=${diam_gw_realm} \ndiamGgsnFqdn=${diam_ggsn_fqdn} \ndiamGgsnRealm=${diam_ggsn_realm} \ndiamGgsnVendorId=${diam_ggsn_vendorid} \ndiamGwConnectTimeoutSecs=20</arg>
</arguments>
<msg timestamp="20160205 03:30:13.234" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:13.235" starttime="20160205 03:30:13.230"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:13.236" starttime="20160205 03:30:13.235"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:30:13.245" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:30:21.529" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 03:30:21.525" starttime="20160205 03:30:13.237"></status>
</kw>
<msg timestamp="20160205 03:30:21.534" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 03:30:21.532" starttime="20160205 03:30:13.192"></status>
</kw>
<msg timestamp="20160205 03:30:21.538" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 03:30:21.536" starttime="20160205 03:30:13.180"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:21.543" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:30:21.545" starttime="20160205 03:30:21.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>1</arg>
<arg>msg=CG Session ended with rc=${rc} other than 1!</arg>
</arguments>
<msg timestamp="20160205 03:30:21.551" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:30:21.553" starttime="20160205 03:30:21.547"></status>
</kw>
<doc>Test will attempt to make a data session for subscriber that has empty monetary account (and no other account to charge). It's expected that test shoud fail

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:30:21.554" starttime="20160205 03:30:10.101"></status>
</test>
<test id="s1-s1-s1-s1-s1-t5" name="Single NOK UnknownLocation Data Session">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:21.579" starttime="20160205 03:30:21.576"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1000000</arg>
</arguments>
<msg timestamp="20160205 03:30:21.584" level="INFO">${INITIAL_BALANCE} = 1000000</msg>
<status status="PASS" endtime="20160205 03:30:21.583" starttime="20160205 03:30:21.580"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:30:21.605" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 03:30:21.606" starttime="20160205 03:30:21.602"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:30:21.610" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:30:21.611" starttime="20160205 03:30:21.607"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:30:21.616" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:30:21.617" starttime="20160205 03:30:21.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:30:21.621" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 03:30:21.623" starttime="20160205 03:30:21.618"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:30:21.627" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 03:30:21.628" starttime="20160205 03:30:21.624"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:30:21.633" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 03:30:21.634" starttime="20160205 03:30:21.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:30:21.638" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:30:21.639" starttime="20160205 03:30:21.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:30:21.644" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 03:30:21.645" starttime="20160205 03:30:21.641"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:30:21.649" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:30:21.650" starttime="20160205 03:30:21.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:30:21.655" level="INFO">msg=balance=1000000</msg>
<status status="PASS" endtime="20160205 03:30:21.656" starttime="20160205 03:30:21.652"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:30:21.676" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:21.677" starttime="20160205 03:30:21.670"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:21.679" starttime="20160205 03:30:21.667"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:30:21.687" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:21.688" starttime="20160205 03:30:21.683"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:21.689" starttime="20160205 03:30:21.680"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:30:21.697" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:21.698" starttime="20160205 03:30:21.694"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:21.700" starttime="20160205 03:30:21.691"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:21.701" starttime="20160205 03:30:21.659"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:30:21.707" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:30:21.708" starttime="20160205 03:30:21.703"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:21.713" starttime="20160205 03:30:21.710"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:21.718" starttime="20160205 03:30:21.715"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:21.723" starttime="20160205 03:30:21.720"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:21.727" starttime="20160205 03:30:21.725"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:21.731" starttime="20160205 03:30:21.729"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:21.736" starttime="20160205 03:30:21.733"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:21.740" starttime="20160205 03:30:21.737"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:21.745" starttime="20160205 03:30:21.742"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:21.750" starttime="20160205 03:30:21.747"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:21.753" starttime="20160205 03:30:21.752"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:21.755" starttime="20160205 03:30:21.754"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:21.757" starttime="20160205 03:30:21.756"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:30:21.760" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=1000000']</msg>
<msg timestamp="20160205 03:30:23.360" level="INFO">03:30:23,358 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:30:23.361" starttime="20160205 03:30:21.759"></status>
</kw>
<msg timestamp="20160205 03:30:23.363" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:30:23.364" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:30:23.362" starttime="20160205 03:30:21.758"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:30:23.373" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:30:23.372" starttime="20160205 03:30:23.370"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:30:23.375" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:30:23.375" starttime="20160205 03:30:23.373"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:30:23.378" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:30:23.378" starttime="20160205 03:30:23.376"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:30:23.382" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:30:23.383" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:30:23.383" starttime="20160205 03:30:23.381"></status>
</kw>
<msg timestamp="20160205 03:30:23.384" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:30:23.385" level="INFO">${return_log_entry} = 2016-02-05 03:30:23,358 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:30:23.384" starttime="20160205 03:30:23.379"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:23.391" starttime="20160205 03:30:23.389"></status>
</kw>
<msg timestamp="20160205 03:30:23.392" level="INFO">${return_log_entry} = 2016-02-05 03:30:23,358 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:30:23.391" starttime="20160205 03:30:23.386"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:23.397" starttime="20160205 03:30:23.396"></status>
</kw>
<msg timestamp="20160205 03:30:23.398" level="INFO">${return_log_entry} = 2016-02-05 03:30:23,358 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:30:23.398" starttime="20160205 03:30:23.392"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:23.404" starttime="20160205 03:30:23.403"></status>
</kw>
<msg timestamp="20160205 03:30:23.405" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:30:23.405" starttime="20160205 03:30:23.399"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:23.413" starttime="20160205 03:30:23.412"></status>
</kw>
<msg timestamp="20160205 03:30:23.414" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:30:23.414" starttime="20160205 03:30:23.406"></status>
</kw>
<msg timestamp="20160205 03:30:23.415" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:30:23.415" starttime="20160205 03:30:23.366"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:23.422" starttime="20160205 03:30:23.421"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:23.424" starttime="20160205 03:30:23.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:23.426" starttime="20160205 03:30:23.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:30:23.433" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:30:23.433" starttime="20160205 03:30:23.431"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:23.434" starttime="20160205 03:30:23.430"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:23.435" starttime="20160205 03:30:23.426"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:23.435" starttime="20160205 03:30:23.417"></status>
</kw>
<msg timestamp="20160205 03:30:23.437" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:30:23.436" starttime="20160205 03:30:21.588"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:30:23.439" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:30:23.439" starttime="20160205 03:30:23.438"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:23.441" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:30:23.442" starttime="20160205 03:30:23.440"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Data Session *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:23.444" starttime="20160205 03:30:23.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the data session...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:23.445" level="INFO">Running the data session...</msg>
<status status="PASS" endtime="20160205 03:30:23.446" starttime="20160205 03:30:23.444"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Short 767b Data Session">
<doc>Runs a standard data session in total of 767B (CCRi - CCRt). Rating group is added to differentiate between</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${DIAM HPLMN UNKNOWN LOCATION}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${DIAM GW HOST}</arg>
<arg>${DIAM GW PORT}</arg>
<arg>${DIAM GW REALM}</arg>
<arg>${DIAM GGSN FQDN}</arg>
<arg>${DIAM GGSN REALM}</arg>
<arg>${DIAM GGSN VENDORID}</arg>
<arg>${DATA TRAFFIC RATING GROUP}</arg>
</arguments>
<kw type="kw" name="${cgs_filename} = BuiltIn.Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>data767b_rg</arg>
<arg>${rating_group}</arg>
</arguments>
<msg timestamp="20160205 03:30:23.457" level="INFO">${cgs_filename} = data767b_rg6</msg>
<status status="PASS" endtime="20160205 03:30:23.457" starttime="20160205 03:30:23.455"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard Data CGS">
<doc>Runs a standard Data session (meaning a session that needs only location as parameter) for the passed cgs file</doc>
<arguments>
<arg>${cgs_filename}</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${location}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${diam_host}</arg>
<arg>${diam_port}</arg>
<arg>${diam_gw_realm}</arg>
<arg>${diam_ggsn_fqdn}</arg>
<arg>${diam_ggsn_realm}</arg>
<arg>${diam_ggsn_vendorid}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:30:23.468" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:30:23.468" starttime="20160205 03:30:23.466"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:30:23.471" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:30:23.470" starttime="20160205 03:30:23.469"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:30:23.473" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:30:23.473" starttime="20160205 03:30:23.471"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:30:23.476" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs</msg>
<status status="PASS" endtime="20160205 03:30:23.475" starttime="20160205 03:30:23.474"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:23.477" starttime="20160205 03:30:23.476"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:30:23.481" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:23.481" starttime="20160205 03:30:23.478"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:23.483" starttime="20160205 03:30:23.482"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;location\n</arg>
</arguments>
<msg timestamp="20160205 03:30:23.486" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:23.486" starttime="20160205 03:30:23.484"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${location}\n</arg>
</arguments>
<msg timestamp="20160205 03:30:23.489" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:23.490" starttime="20160205 03:30:23.487"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:23.491" starttime="20160205 03:30:23.490"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:30:23.494" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:23.494" starttime="20160205 03:30:23.492"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ndiamGwHost=${diam_host} \ndiamGwPort=${diam_port} \ndiamGwRealm=${diam_gw_realm} \ndiamGgsnFqdn=${diam_ggsn_fqdn} \ndiamGgsnRealm=${diam_ggsn_realm} \ndiamGgsnVendorId=${diam_ggsn_vendorid} \ndiamGwConnectTimeoutSecs=20</arg>
</arguments>
<msg timestamp="20160205 03:30:23.498" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:23.499" starttime="20160205 03:30:23.495"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:23.502" starttime="20160205 03:30:23.500"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:30:23.508" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/data767b_rg6.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/data767b_rg6-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:30:32.078" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 03:30:32.077" starttime="20160205 03:30:23.502"></status>
</kw>
<msg timestamp="20160205 03:30:32.081" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 03:30:32.080" starttime="20160205 03:30:23.459"></status>
</kw>
<msg timestamp="20160205 03:30:32.082" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160205 03:30:32.082" starttime="20160205 03:30:23.448"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:32.085" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:30:32.085" starttime="20160205 03:30:32.083"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>1</arg>
<arg>msg=CG Session ended with rc=${rc} other than 1!</arg>
</arguments>
<msg timestamp="20160205 03:30:32.088" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:30:32.088" starttime="20160205 03:30:32.086"></status>
</kw>
<doc>Test will attempt to start a simple data session with unknown location. Test should fail

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:30:32.089" starttime="20160205 03:30:21.561"></status>
</test>
<doc>Testing the simple data session cases with CG

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160205 03:30:32.105" starttime="20160205 03:28:47.711"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160205 03:30:32.137" starttime="20160205 03:28:47.689"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC" id="s1-s1-s1-s2" name="MFC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration" id="s1-s1-s1-s2-s1" name="MFC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/MFC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s1-s1-s2-s1-s1" name="MFC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:30:32.348" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:30:32.352" level="INFO">${date} = Fri Feb  5 03:30:32 CET 2016</msg>
<status status="PASS" endtime="20160205 03:30:32.352" starttime="20160205 03:30:32.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:32.355" level="INFO">Date and time: Fri Feb  5 03:30:32 CET 2016</msg>
<status status="PASS" endtime="20160205 03:30:32.355" starttime="20160205 03:30:32.353"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:32.358" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160205 03:30:32.358" starttime="20160205 03:30:32.356"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:32.397" starttime="20160205 03:30:32.395"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:32.450" starttime="20160205 03:30:32.401"></status>
</kw>
<msg timestamp="20160205 03:30:32.452" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160205 03:30:32.451" starttime="20160205 03:30:32.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:30:32.460" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:30:33.074" level="INFO">Read output: Last login: Fri Feb  5 02:28:49 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:30:33.075" starttime="20160205 03:30:32.458"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:33.076" starttime="20160205 03:30:32.453"></status>
</kw>
<msg timestamp="20160205 03:30:33.078" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160205 03:30:33.077" starttime="20160205 03:30:32.390"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:30:33.083" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:30:33.082" starttime="20160205 03:30:33.079"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:30:33.085" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160205 03:30:33.604" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:30:33.605" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:30:33.604" starttime="20160205 03:30:33.083"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:33.609" starttime="20160205 03:30:33.607"></status>
</kw>
<msg timestamp="20160205 03:30:33.609" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:30:33.610" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:30:33.609" starttime="20160205 03:30:33.605"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:33.615" starttime="20160205 03:30:33.614"></status>
</kw>
<msg timestamp="20160205 03:30:33.616" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:30:33.615" starttime="20160205 03:30:33.610"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:30:33.618" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:30:33.618" starttime="20160205 03:30:33.616"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:30:33.620" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:30:33.620" starttime="20160205 03:30:33.619"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:33.622" starttime="20160205 03:30:33.621"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:33.634" starttime="20160205 03:30:33.631"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:30:33.641" starttime="20160205 03:30:33.636"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:33.643" starttime="20160205 03:30:33.622"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:33.653" starttime="20160205 03:30:33.651"></status>
</kw>
<msg timestamp="20160205 03:30:33.655" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:30:33.655" starttime="20160205 03:30:33.644"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:33.659" starttime="20160205 03:30:33.657"></status>
</kw>
<msg timestamp="20160205 03:30:33.663" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:30:33.664" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:30:33.661" starttime="20160205 03:30:32.375"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:33.728" starttime="20160205 03:30:33.726"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:33.865" starttime="20160205 03:30:33.737"></status>
</kw>
<msg timestamp="20160205 03:30:33.868" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160205 03:30:33.867" starttime="20160205 03:30:33.730"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:30:33.881" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:30:36.678" level="INFO">Read output: Last login: Fri Feb  5 02:28:52 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:30:36.680" starttime="20160205 03:30:33.878"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:36.681" starttime="20160205 03:30:33.870"></status>
</kw>
<msg timestamp="20160205 03:30:36.684" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160205 03:30:36.683" starttime="20160205 03:30:33.715"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:30:36.689" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:30:36.689" starttime="20160205 03:30:36.684"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:30:36.692" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:30:37.942" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:30:37.946" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:30:37.944" starttime="20160205 03:30:36.690"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:37.956" starttime="20160205 03:30:37.952"></status>
</kw>
<msg timestamp="20160205 03:30:37.958" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:30:37.959" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:30:37.957" starttime="20160205 03:30:37.948"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:37.971" starttime="20160205 03:30:37.969"></status>
</kw>
<msg timestamp="20160205 03:30:37.973" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:30:37.972" starttime="20160205 03:30:37.961"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:30:37.978" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:30:37.977" starttime="20160205 03:30:37.975"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:30:37.983" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:30:37.982" starttime="20160205 03:30:37.980"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:37.987" starttime="20160205 03:30:37.985"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:38.001" starttime="20160205 03:30:37.998"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:30:38.007" starttime="20160205 03:30:38.004"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:38.010" starttime="20160205 03:30:37.989"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:38.023" starttime="20160205 03:30:38.020"></status>
</kw>
<msg timestamp="20160205 03:30:38.025" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:30:38.024" starttime="20160205 03:30:38.013"></status>
</kw>
<msg timestamp="20160205 03:30:38.029" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:30:38.030" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:30:38.027" starttime="20160205 03:30:33.683"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:38.094" starttime="20160205 03:30:38.092"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:38.161" starttime="20160205 03:30:38.103"></status>
</kw>
<msg timestamp="20160205 03:30:38.164" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160205 03:30:38.163" starttime="20160205 03:30:38.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:30:38.176" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:30:38.694" level="INFO">Read output: Last login: Fri Feb  5 02:29:49 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:30:38.695" starttime="20160205 03:30:38.173"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:38.695" starttime="20160205 03:30:38.165"></status>
</kw>
<msg timestamp="20160205 03:30:38.697" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160205 03:30:38.696" starttime="20160205 03:30:38.080"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:30:38.701" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:30:38.701" starttime="20160205 03:30:38.697"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:30:38.703" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:30:47.246" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:30:47.248" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:30:47.247" starttime="20160205 03:30:38.702"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:47.252" starttime="20160205 03:30:47.250"></status>
</kw>
<msg timestamp="20160205 03:30:47.253" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:30:47.253" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:30:47.252" starttime="20160205 03:30:47.249"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:47.258" starttime="20160205 03:30:47.257"></status>
</kw>
<msg timestamp="20160205 03:30:47.259" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:30:47.259" starttime="20160205 03:30:47.254"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:30:47.261" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:30:47.261" starttime="20160205 03:30:47.260"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:30:47.263" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:30:47.263" starttime="20160205 03:30:47.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:47.265" starttime="20160205 03:30:47.264"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:47.271" starttime="20160205 03:30:47.270"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:30:47.273" starttime="20160205 03:30:47.272"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:47.277" starttime="20160205 03:30:47.266"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:47.282" starttime="20160205 03:30:47.281"></status>
</kw>
<msg timestamp="20160205 03:30:47.283" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:30:47.283" starttime="20160205 03:30:47.278"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:47.285" starttime="20160205 03:30:47.284"></status>
</kw>
<msg timestamp="20160205 03:30:47.287" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:30:47.287" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:30:47.286" starttime="20160205 03:30:38.050"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:47.316" starttime="20160205 03:30:47.315"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:47.375" starttime="20160205 03:30:47.320"></status>
</kw>
<msg timestamp="20160205 03:30:47.378" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160205 03:30:47.377" starttime="20160205 03:30:47.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:30:47.390" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:30:48.002" level="INFO">Read output: Last login: Fri Feb  5 02:28:56 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:30:48.004" starttime="20160205 03:30:47.387"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:48.005" starttime="20160205 03:30:47.379"></status>
</kw>
<msg timestamp="20160205 03:30:48.007" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160205 03:30:48.006" starttime="20160205 03:30:47.310"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:30:48.012" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:30:48.011" starttime="20160205 03:30:48.008"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:30:48.013" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:30:48.338" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:30:48.341" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:30:48.340" starttime="20160205 03:30:48.012"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.349" starttime="20160205 03:30:48.345"></status>
</kw>
<msg timestamp="20160205 03:30:48.351" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:30:48.351" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:30:48.350" starttime="20160205 03:30:48.342"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.362" starttime="20160205 03:30:48.360"></status>
</kw>
<msg timestamp="20160205 03:30:48.364" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:30:48.363" starttime="20160205 03:30:48.353"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:30:48.369" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:30:48.368" starttime="20160205 03:30:48.366"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:30:48.374" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:30:48.373" starttime="20160205 03:30:48.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.377" starttime="20160205 03:30:48.375"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.390" starttime="20160205 03:30:48.387"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.397" starttime="20160205 03:30:48.392"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:48.399" starttime="20160205 03:30:48.379"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.409" starttime="20160205 03:30:48.407"></status>
</kw>
<msg timestamp="20160205 03:30:48.411" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:30:48.410" starttime="20160205 03:30:48.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.415" starttime="20160205 03:30:48.412"></status>
</kw>
<msg timestamp="20160205 03:30:48.419" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:30:48.419" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:30:48.417" starttime="20160205 03:30:47.296"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:48.424" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:30:48.425" starttime="20160205 03:30:48.421"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:48.429" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:30:48.431" starttime="20160205 03:30:48.427"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:48.435" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:30:48.436" starttime="20160205 03:30:48.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:48.441" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:30:48.443" starttime="20160205 03:30:48.438"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:30:48.447" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:30:48.448" starttime="20160205 03:30:48.445"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:30:48.452" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:30:48.453" starttime="20160205 03:30:48.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:30:48.457" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:30:48.458" starttime="20160205 03:30:48.454"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:30:48.462" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:30:48.462" starttime="20160205 03:30:48.459"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.477" starttime="20160205 03:30:48.471"></status>
</kw>
<msg timestamp="20160205 03:30:48.479" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:30:48.478" starttime="20160205 03:30:48.464"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:30:48.484" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:30:48.484" starttime="20160205 03:30:48.480"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:48.486" starttime="20160205 03:30:32.341"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s1-t1" name="Run MFC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.502" starttime="20160205 03:30:48.500"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:30:48.504" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:30:48.503" starttime="20160205 03:30:48.502"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>3</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:30:48.512" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 03:30:48.512" starttime="20160205 03:30:48.511"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:30:48.514" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:30:48.514" starttime="20160205 03:30:48.513"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:30:48.516" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:30:48.516" starttime="20160205 03:30:48.515"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:30:48.518" level="INFO">msg=amount=3</msg>
<status status="PASS" endtime="20160205 03:30:48.518" starttime="20160205 03:30:48.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:30:48.520" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 03:30:48.520" starttime="20160205 03:30:48.519"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:30:48.522" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 03:30:48.522" starttime="20160205 03:30:48.521"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:30:48.524" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:30:48.524" starttime="20160205 03:30:48.523"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:30:48.526" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 03:30:48.526" starttime="20160205 03:30:48.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:30:48.528" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:30:48.528" starttime="20160205 03:30:48.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:30:48.530" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:30:48.530" starttime="20160205 03:30:48.529"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:30:48.538" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:48.539" starttime="20160205 03:30:48.536"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:48.539" starttime="20160205 03:30:48.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:30:48.542" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:48.543" starttime="20160205 03:30:48.541"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:48.543" starttime="20160205 03:30:48.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:30:48.546" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:48.547" starttime="20160205 03:30:48.545"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:48.547" starttime="20160205 03:30:48.544"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:48.548" starttime="20160205 03:30:48.532"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:30:48.550" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:30:48.550" starttime="20160205 03:30:48.548"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.552" starttime="20160205 03:30:48.551"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.554" starttime="20160205 03:30:48.553"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.556" starttime="20160205 03:30:48.555"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.557" starttime="20160205 03:30:48.556"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.559" starttime="20160205 03:30:48.558"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.561" starttime="20160205 03:30:48.560"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.562" starttime="20160205 03:30:48.561"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.564" starttime="20160205 03:30:48.563"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.566" starttime="20160205 03:30:48.565"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.568" starttime="20160205 03:30:48.567"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.570" starttime="20160205 03:30:48.569"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:48.572" starttime="20160205 03:30:48.570"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:30:48.574" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:30:55.742" level="INFO">03:30:55,739 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:30:55.743" starttime="20160205 03:30:48.573"></status>
</kw>
<msg timestamp="20160205 03:30:55.745" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:30:55.746" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:30:55.744" starttime="20160205 03:30:48.572"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:30:55.754" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:30:55.753" starttime="20160205 03:30:55.752"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:30:55.756" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:30:55.755" starttime="20160205 03:30:55.754"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:30:55.758" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:30:55.757" starttime="20160205 03:30:55.756"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:30:55.761" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:30:55.762" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:30:55.762" starttime="20160205 03:30:55.760"></status>
</kw>
<msg timestamp="20160205 03:30:55.763" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:30:55.763" level="INFO">${return_log_entry} = 2016-02-05 03:30:55,739 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:30:55.763" starttime="20160205 03:30:55.758"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:55.769" starttime="20160205 03:30:55.768"></status>
</kw>
<msg timestamp="20160205 03:30:55.770" level="INFO">${return_log_entry} = 2016-02-05 03:30:55,739 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:30:55.769" starttime="20160205 03:30:55.764"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:55.775" starttime="20160205 03:30:55.774"></status>
</kw>
<msg timestamp="20160205 03:30:55.776" level="INFO">${return_log_entry} = 2016-02-05 03:30:55,739 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:30:55.775" starttime="20160205 03:30:55.770"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:55.781" starttime="20160205 03:30:55.779"></status>
</kw>
<msg timestamp="20160205 03:30:55.782" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:30:55.781" starttime="20160205 03:30:55.776"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:55.788" starttime="20160205 03:30:55.787"></status>
</kw>
<msg timestamp="20160205 03:30:55.789" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:30:55.789" starttime="20160205 03:30:55.782"></status>
</kw>
<msg timestamp="20160205 03:30:55.791" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:30:55.790" starttime="20160205 03:30:55.747"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:55.796" starttime="20160205 03:30:55.795"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:55.798" starttime="20160205 03:30:55.797"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:55.800" starttime="20160205 03:30:55.799"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:30:55.806" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:30:55.807" starttime="20160205 03:30:55.804"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:55.807" starttime="20160205 03:30:55.803"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:55.808" starttime="20160205 03:30:55.800"></status>
</kw>
<status status="PASS" endtime="20160205 03:30:55.808" starttime="20160205 03:30:55.791"></status>
</kw>
<msg timestamp="20160205 03:30:55.810" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:30:55.809" starttime="20160205 03:30:48.505"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:30:55.812" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:30:55.812" starttime="20160205 03:30:55.811"></status>
</kw>
<kw type="kw" name="${b_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160205 03:30:55.816" level="INFO">${b_party_msisdn} = 525516001001</msg>
<status status="PASS" endtime="20160205 03:30:55.816" starttime="20160205 03:30:55.813"></status>
</kw>
<kw type="kw" name="${b_party_imsi} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}+1</arg>
</arguments>
<msg timestamp="20160205 03:30:55.820" level="INFO">${b_party_imsi} = 334030880001001</msg>
<status status="PASS" endtime="20160205 03:30:55.819" starttime="20160205 03:30:55.817"></status>
</kw>
<kw type="kw" name="${c_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+2</arg>
</arguments>
<msg timestamp="20160205 03:30:55.823" level="INFO">${c_party_msisdn} = 525516001002</msg>
<status status="PASS" endtime="20160205 03:30:55.823" starttime="20160205 03:30:55.820"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:55.825" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:30:55.825" starttime="20160205 03:30:55.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MFC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:55.827" starttime="20160205 03:30:55.826"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MFC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:30:55.828" level="INFO">Running the short MFC call...</msg>
<status status="PASS" endtime="20160205 03:30:55.829" starttime="20160205 03:30:55.828"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MFC 1s">
<doc>Runs a standard MFC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${b_party_imsi}</arg>
<arg>${b_party_msisdn}</arg>
<arg>${c_party_msisdn}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MFC CGS">
<doc>Runs a standard MFC session (meaning a session that needs only mscAddress, mfcAPartyMsisdn and mfcCPartyMsisdn paramters) for the passed cgs file</doc>
<arguments>
<arg>mfc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${rd_imsi}</arg>
<arg>${rd_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mfc_req}</arg>
<arg>${queue_mfc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:30:55.846" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:30:55.845" starttime="20160205 03:30:55.844"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:30:55.848" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:30:55.848" starttime="20160205 03:30:55.846"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:30:55.850" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:30:55.850" starttime="20160205 03:30:55.849"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:30:55.853" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs</msg>
<status status="PASS" endtime="20160205 03:30:55.852" starttime="20160205 03:30:55.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:55.854" starttime="20160205 03:30:55.853"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${rd_imsi};${rd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:30:55.857" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:55.857" starttime="20160205 03:30:55.855"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:55.859" starttime="20160205 03:30:55.858"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;gmscAddress;mfcAPartyMsisdn;mfcCPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:30:55.861" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:55.862" starttime="20160205 03:30:55.860"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${msc_address};${cg_msisdn};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:30:55.865" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:55.865" starttime="20160205 03:30:55.862"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:55.867" starttime="20160205 03:30:55.866"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:30:55.869" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:55.869" starttime="20160205 03:30:55.867"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MFC;${queue_mfc_req};${queue_mfc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:30:55.873" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:30:55.873" starttime="20160205 03:30:55.870"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:30:55.874" starttime="20160205 03:30:55.874"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:30:55.883" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:31:17.417" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:31:17.410" starttime="20160205 03:30:55.875"></status>
</kw>
<msg timestamp="20160205 03:31:17.420" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:31:17.419" starttime="20160205 03:30:55.838"></status>
</kw>
<msg timestamp="20160205 03:31:17.422" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:31:17.421" starttime="20160205 03:30:55.831"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:17.424" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:31:17.425" starttime="20160205 03:31:17.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:31:17.428" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:31:17.428" starttime="20160205 03:31:17.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.430" starttime="20160205 03:31:17.429"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:17.447" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:17.447" starttime="20160205 03:31:17.444"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:17.448" starttime="20160205 03:31:17.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:17.452" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:17.452" starttime="20160205 03:31:17.450"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:17.453" starttime="20160205 03:31:17.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:17.456" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:17.456" starttime="20160205 03:31:17.454"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:17.457" starttime="20160205 03:31:17.453"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:17.458" starttime="20160205 03:31:17.438"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:31:17.460" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:31:17.460" starttime="20160205 03:31:17.458"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.462" starttime="20160205 03:31:17.461"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.464" starttime="20160205 03:31:17.463"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.466" starttime="20160205 03:31:17.465"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.468" starttime="20160205 03:31:17.467"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.470" starttime="20160205 03:31:17.469"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.472" starttime="20160205 03:31:17.470"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:31:17.474" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000']</msg>
<msg timestamp="20160205 03:31:17.835" level="INFO">03:31:17,820 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
03:31:17,822 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
03:31:17,824 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37287
03:31:17,825 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000
03:31:17,827 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
03:31:17,828 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
03:31:17,830 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
03:31:17,832 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=3</msg>
<status status="PASS" endtime="20160205 03:31:17.836" starttime="20160205 03:31:17.473"></status>
</kw>
<msg timestamp="20160205 03:31:17.838" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:17.839" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:31:17.837" starttime="20160205 03:31:17.472"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:17.853" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:31:17.853" starttime="20160205 03:31:17.849"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:17.858" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:17.857" starttime="20160205 03:31:17.855"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:17.863" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:17.862" starttime="20160205 03:31:17.860"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:17.870" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:17.876" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:17.877" starttime="20160205 03:31:17.867"></status>
</kw>
<msg timestamp="20160205 03:31:17.878" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:17.878" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,820 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:17.877" starttime="20160205 03:31:17.864"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.884" starttime="20160205 03:31:17.883"></status>
</kw>
<msg timestamp="20160205 03:31:17.885" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,820 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:17.885" starttime="20160205 03:31:17.879"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.890" starttime="20160205 03:31:17.889"></status>
</kw>
<msg timestamp="20160205 03:31:17.891" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,820 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:17.891" starttime="20160205 03:31:17.886"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.896" starttime="20160205 03:31:17.895"></status>
</kw>
<msg timestamp="20160205 03:31:17.897" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:17.897" starttime="20160205 03:31:17.892"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.905" starttime="20160205 03:31:17.904"></status>
</kw>
<msg timestamp="20160205 03:31:17.906" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:17.905" starttime="20160205 03:31:17.898"></status>
</kw>
<msg timestamp="20160205 03:31:17.907" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:17.907" starttime="20160205 03:31:17.841"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:17.914" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160205 03:31:17.913" starttime="20160205 03:31:17.912"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:17.916" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:17.915" starttime="20160205 03:31:17.914"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:17.918" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:17.917" starttime="20160205 03:31:17.916"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:17.921" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:17.924" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:17.925" starttime="20160205 03:31:17.920"></status>
</kw>
<msg timestamp="20160205 03:31:17.926" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:17.926" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,822 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:31:17.925" starttime="20160205 03:31:17.919"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.932" starttime="20160205 03:31:17.931"></status>
</kw>
<msg timestamp="20160205 03:31:17.933" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,822 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:31:17.932" starttime="20160205 03:31:17.927"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.938" starttime="20160205 03:31:17.937"></status>
</kw>
<msg timestamp="20160205 03:31:17.939" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,822 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:31:17.938" starttime="20160205 03:31:17.933"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.944" starttime="20160205 03:31:17.943"></status>
</kw>
<msg timestamp="20160205 03:31:17.945" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:31:17.945" starttime="20160205 03:31:17.939"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.952" starttime="20160205 03:31:17.951"></status>
</kw>
<msg timestamp="20160205 03:31:17.953" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:31:17.953" starttime="20160205 03:31:17.946"></status>
</kw>
<msg timestamp="20160205 03:31:17.954" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160205 03:31:17.954" starttime="20160205 03:31:17.908"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:17.961" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160205 03:31:17.961" starttime="20160205 03:31:17.960"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:17.963" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:17.963" starttime="20160205 03:31:17.962"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:17.965" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:17.965" starttime="20160205 03:31:17.964"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:17.969" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:17.972" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:17.972" starttime="20160205 03:31:17.967"></status>
</kw>
<msg timestamp="20160205 03:31:17.973" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:17.973" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,825 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160205 03:31:17.973" starttime="20160205 03:31:17.966"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.979" starttime="20160205 03:31:17.977"></status>
</kw>
<msg timestamp="20160205 03:31:17.980" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,825 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160205 03:31:17.979" starttime="20160205 03:31:17.974"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:17.987" starttime="20160205 03:31:17.984"></status>
</kw>
<msg timestamp="20160205 03:31:17.989" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,825 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160205 03:31:17.988" starttime="20160205 03:31:17.980"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.000" starttime="20160205 03:31:17.997"></status>
</kw>
<msg timestamp="20160205 03:31:18.005" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160205 03:31:18.003" starttime="20160205 03:31:17.990"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.021" starttime="20160205 03:31:18.018"></status>
</kw>
<msg timestamp="20160205 03:31:18.023" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160205 03:31:18.022" starttime="20160205 03:31:18.006"></status>
</kw>
<msg timestamp="20160205 03:31:18.026" level="INFO">${imsi} = 334030880001000</msg>
<status status="PASS" endtime="20160205 03:31:18.024" starttime="20160205 03:31:17.956"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:18.040" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160205 03:31:18.039" starttime="20160205 03:31:18.037"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.045" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:18.044" starttime="20160205 03:31:18.042"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.049" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:18.049" starttime="20160205 03:31:18.046"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.056" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:18.061" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:18.062" starttime="20160205 03:31:18.053"></status>
</kw>
<msg timestamp="20160205 03:31:18.064" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:18.065" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,824 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37287</msg>
<status status="PASS" endtime="20160205 03:31:18.064" starttime="20160205 03:31:18.051"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.075" starttime="20160205 03:31:18.072"></status>
</kw>
<msg timestamp="20160205 03:31:18.077" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,824 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37287</msg>
<status status="PASS" endtime="20160205 03:31:18.076" starttime="20160205 03:31:18.066"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.090" starttime="20160205 03:31:18.087"></status>
</kw>
<msg timestamp="20160205 03:31:18.092" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,824 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37287</msg>
<status status="PASS" endtime="20160205 03:31:18.091" starttime="20160205 03:31:18.079"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.105" starttime="20160205 03:31:18.102"></status>
</kw>
<msg timestamp="20160205 03:31:18.107" level="INFO">${resultCode} = 37287</msg>
<status status="PASS" endtime="20160205 03:31:18.106" starttime="20160205 03:31:18.094"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.122" starttime="20160205 03:31:18.119"></status>
</kw>
<msg timestamp="20160205 03:31:18.124" level="INFO">${resultCode} = 37287</msg>
<status status="PASS" endtime="20160205 03:31:18.123" starttime="20160205 03:31:18.108"></status>
</kw>
<msg timestamp="20160205 03:31:18.127" level="INFO">${id} = 37287</msg>
<status status="PASS" endtime="20160205 03:31:18.125" starttime="20160205 03:31:18.028"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:18.141" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160205 03:31:18.140" starttime="20160205 03:31:18.137"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.146" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:18.145" starttime="20160205 03:31:18.142"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.150" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:18.149" starttime="20160205 03:31:18.147"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.157" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:18.163" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:18.164" starttime="20160205 03:31:18.154"></status>
</kw>
<msg timestamp="20160205 03:31:18.166" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:18.167" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,827 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:31:18.165" starttime="20160205 03:31:18.152"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.177" starttime="20160205 03:31:18.175"></status>
</kw>
<msg timestamp="20160205 03:31:18.179" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,827 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:31:18.179" starttime="20160205 03:31:18.168"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.190" starttime="20160205 03:31:18.188"></status>
</kw>
<msg timestamp="20160205 03:31:18.192" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,827 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:31:18.191" starttime="20160205 03:31:18.181"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.204" starttime="20160205 03:31:18.201"></status>
</kw>
<msg timestamp="20160205 03:31:18.206" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:31:18.205" starttime="20160205 03:31:18.194"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.220" starttime="20160205 03:31:18.218"></status>
</kw>
<msg timestamp="20160205 03:31:18.222" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:31:18.222" starttime="20160205 03:31:18.207"></status>
</kw>
<msg timestamp="20160205 03:31:18.225" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:31:18.224" starttime="20160205 03:31:18.129"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:18.239" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160205 03:31:18.239" starttime="20160205 03:31:18.236"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.244" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:18.243" starttime="20160205 03:31:18.241"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.249" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:18.248" starttime="20160205 03:31:18.245"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.255" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:18.261" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:18.262" starttime="20160205 03:31:18.253"></status>
</kw>
<msg timestamp="20160205 03:31:18.264" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:18.265" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,828 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:31:18.263" starttime="20160205 03:31:18.250"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.275" starttime="20160205 03:31:18.272"></status>
</kw>
<msg timestamp="20160205 03:31:18.276" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,828 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:31:18.276" starttime="20160205 03:31:18.266"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.286" starttime="20160205 03:31:18.284"></status>
</kw>
<msg timestamp="20160205 03:31:18.288" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,828 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:31:18.287" starttime="20160205 03:31:18.278"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.298" starttime="20160205 03:31:18.296"></status>
</kw>
<msg timestamp="20160205 03:31:18.300" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:31:18.300" starttime="20160205 03:31:18.289"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.314" starttime="20160205 03:31:18.312"></status>
</kw>
<msg timestamp="20160205 03:31:18.316" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:31:18.315" starttime="20160205 03:31:18.302"></status>
</kw>
<msg timestamp="20160205 03:31:18.318" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160205 03:31:18.318" starttime="20160205 03:31:18.227"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:18.332" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160205 03:31:18.331" starttime="20160205 03:31:18.328"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.336" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:18.335" starttime="20160205 03:31:18.333"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.340" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:18.339" starttime="20160205 03:31:18.337"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.346" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:18.351" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:18.352" starttime="20160205 03:31:18.343"></status>
</kw>
<msg timestamp="20160205 03:31:18.354" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:18.355" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,830 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:18.353" starttime="20160205 03:31:18.341"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.365" starttime="20160205 03:31:18.362"></status>
</kw>
<msg timestamp="20160205 03:31:18.367" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,830 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:18.366" starttime="20160205 03:31:18.356"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.377" starttime="20160205 03:31:18.374"></status>
</kw>
<msg timestamp="20160205 03:31:18.378" level="INFO">${return_log_entry} = 2016-02-05 03:31:17,830 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:18.377" starttime="20160205 03:31:18.368"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.383" starttime="20160205 03:31:18.382"></status>
</kw>
<msg timestamp="20160205 03:31:18.384" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:18.383" starttime="20160205 03:31:18.378"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.391" starttime="20160205 03:31:18.390"></status>
</kw>
<msg timestamp="20160205 03:31:18.392" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:18.392" starttime="20160205 03:31:18.385"></status>
</kw>
<msg timestamp="20160205 03:31:18.393" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:18.393" starttime="20160205 03:31:18.321"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.399" starttime="20160205 03:31:18.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.401" starttime="20160205 03:31:18.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.402" starttime="20160205 03:31:18.401"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:31:18.413" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:31:18.413" starttime="20160205 03:31:18.408"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:18.414" starttime="20160205 03:31:18.406"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:18.415" starttime="20160205 03:31:18.403"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:18.415" starttime="20160205 03:31:18.394"></status>
</kw>
<msg timestamp="20160205 03:31:18.418" level="INFO">${rc} = OK</msg>
<msg timestamp="20160205 03:31:18.418" level="INFO">${provId} = 1</msg>
<msg timestamp="20160205 03:31:18.418" level="INFO">${imsi} = 334030880001000</msg>
<msg timestamp="20160205 03:31:18.419" level="INFO">${id} = 37287</msg>
<msg timestamp="20160205 03:31:18.419" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160205 03:31:18.419" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160205 03:31:18.420" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:18.417" starttime="20160205 03:31:17.433"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.433" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:18.433" starttime="20160205 03:31:18.431"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:18.434" starttime="20160205 03:31:18.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.437" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:18.438" starttime="20160205 03:31:18.436"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:18.439" starttime="20160205 03:31:18.435"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.442" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:18.442" starttime="20160205 03:31:18.440"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:18.443" starttime="20160205 03:31:18.439"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:18.443" starttime="20160205 03:31:18.426"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.445" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:31:18.446" starttime="20160205 03:31:18.444"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.447" starttime="20160205 03:31:18.446"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.449" starttime="20160205 03:31:18.448"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.451" starttime="20160205 03:31:18.450"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.453" starttime="20160205 03:31:18.452"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.454" starttime="20160205 03:31:18.453"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.456" starttime="20160205 03:31:18.455"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:31:18.459" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=37287']</msg>
<msg timestamp="20160205 03:31:18.765" level="INFO">03:31:18,754 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
03:31:18,757 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37288
03:31:18,758 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
03:31:18,760 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
03:31:18,762 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:31:18.766" starttime="20160205 03:31:18.458"></status>
</kw>
<msg timestamp="20160205 03:31:18.769" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:18.770" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:31:18.767" starttime="20160205 03:31:18.457"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:18.786" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:31:18.786" starttime="20160205 03:31:18.780"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.791" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:18.790" starttime="20160205 03:31:18.788"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.795" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:18.795" starttime="20160205 03:31:18.792"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.802" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:18.808" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:18.809" starttime="20160205 03:31:18.800"></status>
</kw>
<msg timestamp="20160205 03:31:18.811" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:18.812" level="INFO">${return_log_entry} = 2016-02-05 03:31:18,754 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:18.810" starttime="20160205 03:31:18.797"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.823" starttime="20160205 03:31:18.820"></status>
</kw>
<msg timestamp="20160205 03:31:18.825" level="INFO">${return_log_entry} = 2016-02-05 03:31:18,754 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:18.824" starttime="20160205 03:31:18.813"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.835" starttime="20160205 03:31:18.833"></status>
</kw>
<msg timestamp="20160205 03:31:18.837" level="INFO">${return_log_entry} = 2016-02-05 03:31:18,754 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:18.837" starttime="20160205 03:31:18.826"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.849" starttime="20160205 03:31:18.846"></status>
</kw>
<msg timestamp="20160205 03:31:18.851" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:18.850" starttime="20160205 03:31:18.839"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.867" starttime="20160205 03:31:18.864"></status>
</kw>
<msg timestamp="20160205 03:31:18.869" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:18.868" starttime="20160205 03:31:18.852"></status>
</kw>
<msg timestamp="20160205 03:31:18.872" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:18.871" starttime="20160205 03:31:18.772"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:18.886" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160205 03:31:18.886" starttime="20160205 03:31:18.883"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.891" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:18.890" starttime="20160205 03:31:18.888"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.895" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:18.894" starttime="20160205 03:31:18.892"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.902" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:18.908" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:18.909" starttime="20160205 03:31:18.899"></status>
</kw>
<msg timestamp="20160205 03:31:18.911" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:18.912" level="INFO">${return_log_entry} = 2016-02-05 03:31:18,757 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37288</msg>
<status status="PASS" endtime="20160205 03:31:18.910" starttime="20160205 03:31:18.897"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.922" starttime="20160205 03:31:18.920"></status>
</kw>
<msg timestamp="20160205 03:31:18.924" level="INFO">${return_log_entry} = 2016-02-05 03:31:18,757 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37288</msg>
<status status="PASS" endtime="20160205 03:31:18.923" starttime="20160205 03:31:18.913"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.935" starttime="20160205 03:31:18.932"></status>
</kw>
<msg timestamp="20160205 03:31:18.937" level="INFO">${return_log_entry} = 2016-02-05 03:31:18,757 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37288</msg>
<status status="PASS" endtime="20160205 03:31:18.936" starttime="20160205 03:31:18.926"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.948" starttime="20160205 03:31:18.945"></status>
</kw>
<msg timestamp="20160205 03:31:18.950" level="INFO">${resultCode} = 37288</msg>
<status status="PASS" endtime="20160205 03:31:18.949" starttime="20160205 03:31:18.938"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:18.964" starttime="20160205 03:31:18.962"></status>
</kw>
<msg timestamp="20160205 03:31:18.966" level="INFO">${resultCode} = 37288</msg>
<status status="PASS" endtime="20160205 03:31:18.965" starttime="20160205 03:31:18.951"></status>
</kw>
<msg timestamp="20160205 03:31:18.969" level="INFO">${accountId} = 37288</msg>
<status status="PASS" endtime="20160205 03:31:18.968" starttime="20160205 03:31:18.874"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:18.983" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160205 03:31:18.982" starttime="20160205 03:31:18.979"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.988" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:18.987" starttime="20160205 03:31:18.985"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.992" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:18.991" starttime="20160205 03:31:18.989"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:18.999" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:19.004" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:19.004" starttime="20160205 03:31:18.996"></status>
</kw>
<msg timestamp="20160205 03:31:19.006" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:19.006" level="INFO">${return_log_entry} = 2016-02-05 03:31:18,758 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:31:19.005" starttime="20160205 03:31:18.994"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.011" starttime="20160205 03:31:19.010"></status>
</kw>
<msg timestamp="20160205 03:31:19.012" level="INFO">${return_log_entry} = 2016-02-05 03:31:18,758 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:31:19.012" starttime="20160205 03:31:19.007"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.017" starttime="20160205 03:31:19.016"></status>
</kw>
<msg timestamp="20160205 03:31:19.018" level="INFO">${return_log_entry} = 2016-02-05 03:31:18,758 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:31:19.018" starttime="20160205 03:31:19.013"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.023" starttime="20160205 03:31:19.022"></status>
</kw>
<msg timestamp="20160205 03:31:19.024" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160205 03:31:19.024" starttime="20160205 03:31:19.019"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.031" starttime="20160205 03:31:19.030"></status>
</kw>
<msg timestamp="20160205 03:31:19.032" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160205 03:31:19.032" starttime="20160205 03:31:19.025"></status>
</kw>
<msg timestamp="20160205 03:31:19.033" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160205 03:31:19.033" starttime="20160205 03:31:18.971"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:19.040" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160205 03:31:19.040" starttime="20160205 03:31:19.038"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:19.043" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:19.042" starttime="20160205 03:31:19.041"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:19.045" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:19.044" starttime="20160205 03:31:19.043"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:19.048" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:19.051" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:19.052" starttime="20160205 03:31:19.047"></status>
</kw>
<msg timestamp="20160205 03:31:19.053" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:19.053" level="INFO">${return_log_entry} = 2016-02-05 03:31:18,760 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:31:19.052" starttime="20160205 03:31:19.046"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.058" starttime="20160205 03:31:19.057"></status>
</kw>
<msg timestamp="20160205 03:31:19.059" level="INFO">${return_log_entry} = 2016-02-05 03:31:18,760 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:31:19.058" starttime="20160205 03:31:19.054"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.064" starttime="20160205 03:31:19.062"></status>
</kw>
<msg timestamp="20160205 03:31:19.065" level="INFO">${return_log_entry} = 2016-02-05 03:31:18,760 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:31:19.064" starttime="20160205 03:31:19.059"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.070" starttime="20160205 03:31:19.068"></status>
</kw>
<msg timestamp="20160205 03:31:19.071" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:31:19.070" starttime="20160205 03:31:19.065"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.077" starttime="20160205 03:31:19.076"></status>
</kw>
<msg timestamp="20160205 03:31:19.078" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:31:19.078" starttime="20160205 03:31:19.071"></status>
</kw>
<msg timestamp="20160205 03:31:19.079" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160205 03:31:19.079" starttime="20160205 03:31:19.035"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:19.086" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160205 03:31:19.085" starttime="20160205 03:31:19.084"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:19.088" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:19.087" starttime="20160205 03:31:19.086"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:19.090" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:19.089" starttime="20160205 03:31:19.088"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:19.093" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:19.096" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:19.097" starttime="20160205 03:31:19.092"></status>
</kw>
<msg timestamp="20160205 03:31:19.098" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:19.098" level="INFO">${return_log_entry} = 2016-02-05 03:31:18,762 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:31:19.097" starttime="20160205 03:31:19.091"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.103" starttime="20160205 03:31:19.102"></status>
</kw>
<msg timestamp="20160205 03:31:19.104" level="INFO">${return_log_entry} = 2016-02-05 03:31:18,762 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:31:19.103" starttime="20160205 03:31:19.099"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.108" starttime="20160205 03:31:19.107"></status>
</kw>
<msg timestamp="20160205 03:31:19.109" level="INFO">${return_log_entry} = 2016-02-05 03:31:18,762 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:31:19.109" starttime="20160205 03:31:19.104"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.114" starttime="20160205 03:31:19.113"></status>
</kw>
<msg timestamp="20160205 03:31:19.115" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160205 03:31:19.115" starttime="20160205 03:31:19.110"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.122" starttime="20160205 03:31:19.121"></status>
</kw>
<msg timestamp="20160205 03:31:19.123" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160205 03:31:19.123" starttime="20160205 03:31:19.116"></status>
</kw>
<msg timestamp="20160205 03:31:19.124" level="INFO">${currencyId} = 101000</msg>
<status status="PASS" endtime="20160205 03:31:19.124" starttime="20160205 03:31:19.080"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.130" starttime="20160205 03:31:19.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.131" starttime="20160205 03:31:19.130"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.133" starttime="20160205 03:31:19.132"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:31:19.141" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:31:19.142" starttime="20160205 03:31:19.138"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:19.142" starttime="20160205 03:31:19.136"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:19.143" starttime="20160205 03:31:19.133"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:19.143" starttime="20160205 03:31:19.125"></status>
</kw>
<msg timestamp="20160205 03:31:19.145" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160205 03:31:19.146" level="INFO">${accId} = 37288</msg>
<msg timestamp="20160205 03:31:19.146" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160205 03:31:19.146" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160205 03:31:19.147" level="INFO">${curr} = 101000</msg>
<status status="PASS" endtime="20160205 03:31:19.145" starttime="20160205 03:31:18.421"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.148" starttime="20160205 03:31:19.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.150" starttime="20160205 03:31:19.149"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:19.151" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160205 03:31:19.152" starttime="20160205 03:31:19.150"></status>
</kw>
<doc>Test will make a short MFC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MFC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:31:19.153" starttime="20160205 03:30:48.489"></status>
</test>
<doc>Testing the prepaid MFC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:31:19.157" starttime="20160205 03:30:32.192"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:31:19.167" starttime="20160205 03:30:32.176"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:31:19.175" starttime="20160205 03:30:32.158"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC" id="s1-s1-s1-s3" name="MOC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet" id="s1-s1-s1-s3-s1" name="OnNet">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Abandon" id="s1-s1-s1-s3-s1-s1" name="MOC PREPAID ONNET-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Abandon/MOC_PREPAID_ONNET-Abandon-robot-suite.txt" id="s1-s1-s1-s3-s1-s1-s1" name="MOC PREPAID ONNET-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:31:19.388" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:31:19.393" level="INFO">${date} = Fri Feb  5 03:31:19 CET 2016</msg>
<status status="PASS" endtime="20160205 03:31:19.392" starttime="20160205 03:31:19.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:19.397" level="INFO">Date and time: Fri Feb  5 03:31:19 CET 2016</msg>
<status status="PASS" endtime="20160205 03:31:19.398" starttime="20160205 03:31:19.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:19.403" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160205 03:31:19.404" starttime="20160205 03:31:19.400"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.463" starttime="20160205 03:31:19.461"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:19.530" starttime="20160205 03:31:19.472"></status>
</kw>
<msg timestamp="20160205 03:31:19.532" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160205 03:31:19.531" starttime="20160205 03:31:19.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:31:19.545" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:31:20.020" level="INFO">Read output: Last login: Fri Feb  5 02:30:32 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:31:20.021" starttime="20160205 03:31:19.542"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:20.022" starttime="20160205 03:31:19.534"></status>
</kw>
<msg timestamp="20160205 03:31:20.024" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160205 03:31:20.023" starttime="20160205 03:31:19.452"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:31:20.029" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:31:20.028" starttime="20160205 03:31:20.025"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:31:20.030" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160205 03:31:20.534" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:31:20.536" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:31:20.535" starttime="20160205 03:31:20.029"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:20.539" starttime="20160205 03:31:20.538"></status>
</kw>
<msg timestamp="20160205 03:31:20.540" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:31:20.540" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:31:20.540" starttime="20160205 03:31:20.536"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:20.545" starttime="20160205 03:31:20.545"></status>
</kw>
<msg timestamp="20160205 03:31:20.546" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:20.546" starttime="20160205 03:31:20.541"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:31:20.548" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:31:20.548" starttime="20160205 03:31:20.547"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:31:20.551" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:31:20.550" starttime="20160205 03:31:20.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:20.552" starttime="20160205 03:31:20.551"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:20.559" starttime="20160205 03:31:20.558"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:31:20.561" starttime="20160205 03:31:20.560"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:20.563" starttime="20160205 03:31:20.553"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:20.568" starttime="20160205 03:31:20.567"></status>
</kw>
<msg timestamp="20160205 03:31:20.568" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:31:20.568" starttime="20160205 03:31:20.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:20.570" starttime="20160205 03:31:20.569"></status>
</kw>
<msg timestamp="20160205 03:31:20.572" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:31:20.572" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:31:20.571" starttime="20160205 03:31:19.423"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:20.600" starttime="20160205 03:31:20.599"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:20.647" starttime="20160205 03:31:20.604"></status>
</kw>
<msg timestamp="20160205 03:31:20.648" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160205 03:31:20.648" starttime="20160205 03:31:20.600"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:31:20.654" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:31:21.175" level="INFO">Read output: Last login: Fri Feb  5 02:30:34 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:31:21.176" starttime="20160205 03:31:20.653"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:21.177" starttime="20160205 03:31:20.649"></status>
</kw>
<msg timestamp="20160205 03:31:21.179" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160205 03:31:21.178" starttime="20160205 03:31:20.594"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:31:21.183" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:31:21.183" starttime="20160205 03:31:21.179"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:31:21.185" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:31:21.678" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:31:21.680" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:31:21.679" starttime="20160205 03:31:21.184"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:21.684" starttime="20160205 03:31:21.682"></status>
</kw>
<msg timestamp="20160205 03:31:21.685" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:31:21.685" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:31:21.685" starttime="20160205 03:31:21.681"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:21.691" starttime="20160205 03:31:21.690"></status>
</kw>
<msg timestamp="20160205 03:31:21.692" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:21.691" starttime="20160205 03:31:21.686"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:31:21.694" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:31:21.694" starttime="20160205 03:31:21.692"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:31:21.696" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:31:21.696" starttime="20160205 03:31:21.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:21.698" starttime="20160205 03:31:21.697"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:21.703" starttime="20160205 03:31:21.702"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:31:21.708" starttime="20160205 03:31:21.704"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:21.709" starttime="20160205 03:31:21.699"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:21.713" starttime="20160205 03:31:21.712"></status>
</kw>
<msg timestamp="20160205 03:31:21.714" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:31:21.714" starttime="20160205 03:31:21.709"></status>
</kw>
<msg timestamp="20160205 03:31:21.716" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:31:21.716" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:31:21.715" starttime="20160205 03:31:20.581"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:21.743" starttime="20160205 03:31:21.742"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<msg timestamp="20160205 03:31:24.771" level="FAIL">SocketTimeoutException: The kexTimeout (3000 ms) expired.</msg>
<status status="FAIL" endtime="20160205 03:31:24.773" starttime="20160205 03:31:21.747"></status>
</kw>
<status status="FAIL" endtime="20160205 03:31:24.775" starttime="20160205 03:31:21.744"></status>
</kw>
<status status="FAIL" endtime="20160205 03:31:24.778" starttime="20160205 03:31:21.738"></status>
</kw>
<status status="FAIL" endtime="20160205 03:31:24.781" starttime="20160205 03:31:21.725"></status>
</kw>
<status status="FAIL" endtime="20160205 03:31:24.783" starttime="20160205 03:31:19.377"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s1-s1-t1" name="Run MOC Abandon Call">
<doc>Test will make an abandoned MOC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160205 03:31:24.797" starttime="20160205 03:31:24.786">Parent suite setup failed:
SocketTimeoutException: The kexTimeout (3000 ms) expired.</status>
</test>
<doc>Testing the prepaid MOC call. Calling party abandons the call

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160205 03:31:24.804" starttime="20160205 03:31:19.229">Suite setup failed:
SocketTimeoutException: The kexTimeout (3000 ms) expired.</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160205 03:31:24.816" starttime="20160205 03:31:19.213"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Busy" id="s1-s1-s1-s3-s1-s2" name="MOC PREPAID ONNET-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Busy/MOC_PREPAID_ONNET-Busy-robot-suite.txt" id="s1-s1-s1-s3-s1-s2-s1" name="MOC PREPAID ONNET-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:31:25.019" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:31:25.025" level="INFO">${date} = Fri Feb  5 03:31:25 CET 2016</msg>
<status status="PASS" endtime="20160205 03:31:25.024" starttime="20160205 03:31:25.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:25.029" level="INFO">Date and time: Fri Feb  5 03:31:25 CET 2016</msg>
<status status="PASS" endtime="20160205 03:31:25.030" starttime="20160205 03:31:25.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:25.034" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160205 03:31:25.035" starttime="20160205 03:31:25.031"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:25.090" starttime="20160205 03:31:25.088"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:25.143" starttime="20160205 03:31:25.099"></status>
</kw>
<msg timestamp="20160205 03:31:25.145" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160205 03:31:25.144" starttime="20160205 03:31:25.092"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:31:25.151" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:31:25.638" level="INFO">Read output: Last login: Fri Feb  5 02:31:19 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:31:25.638" starttime="20160205 03:31:25.149"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:25.639" starttime="20160205 03:31:25.146"></status>
</kw>
<msg timestamp="20160205 03:31:25.640" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160205 03:31:25.640" starttime="20160205 03:31:25.078"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:31:25.644" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:31:25.644" starttime="20160205 03:31:25.641"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:31:25.646" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160205 03:31:26.179" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:31:26.181" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:31:26.180" starttime="20160205 03:31:25.645"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:26.184" starttime="20160205 03:31:26.183"></status>
</kw>
<msg timestamp="20160205 03:31:26.185" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:31:26.185" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:31:26.185" starttime="20160205 03:31:26.181"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:26.190" starttime="20160205 03:31:26.189"></status>
</kw>
<msg timestamp="20160205 03:31:26.191" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:26.191" starttime="20160205 03:31:26.186"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:31:26.193" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:31:26.193" starttime="20160205 03:31:26.192"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:31:26.195" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:31:26.195" starttime="20160205 03:31:26.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:26.197" starttime="20160205 03:31:26.196"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:26.202" starttime="20160205 03:31:26.201"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:31:26.204" starttime="20160205 03:31:26.203"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:26.207" starttime="20160205 03:31:26.198"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:26.212" starttime="20160205 03:31:26.210"></status>
</kw>
<msg timestamp="20160205 03:31:26.212" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:31:26.212" starttime="20160205 03:31:26.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:26.214" starttime="20160205 03:31:26.213"></status>
</kw>
<msg timestamp="20160205 03:31:26.216" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:31:26.216" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:31:26.215" starttime="20160205 03:31:25.053"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:26.242" starttime="20160205 03:31:26.241"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:26.303" starttime="20160205 03:31:26.246"></status>
</kw>
<msg timestamp="20160205 03:31:26.306" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160205 03:31:26.305" starttime="20160205 03:31:26.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:31:26.318" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:31:26.772" level="INFO">Read output: Last login: Fri Feb  5 02:31:20 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:31:26.773" starttime="20160205 03:31:26.315"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:26.773" starttime="20160205 03:31:26.307"></status>
</kw>
<msg timestamp="20160205 03:31:26.775" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160205 03:31:26.774" starttime="20160205 03:31:26.237"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:31:26.779" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:31:26.779" starttime="20160205 03:31:26.775"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:31:26.781" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:31:27.248" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:31:27.252" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:31:27.250" starttime="20160205 03:31:26.780"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:27.260" starttime="20160205 03:31:27.257"></status>
</kw>
<msg timestamp="20160205 03:31:27.262" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:31:27.263" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:31:27.261" starttime="20160205 03:31:27.254"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:27.273" starttime="20160205 03:31:27.271"></status>
</kw>
<msg timestamp="20160205 03:31:27.275" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:27.274" starttime="20160205 03:31:27.264"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:31:27.279" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:31:27.279" starttime="20160205 03:31:27.276"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:31:27.284" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:31:27.283" starttime="20160205 03:31:27.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:27.287" starttime="20160205 03:31:27.285"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:27.299" starttime="20160205 03:31:27.296"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:31:27.303" starttime="20160205 03:31:27.301"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:27.309" starttime="20160205 03:31:27.289"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:27.320" starttime="20160205 03:31:27.318"></status>
</kw>
<msg timestamp="20160205 03:31:27.322" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:31:27.321" starttime="20160205 03:31:27.310"></status>
</kw>
<msg timestamp="20160205 03:31:27.326" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:31:27.327" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:31:27.324" starttime="20160205 03:31:26.224"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:27.385" starttime="20160205 03:31:27.383"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:27.760" starttime="20160205 03:31:27.394"></status>
</kw>
<msg timestamp="20160205 03:31:27.763" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160205 03:31:27.762" starttime="20160205 03:31:27.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:31:27.777" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:31:28.870" level="INFO">Read output: Last login: Fri Feb  5 02:30:38 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:31:28.871" starttime="20160205 03:31:27.774"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:28.872" starttime="20160205 03:31:27.764"></status>
</kw>
<msg timestamp="20160205 03:31:28.875" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160205 03:31:28.874" starttime="20160205 03:31:27.373"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:31:28.880" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:31:28.880" starttime="20160205 03:31:28.875"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:31:28.882" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:31:29.401" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:31:29.403" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:31:29.402" starttime="20160205 03:31:28.881"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:29.407" starttime="20160205 03:31:29.406"></status>
</kw>
<msg timestamp="20160205 03:31:29.408" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:31:29.408" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:31:29.408" starttime="20160205 03:31:29.404"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:29.424" starttime="20160205 03:31:29.421"></status>
</kw>
<msg timestamp="20160205 03:31:29.426" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:29.426" starttime="20160205 03:31:29.409"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:31:29.431" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:31:29.430" starttime="20160205 03:31:29.428"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:31:29.436" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:31:29.435" starttime="20160205 03:31:29.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:29.439" starttime="20160205 03:31:29.437"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:29.452" starttime="20160205 03:31:29.449"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:31:29.458" starttime="20160205 03:31:29.453"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:29.460" starttime="20160205 03:31:29.442"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:29.472" starttime="20160205 03:31:29.470"></status>
</kw>
<msg timestamp="20160205 03:31:29.474" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:31:29.473" starttime="20160205 03:31:29.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:29.478" starttime="20160205 03:31:29.475"></status>
</kw>
<msg timestamp="20160205 03:31:29.482" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:31:29.482" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:31:29.480" starttime="20160205 03:31:27.345"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:29.541" starttime="20160205 03:31:29.539"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:29.595" starttime="20160205 03:31:29.550"></status>
</kw>
<msg timestamp="20160205 03:31:29.596" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160205 03:31:29.595" starttime="20160205 03:31:29.543"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:31:29.602" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:31:30.076" level="INFO">Read output: Last login: Fri Feb  5 02:30:47 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:31:30.077" starttime="20160205 03:31:29.601"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:30.079" starttime="20160205 03:31:29.597"></status>
</kw>
<msg timestamp="20160205 03:31:30.081" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160205 03:31:30.080" starttime="20160205 03:31:29.529"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:31:30.085" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:31:30.085" starttime="20160205 03:31:30.081"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:31:30.087" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:31:30.185" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:31:30.186" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:31:30.185" starttime="20160205 03:31:30.086"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.189" starttime="20160205 03:31:30.187"></status>
</kw>
<msg timestamp="20160205 03:31:30.190" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:31:30.190" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:31:30.189" starttime="20160205 03:31:30.186"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.195" starttime="20160205 03:31:30.194"></status>
</kw>
<msg timestamp="20160205 03:31:30.196" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:30.195" starttime="20160205 03:31:30.191"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:31:30.198" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:31:30.197" starttime="20160205 03:31:30.196"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:31:30.200" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:31:30.199" starttime="20160205 03:31:30.198"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.201" starttime="20160205 03:31:30.200"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.207" starttime="20160205 03:31:30.206"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.210" starttime="20160205 03:31:30.207"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:30.211" starttime="20160205 03:31:30.202"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.215" starttime="20160205 03:31:30.214"></status>
</kw>
<msg timestamp="20160205 03:31:30.216" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:31:30.216" starttime="20160205 03:31:30.212"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.218" starttime="20160205 03:31:30.217"></status>
</kw>
<msg timestamp="20160205 03:31:30.220" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:31:30.220" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:31:30.219" starttime="20160205 03:31:29.501"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:30.222" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:31:30.223" starttime="20160205 03:31:30.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:30.224" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:31:30.225" starttime="20160205 03:31:30.223"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:30.227" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:31:30.227" starttime="20160205 03:31:30.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:30.229" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:31:30.230" starttime="20160205 03:31:30.228"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:31:30.232" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:31:30.232" starttime="20160205 03:31:30.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:31:30.234" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:31:30.234" starttime="20160205 03:31:30.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:31:30.236" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:31:30.236" starttime="20160205 03:31:30.235"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:31:30.238" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:31:30.238" starttime="20160205 03:31:30.237"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.245" starttime="20160205 03:31:30.242"></status>
</kw>
<msg timestamp="20160205 03:31:30.246" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:31:30.245" starttime="20160205 03:31:30.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:31:30.248" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:31:30.248" starttime="20160205 03:31:30.246"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:30.249" starttime="20160205 03:31:25.009"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s2-s1-t1" name="Run MOC Busy Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.256" starttime="20160205 03:31:30.255"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:31:30.257" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:31:30.257" starttime="20160205 03:31:30.256"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:31:30.265" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 03:31:30.266" starttime="20160205 03:31:30.264"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:31:30.267" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:31:30.268" starttime="20160205 03:31:30.266"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:31:30.269" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:31:30.270" starttime="20160205 03:31:30.268"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:31:30.271" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 03:31:30.271" starttime="20160205 03:31:30.270"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:31:30.273" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 03:31:30.273" starttime="20160205 03:31:30.272"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:31:30.275" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 03:31:30.275" starttime="20160205 03:31:30.274"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:31:30.278" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:30.278" starttime="20160205 03:31:30.277"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:31:30.280" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 03:31:30.280" starttime="20160205 03:31:30.279"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:31:30.282" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:31:30.282" starttime="20160205 03:31:30.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:31:30.284" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:31:30.284" starttime="20160205 03:31:30.283"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:30.291" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:30.292" starttime="20160205 03:31:30.290"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:30.292" starttime="20160205 03:31:30.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:30.295" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:30.296" starttime="20160205 03:31:30.294"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:30.296" starttime="20160205 03:31:30.293"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:30.299" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:30.299" starttime="20160205 03:31:30.298"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:30.300" starttime="20160205 03:31:30.297"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:30.301" starttime="20160205 03:31:30.286"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:31:30.303" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:31:30.303" starttime="20160205 03:31:30.301"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.305" starttime="20160205 03:31:30.304"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.308" starttime="20160205 03:31:30.306"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.310" starttime="20160205 03:31:30.309"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.311" starttime="20160205 03:31:30.311"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.313" starttime="20160205 03:31:30.312"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.315" starttime="20160205 03:31:30.313"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.316" starttime="20160205 03:31:30.315"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.318" starttime="20160205 03:31:30.317"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.320" starttime="20160205 03:31:30.319"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.322" starttime="20160205 03:31:30.320"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.323" starttime="20160205 03:31:30.322"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:30.325" starttime="20160205 03:31:30.324"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:31:30.331" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:31:32.073" level="INFO">03:31:32,069 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:32.074" starttime="20160205 03:31:30.330"></status>
</kw>
<msg timestamp="20160205 03:31:32.078" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:32.079" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:31:32.076" starttime="20160205 03:31:30.326"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:32.092" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:31:32.092" starttime="20160205 03:31:32.088"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:32.097" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:32.096" starttime="20160205 03:31:32.094"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:32.101" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:32.101" starttime="20160205 03:31:32.098"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:32.108" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:32.109" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:32.110" starttime="20160205 03:31:32.105"></status>
</kw>
<msg timestamp="20160205 03:31:32.112" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:32.113" level="INFO">${return_log_entry} = 2016-02-05 03:31:32,069 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:32.111" starttime="20160205 03:31:32.103"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:32.124" starttime="20160205 03:31:32.121"></status>
</kw>
<msg timestamp="20160205 03:31:32.126" level="INFO">${return_log_entry} = 2016-02-05 03:31:32,069 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:32.125" starttime="20160205 03:31:32.114"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:32.131" starttime="20160205 03:31:32.130"></status>
</kw>
<msg timestamp="20160205 03:31:32.132" level="INFO">${return_log_entry} = 2016-02-05 03:31:32,069 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:32.131" starttime="20160205 03:31:32.127"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:32.137" starttime="20160205 03:31:32.135"></status>
</kw>
<msg timestamp="20160205 03:31:32.138" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:32.137" starttime="20160205 03:31:32.132"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:32.144" starttime="20160205 03:31:32.143"></status>
</kw>
<msg timestamp="20160205 03:31:32.145" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:32.145" starttime="20160205 03:31:32.138"></status>
</kw>
<msg timestamp="20160205 03:31:32.146" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:32.146" starttime="20160205 03:31:32.081"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:32.151" starttime="20160205 03:31:32.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:32.153" starttime="20160205 03:31:32.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:32.154" starttime="20160205 03:31:32.153"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:31:32.160" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:31:32.161" starttime="20160205 03:31:32.159"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:32.161" starttime="20160205 03:31:32.158"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:32.162" starttime="20160205 03:31:32.155"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:32.162" starttime="20160205 03:31:32.147"></status>
</kw>
<msg timestamp="20160205 03:31:32.164" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:31:32.163" starttime="20160205 03:31:30.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:31:32.165" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:31:32.166" starttime="20160205 03:31:32.164"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:32.167" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:31:32.168" starttime="20160205 03:31:32.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC Busy *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:32.169" starttime="20160205 03:31:32.168"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC busy call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:32.171" level="INFO">Running the MOC busy call...</msg>
<status status="PASS" endtime="20160205 03:31:32.171" starttime="20160205 03:31:32.170"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC Busy">
<doc>Runs an busy MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-busy</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:31:32.186" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:31:32.186" starttime="20160205 03:31:32.185"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:31:32.189" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:31:32.188" starttime="20160205 03:31:32.187"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:31:32.191" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:31:32.190" starttime="20160205 03:31:32.189"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:31:32.193" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-busy.cgs</msg>
<status status="PASS" endtime="20160205 03:31:32.192" starttime="20160205 03:31:32.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:32.194" starttime="20160205 03:31:32.193"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:31:32.197" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:32.197" starttime="20160205 03:31:32.195"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:32.199" starttime="20160205 03:31:32.198"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:31:32.201" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:32.201" starttime="20160205 03:31:32.199"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:31:32.204" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:32.204" starttime="20160205 03:31:32.202"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:32.206" starttime="20160205 03:31:32.205"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:31:32.208" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:32.208" starttime="20160205 03:31:32.206"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:31:32.211" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:32.213" starttime="20160205 03:31:32.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:32.216" starttime="20160205 03:31:32.214"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:31:32.231" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-busy.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:31:49.239" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:31:49.238" starttime="20160205 03:31:32.218"></status>
</kw>
<msg timestamp="20160205 03:31:49.241" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:31:49.241" starttime="20160205 03:31:32.179"></status>
</kw>
<msg timestamp="20160205 03:31:49.243" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:31:49.242" starttime="20160205 03:31:32.173"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:49.245" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:31:49.246" starttime="20160205 03:31:49.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.248" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:31:49.248" starttime="20160205 03:31:49.246"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.250" starttime="20160205 03:31:49.249"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.262" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:49.263" starttime="20160205 03:31:49.261"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:49.263" starttime="20160205 03:31:49.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.266" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:49.266" starttime="20160205 03:31:49.265"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:49.267" starttime="20160205 03:31:49.264"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.270" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:49.270" starttime="20160205 03:31:49.269"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:49.271" starttime="20160205 03:31:49.268"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:49.271" starttime="20160205 03:31:49.257"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.273" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:31:49.274" starttime="20160205 03:31:49.272"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.275" starttime="20160205 03:31:49.274"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.277" starttime="20160205 03:31:49.276"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.279" starttime="20160205 03:31:49.278"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.280" starttime="20160205 03:31:49.280"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.282" starttime="20160205 03:31:49.281"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.284" starttime="20160205 03:31:49.282"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:31:49.286" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000']</msg>
<msg timestamp="20160205 03:31:49.716" level="INFO">03:31:49,697 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
03:31:49,700 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
03:31:49,702 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37294
03:31:49,704 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000
03:31:49,706 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
03:31:49,708 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
03:31:49,710 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
03:31:49,712 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=3</msg>
<status status="PASS" endtime="20160205 03:31:49.717" starttime="20160205 03:31:49.285"></status>
</kw>
<msg timestamp="20160205 03:31:49.719" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:49.720" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:31:49.718" starttime="20160205 03:31:49.284"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:49.733" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:31:49.733" starttime="20160205 03:31:49.730"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.738" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:49.737" starttime="20160205 03:31:49.735"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.742" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:49.741" starttime="20160205 03:31:49.739"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.749" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:49.750" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:49.752" starttime="20160205 03:31:49.746"></status>
</kw>
<msg timestamp="20160205 03:31:49.752" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:49.753" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,697 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:49.752" starttime="20160205 03:31:49.743"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.758" starttime="20160205 03:31:49.757"></status>
</kw>
<msg timestamp="20160205 03:31:49.759" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,697 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:49.759" starttime="20160205 03:31:49.753"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.764" starttime="20160205 03:31:49.763"></status>
</kw>
<msg timestamp="20160205 03:31:49.765" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,697 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:49.764" starttime="20160205 03:31:49.760"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.769" starttime="20160205 03:31:49.768"></status>
</kw>
<msg timestamp="20160205 03:31:49.770" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:49.770" starttime="20160205 03:31:49.765"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.777" starttime="20160205 03:31:49.776"></status>
</kw>
<msg timestamp="20160205 03:31:49.778" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:49.777" starttime="20160205 03:31:49.771"></status>
</kw>
<msg timestamp="20160205 03:31:49.779" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:49.778" starttime="20160205 03:31:49.722"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:49.785" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160205 03:31:49.785" starttime="20160205 03:31:49.783"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.787" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:49.786" starttime="20160205 03:31:49.785"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.789" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:49.788" starttime="20160205 03:31:49.787"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.792" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:49.792" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:49.793" starttime="20160205 03:31:49.790"></status>
</kw>
<msg timestamp="20160205 03:31:49.794" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:49.794" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,700 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:31:49.793" starttime="20160205 03:31:49.789"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.799" starttime="20160205 03:31:49.798"></status>
</kw>
<msg timestamp="20160205 03:31:49.800" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,700 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:31:49.799" starttime="20160205 03:31:49.795"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.804" starttime="20160205 03:31:49.803"></status>
</kw>
<msg timestamp="20160205 03:31:49.805" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,700 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:31:49.805" starttime="20160205 03:31:49.800"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.810" starttime="20160205 03:31:49.809"></status>
</kw>
<msg timestamp="20160205 03:31:49.811" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:31:49.811" starttime="20160205 03:31:49.806"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.818" starttime="20160205 03:31:49.816"></status>
</kw>
<msg timestamp="20160205 03:31:49.818" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:31:49.818" starttime="20160205 03:31:49.812"></status>
</kw>
<msg timestamp="20160205 03:31:49.820" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160205 03:31:49.819" starttime="20160205 03:31:49.780"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:49.826" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160205 03:31:49.825" starttime="20160205 03:31:49.824"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.828" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:49.827" starttime="20160205 03:31:49.826"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.830" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:49.829" starttime="20160205 03:31:49.828"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.833" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:49.833" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:49.834" starttime="20160205 03:31:49.831"></status>
</kw>
<msg timestamp="20160205 03:31:49.835" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:49.835" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,704 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160205 03:31:49.834" starttime="20160205 03:31:49.830"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.840" starttime="20160205 03:31:49.839"></status>
</kw>
<msg timestamp="20160205 03:31:49.841" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,704 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160205 03:31:49.840" starttime="20160205 03:31:49.836"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.845" starttime="20160205 03:31:49.844"></status>
</kw>
<msg timestamp="20160205 03:31:49.846" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,704 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160205 03:31:49.846" starttime="20160205 03:31:49.841"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.851" starttime="20160205 03:31:49.850"></status>
</kw>
<msg timestamp="20160205 03:31:49.852" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160205 03:31:49.852" starttime="20160205 03:31:49.847"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.859" starttime="20160205 03:31:49.857"></status>
</kw>
<msg timestamp="20160205 03:31:49.859" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160205 03:31:49.859" starttime="20160205 03:31:49.853"></status>
</kw>
<msg timestamp="20160205 03:31:49.861" level="INFO">${imsi} = 334030880001000</msg>
<status status="PASS" endtime="20160205 03:31:49.860" starttime="20160205 03:31:49.821"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:49.867" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160205 03:31:49.866" starttime="20160205 03:31:49.865"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.869" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:49.868" starttime="20160205 03:31:49.867"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.871" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:49.870" starttime="20160205 03:31:49.869"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.874" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:49.874" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:49.875" starttime="20160205 03:31:49.872"></status>
</kw>
<msg timestamp="20160205 03:31:49.876" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:49.876" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,702 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37294</msg>
<status status="PASS" endtime="20160205 03:31:49.875" starttime="20160205 03:31:49.871"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.881" starttime="20160205 03:31:49.880"></status>
</kw>
<msg timestamp="20160205 03:31:49.882" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,702 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37294</msg>
<status status="PASS" endtime="20160205 03:31:49.881" starttime="20160205 03:31:49.877"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.886" starttime="20160205 03:31:49.885"></status>
</kw>
<msg timestamp="20160205 03:31:49.887" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,702 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37294</msg>
<status status="PASS" endtime="20160205 03:31:49.887" starttime="20160205 03:31:49.882"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.892" starttime="20160205 03:31:49.891"></status>
</kw>
<msg timestamp="20160205 03:31:49.893" level="INFO">${resultCode} = 37294</msg>
<status status="PASS" endtime="20160205 03:31:49.893" starttime="20160205 03:31:49.888"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.899" starttime="20160205 03:31:49.898"></status>
</kw>
<msg timestamp="20160205 03:31:49.900" level="INFO">${resultCode} = 37294</msg>
<status status="PASS" endtime="20160205 03:31:49.900" starttime="20160205 03:31:49.893"></status>
</kw>
<msg timestamp="20160205 03:31:49.901" level="INFO">${id} = 37294</msg>
<status status="PASS" endtime="20160205 03:31:49.901" starttime="20160205 03:31:49.862"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:49.907" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160205 03:31:49.907" starttime="20160205 03:31:49.906"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.909" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:49.909" starttime="20160205 03:31:49.908"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.911" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:49.911" starttime="20160205 03:31:49.910"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.914" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:49.915" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:49.915" starttime="20160205 03:31:49.913"></status>
</kw>
<msg timestamp="20160205 03:31:49.916" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:49.917" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,706 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:31:49.916" starttime="20160205 03:31:49.912"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.921" starttime="20160205 03:31:49.920"></status>
</kw>
<msg timestamp="20160205 03:31:49.922" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,706 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:31:49.922" starttime="20160205 03:31:49.917"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.927" starttime="20160205 03:31:49.926"></status>
</kw>
<msg timestamp="20160205 03:31:49.928" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,706 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:31:49.927" starttime="20160205 03:31:49.923"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.932" starttime="20160205 03:31:49.931"></status>
</kw>
<msg timestamp="20160205 03:31:49.933" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:31:49.933" starttime="20160205 03:31:49.928"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.940" starttime="20160205 03:31:49.939"></status>
</kw>
<msg timestamp="20160205 03:31:49.941" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:31:49.940" starttime="20160205 03:31:49.934"></status>
</kw>
<msg timestamp="20160205 03:31:49.942" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:31:49.941" starttime="20160205 03:31:49.902"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:49.948" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160205 03:31:49.947" starttime="20160205 03:31:49.946"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.950" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:49.949" starttime="20160205 03:31:49.948"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.952" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:49.951" starttime="20160205 03:31:49.950"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.955" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:49.955" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:49.956" starttime="20160205 03:31:49.953"></status>
</kw>
<msg timestamp="20160205 03:31:49.957" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:49.957" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,708 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:31:49.956" starttime="20160205 03:31:49.952"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.962" starttime="20160205 03:31:49.961"></status>
</kw>
<msg timestamp="20160205 03:31:49.963" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,708 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:31:49.962" starttime="20160205 03:31:49.958"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.967" starttime="20160205 03:31:49.966"></status>
</kw>
<msg timestamp="20160205 03:31:49.968" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,708 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:31:49.968" starttime="20160205 03:31:49.963"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.973" starttime="20160205 03:31:49.972"></status>
</kw>
<msg timestamp="20160205 03:31:49.974" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:31:49.973" starttime="20160205 03:31:49.969"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:49.980" starttime="20160205 03:31:49.979"></status>
</kw>
<msg timestamp="20160205 03:31:49.981" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:31:49.981" starttime="20160205 03:31:49.974"></status>
</kw>
<msg timestamp="20160205 03:31:49.982" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160205 03:31:49.982" starttime="20160205 03:31:49.943"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:49.988" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160205 03:31:49.988" starttime="20160205 03:31:49.987"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.990" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:49.990" starttime="20160205 03:31:49.989"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.992" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:49.992" starttime="20160205 03:31:49.991"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:49.995" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:49.996" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:49.996" starttime="20160205 03:31:49.994"></status>
</kw>
<msg timestamp="20160205 03:31:49.997" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:49.997" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,710 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:49.997" starttime="20160205 03:31:49.993"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.003" starttime="20160205 03:31:50.001"></status>
</kw>
<msg timestamp="20160205 03:31:50.004" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,710 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:50.003" starttime="20160205 03:31:49.998"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.009" starttime="20160205 03:31:50.007"></status>
</kw>
<msg timestamp="20160205 03:31:50.009" level="INFO">${return_log_entry} = 2016-02-05 03:31:49,710 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:50.009" starttime="20160205 03:31:50.005"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.014" starttime="20160205 03:31:50.013"></status>
</kw>
<msg timestamp="20160205 03:31:50.015" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:50.015" starttime="20160205 03:31:50.010"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.022" starttime="20160205 03:31:50.021"></status>
</kw>
<msg timestamp="20160205 03:31:50.023" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:50.022" starttime="20160205 03:31:50.016"></status>
</kw>
<msg timestamp="20160205 03:31:50.024" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:50.023" starttime="20160205 03:31:49.983"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.029" starttime="20160205 03:31:50.028"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.031" starttime="20160205 03:31:50.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.032" starttime="20160205 03:31:50.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:31:50.038" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:31:50.039" starttime="20160205 03:31:50.037"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:50.039" starttime="20160205 03:31:50.036"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:50.040" starttime="20160205 03:31:50.033"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:50.040" starttime="20160205 03:31:50.025"></status>
</kw>
<msg timestamp="20160205 03:31:50.043" level="INFO">${rc} = OK</msg>
<msg timestamp="20160205 03:31:50.043" level="INFO">${provId} = 1</msg>
<msg timestamp="20160205 03:31:50.044" level="INFO">${imsi} = 334030880001000</msg>
<msg timestamp="20160205 03:31:50.044" level="INFO">${id} = 37294</msg>
<msg timestamp="20160205 03:31:50.044" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160205 03:31:50.044" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160205 03:31:50.045" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:50.042" starttime="20160205 03:31:49.252"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.057" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:50.057" starttime="20160205 03:31:50.055"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:50.058" starttime="20160205 03:31:50.054"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.061" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:50.061" starttime="20160205 03:31:50.059"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:50.061" starttime="20160205 03:31:50.058"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.064" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:50.065" starttime="20160205 03:31:50.063"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:50.065" starttime="20160205 03:31:50.062"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:50.066" starttime="20160205 03:31:50.051"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.068" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:31:50.068" starttime="20160205 03:31:50.066"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.070" starttime="20160205 03:31:50.069"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.072" starttime="20160205 03:31:50.071"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.074" starttime="20160205 03:31:50.072"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.075" starttime="20160205 03:31:50.074"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.077" starttime="20160205 03:31:50.076"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.078" starttime="20160205 03:31:50.077"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:31:50.081" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=37294']</msg>
<msg timestamp="20160205 03:31:50.350" level="INFO">03:31:50,337 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
03:31:50,339 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37295
03:31:50,342 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
03:31:50,344 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
03:31:50,346 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:31:50.351" starttime="20160205 03:31:50.080"></status>
</kw>
<msg timestamp="20160205 03:31:50.353" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:50.354" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:31:50.352" starttime="20160205 03:31:50.079"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:50.369" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:31:50.368" starttime="20160205 03:31:50.365"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.373" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:50.372" starttime="20160205 03:31:50.370"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.377" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:50.377" starttime="20160205 03:31:50.374"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.380" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:50.381" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:50.381" starttime="20160205 03:31:50.379"></status>
</kw>
<msg timestamp="20160205 03:31:50.382" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:50.383" level="INFO">${return_log_entry} = 2016-02-05 03:31:50,337 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:50.382" starttime="20160205 03:31:50.378"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.388" starttime="20160205 03:31:50.387"></status>
</kw>
<msg timestamp="20160205 03:31:50.389" level="INFO">${return_log_entry} = 2016-02-05 03:31:50,337 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:50.388" starttime="20160205 03:31:50.383"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.394" starttime="20160205 03:31:50.393"></status>
</kw>
<msg timestamp="20160205 03:31:50.395" level="INFO">${return_log_entry} = 2016-02-05 03:31:50,337 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:50.394" starttime="20160205 03:31:50.389"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.400" starttime="20160205 03:31:50.398"></status>
</kw>
<msg timestamp="20160205 03:31:50.401" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:50.400" starttime="20160205 03:31:50.395"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.407" starttime="20160205 03:31:50.406"></status>
</kw>
<msg timestamp="20160205 03:31:50.408" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:50.408" starttime="20160205 03:31:50.401"></status>
</kw>
<msg timestamp="20160205 03:31:50.409" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:50.409" starttime="20160205 03:31:50.357"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:50.415" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160205 03:31:50.415" starttime="20160205 03:31:50.414"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.417" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:50.417" starttime="20160205 03:31:50.416"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.419" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:50.419" starttime="20160205 03:31:50.418"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.422" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:50.423" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:50.423" starttime="20160205 03:31:50.421"></status>
</kw>
<msg timestamp="20160205 03:31:50.424" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:50.425" level="INFO">${return_log_entry} = 2016-02-05 03:31:50,339 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37295</msg>
<status status="PASS" endtime="20160205 03:31:50.424" starttime="20160205 03:31:50.420"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.429" starttime="20160205 03:31:50.428"></status>
</kw>
<msg timestamp="20160205 03:31:50.430" level="INFO">${return_log_entry} = 2016-02-05 03:31:50,339 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37295</msg>
<status status="PASS" endtime="20160205 03:31:50.430" starttime="20160205 03:31:50.425"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.435" starttime="20160205 03:31:50.434"></status>
</kw>
<msg timestamp="20160205 03:31:50.436" level="INFO">${return_log_entry} = 2016-02-05 03:31:50,339 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37295</msg>
<status status="PASS" endtime="20160205 03:31:50.435" starttime="20160205 03:31:50.431"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.441" starttime="20160205 03:31:50.439"></status>
</kw>
<msg timestamp="20160205 03:31:50.441" level="INFO">${resultCode} = 37295</msg>
<status status="PASS" endtime="20160205 03:31:50.441" starttime="20160205 03:31:50.436"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.491" starttime="20160205 03:31:50.488"></status>
</kw>
<msg timestamp="20160205 03:31:50.493" level="INFO">${resultCode} = 37295</msg>
<status status="PASS" endtime="20160205 03:31:50.492" starttime="20160205 03:31:50.442"></status>
</kw>
<msg timestamp="20160205 03:31:50.495" level="INFO">${accountId} = 37295</msg>
<status status="PASS" endtime="20160205 03:31:50.495" starttime="20160205 03:31:50.410"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:50.512" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160205 03:31:50.511" starttime="20160205 03:31:50.508"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.517" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:50.516" starttime="20160205 03:31:50.513"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.521" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:50.520" starttime="20160205 03:31:50.518"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.528" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:50.530" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:50.531" starttime="20160205 03:31:50.525"></status>
</kw>
<msg timestamp="20160205 03:31:50.533" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:50.533" level="INFO">${return_log_entry} = 2016-02-05 03:31:50,342 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:31:50.532" starttime="20160205 03:31:50.523"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.545" starttime="20160205 03:31:50.542"></status>
</kw>
<msg timestamp="20160205 03:31:50.547" level="INFO">${return_log_entry} = 2016-02-05 03:31:50,342 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:31:50.546" starttime="20160205 03:31:50.535"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.557" starttime="20160205 03:31:50.554"></status>
</kw>
<msg timestamp="20160205 03:31:50.559" level="INFO">${return_log_entry} = 2016-02-05 03:31:50,342 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:31:50.558" starttime="20160205 03:31:50.548"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.569" starttime="20160205 03:31:50.566"></status>
</kw>
<msg timestamp="20160205 03:31:50.571" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160205 03:31:50.570" starttime="20160205 03:31:50.560"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.586" starttime="20160205 03:31:50.583"></status>
</kw>
<msg timestamp="20160205 03:31:50.588" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160205 03:31:50.587" starttime="20160205 03:31:50.572"></status>
</kw>
<msg timestamp="20160205 03:31:50.590" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160205 03:31:50.590" starttime="20160205 03:31:50.500"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:50.604" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160205 03:31:50.603" starttime="20160205 03:31:50.600"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.608" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:50.607" starttime="20160205 03:31:50.605"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.612" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:50.612" starttime="20160205 03:31:50.609"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.619" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:50.620" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:50.621" starttime="20160205 03:31:50.616"></status>
</kw>
<msg timestamp="20160205 03:31:50.623" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:50.624" level="INFO">${return_log_entry} = 2016-02-05 03:31:50,344 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:31:50.622" starttime="20160205 03:31:50.614"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.634" starttime="20160205 03:31:50.631"></status>
</kw>
<msg timestamp="20160205 03:31:50.635" level="INFO">${return_log_entry} = 2016-02-05 03:31:50,344 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:31:50.635" starttime="20160205 03:31:50.625"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.645" starttime="20160205 03:31:50.643"></status>
</kw>
<msg timestamp="20160205 03:31:50.646" level="INFO">${return_log_entry} = 2016-02-05 03:31:50,344 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:31:50.646" starttime="20160205 03:31:50.637"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.656" starttime="20160205 03:31:50.654"></status>
</kw>
<msg timestamp="20160205 03:31:50.658" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:31:50.657" starttime="20160205 03:31:50.648"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.671" starttime="20160205 03:31:50.669"></status>
</kw>
<msg timestamp="20160205 03:31:50.673" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:31:50.672" starttime="20160205 03:31:50.659"></status>
</kw>
<msg timestamp="20160205 03:31:50.675" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160205 03:31:50.675" starttime="20160205 03:31:50.592"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:50.688" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160205 03:31:50.687" starttime="20160205 03:31:50.684"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.692" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:50.691" starttime="20160205 03:31:50.689"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.696" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:50.695" starttime="20160205 03:31:50.693"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:50.701" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:50.703" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:50.704" starttime="20160205 03:31:50.699"></status>
</kw>
<msg timestamp="20160205 03:31:50.705" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:50.706" level="INFO">${return_log_entry} = 2016-02-05 03:31:50,346 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:31:50.705" starttime="20160205 03:31:50.697"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.715" starttime="20160205 03:31:50.713"></status>
</kw>
<msg timestamp="20160205 03:31:50.717" level="INFO">${return_log_entry} = 2016-02-05 03:31:50,346 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:31:50.716" starttime="20160205 03:31:50.707"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.726" starttime="20160205 03:31:50.724"></status>
</kw>
<msg timestamp="20160205 03:31:50.728" level="INFO">${return_log_entry} = 2016-02-05 03:31:50,346 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:31:50.727" starttime="20160205 03:31:50.718"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.738" starttime="20160205 03:31:50.735"></status>
</kw>
<msg timestamp="20160205 03:31:50.740" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160205 03:31:50.739" starttime="20160205 03:31:50.729"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.752" starttime="20160205 03:31:50.751"></status>
</kw>
<msg timestamp="20160205 03:31:50.753" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160205 03:31:50.753" starttime="20160205 03:31:50.741"></status>
</kw>
<msg timestamp="20160205 03:31:50.754" level="INFO">${currencyId} = 101000</msg>
<status status="PASS" endtime="20160205 03:31:50.754" starttime="20160205 03:31:50.677"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.760" starttime="20160205 03:31:50.759"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.761" starttime="20160205 03:31:50.760"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.762" starttime="20160205 03:31:50.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:31:50.768" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:31:50.769" starttime="20160205 03:31:50.767"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:50.769" starttime="20160205 03:31:50.766"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:50.770" starttime="20160205 03:31:50.763"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:50.770" starttime="20160205 03:31:50.755"></status>
</kw>
<msg timestamp="20160205 03:31:50.772" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160205 03:31:50.773" level="INFO">${accId} = 37295</msg>
<msg timestamp="20160205 03:31:50.773" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160205 03:31:50.773" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160205 03:31:50.773" level="INFO">${curr} = 101000</msg>
<status status="PASS" endtime="20160205 03:31:50.772" starttime="20160205 03:31:50.046"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.775" starttime="20160205 03:31:50.774"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:50.776" starttime="20160205 03:31:50.775"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:50.778" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160205 03:31:50.779" starttime="20160205 03:31:50.777"></status>
</kw>
<doc>Test will make a MOC call to the busy B party.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:31:50.779" starttime="20160205 03:31:30.250"></status>
</test>
<doc>Testing the prepaid MOC call to the busy called party (called party in another call)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:31:50.784" starttime="20160205 03:31:24.861"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:31:50.792" starttime="20160205 03:31:24.824"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoAnswer" id="s1-s1-s1-s3-s1-s3" name="MOC PREPAID ONNET-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoAnswer/MOC_PREPAID_ONNET-NoAnswer-robot-suite.txt" id="s1-s1-s1-s3-s1-s3-s1" name="MOC PREPAID ONNET-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:31:51.100" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:31:51.104" level="INFO">${date} = Fri Feb  5 03:31:51 CET 2016</msg>
<status status="PASS" endtime="20160205 03:31:51.103" starttime="20160205 03:31:51.090"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:51.107" level="INFO">Date and time: Fri Feb  5 03:31:51 CET 2016</msg>
<status status="PASS" endtime="20160205 03:31:51.108" starttime="20160205 03:31:51.105"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:51.112" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160205 03:31:51.114" starttime="20160205 03:31:51.110"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:51.147" starttime="20160205 03:31:51.146"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:51.203" starttime="20160205 03:31:51.151"></status>
</kw>
<msg timestamp="20160205 03:31:51.205" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160205 03:31:51.205" starttime="20160205 03:31:51.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:31:51.217" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:31:51.725" level="INFO">Read output: Last login: Fri Feb  5 02:31:25 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:31:51.726" starttime="20160205 03:31:51.214"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:51.728" starttime="20160205 03:31:51.207"></status>
</kw>
<msg timestamp="20160205 03:31:51.730" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160205 03:31:51.729" starttime="20160205 03:31:51.141"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:31:51.739" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:31:51.738" starttime="20160205 03:31:51.732"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:31:51.743" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160205 03:31:52.272" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:31:52.276" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:31:52.274" starttime="20160205 03:31:51.740"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:52.283" starttime="20160205 03:31:52.280"></status>
</kw>
<msg timestamp="20160205 03:31:52.285" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:31:52.286" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:31:52.284" starttime="20160205 03:31:52.277"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:52.296" starttime="20160205 03:31:52.294"></status>
</kw>
<msg timestamp="20160205 03:31:52.297" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:52.297" starttime="20160205 03:31:52.287"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:31:52.302" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:31:52.301" starttime="20160205 03:31:52.299"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:31:52.306" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:31:52.306" starttime="20160205 03:31:52.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:52.309" starttime="20160205 03:31:52.308"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:52.321" starttime="20160205 03:31:52.318"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:31:52.329" starttime="20160205 03:31:52.322"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:52.330" starttime="20160205 03:31:52.311"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:52.340" starttime="20160205 03:31:52.337"></status>
</kw>
<msg timestamp="20160205 03:31:52.341" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:31:52.341" starttime="20160205 03:31:52.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:52.345" starttime="20160205 03:31:52.343"></status>
</kw>
<msg timestamp="20160205 03:31:52.348" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:31:52.349" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:31:52.347" starttime="20160205 03:31:51.129"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:52.405" starttime="20160205 03:31:52.403"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:52.460" starttime="20160205 03:31:52.414"></status>
</kw>
<msg timestamp="20160205 03:31:52.461" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160205 03:31:52.461" starttime="20160205 03:31:52.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:31:52.467" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:31:52.982" level="INFO">Read output: Last login: Fri Feb  5 02:31:26 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:31:52.982" starttime="20160205 03:31:52.466"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:52.983" starttime="20160205 03:31:52.462"></status>
</kw>
<msg timestamp="20160205 03:31:52.984" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160205 03:31:52.984" starttime="20160205 03:31:52.394"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:31:52.988" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:31:52.988" starttime="20160205 03:31:52.985"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:31:52.990" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:31:53.454" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:31:53.457" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:31:53.456" starttime="20160205 03:31:52.989"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:53.465" starttime="20160205 03:31:53.461"></status>
</kw>
<msg timestamp="20160205 03:31:53.467" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:31:53.467" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:31:53.466" starttime="20160205 03:31:53.459"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:53.478" starttime="20160205 03:31:53.476"></status>
</kw>
<msg timestamp="20160205 03:31:53.480" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:53.479" starttime="20160205 03:31:53.469"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:31:53.484" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:31:53.483" starttime="20160205 03:31:53.481"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:31:53.489" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:31:53.488" starttime="20160205 03:31:53.485"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:53.492" starttime="20160205 03:31:53.490"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:53.503" starttime="20160205 03:31:53.501"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:31:53.508" starttime="20160205 03:31:53.505"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:53.510" starttime="20160205 03:31:53.493"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:53.520" starttime="20160205 03:31:53.517"></status>
</kw>
<msg timestamp="20160205 03:31:53.522" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:31:53.521" starttime="20160205 03:31:53.511"></status>
</kw>
<msg timestamp="20160205 03:31:53.525" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:31:53.526" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:31:53.524" starttime="20160205 03:31:52.367"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:53.583" starttime="20160205 03:31:53.581"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:53.647" starttime="20160205 03:31:53.591"></status>
</kw>
<msg timestamp="20160205 03:31:53.650" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160205 03:31:53.649" starttime="20160205 03:31:53.584"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:31:53.660" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:31:54.399" level="INFO">Read output: Last login: Fri Feb  5 02:31:28 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:31:54.400" starttime="20160205 03:31:53.658"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:54.401" starttime="20160205 03:31:53.651"></status>
</kw>
<msg timestamp="20160205 03:31:54.403" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160205 03:31:54.402" starttime="20160205 03:31:53.571"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:31:54.407" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:31:54.407" starttime="20160205 03:31:54.404"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:31:54.409" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:31:54.620" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:31:54.621" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:31:54.621" starttime="20160205 03:31:54.408"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:54.625" starttime="20160205 03:31:54.623"></status>
</kw>
<msg timestamp="20160205 03:31:54.626" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:31:54.626" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:31:54.625" starttime="20160205 03:31:54.622"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:54.631" starttime="20160205 03:31:54.630"></status>
</kw>
<msg timestamp="20160205 03:31:54.632" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:54.631" starttime="20160205 03:31:54.627"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:31:54.634" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:31:54.633" starttime="20160205 03:31:54.632"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:31:54.636" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:31:54.635" starttime="20160205 03:31:54.634"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:54.637" starttime="20160205 03:31:54.636"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:54.646" starttime="20160205 03:31:54.644"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:31:54.647" starttime="20160205 03:31:54.646"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:54.649" starttime="20160205 03:31:54.638"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:54.654" starttime="20160205 03:31:54.653"></status>
</kw>
<msg timestamp="20160205 03:31:54.655" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:31:54.655" starttime="20160205 03:31:54.650"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:54.657" starttime="20160205 03:31:54.656"></status>
</kw>
<msg timestamp="20160205 03:31:54.658" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:31:54.659" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:31:54.657" starttime="20160205 03:31:53.544"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:54.685" starttime="20160205 03:31:54.684"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:54.740" starttime="20160205 03:31:54.688"></status>
</kw>
<msg timestamp="20160205 03:31:54.743" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160205 03:31:54.742" starttime="20160205 03:31:54.685"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:31:54.755" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:31:55.547" level="INFO">Read output: Last login: Fri Feb  5 02:31:29 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:31:55.548" starttime="20160205 03:31:54.752"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:55.550" starttime="20160205 03:31:54.744"></status>
</kw>
<msg timestamp="20160205 03:31:55.552" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160205 03:31:55.551" starttime="20160205 03:31:54.679"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:31:55.556" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:31:55.556" starttime="20160205 03:31:55.552"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:31:55.558" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:31:55.615" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:31:55.616" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:31:55.616" starttime="20160205 03:31:55.557"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.619" starttime="20160205 03:31:55.618"></status>
</kw>
<msg timestamp="20160205 03:31:55.620" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:31:55.620" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:31:55.620" starttime="20160205 03:31:55.617"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.625" starttime="20160205 03:31:55.624"></status>
</kw>
<msg timestamp="20160205 03:31:55.625" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:55.625" starttime="20160205 03:31:55.621"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:31:55.628" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:31:55.628" starttime="20160205 03:31:55.626"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:31:55.631" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:31:55.631" starttime="20160205 03:31:55.629"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.633" starttime="20160205 03:31:55.632"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.642" starttime="20160205 03:31:55.640"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.646" starttime="20160205 03:31:55.643"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:55.647" starttime="20160205 03:31:55.635"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.654" starttime="20160205 03:31:55.652"></status>
</kw>
<msg timestamp="20160205 03:31:55.655" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:31:55.655" starttime="20160205 03:31:55.648"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.657" starttime="20160205 03:31:55.656"></status>
</kw>
<msg timestamp="20160205 03:31:55.660" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:31:55.660" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:31:55.659" starttime="20160205 03:31:54.667"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:55.663" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:31:55.664" starttime="20160205 03:31:55.661"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:55.668" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:31:55.670" starttime="20160205 03:31:55.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:55.674" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:31:55.675" starttime="20160205 03:31:55.671"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:55.680" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:31:55.681" starttime="20160205 03:31:55.677"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:31:55.725" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:31:55.727" starttime="20160205 03:31:55.683"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:31:55.732" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:31:55.733" starttime="20160205 03:31:55.729"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:31:55.738" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:31:55.738" starttime="20160205 03:31:55.735"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:31:55.743" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:31:55.743" starttime="20160205 03:31:55.740"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.759" starttime="20160205 03:31:55.753"></status>
</kw>
<msg timestamp="20160205 03:31:55.761" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:31:55.760" starttime="20160205 03:31:55.745"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:31:55.766" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:31:55.767" starttime="20160205 03:31:55.763"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:55.768" starttime="20160205 03:31:51.084"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s3-s1-t1" name="Run MOC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.784" starttime="20160205 03:31:55.782"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:31:55.788" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:31:55.787" starttime="20160205 03:31:55.786"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:31:55.805" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 03:31:55.806" starttime="20160205 03:31:55.803"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:31:55.809" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:31:55.810" starttime="20160205 03:31:55.807"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:31:55.813" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:31:55.814" starttime="20160205 03:31:55.811"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:31:55.818" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 03:31:55.818" starttime="20160205 03:31:55.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:31:55.822" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 03:31:55.823" starttime="20160205 03:31:55.820"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:31:55.826" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 03:31:55.827" starttime="20160205 03:31:55.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:31:55.830" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:31:55.831" starttime="20160205 03:31:55.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:31:55.834" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 03:31:55.835" starttime="20160205 03:31:55.832"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:31:55.839" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:31:55.839" starttime="20160205 03:31:55.836"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:31:55.843" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:31:55.843" starttime="20160205 03:31:55.841"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:55.859" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:55.860" starttime="20160205 03:31:55.855"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:55.861" starttime="20160205 03:31:55.853"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:55.867" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:55.868" starttime="20160205 03:31:55.864"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:55.869" starttime="20160205 03:31:55.862"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:31:55.875" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:55.876" starttime="20160205 03:31:55.872"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:55.877" starttime="20160205 03:31:55.870"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:55.878" starttime="20160205 03:31:55.846"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:31:55.880" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:31:55.880" starttime="20160205 03:31:55.878"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.882" starttime="20160205 03:31:55.881"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.884" starttime="20160205 03:31:55.882"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.885" starttime="20160205 03:31:55.884"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.887" starttime="20160205 03:31:55.886"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.888" starttime="20160205 03:31:55.887"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.890" starttime="20160205 03:31:55.889"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.891" starttime="20160205 03:31:55.890"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.893" starttime="20160205 03:31:55.892"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.895" starttime="20160205 03:31:55.894"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.897" starttime="20160205 03:31:55.895"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.898" starttime="20160205 03:31:55.897"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:55.900" starttime="20160205 03:31:55.899"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:31:55.902" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:31:57.414" level="INFO">03:31:57,409 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:57.415" starttime="20160205 03:31:55.901"></status>
</kw>
<msg timestamp="20160205 03:31:57.419" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:57.420" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:31:57.417" starttime="20160205 03:31:55.901"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:31:57.433" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:31:57.432" starttime="20160205 03:31:57.429"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:57.437" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:31:57.436" starttime="20160205 03:31:57.434"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:31:57.442" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:31:57.441" starttime="20160205 03:31:57.439"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:31:57.448" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:31:57.449" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:31:57.450" starttime="20160205 03:31:57.445"></status>
</kw>
<msg timestamp="20160205 03:31:57.452" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:31:57.453" level="INFO">${return_log_entry} = 2016-02-05 03:31:57,409 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:57.451" starttime="20160205 03:31:57.443"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:57.463" starttime="20160205 03:31:57.461"></status>
</kw>
<msg timestamp="20160205 03:31:57.465" level="INFO">${return_log_entry} = 2016-02-05 03:31:57,409 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:57.464" starttime="20160205 03:31:57.454"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:57.475" starttime="20160205 03:31:57.473"></status>
</kw>
<msg timestamp="20160205 03:31:57.477" level="INFO">${return_log_entry} = 2016-02-05 03:31:57,409 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:31:57.476" starttime="20160205 03:31:57.467"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:57.488" starttime="20160205 03:31:57.485"></status>
</kw>
<msg timestamp="20160205 03:31:57.490" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:57.489" starttime="20160205 03:31:57.478"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:57.503" starttime="20160205 03:31:57.502"></status>
</kw>
<msg timestamp="20160205 03:31:57.504" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:57.503" starttime="20160205 03:31:57.491"></status>
</kw>
<msg timestamp="20160205 03:31:57.505" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:31:57.505" starttime="20160205 03:31:57.422"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:57.510" starttime="20160205 03:31:57.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:57.511" starttime="20160205 03:31:57.511"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:57.513" starttime="20160205 03:31:57.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:31:57.519" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:31:57.519" starttime="20160205 03:31:57.517"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:57.520" starttime="20160205 03:31:57.516"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:57.520" starttime="20160205 03:31:57.513"></status>
</kw>
<status status="PASS" endtime="20160205 03:31:57.521" starttime="20160205 03:31:57.506"></status>
</kw>
<msg timestamp="20160205 03:31:57.522" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:31:57.522" starttime="20160205 03:31:55.791"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:31:57.524" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:31:57.525" starttime="20160205 03:31:57.523"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:57.526" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:31:57.527" starttime="20160205 03:31:57.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC NoAnswer *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:57.528" starttime="20160205 03:31:57.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC NoAnswer call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:31:57.529" level="INFO">Running the MOC NoAnswer call...</msg>
<status status="PASS" endtime="20160205 03:31:57.530" starttime="20160205 03:31:57.529"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC NoAnswer">
<doc>Runs an NoAnswer MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-noanswer</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:31:57.545" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:31:57.545" starttime="20160205 03:31:57.543"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:31:57.547" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:31:57.547" starttime="20160205 03:31:57.546"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:31:57.549" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:31:57.549" starttime="20160205 03:31:57.548"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:31:57.551" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-noanswer.cgs</msg>
<status status="PASS" endtime="20160205 03:31:57.551" starttime="20160205 03:31:57.550"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:57.552" starttime="20160205 03:31:57.552"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:31:57.555" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:57.556" starttime="20160205 03:31:57.553"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:57.557" starttime="20160205 03:31:57.556"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:31:57.560" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:57.560" starttime="20160205 03:31:57.558"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:31:57.563" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:57.563" starttime="20160205 03:31:57.561"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:57.565" starttime="20160205 03:31:57.564"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:31:57.567" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:57.567" starttime="20160205 03:31:57.565"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:31:57.570" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:31:57.571" starttime="20160205 03:31:57.568"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:31:57.572" starttime="20160205 03:31:57.571"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:31:57.580" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-noanswer.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:32:05.088" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:32:05.084" starttime="20160205 03:31:57.573"></status>
</kw>
<msg timestamp="20160205 03:32:05.092" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:32:05.090" starttime="20160205 03:31:57.538"></status>
</kw>
<msg timestamp="20160205 03:32:05.095" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:32:05.094" starttime="20160205 03:31:57.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:05.100" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:32:05.101" starttime="20160205 03:32:05.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.106" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:05.107" starttime="20160205 03:32:05.103"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.110" starttime="20160205 03:32:05.109"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.138" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:05.139" starttime="20160205 03:32:05.134"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:05.140" starttime="20160205 03:32:05.132"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.146" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:05.147" starttime="20160205 03:32:05.143"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:05.148" starttime="20160205 03:32:05.141"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.154" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:05.155" starttime="20160205 03:32:05.152"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:05.156" starttime="20160205 03:32:05.150"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:05.158" starttime="20160205 03:32:05.125"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.162" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:32:05.163" starttime="20160205 03:32:05.159"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.166" starttime="20160205 03:32:05.164"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.170" starttime="20160205 03:32:05.168"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.174" starttime="20160205 03:32:05.172"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.177" starttime="20160205 03:32:05.176"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.180" starttime="20160205 03:32:05.179"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.184" starttime="20160205 03:32:05.182"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:32:05.190" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000']</msg>
<msg timestamp="20160205 03:32:05.459" level="INFO">03:32:05,436 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
03:32:05,439 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
03:32:05,441 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37297
03:32:05,444 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000
03:32:05,447 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
03:32:05,449 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
03:32:05,452 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
03:32:05,455 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=3</msg>
<status status="PASS" endtime="20160205 03:32:05.460" starttime="20160205 03:32:05.188"></status>
</kw>
<msg timestamp="20160205 03:32:05.462" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:05.463" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:32:05.461" starttime="20160205 03:32:05.186"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:05.476" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:32:05.475" starttime="20160205 03:32:05.472"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.480" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:05.480" starttime="20160205 03:32:05.477"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.485" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:05.484" starttime="20160205 03:32:05.482"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.492" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:05.493" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:05.494" starttime="20160205 03:32:05.489"></status>
</kw>
<msg timestamp="20160205 03:32:05.496" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:05.497" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,436 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:05.495" starttime="20160205 03:32:05.486"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.509" starttime="20160205 03:32:05.506"></status>
</kw>
<msg timestamp="20160205 03:32:05.511" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,436 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:05.510" starttime="20160205 03:32:05.498"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.521" starttime="20160205 03:32:05.519"></status>
</kw>
<msg timestamp="20160205 03:32:05.523" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,436 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:05.522" starttime="20160205 03:32:05.512"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.534" starttime="20160205 03:32:05.531"></status>
</kw>
<msg timestamp="20160205 03:32:05.536" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:05.535" starttime="20160205 03:32:05.524"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.551" starttime="20160205 03:32:05.548"></status>
</kw>
<msg timestamp="20160205 03:32:05.553" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:05.552" starttime="20160205 03:32:05.537"></status>
</kw>
<msg timestamp="20160205 03:32:05.555" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:05.554" starttime="20160205 03:32:05.465"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:05.569" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160205 03:32:05.568" starttime="20160205 03:32:05.565"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.573" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:05.572" starttime="20160205 03:32:05.570"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.577" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:05.577" starttime="20160205 03:32:05.574"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.584" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:05.585" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:05.586" starttime="20160205 03:32:05.581"></status>
</kw>
<msg timestamp="20160205 03:32:05.588" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:05.589" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,439 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:32:05.587" starttime="20160205 03:32:05.579"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.600" starttime="20160205 03:32:05.597"></status>
</kw>
<msg timestamp="20160205 03:32:05.602" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,439 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:32:05.601" starttime="20160205 03:32:05.591"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.612" starttime="20160205 03:32:05.610"></status>
</kw>
<msg timestamp="20160205 03:32:05.614" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,439 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:32:05.613" starttime="20160205 03:32:05.603"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.625" starttime="20160205 03:32:05.622"></status>
</kw>
<msg timestamp="20160205 03:32:05.627" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:32:05.626" starttime="20160205 03:32:05.615"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.641" starttime="20160205 03:32:05.639"></status>
</kw>
<msg timestamp="20160205 03:32:05.643" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:32:05.642" starttime="20160205 03:32:05.628"></status>
</kw>
<msg timestamp="20160205 03:32:05.646" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160205 03:32:05.645" starttime="20160205 03:32:05.557"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:05.659" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160205 03:32:05.658" starttime="20160205 03:32:05.655"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.663" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:05.663" starttime="20160205 03:32:05.660"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.668" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:05.667" starttime="20160205 03:32:05.665"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.674" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:05.676" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:05.677" starttime="20160205 03:32:05.671"></status>
</kw>
<msg timestamp="20160205 03:32:05.678" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:05.679" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,444 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160205 03:32:05.678" starttime="20160205 03:32:05.669"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.689" starttime="20160205 03:32:05.687"></status>
</kw>
<msg timestamp="20160205 03:32:05.691" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,444 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160205 03:32:05.690" starttime="20160205 03:32:05.680"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.701" starttime="20160205 03:32:05.699"></status>
</kw>
<msg timestamp="20160205 03:32:05.703" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,444 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160205 03:32:05.702" starttime="20160205 03:32:05.692"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.714" starttime="20160205 03:32:05.711"></status>
</kw>
<msg timestamp="20160205 03:32:05.716" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160205 03:32:05.715" starttime="20160205 03:32:05.704"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.730" starttime="20160205 03:32:05.728"></status>
</kw>
<msg timestamp="20160205 03:32:05.732" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160205 03:32:05.731" starttime="20160205 03:32:05.717"></status>
</kw>
<msg timestamp="20160205 03:32:05.734" level="INFO">${imsi} = 334030880001000</msg>
<status status="PASS" endtime="20160205 03:32:05.734" starttime="20160205 03:32:05.648"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:05.748" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160205 03:32:05.748" starttime="20160205 03:32:05.744"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.753" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:05.752" starttime="20160205 03:32:05.750"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.757" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:05.756" starttime="20160205 03:32:05.754"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.763" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:05.765" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:05.766" starttime="20160205 03:32:05.761"></status>
</kw>
<msg timestamp="20160205 03:32:05.768" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:05.768" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,441 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37297</msg>
<status status="PASS" endtime="20160205 03:32:05.767" starttime="20160205 03:32:05.758"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.778" starttime="20160205 03:32:05.776"></status>
</kw>
<msg timestamp="20160205 03:32:05.780" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,441 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37297</msg>
<status status="PASS" endtime="20160205 03:32:05.779" starttime="20160205 03:32:05.770"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.790" starttime="20160205 03:32:05.788"></status>
</kw>
<msg timestamp="20160205 03:32:05.792" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,441 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37297</msg>
<status status="PASS" endtime="20160205 03:32:05.792" starttime="20160205 03:32:05.782"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.803" starttime="20160205 03:32:05.800"></status>
</kw>
<msg timestamp="20160205 03:32:05.805" level="INFO">${resultCode} = 37297</msg>
<status status="PASS" endtime="20160205 03:32:05.804" starttime="20160205 03:32:05.794"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.819" starttime="20160205 03:32:05.816"></status>
</kw>
<msg timestamp="20160205 03:32:05.820" level="INFO">${resultCode} = 37297</msg>
<status status="PASS" endtime="20160205 03:32:05.820" starttime="20160205 03:32:05.806"></status>
</kw>
<msg timestamp="20160205 03:32:05.823" level="INFO">${id} = 37297</msg>
<status status="PASS" endtime="20160205 03:32:05.822" starttime="20160205 03:32:05.736"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:05.836" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160205 03:32:05.835" starttime="20160205 03:32:05.832"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.840" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:05.839" starttime="20160205 03:32:05.837"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.844" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:05.844" starttime="20160205 03:32:05.841"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.851" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:05.852" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:05.853" starttime="20160205 03:32:05.848"></status>
</kw>
<msg timestamp="20160205 03:32:05.855" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:05.856" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,447 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:32:05.854" starttime="20160205 03:32:05.846"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.865" starttime="20160205 03:32:05.863"></status>
</kw>
<msg timestamp="20160205 03:32:05.867" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,447 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:32:05.867" starttime="20160205 03:32:05.857"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.877" starttime="20160205 03:32:05.875"></status>
</kw>
<msg timestamp="20160205 03:32:05.878" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,447 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:32:05.877" starttime="20160205 03:32:05.869"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.883" starttime="20160205 03:32:05.881"></status>
</kw>
<msg timestamp="20160205 03:32:05.883" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:32:05.883" starttime="20160205 03:32:05.878"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.891" starttime="20160205 03:32:05.890"></status>
</kw>
<msg timestamp="20160205 03:32:05.891" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:32:05.891" starttime="20160205 03:32:05.884"></status>
</kw>
<msg timestamp="20160205 03:32:05.893" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:32:05.892" starttime="20160205 03:32:05.825"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:05.899" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160205 03:32:05.898" starttime="20160205 03:32:05.897"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.900" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:05.900" starttime="20160205 03:32:05.899"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.902" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:05.902" starttime="20160205 03:32:05.901"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.905" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:05.906" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:05.906" starttime="20160205 03:32:05.904"></status>
</kw>
<msg timestamp="20160205 03:32:05.907" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:05.907" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,449 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:32:05.907" starttime="20160205 03:32:05.903"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.912" starttime="20160205 03:32:05.911"></status>
</kw>
<msg timestamp="20160205 03:32:05.913" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,449 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:32:05.912" starttime="20160205 03:32:05.908"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.917" starttime="20160205 03:32:05.916"></status>
</kw>
<msg timestamp="20160205 03:32:05.918" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,449 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:32:05.918" starttime="20160205 03:32:05.913"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.923" starttime="20160205 03:32:05.922"></status>
</kw>
<msg timestamp="20160205 03:32:05.924" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:32:05.923" starttime="20160205 03:32:05.919"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.930" starttime="20160205 03:32:05.929"></status>
</kw>
<msg timestamp="20160205 03:32:05.931" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:32:05.931" starttime="20160205 03:32:05.924"></status>
</kw>
<msg timestamp="20160205 03:32:05.932" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160205 03:32:05.932" starttime="20160205 03:32:05.894"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:05.938" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160205 03:32:05.938" starttime="20160205 03:32:05.936"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.940" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:05.940" starttime="20160205 03:32:05.939"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.942" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:05.941" starttime="20160205 03:32:05.940"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:05.945" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:05.945" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:05.946" starttime="20160205 03:32:05.943"></status>
</kw>
<msg timestamp="20160205 03:32:05.947" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:05.947" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,452 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:05.946" starttime="20160205 03:32:05.942"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.951" starttime="20160205 03:32:05.950"></status>
</kw>
<msg timestamp="20160205 03:32:05.952" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,452 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:05.952" starttime="20160205 03:32:05.948"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.957" starttime="20160205 03:32:05.956"></status>
</kw>
<msg timestamp="20160205 03:32:05.958" level="INFO">${return_log_entry} = 2016-02-05 03:32:05,452 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:05.957" starttime="20160205 03:32:05.953"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.962" starttime="20160205 03:32:05.961"></status>
</kw>
<msg timestamp="20160205 03:32:05.963" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:05.963" starttime="20160205 03:32:05.958"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.969" starttime="20160205 03:32:05.968"></status>
</kw>
<msg timestamp="20160205 03:32:05.970" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:05.970" starttime="20160205 03:32:05.964"></status>
</kw>
<msg timestamp="20160205 03:32:05.971" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:05.971" starttime="20160205 03:32:05.933"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.976" starttime="20160205 03:32:05.976"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.978" starttime="20160205 03:32:05.977"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:05.979" starttime="20160205 03:32:05.978"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:32:05.985" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:32:05.986" starttime="20160205 03:32:05.984"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:05.986" starttime="20160205 03:32:05.983"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:05.987" starttime="20160205 03:32:05.980"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:05.987" starttime="20160205 03:32:05.972"></status>
</kw>
<msg timestamp="20160205 03:32:05.989" level="INFO">${rc} = OK</msg>
<msg timestamp="20160205 03:32:05.989" level="INFO">${provId} = 1</msg>
<msg timestamp="20160205 03:32:05.990" level="INFO">${imsi} = 334030880001000</msg>
<msg timestamp="20160205 03:32:05.990" level="INFO">${id} = 37297</msg>
<msg timestamp="20160205 03:32:05.990" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160205 03:32:05.991" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160205 03:32:05.991" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:05.989" starttime="20160205 03:32:05.114"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.003" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:06.003" starttime="20160205 03:32:06.001"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:06.004" starttime="20160205 03:32:06.000"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.006" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:06.007" starttime="20160205 03:32:06.005"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:06.007" starttime="20160205 03:32:06.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.010" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:06.011" starttime="20160205 03:32:06.009"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:06.011" starttime="20160205 03:32:06.008"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:06.012" starttime="20160205 03:32:05.997"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.014" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:32:06.014" starttime="20160205 03:32:06.013"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.016" starttime="20160205 03:32:06.015"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.018" starttime="20160205 03:32:06.017"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.020" starttime="20160205 03:32:06.018"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.021" starttime="20160205 03:32:06.020"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.022" starttime="20160205 03:32:06.022"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.024" starttime="20160205 03:32:06.023"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:32:06.026" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=37297']</msg>
<msg timestamp="20160205 03:32:06.321" level="INFO">03:32:06,305 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
03:32:06,308 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37298
03:32:06,311 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
03:32:06,314 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
03:32:06,317 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:32:06.322" starttime="20160205 03:32:06.026"></status>
</kw>
<msg timestamp="20160205 03:32:06.324" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:06.325" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:32:06.323" starttime="20160205 03:32:06.025"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:06.338" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:32:06.337" starttime="20160205 03:32:06.334"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.342" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:06.341" starttime="20160205 03:32:06.339"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.346" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:06.346" starttime="20160205 03:32:06.343"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.353" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:06.354" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:06.355" starttime="20160205 03:32:06.350"></status>
</kw>
<msg timestamp="20160205 03:32:06.357" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:06.358" level="INFO">${return_log_entry} = 2016-02-05 03:32:06,305 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:06.356" starttime="20160205 03:32:06.348"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.368" starttime="20160205 03:32:06.365"></status>
</kw>
<msg timestamp="20160205 03:32:06.370" level="INFO">${return_log_entry} = 2016-02-05 03:32:06,305 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:06.369" starttime="20160205 03:32:06.359"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.380" starttime="20160205 03:32:06.378"></status>
</kw>
<msg timestamp="20160205 03:32:06.382" level="INFO">${return_log_entry} = 2016-02-05 03:32:06,305 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:06.381" starttime="20160205 03:32:06.371"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.392" starttime="20160205 03:32:06.390"></status>
</kw>
<msg timestamp="20160205 03:32:06.394" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:06.393" starttime="20160205 03:32:06.383"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.408" starttime="20160205 03:32:06.406"></status>
</kw>
<msg timestamp="20160205 03:32:06.410" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:06.409" starttime="20160205 03:32:06.396"></status>
</kw>
<msg timestamp="20160205 03:32:06.412" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:06.412" starttime="20160205 03:32:06.327"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:06.426" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160205 03:32:06.425" starttime="20160205 03:32:06.422"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.430" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:06.429" starttime="20160205 03:32:06.427"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.434" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:06.433" starttime="20160205 03:32:06.431"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.440" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:06.442" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:06.443" starttime="20160205 03:32:06.438"></status>
</kw>
<msg timestamp="20160205 03:32:06.445" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:06.445" level="INFO">${return_log_entry} = 2016-02-05 03:32:06,308 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37298</msg>
<status status="PASS" endtime="20160205 03:32:06.444" starttime="20160205 03:32:06.435"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.455" starttime="20160205 03:32:06.453"></status>
</kw>
<msg timestamp="20160205 03:32:06.457" level="INFO">${return_log_entry} = 2016-02-05 03:32:06,308 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37298</msg>
<status status="PASS" endtime="20160205 03:32:06.456" starttime="20160205 03:32:06.447"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.467" starttime="20160205 03:32:06.464"></status>
</kw>
<msg timestamp="20160205 03:32:06.469" level="INFO">${return_log_entry} = 2016-02-05 03:32:06,308 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37298</msg>
<status status="PASS" endtime="20160205 03:32:06.468" starttime="20160205 03:32:06.458"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.479" starttime="20160205 03:32:06.476"></status>
</kw>
<msg timestamp="20160205 03:32:06.481" level="INFO">${resultCode} = 37298</msg>
<status status="PASS" endtime="20160205 03:32:06.480" starttime="20160205 03:32:06.470"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.495" starttime="20160205 03:32:06.492"></status>
</kw>
<msg timestamp="20160205 03:32:06.497" level="INFO">${resultCode} = 37298</msg>
<status status="PASS" endtime="20160205 03:32:06.496" starttime="20160205 03:32:06.482"></status>
</kw>
<msg timestamp="20160205 03:32:06.499" level="INFO">${accountId} = 37298</msg>
<status status="PASS" endtime="20160205 03:32:06.498" starttime="20160205 03:32:06.415"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:06.507" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160205 03:32:06.506" starttime="20160205 03:32:06.505"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.509" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:06.508" starttime="20160205 03:32:06.507"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.510" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:06.510" starttime="20160205 03:32:06.509"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.513" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:06.514" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:06.515" starttime="20160205 03:32:06.512"></status>
</kw>
<msg timestamp="20160205 03:32:06.515" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:06.516" level="INFO">${return_log_entry} = 2016-02-05 03:32:06,311 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:32:06.515" starttime="20160205 03:32:06.511"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.520" starttime="20160205 03:32:06.519"></status>
</kw>
<msg timestamp="20160205 03:32:06.521" level="INFO">${return_log_entry} = 2016-02-05 03:32:06,311 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:32:06.521" starttime="20160205 03:32:06.516"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.526" starttime="20160205 03:32:06.525"></status>
</kw>
<msg timestamp="20160205 03:32:06.527" level="INFO">${return_log_entry} = 2016-02-05 03:32:06,311 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:32:06.526" starttime="20160205 03:32:06.522"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.531" starttime="20160205 03:32:06.530"></status>
</kw>
<msg timestamp="20160205 03:32:06.532" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160205 03:32:06.532" starttime="20160205 03:32:06.527"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.539" starttime="20160205 03:32:06.538"></status>
</kw>
<msg timestamp="20160205 03:32:06.540" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160205 03:32:06.539" starttime="20160205 03:32:06.533"></status>
</kw>
<msg timestamp="20160205 03:32:06.541" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160205 03:32:06.541" starttime="20160205 03:32:06.501"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:06.547" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160205 03:32:06.547" starttime="20160205 03:32:06.545"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.549" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:06.548" starttime="20160205 03:32:06.547"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.551" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:06.550" starttime="20160205 03:32:06.549"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.553" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:06.554" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:06.555" starttime="20160205 03:32:06.552"></status>
</kw>
<msg timestamp="20160205 03:32:06.556" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:06.556" level="INFO">${return_log_entry} = 2016-02-05 03:32:06,314 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:32:06.555" starttime="20160205 03:32:06.551"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.560" starttime="20160205 03:32:06.559"></status>
</kw>
<msg timestamp="20160205 03:32:06.561" level="INFO">${return_log_entry} = 2016-02-05 03:32:06,314 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:32:06.561" starttime="20160205 03:32:06.556"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.566" starttime="20160205 03:32:06.565"></status>
</kw>
<msg timestamp="20160205 03:32:06.566" level="INFO">${return_log_entry} = 2016-02-05 03:32:06,314 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:32:06.566" starttime="20160205 03:32:06.562"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.571" starttime="20160205 03:32:06.570"></status>
</kw>
<msg timestamp="20160205 03:32:06.572" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:32:06.572" starttime="20160205 03:32:06.567"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.578" starttime="20160205 03:32:06.577"></status>
</kw>
<msg timestamp="20160205 03:32:06.579" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:32:06.579" starttime="20160205 03:32:06.573"></status>
</kw>
<msg timestamp="20160205 03:32:06.580" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160205 03:32:06.580" starttime="20160205 03:32:06.542"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:06.586" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160205 03:32:06.586" starttime="20160205 03:32:06.584"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.588" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:06.588" starttime="20160205 03:32:06.587"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.590" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:06.589" starttime="20160205 03:32:06.589"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.593" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:06.593" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:06.594" starttime="20160205 03:32:06.591"></status>
</kw>
<msg timestamp="20160205 03:32:06.595" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:06.595" level="INFO">${return_log_entry} = 2016-02-05 03:32:06,317 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:32:06.594" starttime="20160205 03:32:06.590"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.599" starttime="20160205 03:32:06.598"></status>
</kw>
<msg timestamp="20160205 03:32:06.600" level="INFO">${return_log_entry} = 2016-02-05 03:32:06,317 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:32:06.600" starttime="20160205 03:32:06.595"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.605" starttime="20160205 03:32:06.604"></status>
</kw>
<msg timestamp="20160205 03:32:06.606" level="INFO">${return_log_entry} = 2016-02-05 03:32:06,317 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:32:06.605" starttime="20160205 03:32:06.601"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.610" starttime="20160205 03:32:06.609"></status>
</kw>
<msg timestamp="20160205 03:32:06.611" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160205 03:32:06.611" starttime="20160205 03:32:06.606"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.617" starttime="20160205 03:32:06.616"></status>
</kw>
<msg timestamp="20160205 03:32:06.618" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160205 03:32:06.618" starttime="20160205 03:32:06.612"></status>
</kw>
<msg timestamp="20160205 03:32:06.619" level="INFO">${currencyId} = 101000</msg>
<status status="PASS" endtime="20160205 03:32:06.619" starttime="20160205 03:32:06.581"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.624" starttime="20160205 03:32:06.624"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.626" starttime="20160205 03:32:06.625"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.627" starttime="20160205 03:32:06.627"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:32:06.633" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:32:06.634" starttime="20160205 03:32:06.632"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:06.634" starttime="20160205 03:32:06.631"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:06.635" starttime="20160205 03:32:06.628"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:06.635" starttime="20160205 03:32:06.620"></status>
</kw>
<msg timestamp="20160205 03:32:06.637" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160205 03:32:06.638" level="INFO">${accId} = 37298</msg>
<msg timestamp="20160205 03:32:06.638" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160205 03:32:06.638" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160205 03:32:06.639" level="INFO">${curr} = 101000</msg>
<status status="PASS" endtime="20160205 03:32:06.637" starttime="20160205 03:32:05.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.640" starttime="20160205 03:32:06.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.641" starttime="20160205 03:32:06.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:06.643" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160205 03:32:06.644" starttime="20160205 03:32:06.642"></status>
</kw>
<doc>Test will make a MOC call in NoAnswer case

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:32:06.644" starttime="20160205 03:31:55.772"></status>
</test>
<doc>Testing the prepaid MOC call - NoAnswer

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:32:06.649" starttime="20160205 03:31:50.814"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:32:06.657" starttime="20160205 03:31:50.798"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration" id="s1-s1-s1-s3-s1-s4" name="MOC PREPAID ONNET-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/MOC_PREPAID_ONNET-ShortDuration-robot-suite.txt" id="s1-s1-s1-s3-s1-s4-s1" name="MOC PREPAID ONNET-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:32:06.830" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:32:06.834" level="INFO">${date} = Fri Feb  5 03:32:06 CET 2016</msg>
<status status="PASS" endtime="20160205 03:32:06.833" starttime="20160205 03:32:06.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:06.838" level="INFO">Date and time: Fri Feb  5 03:32:06 CET 2016</msg>
<status status="PASS" endtime="20160205 03:32:06.840" starttime="20160205 03:32:06.836"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:06.844" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160205 03:32:06.845" starttime="20160205 03:32:06.841"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.901" starttime="20160205 03:32:06.899"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:06.965" starttime="20160205 03:32:06.910"></status>
</kw>
<msg timestamp="20160205 03:32:06.970" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20160205 03:32:06.967" starttime="20160205 03:32:06.903"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:32:06.981" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:32:07.455" level="INFO">Read output: Last login: Fri Feb  5 02:31:51 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:32:07.456" starttime="20160205 03:32:06.979"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:07.457" starttime="20160205 03:32:06.972"></status>
</kw>
<msg timestamp="20160205 03:32:07.459" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20160205 03:32:07.458" starttime="20160205 03:32:06.890"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:32:07.464" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:32:07.463" starttime="20160205 03:32:07.460"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:32:07.466" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160205 03:32:07.888" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:32:07.890" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:32:07.889" starttime="20160205 03:32:07.464"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:07.898" starttime="20160205 03:32:07.894"></status>
</kw>
<msg timestamp="20160205 03:32:07.899" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:32:07.900" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:32:07.899" starttime="20160205 03:32:07.892"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:07.910" starttime="20160205 03:32:07.908"></status>
</kw>
<msg timestamp="20160205 03:32:07.912" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:07.911" starttime="20160205 03:32:07.902"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:32:07.916" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:32:07.915" starttime="20160205 03:32:07.913"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:32:07.920" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:32:07.920" starttime="20160205 03:32:07.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:07.923" starttime="20160205 03:32:07.922"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:07.936" starttime="20160205 03:32:07.933"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:32:07.941" starttime="20160205 03:32:07.937"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:07.943" starttime="20160205 03:32:07.925"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:07.952" starttime="20160205 03:32:07.950"></status>
</kw>
<msg timestamp="20160205 03:32:07.954" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:32:07.953" starttime="20160205 03:32:07.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:07.957" starttime="20160205 03:32:07.955"></status>
</kw>
<msg timestamp="20160205 03:32:07.961" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:32:07.961" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:32:07.959" starttime="20160205 03:32:06.863"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:08.018" starttime="20160205 03:32:08.016"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:08.083" starttime="20160205 03:32:08.027"></status>
</kw>
<msg timestamp="20160205 03:32:08.085" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20160205 03:32:08.084" starttime="20160205 03:32:08.020"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:32:08.095" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:32:08.549" level="INFO">Read output: Last login: Fri Feb  5 02:31:52 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:32:08.550" starttime="20160205 03:32:08.093"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:08.550" starttime="20160205 03:32:08.086"></status>
</kw>
<msg timestamp="20160205 03:32:08.552" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20160205 03:32:08.551" starttime="20160205 03:32:08.006"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:32:08.556" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:32:08.556" starttime="20160205 03:32:08.552"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:32:08.558" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:32:09.033" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:32:09.037" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:32:09.035" starttime="20160205 03:32:08.557"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:09.044" starttime="20160205 03:32:09.041"></status>
</kw>
<msg timestamp="20160205 03:32:09.046" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:32:09.047" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:32:09.046" starttime="20160205 03:32:09.039"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:09.057" starttime="20160205 03:32:09.055"></status>
</kw>
<msg timestamp="20160205 03:32:09.059" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:09.059" starttime="20160205 03:32:09.048"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:32:09.065" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:32:09.064" starttime="20160205 03:32:09.061"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:32:09.069" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:32:09.068" starttime="20160205 03:32:09.066"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:09.072" starttime="20160205 03:32:09.070"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:09.084" starttime="20160205 03:32:09.081"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:32:09.090" starttime="20160205 03:32:09.085"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:09.091" starttime="20160205 03:32:09.074"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:09.101" starttime="20160205 03:32:09.099"></status>
</kw>
<msg timestamp="20160205 03:32:09.103" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:32:09.102" starttime="20160205 03:32:09.092"></status>
</kw>
<msg timestamp="20160205 03:32:09.107" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:32:09.107" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:32:09.105" starttime="20160205 03:32:07.979"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:09.163" starttime="20160205 03:32:09.161"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:09.215" starttime="20160205 03:32:09.171"></status>
</kw>
<msg timestamp="20160205 03:32:09.216" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20160205 03:32:09.216" starttime="20160205 03:32:09.164"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:32:09.224" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:32:09.739" level="INFO">Read output: Last login: Fri Feb  5 02:31:54 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:32:09.741" starttime="20160205 03:32:09.221"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:09.742" starttime="20160205 03:32:09.217"></status>
</kw>
<msg timestamp="20160205 03:32:09.745" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20160205 03:32:09.744" starttime="20160205 03:32:09.151"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:32:09.754" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:32:09.753" starttime="20160205 03:32:09.747"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:32:09.756" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:32:09.969" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:32:09.971" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:32:09.970" starttime="20160205 03:32:09.755"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:09.974" starttime="20160205 03:32:09.973"></status>
</kw>
<msg timestamp="20160205 03:32:09.975" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:32:09.976" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:32:09.975" starttime="20160205 03:32:09.971"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:09.981" starttime="20160205 03:32:09.980"></status>
</kw>
<msg timestamp="20160205 03:32:09.982" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:09.981" starttime="20160205 03:32:09.977"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:32:09.984" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:32:09.983" starttime="20160205 03:32:09.982"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:32:09.989" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:32:09.989" starttime="20160205 03:32:09.984"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:09.990" starttime="20160205 03:32:09.990"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:09.996" starttime="20160205 03:32:09.995"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:32:09.998" starttime="20160205 03:32:09.997"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:09.999" starttime="20160205 03:32:09.992"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.004" starttime="20160205 03:32:10.003"></status>
</kw>
<msg timestamp="20160205 03:32:10.005" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:32:10.004" starttime="20160205 03:32:10.000"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.006" starttime="20160205 03:32:10.005"></status>
</kw>
<msg timestamp="20160205 03:32:10.008" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:32:10.008" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:32:10.007" starttime="20160205 03:32:09.125"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.033" starttime="20160205 03:32:10.032"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.079" starttime="20160205 03:32:10.037"></status>
</kw>
<msg timestamp="20160205 03:32:10.080" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20160205 03:32:10.080" starttime="20160205 03:32:10.034"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.085" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:32:10.575" level="INFO">Read output: Last login: Fri Feb  5 02:31:55 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:32:10.576" starttime="20160205 03:32:10.084"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:10.576" starttime="20160205 03:32:10.081"></status>
</kw>
<msg timestamp="20160205 03:32:10.578" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20160205 03:32:10.578" starttime="20160205 03:32:10.028"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:32:10.585" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:32:10.584" starttime="20160205 03:32:10.579"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:32:10.587" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:32:10.636" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:32:10.637" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:32:10.637" starttime="20160205 03:32:10.585"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.642" starttime="20160205 03:32:10.640"></status>
</kw>
<msg timestamp="20160205 03:32:10.644" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:32:10.644" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:32:10.643" starttime="20160205 03:32:10.638"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.651" starttime="20160205 03:32:10.650"></status>
</kw>
<msg timestamp="20160205 03:32:10.653" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:10.652" starttime="20160205 03:32:10.645"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:32:10.656" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:32:10.655" starttime="20160205 03:32:10.653"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:32:10.659" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:32:10.658" starttime="20160205 03:32:10.657"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.663" starttime="20160205 03:32:10.660"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.671" starttime="20160205 03:32:10.669"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.676" starttime="20160205 03:32:10.672"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:10.677" starttime="20160205 03:32:10.664"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.684" starttime="20160205 03:32:10.682"></status>
</kw>
<msg timestamp="20160205 03:32:10.685" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:32:10.684" starttime="20160205 03:32:10.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.687" starttime="20160205 03:32:10.686"></status>
</kw>
<msg timestamp="20160205 03:32:10.689" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:32:10.690" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:32:10.689" starttime="20160205 03:32:10.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:10.693" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:32:10.694" starttime="20160205 03:32:10.691"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:10.698" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:32:10.699" starttime="20160205 03:32:10.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:10.702" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:32:10.703" starttime="20160205 03:32:10.700"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:10.706" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:32:10.707" starttime="20160205 03:32:10.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:32:10.709" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:10.710" starttime="20160205 03:32:10.708"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:32:10.712" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:10.713" starttime="20160205 03:32:10.711"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:32:10.716" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:10.716" starttime="20160205 03:32:10.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:32:10.719" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:10.719" starttime="20160205 03:32:10.717"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.729" starttime="20160205 03:32:10.725"></status>
</kw>
<msg timestamp="20160205 03:32:10.731" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:32:10.730" starttime="20160205 03:32:10.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.734" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:32:10.734" starttime="20160205 03:32:10.731"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:10.735" starttime="20160205 03:32:06.821"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s4-s1-t1" name="Run MOC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.746" starttime="20160205 03:32:10.744"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:32:10.748" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:32:10.748" starttime="20160205 03:32:10.746"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.758" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 03:32:10.758" starttime="20160205 03:32:10.756"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.760" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:32:10.760" starttime="20160205 03:32:10.759"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.762" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:32:10.762" starttime="20160205 03:32:10.761"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.763" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160205 03:32:10.764" starttime="20160205 03:32:10.763"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.765" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 03:32:10.766" starttime="20160205 03:32:10.764"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.767" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 03:32:10.768" starttime="20160205 03:32:10.766"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.769" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:10.769" starttime="20160205 03:32:10.768"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.771" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 03:32:10.771" starttime="20160205 03:32:10.770"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.773" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:32:10.773" starttime="20160205 03:32:10.772"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.774" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:32:10.775" starttime="20160205 03:32:10.773"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.782" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:10.782" starttime="20160205 03:32:10.780"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:10.783" starttime="20160205 03:32:10.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.785" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:10.786" starttime="20160205 03:32:10.784"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:10.786" starttime="20160205 03:32:10.783"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.789" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:10.789" starttime="20160205 03:32:10.788"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:10.790" starttime="20160205 03:32:10.787"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:10.791" starttime="20160205 03:32:10.776"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:32:10.793" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:32:10.793" starttime="20160205 03:32:10.791"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.795" starttime="20160205 03:32:10.794"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.796" starttime="20160205 03:32:10.795"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.798" starttime="20160205 03:32:10.797"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.799" starttime="20160205 03:32:10.799"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.801" starttime="20160205 03:32:10.800"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.802" starttime="20160205 03:32:10.801"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.804" starttime="20160205 03:32:10.803"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.806" starttime="20160205 03:32:10.804"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.807" starttime="20160205 03:32:10.806"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.809" starttime="20160205 03:32:10.808"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.811" starttime="20160205 03:32:10.809"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:10.812" starttime="20160205 03:32:10.811"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:32:10.815" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:32:13.625" level="INFO">03:32:13,621 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:13.627" starttime="20160205 03:32:10.814"></status>
</kw>
<msg timestamp="20160205 03:32:13.631" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:13.632" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:32:13.629" starttime="20160205 03:32:10.813"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:13.645" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:32:13.644" starttime="20160205 03:32:13.641"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:13.649" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:13.648" starttime="20160205 03:32:13.646"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:13.653" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:13.652" starttime="20160205 03:32:13.650"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:13.659" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:13.660" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:13.661" starttime="20160205 03:32:13.656"></status>
</kw>
<msg timestamp="20160205 03:32:13.663" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:13.664" level="INFO">${return_log_entry} = 2016-02-05 03:32:13,621 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:13.662" starttime="20160205 03:32:13.654"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:13.674" starttime="20160205 03:32:13.672"></status>
</kw>
<msg timestamp="20160205 03:32:13.676" level="INFO">${return_log_entry} = 2016-02-05 03:32:13,621 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:13.675" starttime="20160205 03:32:13.665"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:13.686" starttime="20160205 03:32:13.683"></status>
</kw>
<msg timestamp="20160205 03:32:13.687" level="INFO">${return_log_entry} = 2016-02-05 03:32:13,621 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:13.687" starttime="20160205 03:32:13.677"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:13.698" starttime="20160205 03:32:13.695"></status>
</kw>
<msg timestamp="20160205 03:32:13.699" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:13.699" starttime="20160205 03:32:13.689"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:13.713" starttime="20160205 03:32:13.711"></status>
</kw>
<msg timestamp="20160205 03:32:13.715" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:13.714" starttime="20160205 03:32:13.701"></status>
</kw>
<msg timestamp="20160205 03:32:13.717" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:13.716" starttime="20160205 03:32:13.634"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:13.728" starttime="20160205 03:32:13.726"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:13.731" starttime="20160205 03:32:13.729"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:13.734" starttime="20160205 03:32:13.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:32:13.746" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:32:13.747" starttime="20160205 03:32:13.743"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:13.748" starttime="20160205 03:32:13.741"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:13.749" starttime="20160205 03:32:13.735"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:13.750" starttime="20160205 03:32:13.719"></status>
</kw>
<msg timestamp="20160205 03:32:13.753" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:32:13.752" starttime="20160205 03:32:10.751"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:32:13.754" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:13.755" starttime="20160205 03:32:13.753"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:13.756" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:32:13.757" starttime="20160205 03:32:13.755"></status>
</kw>
<kw type="kw" name="${calling_int} = BuiltIn.Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<msg timestamp="20160205 03:32:13.758" level="INFO">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160205 03:32:13.759" level="INFO">${calling_int} = 525516001000</msg>
<status status="PASS" endtime="20160205 03:32:13.759" starttime="20160205 03:32:13.757"></status>
</kw>
<kw type="kw" name="${called_party} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${calling_int}+1</arg>
</arguments>
<msg timestamp="20160205 03:32:13.763" level="INFO">${called_party} = 525516001001</msg>
<status status="PASS" endtime="20160205 03:32:13.762" starttime="20160205 03:32:13.760"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:13.764" starttime="20160205 03:32:13.763"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${called_party}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:32:13.778" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:32:13.778" starttime="20160205 03:32:13.777"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:32:13.780" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:32:13.780" starttime="20160205 03:32:13.779"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:32:13.782" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:32:13.782" starttime="20160205 03:32:13.781"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:32:13.784" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20160205 03:32:13.784" starttime="20160205 03:32:13.783"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:13.786" starttime="20160205 03:32:13.785"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:32:13.788" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:13.789" starttime="20160205 03:32:13.786"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:13.790" starttime="20160205 03:32:13.789"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:32:13.792" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:13.792" starttime="20160205 03:32:13.791"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:32:13.795" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:13.796" starttime="20160205 03:32:13.793"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:13.797" starttime="20160205 03:32:13.796"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:32:13.799" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:13.799" starttime="20160205 03:32:13.797"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:32:13.802" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:13.803" starttime="20160205 03:32:13.800"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:13.804" starttime="20160205 03:32:13.803"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:32:13.812" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:32:21.308" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:32:21.306" starttime="20160205 03:32:13.805"></status>
</kw>
<msg timestamp="20160205 03:32:21.309" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:32:21.308" starttime="20160205 03:32:13.772"></status>
</kw>
<msg timestamp="20160205 03:32:21.311" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:32:21.310" starttime="20160205 03:32:13.765"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:21.312" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:32:21.313" starttime="20160205 03:32:21.311"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.315" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:21.315" starttime="20160205 03:32:21.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.316" starttime="20160205 03:32:21.316"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.330" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:21.330" starttime="20160205 03:32:21.328"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:21.331" starttime="20160205 03:32:21.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.334" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:21.334" starttime="20160205 03:32:21.332"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:21.334" starttime="20160205 03:32:21.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.337" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:21.337" starttime="20160205 03:32:21.336"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:21.338" starttime="20160205 03:32:21.335"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:21.338" starttime="20160205 03:32:21.323"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.341" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:32:21.341" starttime="20160205 03:32:21.339"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.343" starttime="20160205 03:32:21.342"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.345" starttime="20160205 03:32:21.343"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.346" starttime="20160205 03:32:21.345"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.348" starttime="20160205 03:32:21.347"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.349" starttime="20160205 03:32:21.348"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.351" starttime="20160205 03:32:21.350"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:32:21.353" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000']</msg>
<msg timestamp="20160205 03:32:21.694" level="INFO">03:32:21,667 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
03:32:21,670 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
03:32:21,673 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37300
03:32:21,676 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000
03:32:21,679 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
03:32:21,683 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
03:32:21,686 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
03:32:21,689 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=3</msg>
<status status="PASS" endtime="20160205 03:32:21.696" starttime="20160205 03:32:21.352"></status>
</kw>
<msg timestamp="20160205 03:32:21.698" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:21.698" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:32:21.697" starttime="20160205 03:32:21.352"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:21.711" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:32:21.710" starttime="20160205 03:32:21.707"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.715" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:21.714" starttime="20160205 03:32:21.712"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.719" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:21.718" starttime="20160205 03:32:21.716"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.725" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:21.727" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:21.727" starttime="20160205 03:32:21.722"></status>
</kw>
<msg timestamp="20160205 03:32:21.729" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:21.730" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,667 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:21.728" starttime="20160205 03:32:21.720"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.740" starttime="20160205 03:32:21.738"></status>
</kw>
<msg timestamp="20160205 03:32:21.741" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,667 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:21.741" starttime="20160205 03:32:21.731"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.751" starttime="20160205 03:32:21.749"></status>
</kw>
<msg timestamp="20160205 03:32:21.752" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,667 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:21.752" starttime="20160205 03:32:21.743"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.757" starttime="20160205 03:32:21.756"></status>
</kw>
<msg timestamp="20160205 03:32:21.758" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:21.757" starttime="20160205 03:32:21.753"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.764" starttime="20160205 03:32:21.763"></status>
</kw>
<msg timestamp="20160205 03:32:21.765" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:21.765" starttime="20160205 03:32:21.758"></status>
</kw>
<msg timestamp="20160205 03:32:21.766" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:21.766" starttime="20160205 03:32:21.700"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:21.773" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160205 03:32:21.772" starttime="20160205 03:32:21.771"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.775" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:21.774" starttime="20160205 03:32:21.773"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.776" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:21.776" starttime="20160205 03:32:21.775"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.779" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:21.780" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:21.780" starttime="20160205 03:32:21.778"></status>
</kw>
<msg timestamp="20160205 03:32:21.781" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:21.781" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,670 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:32:21.781" starttime="20160205 03:32:21.777"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.786" starttime="20160205 03:32:21.785"></status>
</kw>
<msg timestamp="20160205 03:32:21.786" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,670 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:32:21.786" starttime="20160205 03:32:21.782"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.791" starttime="20160205 03:32:21.790"></status>
</kw>
<msg timestamp="20160205 03:32:21.792" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,670 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:32:21.791" starttime="20160205 03:32:21.787"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.796" starttime="20160205 03:32:21.795"></status>
</kw>
<msg timestamp="20160205 03:32:21.797" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:32:21.797" starttime="20160205 03:32:21.792"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.803" starttime="20160205 03:32:21.802"></status>
</kw>
<msg timestamp="20160205 03:32:21.804" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:32:21.804" starttime="20160205 03:32:21.798"></status>
</kw>
<msg timestamp="20160205 03:32:21.805" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160205 03:32:21.805" starttime="20160205 03:32:21.767"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:21.811" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160205 03:32:21.811" starttime="20160205 03:32:21.810"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.813" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:21.813" starttime="20160205 03:32:21.812"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.815" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:21.815" starttime="20160205 03:32:21.814"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.818" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:21.818" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:21.819" starttime="20160205 03:32:21.817"></status>
</kw>
<msg timestamp="20160205 03:32:21.820" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:21.820" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,676 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160205 03:32:21.819" starttime="20160205 03:32:21.816"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.824" starttime="20160205 03:32:21.823"></status>
</kw>
<msg timestamp="20160205 03:32:21.825" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,676 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160205 03:32:21.825" starttime="20160205 03:32:21.820"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.830" starttime="20160205 03:32:21.829"></status>
</kw>
<msg timestamp="20160205 03:32:21.830" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,676 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160205 03:32:21.830" starttime="20160205 03:32:21.826"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.835" starttime="20160205 03:32:21.834"></status>
</kw>
<msg timestamp="20160205 03:32:21.836" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160205 03:32:21.835" starttime="20160205 03:32:21.831"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.842" starttime="20160205 03:32:21.841"></status>
</kw>
<msg timestamp="20160205 03:32:21.843" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160205 03:32:21.842" starttime="20160205 03:32:21.836"></status>
</kw>
<msg timestamp="20160205 03:32:21.844" level="INFO">${imsi} = 334030880001000</msg>
<status status="PASS" endtime="20160205 03:32:21.843" starttime="20160205 03:32:21.806"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:21.850" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160205 03:32:21.849" starttime="20160205 03:32:21.848"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.851" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:21.851" starttime="20160205 03:32:21.850"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.853" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:21.853" starttime="20160205 03:32:21.852"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.856" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:21.857" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:21.857" starttime="20160205 03:32:21.855"></status>
</kw>
<msg timestamp="20160205 03:32:21.858" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:21.858" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,673 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37300</msg>
<status status="PASS" endtime="20160205 03:32:21.858" starttime="20160205 03:32:21.854"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.862" starttime="20160205 03:32:21.862"></status>
</kw>
<msg timestamp="20160205 03:32:21.863" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,673 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37300</msg>
<status status="PASS" endtime="20160205 03:32:21.863" starttime="20160205 03:32:21.859"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.868" starttime="20160205 03:32:21.867"></status>
</kw>
<msg timestamp="20160205 03:32:21.868" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,673 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37300</msg>
<status status="PASS" endtime="20160205 03:32:21.868" starttime="20160205 03:32:21.864"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.873" starttime="20160205 03:32:21.872"></status>
</kw>
<msg timestamp="20160205 03:32:21.874" level="INFO">${resultCode} = 37300</msg>
<status status="PASS" endtime="20160205 03:32:21.873" starttime="20160205 03:32:21.869"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.881" starttime="20160205 03:32:21.879"></status>
</kw>
<msg timestamp="20160205 03:32:21.881" level="INFO">${resultCode} = 37300</msg>
<status status="PASS" endtime="20160205 03:32:21.881" starttime="20160205 03:32:21.874"></status>
</kw>
<msg timestamp="20160205 03:32:21.882" level="INFO">${id} = 37300</msg>
<status status="PASS" endtime="20160205 03:32:21.882" starttime="20160205 03:32:21.845"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:21.888" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160205 03:32:21.888" starttime="20160205 03:32:21.887"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.890" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:21.890" starttime="20160205 03:32:21.889"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.892" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:21.892" starttime="20160205 03:32:21.891"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.895" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:21.896" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:21.896" starttime="20160205 03:32:21.894"></status>
</kw>
<msg timestamp="20160205 03:32:21.897" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:21.897" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,679 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:32:21.896" starttime="20160205 03:32:21.893"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.901" starttime="20160205 03:32:21.900"></status>
</kw>
<msg timestamp="20160205 03:32:21.902" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,679 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:32:21.902" starttime="20160205 03:32:21.898"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.907" starttime="20160205 03:32:21.906"></status>
</kw>
<msg timestamp="20160205 03:32:21.907" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,679 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:32:21.907" starttime="20160205 03:32:21.903"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.912" starttime="20160205 03:32:21.911"></status>
</kw>
<msg timestamp="20160205 03:32:21.913" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:32:21.912" starttime="20160205 03:32:21.908"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.919" starttime="20160205 03:32:21.918"></status>
</kw>
<msg timestamp="20160205 03:32:21.920" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:32:21.919" starttime="20160205 03:32:21.913"></status>
</kw>
<msg timestamp="20160205 03:32:21.921" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:32:21.920" starttime="20160205 03:32:21.883"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:21.926" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160205 03:32:21.926" starttime="20160205 03:32:21.925"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.928" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:21.928" starttime="20160205 03:32:21.927"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.930" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:21.930" starttime="20160205 03:32:21.929"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.933" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:21.933" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:21.934" starttime="20160205 03:32:21.932"></status>
</kw>
<msg timestamp="20160205 03:32:21.935" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:21.935" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,683 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:32:21.934" starttime="20160205 03:32:21.931"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.939" starttime="20160205 03:32:21.938"></status>
</kw>
<msg timestamp="20160205 03:32:21.940" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,683 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:32:21.940" starttime="20160205 03:32:21.936"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.944" starttime="20160205 03:32:21.943"></status>
</kw>
<msg timestamp="20160205 03:32:21.945" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,683 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:32:21.945" starttime="20160205 03:32:21.941"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.950" starttime="20160205 03:32:21.949"></status>
</kw>
<msg timestamp="20160205 03:32:21.951" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:32:21.950" starttime="20160205 03:32:21.946"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.957" starttime="20160205 03:32:21.956"></status>
</kw>
<msg timestamp="20160205 03:32:21.958" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:32:21.957" starttime="20160205 03:32:21.951"></status>
</kw>
<msg timestamp="20160205 03:32:21.959" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160205 03:32:21.958" starttime="20160205 03:32:21.922"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:21.964" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160205 03:32:21.964" starttime="20160205 03:32:21.963"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.966" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:21.966" starttime="20160205 03:32:21.965"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.968" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:21.968" starttime="20160205 03:32:21.967"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:21.971" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:21.971" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:21.972" starttime="20160205 03:32:21.970"></status>
</kw>
<msg timestamp="20160205 03:32:21.973" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:21.973" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,686 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:21.972" starttime="20160205 03:32:21.969"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.977" starttime="20160205 03:32:21.976"></status>
</kw>
<msg timestamp="20160205 03:32:21.978" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,686 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:21.978" starttime="20160205 03:32:21.973"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.982" starttime="20160205 03:32:21.981"></status>
</kw>
<msg timestamp="20160205 03:32:21.983" level="INFO">${return_log_entry} = 2016-02-05 03:32:21,686 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:21.983" starttime="20160205 03:32:21.979"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.988" starttime="20160205 03:32:21.987"></status>
</kw>
<msg timestamp="20160205 03:32:21.989" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:21.988" starttime="20160205 03:32:21.984"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:21.995" starttime="20160205 03:32:21.994"></status>
</kw>
<msg timestamp="20160205 03:32:21.995" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:21.995" starttime="20160205 03:32:21.989"></status>
</kw>
<msg timestamp="20160205 03:32:21.996" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:21.996" starttime="20160205 03:32:21.960"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.002" starttime="20160205 03:32:22.001"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.003" starttime="20160205 03:32:22.003"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.005" starttime="20160205 03:32:22.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:32:22.011" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:32:22.011" starttime="20160205 03:32:22.009"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:22.012" starttime="20160205 03:32:22.008"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:22.012" starttime="20160205 03:32:22.005"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:22.013" starttime="20160205 03:32:21.997"></status>
</kw>
<msg timestamp="20160205 03:32:22.016" level="INFO">${rc} = OK</msg>
<msg timestamp="20160205 03:32:22.016" level="INFO">${provId} = 1</msg>
<msg timestamp="20160205 03:32:22.016" level="INFO">${imsi} = 334030880001000</msg>
<msg timestamp="20160205 03:32:22.017" level="INFO">${id} = 37300</msg>
<msg timestamp="20160205 03:32:22.017" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160205 03:32:22.017" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160205 03:32:22.018" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:22.015" starttime="20160205 03:32:21.318"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.030" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:22.030" starttime="20160205 03:32:22.028"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:22.031" starttime="20160205 03:32:22.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.033" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:22.034" starttime="20160205 03:32:22.032"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:22.034" starttime="20160205 03:32:22.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.037" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:22.037" starttime="20160205 03:32:22.036"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:22.038" starttime="20160205 03:32:22.035"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:22.038" starttime="20160205 03:32:22.024"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.040" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:32:22.041" starttime="20160205 03:32:22.039"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.042" starttime="20160205 03:32:22.041"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.044" starttime="20160205 03:32:22.043"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.046" starttime="20160205 03:32:22.044"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.047" starttime="20160205 03:32:22.046"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.048" starttime="20160205 03:32:22.047"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.050" starttime="20160205 03:32:22.049"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:32:22.052" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=37300']</msg>
<msg timestamp="20160205 03:32:22.423" level="INFO">03:32:22,405 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
03:32:22,409 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37301
03:32:22,412 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000
03:32:22,415 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
03:32:22,419 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:32:22.424" starttime="20160205 03:32:22.051"></status>
</kw>
<msg timestamp="20160205 03:32:22.426" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:22.427" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:32:22.425" starttime="20160205 03:32:22.051"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:22.440" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:32:22.439" starttime="20160205 03:32:22.436"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.444" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:22.443" starttime="20160205 03:32:22.441"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.448" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:22.447" starttime="20160205 03:32:22.445"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.454" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:22.455" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:22.456" starttime="20160205 03:32:22.451"></status>
</kw>
<msg timestamp="20160205 03:32:22.458" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:22.459" level="INFO">${return_log_entry} = 2016-02-05 03:32:22,405 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:22.457" starttime="20160205 03:32:22.449"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.469" starttime="20160205 03:32:22.466"></status>
</kw>
<msg timestamp="20160205 03:32:22.470" level="INFO">${return_log_entry} = 2016-02-05 03:32:22,405 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:22.470" starttime="20160205 03:32:22.460"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.480" starttime="20160205 03:32:22.478"></status>
</kw>
<msg timestamp="20160205 03:32:22.482" level="INFO">${return_log_entry} = 2016-02-05 03:32:22,405 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:22.481" starttime="20160205 03:32:22.472"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.492" starttime="20160205 03:32:22.489"></status>
</kw>
<msg timestamp="20160205 03:32:22.494" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:22.493" starttime="20160205 03:32:22.483"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.504" starttime="20160205 03:32:22.503"></status>
</kw>
<msg timestamp="20160205 03:32:22.505" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:22.505" starttime="20160205 03:32:22.495"></status>
</kw>
<msg timestamp="20160205 03:32:22.506" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:22.506" starttime="20160205 03:32:22.429"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:22.512" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160205 03:32:22.512" starttime="20160205 03:32:22.511"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.514" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:22.514" starttime="20160205 03:32:22.513"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.516" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:22.516" starttime="20160205 03:32:22.515"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.519" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:22.519" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:22.520" starttime="20160205 03:32:22.517"></status>
</kw>
<msg timestamp="20160205 03:32:22.521" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:22.521" level="INFO">${return_log_entry} = 2016-02-05 03:32:22,409 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37301</msg>
<status status="PASS" endtime="20160205 03:32:22.520" starttime="20160205 03:32:22.517"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.525" starttime="20160205 03:32:22.524"></status>
</kw>
<msg timestamp="20160205 03:32:22.526" level="INFO">${return_log_entry} = 2016-02-05 03:32:22,409 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37301</msg>
<status status="PASS" endtime="20160205 03:32:22.526" starttime="20160205 03:32:22.521"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.530" starttime="20160205 03:32:22.529"></status>
</kw>
<msg timestamp="20160205 03:32:22.531" level="INFO">${return_log_entry} = 2016-02-05 03:32:22,409 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37301</msg>
<status status="PASS" endtime="20160205 03:32:22.531" starttime="20160205 03:32:22.527"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.536" starttime="20160205 03:32:22.534"></status>
</kw>
<msg timestamp="20160205 03:32:22.537" level="INFO">${resultCode} = 37301</msg>
<status status="PASS" endtime="20160205 03:32:22.536" starttime="20160205 03:32:22.532"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.543" starttime="20160205 03:32:22.542"></status>
</kw>
<msg timestamp="20160205 03:32:22.544" level="INFO">${resultCode} = 37301</msg>
<status status="PASS" endtime="20160205 03:32:22.543" starttime="20160205 03:32:22.537"></status>
</kw>
<msg timestamp="20160205 03:32:22.545" level="INFO">${accountId} = 37301</msg>
<status status="PASS" endtime="20160205 03:32:22.545" starttime="20160205 03:32:22.507"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:22.551" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160205 03:32:22.551" starttime="20160205 03:32:22.550"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.553" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:22.553" starttime="20160205 03:32:22.552"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.555" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:22.555" starttime="20160205 03:32:22.554"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.558" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:22.558" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:22.559" starttime="20160205 03:32:22.557"></status>
</kw>
<msg timestamp="20160205 03:32:22.560" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:22.560" level="INFO">${return_log_entry} = 2016-02-05 03:32:22,412 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000</msg>
<status status="PASS" endtime="20160205 03:32:22.559" starttime="20160205 03:32:22.556"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.564" starttime="20160205 03:32:22.563"></status>
</kw>
<msg timestamp="20160205 03:32:22.565" level="INFO">${return_log_entry} = 2016-02-05 03:32:22,412 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000</msg>
<status status="PASS" endtime="20160205 03:32:22.565" starttime="20160205 03:32:22.560"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.569" starttime="20160205 03:32:22.568"></status>
</kw>
<msg timestamp="20160205 03:32:22.570" level="INFO">${return_log_entry} = 2016-02-05 03:32:22,412 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000</msg>
<status status="PASS" endtime="20160205 03:32:22.570" starttime="20160205 03:32:22.566"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.575" starttime="20160205 03:32:22.573"></status>
</kw>
<msg timestamp="20160205 03:32:22.575" level="INFO">${resultCode} = 8000000</msg>
<status status="PASS" endtime="20160205 03:32:22.575" starttime="20160205 03:32:22.571"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.582" starttime="20160205 03:32:22.581"></status>
</kw>
<msg timestamp="20160205 03:32:22.582" level="INFO">${resultCode} = 8000000</msg>
<status status="PASS" endtime="20160205 03:32:22.582" starttime="20160205 03:32:22.576"></status>
</kw>
<msg timestamp="20160205 03:32:22.583" level="INFO">${balance} = 8000000</msg>
<status status="PASS" endtime="20160205 03:32:22.583" starttime="20160205 03:32:22.546"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:22.589" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160205 03:32:22.589" starttime="20160205 03:32:22.588"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.591" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:22.591" starttime="20160205 03:32:22.590"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.593" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:22.592" starttime="20160205 03:32:22.592"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.596" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:22.596" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:22.597" starttime="20160205 03:32:22.594"></status>
</kw>
<msg timestamp="20160205 03:32:22.597" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:22.598" level="INFO">${return_log_entry} = 2016-02-05 03:32:22,415 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:32:22.597" starttime="20160205 03:32:22.593"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.602" starttime="20160205 03:32:22.601"></status>
</kw>
<msg timestamp="20160205 03:32:22.603" level="INFO">${return_log_entry} = 2016-02-05 03:32:22,415 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:32:22.603" starttime="20160205 03:32:22.598"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.607" starttime="20160205 03:32:22.606"></status>
</kw>
<msg timestamp="20160205 03:32:22.608" level="INFO">${return_log_entry} = 2016-02-05 03:32:22,415 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:32:22.608" starttime="20160205 03:32:22.603"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.612" starttime="20160205 03:32:22.611"></status>
</kw>
<msg timestamp="20160205 03:32:22.613" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:32:22.613" starttime="20160205 03:32:22.609"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.619" starttime="20160205 03:32:22.618"></status>
</kw>
<msg timestamp="20160205 03:32:22.620" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:32:22.620" starttime="20160205 03:32:22.614"></status>
</kw>
<msg timestamp="20160205 03:32:22.621" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160205 03:32:22.621" starttime="20160205 03:32:22.584"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:22.627" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160205 03:32:22.627" starttime="20160205 03:32:22.626"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.629" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:22.629" starttime="20160205 03:32:22.628"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.631" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:22.631" starttime="20160205 03:32:22.630"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.634" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:22.634" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:22.635" starttime="20160205 03:32:22.632"></status>
</kw>
<msg timestamp="20160205 03:32:22.635" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:22.636" level="INFO">${return_log_entry} = 2016-02-05 03:32:22,419 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:32:22.635" starttime="20160205 03:32:22.632"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.640" starttime="20160205 03:32:22.639"></status>
</kw>
<msg timestamp="20160205 03:32:22.641" level="INFO">${return_log_entry} = 2016-02-05 03:32:22,419 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:32:22.640" starttime="20160205 03:32:22.636"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.645" starttime="20160205 03:32:22.644"></status>
</kw>
<msg timestamp="20160205 03:32:22.646" level="INFO">${return_log_entry} = 2016-02-05 03:32:22,419 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160205 03:32:22.646" starttime="20160205 03:32:22.641"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.651" starttime="20160205 03:32:22.649"></status>
</kw>
<msg timestamp="20160205 03:32:22.651" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160205 03:32:22.651" starttime="20160205 03:32:22.647"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.658" starttime="20160205 03:32:22.657"></status>
</kw>
<msg timestamp="20160205 03:32:22.658" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160205 03:32:22.658" starttime="20160205 03:32:22.652"></status>
</kw>
<msg timestamp="20160205 03:32:22.659" level="INFO">${currencyId} = 101000</msg>
<status status="PASS" endtime="20160205 03:32:22.659" starttime="20160205 03:32:22.622"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.664" starttime="20160205 03:32:22.664"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.666" starttime="20160205 03:32:22.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.667" starttime="20160205 03:32:22.666"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:32:22.673" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:32:22.673" starttime="20160205 03:32:22.671"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:22.673" starttime="20160205 03:32:22.670"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:22.674" starttime="20160205 03:32:22.668"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:22.674" starttime="20160205 03:32:22.660"></status>
</kw>
<msg timestamp="20160205 03:32:22.676" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160205 03:32:22.676" level="INFO">${accId} = 37301</msg>
<msg timestamp="20160205 03:32:22.677" level="INFO">${bal} = 8000000</msg>
<msg timestamp="20160205 03:32:22.677" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160205 03:32:22.677" level="INFO">${curr} = 101000</msg>
<status status="PASS" endtime="20160205 03:32:22.676" starttime="20160205 03:32:22.019"></status>
</kw>
<kw type="kw" name="${target_bal} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<msg timestamp="20160205 03:32:22.680" level="INFO">${target_bal} = 8000000</msg>
<status status="PASS" endtime="20160205 03:32:22.680" starttime="20160205 03:32:22.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<msg timestamp="20160205 03:32:22.682" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:22.683" starttime="20160205 03:32:22.681"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check OK!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:22.684" level="INFO">Account balance check OK!</msg>
<status status="PASS" endtime="20160205 03:32:22.685" starttime="20160205 03:32:22.683"></status>
</kw>
<doc>Test will make a MOC call, duration 1s.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:32:22.685" starttime="20160205 03:32:10.737"></status>
</test>
<doc>Testing the prepaid MOC call, duration is 1s - shorter than one slice (less than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:32:22.690" starttime="20160205 03:32:06.679"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:32:22.698" starttime="20160205 03:32:06.663"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160205 03:32:22.710" starttime="20160205 03:31:19.197"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160205 03:32:22.729" starttime="20160205 03:31:19.181"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC" id="s1-s1-s1-s4" name="MTC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon" id="s1-s1-s1-s4-s1" name="MTC PREPAID-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon/MTC_PREPAID-Abandon-robot-suite.txt" id="s1-s1-s1-s4-s1-s1" name="MTC PREPAID-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:32:22.918" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:32:22.922" level="INFO">${date} = Fri Feb  5 03:32:22 CET 2016</msg>
<status status="PASS" endtime="20160205 03:32:22.922" starttime="20160205 03:32:22.909"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:22.926" level="INFO">Date and time: Fri Feb  5 03:32:22 CET 2016</msg>
<status status="PASS" endtime="20160205 03:32:22.927" starttime="20160205 03:32:22.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:22.931" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160205 03:32:22.932" starttime="20160205 03:32:22.929"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:22.984" starttime="20160205 03:32:22.982"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:23.044" starttime="20160205 03:32:22.993"></status>
</kw>
<msg timestamp="20160205 03:32:23.048" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20160205 03:32:23.047" starttime="20160205 03:32:22.986"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:32:23.059" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:32:23.502" level="INFO">Read output: Last login: Fri Feb  5 02:32:07 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:32:23.503" starttime="20160205 03:32:23.057"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:23.504" starttime="20160205 03:32:23.050"></status>
</kw>
<msg timestamp="20160205 03:32:23.505" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20160205 03:32:23.505" starttime="20160205 03:32:22.973"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:32:23.510" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:32:23.509" starttime="20160205 03:32:23.506"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:32:23.511" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160205 03:32:23.940" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:32:23.942" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:32:23.941" starttime="20160205 03:32:23.510"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:23.949" starttime="20160205 03:32:23.946"></status>
</kw>
<msg timestamp="20160205 03:32:23.951" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:32:23.951" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:32:23.950" starttime="20160205 03:32:23.943"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:23.961" starttime="20160205 03:32:23.959"></status>
</kw>
<msg timestamp="20160205 03:32:23.963" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:23.962" starttime="20160205 03:32:23.953"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:32:23.967" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:32:23.966" starttime="20160205 03:32:23.964"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:32:23.971" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:32:23.970" starttime="20160205 03:32:23.968"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:23.974" starttime="20160205 03:32:23.972"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:23.985" starttime="20160205 03:32:23.982"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:32:23.991" starttime="20160205 03:32:23.986"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:23.992" starttime="20160205 03:32:23.975"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:24.002" starttime="20160205 03:32:23.999"></status>
</kw>
<msg timestamp="20160205 03:32:24.006" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:32:24.004" starttime="20160205 03:32:23.993"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:24.009" starttime="20160205 03:32:24.007"></status>
</kw>
<msg timestamp="20160205 03:32:24.012" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:32:24.013" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:32:24.011" starttime="20160205 03:32:22.949"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:24.065" starttime="20160205 03:32:24.062"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:24.129" starttime="20160205 03:32:24.073"></status>
</kw>
<msg timestamp="20160205 03:32:24.131" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20160205 03:32:24.131" starttime="20160205 03:32:24.066"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:32:24.143" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:32:24.665" level="INFO">Read output: Last login: Fri Feb  5 02:32:08 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:32:24.667" starttime="20160205 03:32:24.140"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:24.668" starttime="20160205 03:32:24.133"></status>
</kw>
<msg timestamp="20160205 03:32:24.672" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20160205 03:32:24.671" starttime="20160205 03:32:24.053"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:32:24.682" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:32:24.681" starttime="20160205 03:32:24.673"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:32:24.685" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:32:25.162" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:32:25.165" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:32:25.164" starttime="20160205 03:32:24.683"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:25.173" starttime="20160205 03:32:25.170"></status>
</kw>
<msg timestamp="20160205 03:32:25.175" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:32:25.176" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:32:25.174" starttime="20160205 03:32:25.167"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:25.186" starttime="20160205 03:32:25.184"></status>
</kw>
<msg timestamp="20160205 03:32:25.187" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:25.187" starttime="20160205 03:32:25.177"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:32:25.192" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:32:25.191" starttime="20160205 03:32:25.189"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:32:25.196" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:32:25.196" starttime="20160205 03:32:25.193"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:25.199" starttime="20160205 03:32:25.198"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:25.212" starttime="20160205 03:32:25.209"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:32:25.218" starttime="20160205 03:32:25.214"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:25.219" starttime="20160205 03:32:25.202"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:25.230" starttime="20160205 03:32:25.227"></status>
</kw>
<msg timestamp="20160205 03:32:25.231" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:32:25.231" starttime="20160205 03:32:25.221"></status>
</kw>
<msg timestamp="20160205 03:32:25.235" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:32:25.236" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:32:25.233" starttime="20160205 03:32:24.029"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:25.289" starttime="20160205 03:32:25.287"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:25.351" starttime="20160205 03:32:25.297"></status>
</kw>
<msg timestamp="20160205 03:32:25.353" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20160205 03:32:25.352" starttime="20160205 03:32:25.290"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:32:25.363" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:32:25.895" level="INFO">Read output: Last login: Fri Feb  5 02:32:09 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:32:25.896" starttime="20160205 03:32:25.361"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:25.896" starttime="20160205 03:32:25.354"></status>
</kw>
<msg timestamp="20160205 03:32:25.897" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20160205 03:32:25.897" starttime="20160205 03:32:25.277"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:32:25.902" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:32:25.901" starttime="20160205 03:32:25.898"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:32:25.903" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:32:26.113" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:32:26.117" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:32:26.115" starttime="20160205 03:32:25.902"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.123" starttime="20160205 03:32:26.120"></status>
</kw>
<msg timestamp="20160205 03:32:26.125" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:32:26.126" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:32:26.124" starttime="20160205 03:32:26.118"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.135" starttime="20160205 03:32:26.134"></status>
</kw>
<msg timestamp="20160205 03:32:26.137" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:26.136" starttime="20160205 03:32:26.127"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:32:26.141" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:32:26.140" starttime="20160205 03:32:26.138"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:32:26.145" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:32:26.144" starttime="20160205 03:32:26.142"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.148" starttime="20160205 03:32:26.146"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.159" starttime="20160205 03:32:26.156"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.164" starttime="20160205 03:32:26.160"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:26.165" starttime="20160205 03:32:26.149"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.174" starttime="20160205 03:32:26.172"></status>
</kw>
<msg timestamp="20160205 03:32:26.176" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:32:26.175" starttime="20160205 03:32:26.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.179" starttime="20160205 03:32:26.177"></status>
</kw>
<msg timestamp="20160205 03:32:26.182" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:32:26.183" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:32:26.181" starttime="20160205 03:32:25.253"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.235" starttime="20160205 03:32:26.233"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.295" starttime="20160205 03:32:26.242"></status>
</kw>
<msg timestamp="20160205 03:32:26.298" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20160205 03:32:26.297" starttime="20160205 03:32:26.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:32:26.308" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:32:26.746" level="INFO">Read output: Last login: Fri Feb  5 02:32:10 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:32:26.748" starttime="20160205 03:32:26.306"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:26.749" starttime="20160205 03:32:26.299"></status>
</kw>
<msg timestamp="20160205 03:32:26.752" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20160205 03:32:26.751" starttime="20160205 03:32:26.224"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:32:26.756" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:32:26.756" starttime="20160205 03:32:26.752"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:32:26.757" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:32:26.844" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:32:26.845" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:32:26.844" starttime="20160205 03:32:26.756"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.848" starttime="20160205 03:32:26.847"></status>
</kw>
<msg timestamp="20160205 03:32:26.849" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:32:26.849" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:32:26.849" starttime="20160205 03:32:26.846"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.854" starttime="20160205 03:32:26.853"></status>
</kw>
<msg timestamp="20160205 03:32:26.855" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:26.854" starttime="20160205 03:32:26.850"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:32:26.856" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:32:26.856" starttime="20160205 03:32:26.855"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:32:26.858" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:32:26.858" starttime="20160205 03:32:26.857"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.859" starttime="20160205 03:32:26.859"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.864" starttime="20160205 03:32:26.863"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.867" starttime="20160205 03:32:26.865"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:26.868" starttime="20160205 03:32:26.860"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.872" starttime="20160205 03:32:26.871"></status>
</kw>
<msg timestamp="20160205 03:32:26.873" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:32:26.872" starttime="20160205 03:32:26.868"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.874" starttime="20160205 03:32:26.873"></status>
</kw>
<msg timestamp="20160205 03:32:26.875" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:32:26.876" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:32:26.875" starttime="20160205 03:32:26.199"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:26.879" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:32:26.880" starttime="20160205 03:32:26.876"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:26.884" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:32:26.885" starttime="20160205 03:32:26.881"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:26.888" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:32:26.889" starttime="20160205 03:32:26.886"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:26.893" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:32:26.894" starttime="20160205 03:32:26.891"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:32:26.898" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:26.898" starttime="20160205 03:32:26.896"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:32:26.902" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:26.902" starttime="20160205 03:32:26.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:32:26.906" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:26.906" starttime="20160205 03:32:26.904"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:32:26.910" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:26.910" starttime="20160205 03:32:26.908"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.923" starttime="20160205 03:32:26.918"></status>
</kw>
<msg timestamp="20160205 03:32:26.925" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:32:26.924" starttime="20160205 03:32:26.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:32:26.929" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:32:26.930" starttime="20160205 03:32:26.926"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:26.931" starttime="20160205 03:32:22.906"></status>
</kw>
<test id="s1-s1-s1-s4-s1-s1-t1" name="Run MTC Abandon Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:26.945" starttime="20160205 03:32:26.944"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:32:26.949" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:32:26.948" starttime="20160205 03:32:26.946"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:32:26.964" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 03:32:26.965" starttime="20160205 03:32:26.962"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:32:26.968" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:32:26.969" starttime="20160205 03:32:26.966"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:32:26.972" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:32:26.973" starttime="20160205 03:32:26.970"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:32:26.976" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160205 03:32:26.976" starttime="20160205 03:32:26.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:32:26.980" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 03:32:26.980" starttime="20160205 03:32:26.977"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:32:26.983" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 03:32:26.984" starttime="20160205 03:32:26.981"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:32:26.987" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:26.988" starttime="20160205 03:32:26.985"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:32:26.991" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 03:32:26.992" starttime="20160205 03:32:26.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:32:26.995" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:32:26.996" starttime="20160205 03:32:26.993"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:32:26.999" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:32:26.999" starttime="20160205 03:32:26.997"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:27.007" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:27.008" starttime="20160205 03:32:27.006"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:27.008" starttime="20160205 03:32:27.005"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:27.011" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:27.011" starttime="20160205 03:32:27.010"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:27.012" starttime="20160205 03:32:27.009"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:27.015" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:27.015" starttime="20160205 03:32:27.013"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:27.015" starttime="20160205 03:32:27.012"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:27.016" starttime="20160205 03:32:27.002"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:32:27.018" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:32:27.018" starttime="20160205 03:32:27.016"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:27.020" starttime="20160205 03:32:27.019"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:27.022" starttime="20160205 03:32:27.020"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:27.023" starttime="20160205 03:32:27.022"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:27.024" starttime="20160205 03:32:27.024"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:27.026" starttime="20160205 03:32:27.025"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:27.027" starttime="20160205 03:32:27.026"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:27.029" starttime="20160205 03:32:27.028"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:27.030" starttime="20160205 03:32:27.029"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:27.032" starttime="20160205 03:32:27.031"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:27.033" starttime="20160205 03:32:27.032"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:27.035" starttime="20160205 03:32:27.034"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:27.037" starttime="20160205 03:32:27.036"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:32:27.039" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:32:29.757" level="INFO">03:32:29,752 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:29.758" starttime="20160205 03:32:27.038"></status>
</kw>
<msg timestamp="20160205 03:32:29.762" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:29.762" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:32:29.760" starttime="20160205 03:32:27.037"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:29.775" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:32:29.774" starttime="20160205 03:32:29.772"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:29.779" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:29.778" starttime="20160205 03:32:29.776"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:29.783" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:29.782" starttime="20160205 03:32:29.780"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:29.789" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:29.790" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:29.791" starttime="20160205 03:32:29.786"></status>
</kw>
<msg timestamp="20160205 03:32:29.793" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:29.793" level="INFO">${return_log_entry} = 2016-02-05 03:32:29,752 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:29.792" starttime="20160205 03:32:29.784"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:29.803" starttime="20160205 03:32:29.801"></status>
</kw>
<msg timestamp="20160205 03:32:29.805" level="INFO">${return_log_entry} = 2016-02-05 03:32:29,752 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:29.804" starttime="20160205 03:32:29.794"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:29.814" starttime="20160205 03:32:29.812"></status>
</kw>
<msg timestamp="20160205 03:32:29.816" level="INFO">${return_log_entry} = 2016-02-05 03:32:29,752 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:29.815" starttime="20160205 03:32:29.806"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:29.826" starttime="20160205 03:32:29.823"></status>
</kw>
<msg timestamp="20160205 03:32:29.828" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:29.827" starttime="20160205 03:32:29.817"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:29.841" starttime="20160205 03:32:29.839"></status>
</kw>
<msg timestamp="20160205 03:32:29.843" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:29.842" starttime="20160205 03:32:29.829"></status>
</kw>
<msg timestamp="20160205 03:32:29.845" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:29.844" starttime="20160205 03:32:29.765"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:29.856" starttime="20160205 03:32:29.854"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:29.858" starttime="20160205 03:32:29.857"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:29.861" starttime="20160205 03:32:29.859"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:32:29.873" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:32:29.874" starttime="20160205 03:32:29.870"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:29.875" starttime="20160205 03:32:29.868"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:29.877" starttime="20160205 03:32:29.862"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:29.877" starttime="20160205 03:32:29.847"></status>
</kw>
<msg timestamp="20160205 03:32:29.879" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:32:29.878" starttime="20160205 03:32:26.952"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160205 03:32:29.882" level="INFO">${calling_party_msisdn} = 525516001001</msg>
<status status="PASS" endtime="20160205 03:32:29.881" starttime="20160205 03:32:29.879"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:32:29.883" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:29.884" starttime="20160205 03:32:29.882"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:29.885" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:32:29.886" starttime="20160205 03:32:29.884"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC abandon *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:29.887" starttime="20160205 03:32:29.886"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MTC abandon call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:29.888" level="INFO">Running the MTC abandon call...</msg>
<status status="PASS" endtime="20160205 03:32:29.889" starttime="20160205 03:32:29.887"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Abandon">
<doc>Runs an abandoned non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-abandon</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:32:29.903" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:32:29.903" starttime="20160205 03:32:29.902"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:32:29.905" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:32:29.905" starttime="20160205 03:32:29.904"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:32:29.907" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:32:29.906" starttime="20160205 03:32:29.905"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:32:29.909" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs</msg>
<status status="PASS" endtime="20160205 03:32:29.908" starttime="20160205 03:32:29.907"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:29.910" starttime="20160205 03:32:29.909"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:32:29.913" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:29.913" starttime="20160205 03:32:29.910"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:29.914" starttime="20160205 03:32:29.914"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:32:29.916" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:29.917" starttime="20160205 03:32:29.915"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:32:29.919" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:29.920" starttime="20160205 03:32:29.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:29.921" starttime="20160205 03:32:29.920"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:32:29.923" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:29.923" starttime="20160205 03:32:29.921"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:32:29.926" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:29.926" starttime="20160205 03:32:29.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:29.928" starttime="20160205 03:32:29.927"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:32:29.935" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:32:43.939" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:32:43.937" starttime="20160205 03:32:29.928"></status>
</kw>
<msg timestamp="20160205 03:32:43.940" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:32:43.940" starttime="20160205 03:32:29.896"></status>
</kw>
<msg timestamp="20160205 03:32:43.942" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:32:43.941" starttime="20160205 03:32:29.890"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:43.943" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:32:43.944" starttime="20160205 03:32:43.942"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:32:43.945" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:43.946" starttime="20160205 03:32:43.944"></status>
</kw>
<doc>Test will make an abandoned MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:32:43.946" starttime="20160205 03:32:26.934"></status>
</test>
<doc>Testing the abandoned MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:32:43.951" starttime="20160205 03:32:22.772"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:32:43.958" starttime="20160205 03:32:22.758"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy" id="s1-s1-s1-s4-s2" name="MTC PREPAID-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy/MTC_PREPAID-Busy-robot-suite.txt" id="s1-s1-s1-s4-s2-s1" name="MTC PREPAID-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:32:44.121" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:32:44.127" level="INFO">${date} = Fri Feb  5 03:32:44 CET 2016</msg>
<status status="PASS" endtime="20160205 03:32:44.126" starttime="20160205 03:32:44.117"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:44.131" level="INFO">Date and time: Fri Feb  5 03:32:44 CET 2016</msg>
<status status="PASS" endtime="20160205 03:32:44.133" starttime="20160205 03:32:44.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:44.136" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160205 03:32:44.137" starttime="20160205 03:32:44.134"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:44.188" starttime="20160205 03:32:44.186"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:44.250" starttime="20160205 03:32:44.196"></status>
</kw>
<msg timestamp="20160205 03:32:44.253" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20160205 03:32:44.252" starttime="20160205 03:32:44.190"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:32:44.263" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:32:44.750" level="INFO">Read output: Last login: Fri Feb  5 02:32:23 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:32:44.752" starttime="20160205 03:32:44.260"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:44.752" starttime="20160205 03:32:44.254"></status>
</kw>
<msg timestamp="20160205 03:32:44.754" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20160205 03:32:44.753" starttime="20160205 03:32:44.177"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:32:44.758" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:32:44.758" starttime="20160205 03:32:44.754"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:32:44.760" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160205 03:32:45.188" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:32:45.192" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:32:45.190" starttime="20160205 03:32:44.759"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:45.198" starttime="20160205 03:32:45.195"></status>
</kw>
<msg timestamp="20160205 03:32:45.200" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:32:45.201" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:32:45.199" starttime="20160205 03:32:45.193"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:45.210" starttime="20160205 03:32:45.209"></status>
</kw>
<msg timestamp="20160205 03:32:45.212" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:45.211" starttime="20160205 03:32:45.202"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:32:45.216" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:32:45.215" starttime="20160205 03:32:45.213"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:32:45.220" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:32:45.219" starttime="20160205 03:32:45.217"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:45.222" starttime="20160205 03:32:45.221"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:45.234" starttime="20160205 03:32:45.231"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:32:45.240" starttime="20160205 03:32:45.235"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:45.241" starttime="20160205 03:32:45.224"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:45.250" starttime="20160205 03:32:45.248"></status>
</kw>
<msg timestamp="20160205 03:32:45.252" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:32:45.252" starttime="20160205 03:32:45.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:45.255" starttime="20160205 03:32:45.253"></status>
</kw>
<msg timestamp="20160205 03:32:45.259" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:32:45.259" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:32:45.257" starttime="20160205 03:32:44.153"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:45.311" starttime="20160205 03:32:45.309"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:45.492" starttime="20160205 03:32:45.319"></status>
</kw>
<msg timestamp="20160205 03:32:45.493" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20160205 03:32:45.492" starttime="20160205 03:32:45.312"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:32:45.498" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:32:46.009" level="INFO">Read output: Last login: Fri Feb  5 02:32:24 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:32:46.012" starttime="20160205 03:32:45.497"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:46.014" starttime="20160205 03:32:45.493"></status>
</kw>
<msg timestamp="20160205 03:32:46.019" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20160205 03:32:46.017" starttime="20160205 03:32:45.300"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:32:46.029" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:32:46.028" starttime="20160205 03:32:46.021"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:32:46.033" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:32:46.499" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:32:46.502" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:32:46.501" starttime="20160205 03:32:46.030"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:46.509" starttime="20160205 03:32:46.506"></status>
</kw>
<msg timestamp="20160205 03:32:46.511" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:32:46.512" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:32:46.510" starttime="20160205 03:32:46.504"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:46.522" starttime="20160205 03:32:46.520"></status>
</kw>
<msg timestamp="20160205 03:32:46.524" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:46.523" starttime="20160205 03:32:46.513"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:32:46.528" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:32:46.527" starttime="20160205 03:32:46.525"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:32:46.532" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:32:46.531" starttime="20160205 03:32:46.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:46.534" starttime="20160205 03:32:46.533"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:46.546" starttime="20160205 03:32:46.544"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:32:46.549" starttime="20160205 03:32:46.547"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:46.552" starttime="20160205 03:32:46.537"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:46.561" starttime="20160205 03:32:46.559"></status>
</kw>
<msg timestamp="20160205 03:32:46.563" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:32:46.562" starttime="20160205 03:32:46.553"></status>
</kw>
<msg timestamp="20160205 03:32:46.566" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:32:46.567" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:32:46.565" starttime="20160205 03:32:45.275"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:46.618" starttime="20160205 03:32:46.616"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:46.675" starttime="20160205 03:32:46.626"></status>
</kw>
<msg timestamp="20160205 03:32:46.677" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20160205 03:32:46.677" starttime="20160205 03:32:46.619"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:32:46.688" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:32:47.139" level="INFO">Read output: Last login: Fri Feb  5 02:32:25 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:32:47.140" starttime="20160205 03:32:46.685"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:47.141" starttime="20160205 03:32:46.679"></status>
</kw>
<msg timestamp="20160205 03:32:47.143" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20160205 03:32:47.142" starttime="20160205 03:32:46.607"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:32:47.147" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:32:47.146" starttime="20160205 03:32:47.143"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:32:47.148" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:32:47.366" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:32:47.367" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:32:47.366" starttime="20160205 03:32:47.147"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:47.370" starttime="20160205 03:32:47.369"></status>
</kw>
<msg timestamp="20160205 03:32:47.371" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:32:47.371" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:32:47.370" starttime="20160205 03:32:47.367"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:47.375" starttime="20160205 03:32:47.375"></status>
</kw>
<msg timestamp="20160205 03:32:47.376" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:47.376" starttime="20160205 03:32:47.372"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:32:47.378" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:32:47.378" starttime="20160205 03:32:47.377"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:32:47.380" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:32:47.380" starttime="20160205 03:32:47.379"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:47.381" starttime="20160205 03:32:47.381"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:47.386" starttime="20160205 03:32:47.385"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:32:47.388" starttime="20160205 03:32:47.387"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:47.391" starttime="20160205 03:32:47.382"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:47.395" starttime="20160205 03:32:47.394"></status>
</kw>
<msg timestamp="20160205 03:32:47.396" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:32:47.395" starttime="20160205 03:32:47.391"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:47.397" starttime="20160205 03:32:47.396"></status>
</kw>
<msg timestamp="20160205 03:32:47.399" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:32:47.399" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:32:47.398" starttime="20160205 03:32:46.582"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:47.423" starttime="20160205 03:32:47.422"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:47.475" starttime="20160205 03:32:47.427"></status>
</kw>
<msg timestamp="20160205 03:32:47.477" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20160205 03:32:47.477" starttime="20160205 03:32:47.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:32:47.488" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:32:48.123" level="INFO">Read output: Last login: Fri Feb  5 02:32:26 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:32:48.125" starttime="20160205 03:32:47.486"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:48.127" starttime="20160205 03:32:47.479"></status>
</kw>
<msg timestamp="20160205 03:32:48.129" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20160205 03:32:48.128" starttime="20160205 03:32:47.418"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:32:48.133" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:32:48.133" starttime="20160205 03:32:48.129"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:32:48.137" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:32:48.232" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:32:48.234" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:32:48.233" starttime="20160205 03:32:48.133"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.240" starttime="20160205 03:32:48.237"></status>
</kw>
<msg timestamp="20160205 03:32:48.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:32:48.241" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:32:48.241" starttime="20160205 03:32:48.235"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.250" starttime="20160205 03:32:48.249"></status>
</kw>
<msg timestamp="20160205 03:32:48.252" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:48.251" starttime="20160205 03:32:48.242"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:32:48.256" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:32:48.255" starttime="20160205 03:32:48.253"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:32:48.260" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:32:48.259" starttime="20160205 03:32:48.257"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.263" starttime="20160205 03:32:48.261"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.273" starttime="20160205 03:32:48.271"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.279" starttime="20160205 03:32:48.275"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:48.280" starttime="20160205 03:32:48.264"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.289" starttime="20160205 03:32:48.287"></status>
</kw>
<msg timestamp="20160205 03:32:48.290" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:32:48.290" starttime="20160205 03:32:48.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.293" starttime="20160205 03:32:48.291"></status>
</kw>
<msg timestamp="20160205 03:32:48.297" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:32:48.297" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:32:48.295" starttime="20160205 03:32:47.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:48.301" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:32:48.302" starttime="20160205 03:32:48.298"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:48.306" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:32:48.307" starttime="20160205 03:32:48.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:48.311" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:32:48.312" starttime="20160205 03:32:48.308"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:48.315" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:32:48.317" starttime="20160205 03:32:48.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:32:48.320" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:48.321" starttime="20160205 03:32:48.318"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:32:48.324" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:48.325" starttime="20160205 03:32:48.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:32:48.328" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:48.329" starttime="20160205 03:32:48.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:32:48.332" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:48.333" starttime="20160205 03:32:48.330"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.346" starttime="20160205 03:32:48.340"></status>
</kw>
<msg timestamp="20160205 03:32:48.347" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:32:48.347" starttime="20160205 03:32:48.334"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:32:48.351" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:32:48.352" starttime="20160205 03:32:48.348"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:48.353" starttime="20160205 03:32:44.114"></status>
</kw>
<test id="s1-s1-s1-s4-s2-s1-t1" name="Run MTC Busy Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.366" starttime="20160205 03:32:48.364"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:32:48.369" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:32:48.369" starttime="20160205 03:32:48.367"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:32:48.380" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 03:32:48.381" starttime="20160205 03:32:48.379"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:32:48.382" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:32:48.383" starttime="20160205 03:32:48.381"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:32:48.384" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:32:48.384" starttime="20160205 03:32:48.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:32:48.386" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160205 03:32:48.386" starttime="20160205 03:32:48.385"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:32:48.387" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 03:32:48.388" starttime="20160205 03:32:48.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:32:48.389" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 03:32:48.390" starttime="20160205 03:32:48.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:32:48.391" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:32:48.391" starttime="20160205 03:32:48.390"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:32:48.393" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 03:32:48.393" starttime="20160205 03:32:48.392"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:32:48.394" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:32:48.395" starttime="20160205 03:32:48.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:32:48.396" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:32:48.396" starttime="20160205 03:32:48.395"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:48.403" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:48.403" starttime="20160205 03:32:48.401"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:48.404" starttime="20160205 03:32:48.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:48.406" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:48.407" starttime="20160205 03:32:48.405"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:48.407" starttime="20160205 03:32:48.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:32:48.410" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:48.410" starttime="20160205 03:32:48.408"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:48.410" starttime="20160205 03:32:48.408"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:48.411" starttime="20160205 03:32:48.398"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:32:48.413" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:32:48.413" starttime="20160205 03:32:48.411"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.415" starttime="20160205 03:32:48.414"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.416" starttime="20160205 03:32:48.415"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.418" starttime="20160205 03:32:48.417"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.419" starttime="20160205 03:32:48.418"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.420" starttime="20160205 03:32:48.420"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.422" starttime="20160205 03:32:48.421"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.423" starttime="20160205 03:32:48.422"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.425" starttime="20160205 03:32:48.424"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.426" starttime="20160205 03:32:48.425"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.428" starttime="20160205 03:32:48.427"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.430" starttime="20160205 03:32:48.429"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:48.431" starttime="20160205 03:32:48.430"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:32:48.433" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:32:51.880" level="INFO">03:32:51,874 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:51.881" starttime="20160205 03:32:48.433"></status>
</kw>
<msg timestamp="20160205 03:32:51.885" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:51.885" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:32:51.883" starttime="20160205 03:32:48.432"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:32:51.898" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:32:51.897" starttime="20160205 03:32:51.894"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:51.902" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:32:51.901" starttime="20160205 03:32:51.899"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:32:51.905" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:32:51.905" starttime="20160205 03:32:51.903"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:32:51.911" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:32:51.913" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:32:51.913" starttime="20160205 03:32:51.909"></status>
</kw>
<msg timestamp="20160205 03:32:51.915" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:32:51.916" level="INFO">${return_log_entry} = 2016-02-05 03:32:51,874 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:51.914" starttime="20160205 03:32:51.907"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:51.925" starttime="20160205 03:32:51.923"></status>
</kw>
<msg timestamp="20160205 03:32:51.927" level="INFO">${return_log_entry} = 2016-02-05 03:32:51,874 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:51.926" starttime="20160205 03:32:51.917"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:51.937" starttime="20160205 03:32:51.934"></status>
</kw>
<msg timestamp="20160205 03:32:51.938" level="INFO">${return_log_entry} = 2016-02-05 03:32:51,874 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:32:51.938" starttime="20160205 03:32:51.928"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:51.948" starttime="20160205 03:32:51.946"></status>
</kw>
<msg timestamp="20160205 03:32:51.950" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:51.949" starttime="20160205 03:32:51.939"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:51.963" starttime="20160205 03:32:51.961"></status>
</kw>
<msg timestamp="20160205 03:32:51.965" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:51.964" starttime="20160205 03:32:51.951"></status>
</kw>
<msg timestamp="20160205 03:32:51.967" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:32:51.966" starttime="20160205 03:32:51.887"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:51.977" starttime="20160205 03:32:51.976"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:51.980" starttime="20160205 03:32:51.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:51.983" starttime="20160205 03:32:51.981"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:32:51.995" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:32:51.996" starttime="20160205 03:32:51.992"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:51.997" starttime="20160205 03:32:51.990"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:51.998" starttime="20160205 03:32:51.984"></status>
</kw>
<status status="PASS" endtime="20160205 03:32:51.999" starttime="20160205 03:32:51.969"></status>
</kw>
<msg timestamp="20160205 03:32:52.002" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:32:52.001" starttime="20160205 03:32:48.372"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160205 03:32:52.005" level="INFO">${calling_party_msisdn} = 525516001001</msg>
<status status="PASS" endtime="20160205 03:32:52.005" starttime="20160205 03:32:52.003"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:32:52.007" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:32:52.007" starttime="20160205 03:32:52.006"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:52.009" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:32:52.009" starttime="20160205 03:32:52.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run busy MTC *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:52.010" starttime="20160205 03:32:52.010"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:32:52.012" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160205 03:32:52.012" starttime="20160205 03:32:52.011"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Busy">
<doc>Runs a busy non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-busy</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:32:52.027" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:32:52.026" starttime="20160205 03:32:52.025"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:32:52.029" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:32:52.028" starttime="20160205 03:32:52.027"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:32:52.030" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:32:52.030" starttime="20160205 03:32:52.029"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:32:52.032" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs</msg>
<status status="PASS" endtime="20160205 03:32:52.032" starttime="20160205 03:32:52.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:52.034" starttime="20160205 03:32:52.033"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:32:52.036" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:52.037" starttime="20160205 03:32:52.034"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:52.038" starttime="20160205 03:32:52.037"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:32:52.040" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:52.040" starttime="20160205 03:32:52.038"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:32:52.043" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:52.043" starttime="20160205 03:32:52.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:52.044" starttime="20160205 03:32:52.044"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:32:52.047" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:52.047" starttime="20160205 03:32:52.045"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:32:52.050" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:32:52.050" starttime="20160205 03:32:52.047"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:32:52.051" starttime="20160205 03:32:52.051"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:32:52.059" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:33:01.661" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:33:01.658" starttime="20160205 03:32:52.052"></status>
</kw>
<msg timestamp="20160205 03:33:01.665" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:33:01.663" starttime="20160205 03:32:52.020"></status>
</kw>
<msg timestamp="20160205 03:33:01.668" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:33:01.666" starttime="20160205 03:32:52.014"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:01.671" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:33:01.673" starttime="20160205 03:33:01.669"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:33:01.677" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:33:01.678" starttime="20160205 03:33:01.674"></status>
</kw>
<doc>Test will make a busy MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:33:01.679" starttime="20160205 03:32:48.356"></status>
</test>
<doc>Testing the prepaid busy MTC call (called party is busy)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:33:01.689" starttime="20160205 03:32:43.979"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:33:01.705" starttime="20160205 03:32:43.964"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer" id="s1-s1-s1-s4-s3" name="MTC PREPAID-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer/MTC_PREPAID-NoAnswer-robot-suite.txt" id="s1-s1-s1-s4-s3-s1" name="MTC PREPAID-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:33:01.960" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:33:01.964" level="INFO">${date} = Fri Feb  5 03:33:01 CET 2016</msg>
<status status="PASS" endtime="20160205 03:33:01.964" starttime="20160205 03:33:01.952"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:01.968" level="INFO">Date and time: Fri Feb  5 03:33:01 CET 2016</msg>
<status status="PASS" endtime="20160205 03:33:01.969" starttime="20160205 03:33:01.966"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:01.973" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160205 03:33:01.974" starttime="20160205 03:33:01.971"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:02.025" starttime="20160205 03:33:02.023"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:02.088" starttime="20160205 03:33:02.034"></status>
</kw>
<msg timestamp="20160205 03:33:02.090" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20160205 03:33:02.090" starttime="20160205 03:33:02.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:33:02.101" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:33:02.566" level="INFO">Read output: Last login: Fri Feb  5 02:32:44 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:33:02.567" starttime="20160205 03:33:02.098"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:02.567" starttime="20160205 03:33:02.092"></status>
</kw>
<msg timestamp="20160205 03:33:02.568" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20160205 03:33:02.568" starttime="20160205 03:33:02.013"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:33:02.573" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:33:02.572" starttime="20160205 03:33:02.569"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:33:02.574" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160205 03:33:03.115" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:03.118" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:33:03.117" starttime="20160205 03:33:02.573"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:03.125" starttime="20160205 03:33:03.122"></status>
</kw>
<msg timestamp="20160205 03:33:03.127" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:33:03.128" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:33:03.126" starttime="20160205 03:33:03.120"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:03.138" starttime="20160205 03:33:03.136"></status>
</kw>
<msg timestamp="20160205 03:33:03.139" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:03.139" starttime="20160205 03:33:03.129"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:33:03.143" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:33:03.143" starttime="20160205 03:33:03.141"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:33:03.147" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:33:03.147" starttime="20160205 03:33:03.145"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:03.150" starttime="20160205 03:33:03.148"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:03.161" starttime="20160205 03:33:03.159"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:33:03.167" starttime="20160205 03:33:03.163"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:03.168" starttime="20160205 03:33:03.151"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:03.177" starttime="20160205 03:33:03.175"></status>
</kw>
<msg timestamp="20160205 03:33:03.179" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:33:03.178" starttime="20160205 03:33:03.169"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:03.182" starttime="20160205 03:33:03.180"></status>
</kw>
<msg timestamp="20160205 03:33:03.185" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:33:03.186" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:33:03.184" starttime="20160205 03:33:01.990"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:03.237" starttime="20160205 03:33:03.235"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:03.301" starttime="20160205 03:33:03.245"></status>
</kw>
<msg timestamp="20160205 03:33:03.302" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20160205 03:33:03.302" starttime="20160205 03:33:03.238"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:33:03.312" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:33:03.792" level="INFO">Read output: Last login: Fri Feb  5 02:32:45 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:33:03.793" starttime="20160205 03:33:03.310"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:03.793" starttime="20160205 03:33:03.304"></status>
</kw>
<msg timestamp="20160205 03:33:03.794" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20160205 03:33:03.794" starttime="20160205 03:33:03.226"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:33:03.799" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:33:03.798" starttime="20160205 03:33:03.795"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:33:03.800" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:33:04.283" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:04.284" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:33:04.283" starttime="20160205 03:33:03.799"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:04.287" starttime="20160205 03:33:04.286"></status>
</kw>
<msg timestamp="20160205 03:33:04.288" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:33:04.288" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:33:04.288" starttime="20160205 03:33:04.285"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:04.293" starttime="20160205 03:33:04.292"></status>
</kw>
<msg timestamp="20160205 03:33:04.293" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:04.293" starttime="20160205 03:33:04.289"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:33:04.295" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:33:04.295" starttime="20160205 03:33:04.294"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:33:04.297" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:33:04.297" starttime="20160205 03:33:04.296"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:04.298" starttime="20160205 03:33:04.298"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:04.303" starttime="20160205 03:33:04.302"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:33:04.305" starttime="20160205 03:33:04.304"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:04.310" starttime="20160205 03:33:04.299"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:04.321" starttime="20160205 03:33:04.319"></status>
</kw>
<msg timestamp="20160205 03:33:04.323" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:33:04.322" starttime="20160205 03:33:04.312"></status>
</kw>
<msg timestamp="20160205 03:33:04.326" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:33:04.327" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:33:04.325" starttime="20160205 03:33:03.201"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:04.378" starttime="20160205 03:33:04.376"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:04.440" starttime="20160205 03:33:04.386"></status>
</kw>
<msg timestamp="20160205 03:33:04.442" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20160205 03:33:04.441" starttime="20160205 03:33:04.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:33:04.452" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:33:04.949" level="INFO">Read output: Last login: Fri Feb  5 02:32:46 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:33:04.950" starttime="20160205 03:33:04.449"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:04.950" starttime="20160205 03:33:04.443"></status>
</kw>
<msg timestamp="20160205 03:33:04.951" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20160205 03:33:04.951" starttime="20160205 03:33:04.367"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:33:04.955" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:33:04.955" starttime="20160205 03:33:04.952"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:33:04.957" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:33:05.253" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:05.256" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:33:05.254" starttime="20160205 03:33:04.956"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:05.263" starttime="20160205 03:33:05.260"></status>
</kw>
<msg timestamp="20160205 03:33:05.265" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:33:05.265" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:33:05.264" starttime="20160205 03:33:05.258"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:05.274" starttime="20160205 03:33:05.273"></status>
</kw>
<msg timestamp="20160205 03:33:05.276" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:05.275" starttime="20160205 03:33:05.266"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:33:05.280" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:33:05.279" starttime="20160205 03:33:05.277"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:33:05.284" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:33:05.283" starttime="20160205 03:33:05.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:05.287" starttime="20160205 03:33:05.285"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:05.297" starttime="20160205 03:33:05.295"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:33:05.303" starttime="20160205 03:33:05.299"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:05.304" starttime="20160205 03:33:05.288"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:05.313" starttime="20160205 03:33:05.311"></status>
</kw>
<msg timestamp="20160205 03:33:05.314" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:33:05.314" starttime="20160205 03:33:05.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:05.317" starttime="20160205 03:33:05.315"></status>
</kw>
<msg timestamp="20160205 03:33:05.320" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:33:05.321" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:33:05.319" starttime="20160205 03:33:04.343"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:05.371" starttime="20160205 03:33:05.369"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:05.418" starttime="20160205 03:33:05.378"></status>
</kw>
<msg timestamp="20160205 03:33:05.419" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20160205 03:33:05.418" starttime="20160205 03:33:05.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:33:05.424" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:33:05.896" level="INFO">Read output: Last login: Fri Feb  5 02:32:47 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:33:05.897" starttime="20160205 03:33:05.423"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:05.897" starttime="20160205 03:33:05.419"></status>
</kw>
<msg timestamp="20160205 03:33:05.899" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20160205 03:33:05.898" starttime="20160205 03:33:05.360"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:33:05.902" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:33:05.902" starttime="20160205 03:33:05.899"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:33:05.904" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:33:05.992" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:05.993" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:33:05.992" starttime="20160205 03:33:05.903"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:05.996" starttime="20160205 03:33:05.994"></status>
</kw>
<msg timestamp="20160205 03:33:05.996" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:33:05.997" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:33:05.996" starttime="20160205 03:33:05.993"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.001" starttime="20160205 03:33:06.000"></status>
</kw>
<msg timestamp="20160205 03:33:06.002" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:06.002" starttime="20160205 03:33:05.997"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:33:06.004" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:33:06.004" starttime="20160205 03:33:06.003"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:33:06.006" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:33:06.006" starttime="20160205 03:33:06.005"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.007" starttime="20160205 03:33:06.006"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.012" starttime="20160205 03:33:06.011"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.015" starttime="20160205 03:33:06.013"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:06.015" starttime="20160205 03:33:06.008"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.019" starttime="20160205 03:33:06.018"></status>
</kw>
<msg timestamp="20160205 03:33:06.022" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:33:06.020" starttime="20160205 03:33:06.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.023" starttime="20160205 03:33:06.023"></status>
</kw>
<msg timestamp="20160205 03:33:06.025" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:33:06.025" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:33:06.024" starttime="20160205 03:33:05.336"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:06.027" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:33:06.028" starttime="20160205 03:33:06.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:06.029" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:33:06.030" starttime="20160205 03:33:06.028"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:06.031" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:33:06.032" starttime="20160205 03:33:06.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:06.033" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:33:06.034" starttime="20160205 03:33:06.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:33:06.036" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:33:06.036" starttime="20160205 03:33:06.035"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:33:06.037" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:33:06.038" starttime="20160205 03:33:06.036"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:33:06.039" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:33:06.040" starttime="20160205 03:33:06.038"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:33:06.041" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:33:06.041" starttime="20160205 03:33:06.040"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.047" starttime="20160205 03:33:06.045"></status>
</kw>
<msg timestamp="20160205 03:33:06.048" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:33:06.048" starttime="20160205 03:33:06.042"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:33:06.050" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:33:06.050" starttime="20160205 03:33:06.048"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:06.051" starttime="20160205 03:33:01.949"></status>
</kw>
<test id="s1-s1-s1-s4-s3-s1-t1" name="Run MTC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.056" starttime="20160205 03:33:06.056"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:33:06.058" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:33:06.058" starttime="20160205 03:33:06.057"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:33:06.065" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 03:33:06.065" starttime="20160205 03:33:06.064"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:33:06.067" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:33:06.067" starttime="20160205 03:33:06.066"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:33:06.068" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:33:06.069" starttime="20160205 03:33:06.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:33:06.070" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160205 03:33:06.070" starttime="20160205 03:33:06.069"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:33:06.072" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 03:33:06.072" starttime="20160205 03:33:06.071"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:33:06.074" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 03:33:06.074" starttime="20160205 03:33:06.073"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:33:06.075" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:33:06.076" starttime="20160205 03:33:06.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:33:06.077" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 03:33:06.077" starttime="20160205 03:33:06.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:33:06.079" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:33:06.079" starttime="20160205 03:33:06.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:33:06.081" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:33:06.081" starttime="20160205 03:33:06.080"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:33:06.087" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:06.088" starttime="20160205 03:33:06.086"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:06.088" starttime="20160205 03:33:06.085"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:33:06.091" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:06.091" starttime="20160205 03:33:06.090"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:06.092" starttime="20160205 03:33:06.089"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:33:06.094" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:06.095" starttime="20160205 03:33:06.093"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:06.095" starttime="20160205 03:33:06.092"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:06.095" starttime="20160205 03:33:06.082"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:33:06.098" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:33:06.098" starttime="20160205 03:33:06.096"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.099" starttime="20160205 03:33:06.098"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.101" starttime="20160205 03:33:06.100"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.103" starttime="20160205 03:33:06.102"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.104" starttime="20160205 03:33:06.103"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.105" starttime="20160205 03:33:06.104"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.107" starttime="20160205 03:33:06.106"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.108" starttime="20160205 03:33:06.107"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.110" starttime="20160205 03:33:06.109"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.111" starttime="20160205 03:33:06.110"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.113" starttime="20160205 03:33:06.112"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.114" starttime="20160205 03:33:06.113"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:06.116" starttime="20160205 03:33:06.115"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:33:06.118" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:33:09.032" level="INFO">03:33:09,026 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:33:09.034" starttime="20160205 03:33:06.117"></status>
</kw>
<msg timestamp="20160205 03:33:09.038" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:33:09.038" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:33:09.036" starttime="20160205 03:33:06.116"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:33:09.073" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:33:09.071" starttime="20160205 03:33:09.067"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:33:09.079" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:33:09.078" starttime="20160205 03:33:09.076"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:33:09.084" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:33:09.083" starttime="20160205 03:33:09.081"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:33:09.090" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:33:09.091" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:33:09.092" starttime="20160205 03:33:09.087"></status>
</kw>
<msg timestamp="20160205 03:33:09.094" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:33:09.095" level="INFO">${return_log_entry} = 2016-02-05 03:33:09,026 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:33:09.093" starttime="20160205 03:33:09.085"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:09.105" starttime="20160205 03:33:09.103"></status>
</kw>
<msg timestamp="20160205 03:33:09.107" level="INFO">${return_log_entry} = 2016-02-05 03:33:09,026 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:33:09.106" starttime="20160205 03:33:09.096"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:09.118" starttime="20160205 03:33:09.116"></status>
</kw>
<msg timestamp="20160205 03:33:09.119" level="INFO">${return_log_entry} = 2016-02-05 03:33:09,026 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:33:09.119" starttime="20160205 03:33:09.108"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:09.130" starttime="20160205 03:33:09.127"></status>
</kw>
<msg timestamp="20160205 03:33:09.131" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:09.131" starttime="20160205 03:33:09.121"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:09.145" starttime="20160205 03:33:09.142"></status>
</kw>
<msg timestamp="20160205 03:33:09.146" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:09.146" starttime="20160205 03:33:09.133"></status>
</kw>
<msg timestamp="20160205 03:33:09.148" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:09.148" starttime="20160205 03:33:09.055"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:09.159" starttime="20160205 03:33:09.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:09.161" starttime="20160205 03:33:09.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:09.164" starttime="20160205 03:33:09.162"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:33:09.178" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:33:09.179" starttime="20160205 03:33:09.174"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:09.179" starttime="20160205 03:33:09.172"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:09.180" starttime="20160205 03:33:09.166"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:09.182" starttime="20160205 03:33:09.150"></status>
</kw>
<msg timestamp="20160205 03:33:09.185" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:33:09.183" starttime="20160205 03:33:06.059"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160205 03:33:09.191" level="INFO">${calling_party_msisdn} = 525516001001</msg>
<status status="PASS" endtime="20160205 03:33:09.190" starttime="20160205 03:33:09.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:33:09.194" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:33:09.195" starttime="20160205 03:33:09.193"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:09.198" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:33:09.200" starttime="20160205 03:33:09.196"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:09.203" starttime="20160205 03:33:09.201"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:09.205" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160205 03:33:09.207" starttime="20160205 03:33:09.204"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC NoAnswer">
<doc>Runs a noAnswer non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-noanswer</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:33:09.237" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:33:09.236" starttime="20160205 03:33:09.234"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:33:09.241" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:33:09.240" starttime="20160205 03:33:09.238"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:33:09.245" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:33:09.245" starttime="20160205 03:33:09.242"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:33:09.249" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs</msg>
<status status="PASS" endtime="20160205 03:33:09.249" starttime="20160205 03:33:09.246"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:09.252" starttime="20160205 03:33:09.250"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:33:09.255" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:09.255" starttime="20160205 03:33:09.252"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:09.256" starttime="20160205 03:33:09.255"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:33:09.258" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:09.258" starttime="20160205 03:33:09.257"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:33:09.261" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:09.261" starttime="20160205 03:33:09.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:09.263" starttime="20160205 03:33:09.262"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:33:09.265" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:09.265" starttime="20160205 03:33:09.263"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:33:09.268" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:09.268" starttime="20160205 03:33:09.266"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:09.270" starttime="20160205 03:33:09.269"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:33:09.278" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:33:14.739" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:33:14.736" starttime="20160205 03:33:09.270"></status>
</kw>
<msg timestamp="20160205 03:33:14.742" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:33:14.740" starttime="20160205 03:33:09.222"></status>
</kw>
<msg timestamp="20160205 03:33:14.746" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:33:14.744" starttime="20160205 03:33:09.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:14.749" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:33:14.750" starttime="20160205 03:33:14.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:33:14.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:33:14.755" starttime="20160205 03:33:14.752"></status>
</kw>
<doc>Test will make the no answer MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:33:14.757" starttime="20160205 03:33:06.052"></status>
</test>
<doc>Testing the prepaid the no answer MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:33:14.766" starttime="20160205 03:33:01.751"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:33:14.786" starttime="20160205 03:33:01.717"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration" id="s1-s1-s1-s4-s4" name="MTC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration/MTC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s1-s1-s4-s4-s1" name="MTC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:33:15.132" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:33:15.139" level="INFO">${date} = Fri Feb  5 03:33:15 CET 2016</msg>
<status status="PASS" endtime="20160205 03:33:15.138" starttime="20160205 03:33:15.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:15.142" level="INFO">Date and time: Fri Feb  5 03:33:15 CET 2016</msg>
<status status="PASS" endtime="20160205 03:33:15.143" starttime="20160205 03:33:15.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:15.147" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160205 03:33:15.148" starttime="20160205 03:33:15.145"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:15.195" starttime="20160205 03:33:15.193"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:15.246" starttime="20160205 03:33:15.203"></status>
</kw>
<msg timestamp="20160205 03:33:15.247" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20160205 03:33:15.247" starttime="20160205 03:33:15.196"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:33:15.253" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:33:15.667" level="INFO">Read output: Last login: Fri Feb  5 02:33:02 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:33:15.668" starttime="20160205 03:33:15.252"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:15.668" starttime="20160205 03:33:15.248"></status>
</kw>
<msg timestamp="20160205 03:33:15.669" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20160205 03:33:15.669" starttime="20160205 03:33:15.184"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:33:15.674" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:33:15.673" starttime="20160205 03:33:15.670"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:33:15.675" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160205 03:33:16.123" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:16.124" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:33:16.123" starttime="20160205 03:33:15.674"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:16.128" starttime="20160205 03:33:16.126"></status>
</kw>
<msg timestamp="20160205 03:33:16.128" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:33:16.129" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:33:16.128" starttime="20160205 03:33:16.125"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:16.133" starttime="20160205 03:33:16.132"></status>
</kw>
<msg timestamp="20160205 03:33:16.134" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:16.134" starttime="20160205 03:33:16.129"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:33:16.136" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160205 03:33:16.135" starttime="20160205 03:33:16.134"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:33:16.137" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:33:16.137" starttime="20160205 03:33:16.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:16.139" starttime="20160205 03:33:16.138"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:16.143" starttime="20160205 03:33:16.142"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:33:16.146" starttime="20160205 03:33:16.144"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:16.147" starttime="20160205 03:33:16.139"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:16.151" starttime="20160205 03:33:16.150"></status>
</kw>
<msg timestamp="20160205 03:33:16.151" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:33:16.151" starttime="20160205 03:33:16.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:16.153" starttime="20160205 03:33:16.152"></status>
</kw>
<msg timestamp="20160205 03:33:16.154" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:33:16.155" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:33:16.154" starttime="20160205 03:33:15.162"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:16.177" starttime="20160205 03:33:16.176"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:16.336" starttime="20160205 03:33:16.181"></status>
</kw>
<msg timestamp="20160205 03:33:16.337" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20160205 03:33:16.337" starttime="20160205 03:33:16.178"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:33:16.342" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:33:17.057" level="INFO">Read output: Last login: Fri Feb  5 02:33:03 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:33:17.058" starttime="20160205 03:33:16.341"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:17.059" starttime="20160205 03:33:16.338"></status>
</kw>
<msg timestamp="20160205 03:33:17.061" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20160205 03:33:17.060" starttime="20160205 03:33:16.172"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:33:17.064" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:33:17.064" starttime="20160205 03:33:17.061"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:33:17.066" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:33:17.635" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:17.636" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:33:17.635" starttime="20160205 03:33:17.065"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:17.639" starttime="20160205 03:33:17.638"></status>
</kw>
<msg timestamp="20160205 03:33:17.640" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:33:17.640" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:33:17.640" starttime="20160205 03:33:17.636"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:17.645" starttime="20160205 03:33:17.644"></status>
</kw>
<msg timestamp="20160205 03:33:17.646" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:17.645" starttime="20160205 03:33:17.641"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:33:17.647" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:33:17.647" starttime="20160205 03:33:17.646"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:33:17.649" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:33:17.649" starttime="20160205 03:33:17.648"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:17.650" starttime="20160205 03:33:17.649"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:17.655" starttime="20160205 03:33:17.654"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:33:17.658" starttime="20160205 03:33:17.656"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:17.658" starttime="20160205 03:33:17.651"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:17.662" starttime="20160205 03:33:17.662"></status>
</kw>
<msg timestamp="20160205 03:33:17.663" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:33:17.663" starttime="20160205 03:33:17.659"></status>
</kw>
<msg timestamp="20160205 03:33:17.665" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:33:17.665" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:33:17.664" starttime="20160205 03:33:16.161"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:17.687" starttime="20160205 03:33:17.686"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:17.763" starttime="20160205 03:33:17.690"></status>
</kw>
<msg timestamp="20160205 03:33:17.766" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20160205 03:33:17.765" starttime="20160205 03:33:17.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:33:17.777" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:33:18.307" level="INFO">Read output: Last login: Fri Feb  5 02:33:04 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:33:18.308" starttime="20160205 03:33:17.774"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:18.309" starttime="20160205 03:33:17.767"></status>
</kw>
<msg timestamp="20160205 03:33:18.311" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20160205 03:33:18.310" starttime="20160205 03:33:17.682"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:33:18.315" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:33:18.315" starttime="20160205 03:33:18.311"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:33:18.316" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:33:18.525" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:18.527" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:33:18.526" starttime="20160205 03:33:18.315"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:18.530" starttime="20160205 03:33:18.529"></status>
</kw>
<msg timestamp="20160205 03:33:18.531" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:33:18.531" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:33:18.530" starttime="20160205 03:33:18.528"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:18.535" starttime="20160205 03:33:18.535"></status>
</kw>
<msg timestamp="20160205 03:33:18.536" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:18.536" starttime="20160205 03:33:18.532"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:33:18.538" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:33:18.538" starttime="20160205 03:33:18.537"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:33:18.540" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:33:18.539" starttime="20160205 03:33:18.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:18.541" starttime="20160205 03:33:18.540"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:18.546" starttime="20160205 03:33:18.545"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:33:18.547" starttime="20160205 03:33:18.546"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:18.549" starttime="20160205 03:33:18.541"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:18.553" starttime="20160205 03:33:18.552"></status>
</kw>
<msg timestamp="20160205 03:33:18.554" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:33:18.554" starttime="20160205 03:33:18.550"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:18.555" starttime="20160205 03:33:18.554"></status>
</kw>
<msg timestamp="20160205 03:33:18.557" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:33:18.557" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:33:18.556" starttime="20160205 03:33:17.672"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:18.579" starttime="20160205 03:33:18.578"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:18.638" starttime="20160205 03:33:18.584"></status>
</kw>
<msg timestamp="20160205 03:33:18.641" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20160205 03:33:18.640" starttime="20160205 03:33:18.580"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:33:18.652" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:33:19.087" level="INFO">Read output: Last login: Fri Feb  5 02:33:05 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:33:19.089" starttime="20160205 03:33:18.650"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:19.090" starttime="20160205 03:33:18.642"></status>
</kw>
<msg timestamp="20160205 03:33:19.092" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20160205 03:33:19.091" starttime="20160205 03:33:18.574"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:33:19.097" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:33:19.096" starttime="20160205 03:33:19.093"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:33:19.098" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:33:19.190" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:19.191" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:33:19.190" starttime="20160205 03:33:19.097"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.196" starttime="20160205 03:33:19.193"></status>
</kw>
<msg timestamp="20160205 03:33:19.197" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:33:19.197" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:33:19.196" starttime="20160205 03:33:19.192"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.204" starttime="20160205 03:33:19.203"></status>
</kw>
<msg timestamp="20160205 03:33:19.205" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:19.204" starttime="20160205 03:33:19.198"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:33:19.208" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160205 03:33:19.207" starttime="20160205 03:33:19.206"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:33:19.211" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:33:19.210" starttime="20160205 03:33:19.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.212" starttime="20160205 03:33:19.211"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.219" starttime="20160205 03:33:19.218"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.223" starttime="20160205 03:33:19.220"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:19.224" starttime="20160205 03:33:19.214"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.229" starttime="20160205 03:33:19.228"></status>
</kw>
<msg timestamp="20160205 03:33:19.230" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:33:19.230" starttime="20160205 03:33:19.225"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.232" starttime="20160205 03:33:19.231"></status>
</kw>
<msg timestamp="20160205 03:33:19.234" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:33:19.234" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:33:19.233" starttime="20160205 03:33:18.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:19.237" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160205 03:33:19.238" starttime="20160205 03:33:19.235"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:19.240" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160205 03:33:19.241" starttime="20160205 03:33:19.238"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:19.243" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160205 03:33:19.244" starttime="20160205 03:33:19.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:19.246" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160205 03:33:19.247" starttime="20160205 03:33:19.244"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:33:19.249" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:33:19.249" starttime="20160205 03:33:19.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:33:19.251" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:33:19.252" starttime="20160205 03:33:19.250"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:33:19.255" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:33:19.256" starttime="20160205 03:33:19.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:33:19.259" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:33:19.260" starttime="20160205 03:33:19.257"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.273" starttime="20160205 03:33:19.267"></status>
</kw>
<msg timestamp="20160205 03:33:19.274" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:33:19.274" starttime="20160205 03:33:19.261"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:33:19.278" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:33:19.279" starttime="20160205 03:33:19.275"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:19.280" starttime="20160205 03:33:15.125"></status>
</kw>
<test id="s1-s1-s1-s4-s4-s1-t1" name="Run MTC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.292" starttime="20160205 03:33:19.291"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:33:19.296" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:33:19.295" starttime="20160205 03:33:19.293"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:33:19.311" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 03:33:19.311" starttime="20160205 03:33:19.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:33:19.314" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:33:19.315" starttime="20160205 03:33:19.312"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:33:19.318" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:33:19.319" starttime="20160205 03:33:19.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:33:19.322" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160205 03:33:19.323" starttime="20160205 03:33:19.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:33:19.326" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 03:33:19.326" starttime="20160205 03:33:19.324"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:33:19.329" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 03:33:19.330" starttime="20160205 03:33:19.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:33:19.333" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:33:19.334" starttime="20160205 03:33:19.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:33:19.337" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 03:33:19.338" starttime="20160205 03:33:19.335"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:33:19.341" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:33:19.341" starttime="20160205 03:33:19.339"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:33:19.344" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:33:19.345" starttime="20160205 03:33:19.342"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:33:19.359" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:19.360" starttime="20160205 03:33:19.356"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:19.361" starttime="20160205 03:33:19.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:33:19.366" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:19.367" starttime="20160205 03:33:19.364"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:19.368" starttime="20160205 03:33:19.362"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:33:19.374" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:19.375" starttime="20160205 03:33:19.371"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:19.375" starttime="20160205 03:33:19.369"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:19.377" starttime="20160205 03:33:19.348"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:33:19.379" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:33:19.379" starttime="20160205 03:33:19.377"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.381" starttime="20160205 03:33:19.380"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.382" starttime="20160205 03:33:19.381"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.384" starttime="20160205 03:33:19.383"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.385" starttime="20160205 03:33:19.384"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.386" starttime="20160205 03:33:19.385"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.388" starttime="20160205 03:33:19.387"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.389" starttime="20160205 03:33:19.388"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.391" starttime="20160205 03:33:19.390"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.392" starttime="20160205 03:33:19.391"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.394" starttime="20160205 03:33:19.393"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.395" starttime="20160205 03:33:19.394"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:19.397" starttime="20160205 03:33:19.396"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:33:19.399" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:33:22.480" level="INFO">03:33:22,474 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:33:22.481" starttime="20160205 03:33:19.398"></status>
</kw>
<msg timestamp="20160205 03:33:22.485" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:33:22.485" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:33:22.483" starttime="20160205 03:33:19.397"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:33:22.498" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:33:22.497" starttime="20160205 03:33:22.494"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:33:22.502" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:33:22.501" starttime="20160205 03:33:22.499"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:33:22.505" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:33:22.505" starttime="20160205 03:33:22.503"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:33:22.511" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:33:22.514" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:33:22.515" starttime="20160205 03:33:22.509"></status>
</kw>
<msg timestamp="20160205 03:33:22.517" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:33:22.517" level="INFO">${return_log_entry} = 2016-02-05 03:33:22,474 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:33:22.516" starttime="20160205 03:33:22.507"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:22.527" starttime="20160205 03:33:22.525"></status>
</kw>
<msg timestamp="20160205 03:33:22.528" level="INFO">${return_log_entry} = 2016-02-05 03:33:22,474 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:33:22.528" starttime="20160205 03:33:22.518"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:22.538" starttime="20160205 03:33:22.536"></status>
</kw>
<msg timestamp="20160205 03:33:22.539" level="INFO">${return_log_entry} = 2016-02-05 03:33:22,474 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:33:22.539" starttime="20160205 03:33:22.530"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:22.549" starttime="20160205 03:33:22.546"></status>
</kw>
<msg timestamp="20160205 03:33:22.550" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:22.550" starttime="20160205 03:33:22.540"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:22.564" starttime="20160205 03:33:22.562"></status>
</kw>
<msg timestamp="20160205 03:33:22.565" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:22.565" starttime="20160205 03:33:22.552"></status>
</kw>
<msg timestamp="20160205 03:33:22.567" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:22.567" starttime="20160205 03:33:22.487"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:22.578" starttime="20160205 03:33:22.576"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:22.580" starttime="20160205 03:33:22.579"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:22.583" starttime="20160205 03:33:22.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:33:22.595" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:33:22.596" starttime="20160205 03:33:22.592"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:22.597" starttime="20160205 03:33:22.590"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:22.598" starttime="20160205 03:33:22.584"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:22.599" starttime="20160205 03:33:22.569"></status>
</kw>
<msg timestamp="20160205 03:33:22.602" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:33:22.600" starttime="20160205 03:33:19.298"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160205 03:33:22.608" level="INFO">${calling_party_msisdn} = 525516001001</msg>
<status status="PASS" endtime="20160205 03:33:22.608" starttime="20160205 03:33:22.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:33:22.611" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:33:22.612" starttime="20160205 03:33:22.610"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:22.615" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:33:22.616" starttime="20160205 03:33:22.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:22.619" starttime="20160205 03:33:22.617"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:22.621" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160205 03:33:22.623" starttime="20160205 03:33:22.620"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC 1s">
<doc>Runs a standard (i.e. non-roaming) MTC 1s session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:33:22.638" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:33:22.638" starttime="20160205 03:33:22.637"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:33:22.640" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:33:22.640" starttime="20160205 03:33:22.639"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:33:22.642" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:33:22.642" starttime="20160205 03:33:22.641"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:33:22.644" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs</msg>
<status status="PASS" endtime="20160205 03:33:22.644" starttime="20160205 03:33:22.643"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:22.645" starttime="20160205 03:33:22.644"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:33:22.648" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:22.648" starttime="20160205 03:33:22.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:22.649" starttime="20160205 03:33:22.649"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:33:22.651" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:22.652" starttime="20160205 03:33:22.650"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:33:22.654" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:22.654" starttime="20160205 03:33:22.652"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:22.656" starttime="20160205 03:33:22.655"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:33:22.658" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:22.658" starttime="20160205 03:33:22.656"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:33:22.661" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:22.661" starttime="20160205 03:33:22.658"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:22.662" starttime="20160205 03:33:22.662"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:33:22.673" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:33:29.657" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:33:29.656" starttime="20160205 03:33:22.663"></status>
</kw>
<msg timestamp="20160205 03:33:29.659" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:33:29.658" starttime="20160205 03:33:22.632"></status>
</kw>
<msg timestamp="20160205 03:33:29.660" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:33:29.659" starttime="20160205 03:33:22.625"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:29.661" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:33:29.662" starttime="20160205 03:33:29.661"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:33:29.664" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:33:29.664" starttime="20160205 03:33:29.663"></status>
</kw>
<doc>Test will make a short MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:33:29.665" starttime="20160205 03:33:19.282"></status>
</test>
<doc>Testing the prepaid MTC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:33:29.669" starttime="20160205 03:33:14.832"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:33:29.676" starttime="20160205 03:33:14.798"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:33:29.689" starttime="20160205 03:32:22.742"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160205 03:33:29.729" starttime="20160205 03:28:47.667"></status>
</suite>
<doc>This robot framework initialization file is used to globaly assign tags to
all test suites located in or below the current folder
For a complete list of tags allowed for folder assignement
see &lt;workspace root&gt;/tagging-rules.txt</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160205 03:33:29.794" starttime="20160205 03:28:47.640"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd" id="s1-s2" name="Ussd">
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd/MVNA_MEX" id="s1-s2-s1" name="MVNA MEX">
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd/MVNA_MEX/ussd-robot-suite.txt" id="s1-s2-s1-s1" name="Ussd-Robot-Suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:33:30.016" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:33:30.021" level="INFO">${time} = Fri Feb  5 03:33:30 CET 2016</msg>
<status status="PASS" endtime="20160205 03:33:30.021" starttime="20160205 03:33:30.013"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:30.023" level="INFO">Date and time: Fri Feb  5 03:33:30 CET 2016</msg>
<status status="PASS" endtime="20160205 03:33:30.024" starttime="20160205 03:33:30.022"></status>
</kw>
<kw type="kw" name="${conn_id} = SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${USSD HOST}</arg>
</arguments>
<msg timestamp="20160205 03:33:30.053" level="INFO">${conn_id} = 40</msg>
<status status="PASS" endtime="20160205 03:33:30.052" starttime="20160205 03:33:30.024"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${conn_id}</arg>
</arguments>
<msg timestamp="20160205 03:33:30.055" level="INFO">${conn_id} = 40</msg>
<status status="PASS" endtime="20160205 03:33:30.055" starttime="20160205 03:33:30.054"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USSD USER}</arg>
<arg>${USSD PWD}</arg>
</arguments>
<msg timestamp="20160205 03:33:30.056" level="INFO">Logging into '10.105.119.167:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:33:31.970" level="INFO">Read output: Last login: Fri Feb  5 00:40:12 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ussd-app01.tb19 ~]$[m</msg>
<msg timestamp="20160205 03:33:31.972" level="INFO">${output_login} = Last login: Fri Feb  5 00:40:12 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ussd-app01.tb19 ~]$[m </msg>
<status status="PASS" endtime="20160205 03:33:31.971" starttime="20160205 03:33:30.055"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160205 03:33:31.973" level="INFO">Last login: Fri Feb  5 00:40:12 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ussd-app01.tb19 ~]$[m </msg>
<status status="PASS" endtime="20160205 03:33:31.974" starttime="20160205 03:33:31.972"></status>
</kw>
<kw type="kw" name="SSHLibrary.Put File">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/robot_testsuites/ussd/tool/USSDtest.py</arg>
<arg>${USSD HOME}/ussd/</arg>
</arguments>
<msg timestamp="20160205 03:33:32.051" level="INFO">'/opt/robot/robotworkspace/robot_testsuites/ussd/tool/USSDtest.py' -&gt; '/home/qa_automation//ussd//USSDtest.py'</msg>
<status status="PASS" endtime="20160205 03:33:32.051" starttime="20160205 03:33:31.974"></status>
</kw>
<kw type="kw" name="SSHLibrary.File Should Exist">
<doc>Fails if the given `path` does NOT point to an existing file.</doc>
<arguments>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:32.055" starttime="20160205 03:33:32.052"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ussd_tool}</arg>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<msg timestamp="20160205 03:33:32.062" level="INFO">${ussd_tool} = /home/qa_automation/ussd/USSDtest.py</msg>
<status status="PASS" endtime="20160205 03:33:32.062" starttime="20160205 03:33:32.055"></status>
</kw>
<kw type="kw" name="Create Subscriber">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:33:32.067" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:33:32.066" starttime="20160205 03:33:32.066"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:33:32.074" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160205 03:33:32.074" starttime="20160205 03:33:32.073"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:33:32.075" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:33:32.076" starttime="20160205 03:33:32.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:33:32.077" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:33:32.077" starttime="20160205 03:33:32.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:33:32.079" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160205 03:33:32.079" starttime="20160205 03:33:32.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:33:32.081" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160205 03:33:32.081" starttime="20160205 03:33:32.080"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:33:32.082" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160205 03:33:32.083" starttime="20160205 03:33:32.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:33:32.084" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:33:32.085" starttime="20160205 03:33:32.083"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:33:32.086" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160205 03:33:32.086" starttime="20160205 03:33:32.085"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:33:32.088" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:33:32.088" starttime="20160205 03:33:32.087"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:33:32.090" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:33:32.090" starttime="20160205 03:33:32.089"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:33:32.096" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:32.097" starttime="20160205 03:33:32.095"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:32.097" starttime="20160205 03:33:32.094"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:33:32.100" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:32.100" starttime="20160205 03:33:32.099"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:32.101" starttime="20160205 03:33:32.098"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:33:32.103" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:33:32.104" starttime="20160205 03:33:32.102"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:32.104" starttime="20160205 03:33:32.101"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:32.104" starttime="20160205 03:33:32.091"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:33:32.107" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:33:32.107" starttime="20160205 03:33:32.105"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:32.108" starttime="20160205 03:33:32.107"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:32.110" starttime="20160205 03:33:32.109"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:32.112" starttime="20160205 03:33:32.110"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:32.113" starttime="20160205 03:33:32.112"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:32.114" starttime="20160205 03:33:32.113"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:32.116" starttime="20160205 03:33:32.115"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:32.117" starttime="20160205 03:33:32.116"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:32.119" starttime="20160205 03:33:32.118"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:32.120" starttime="20160205 03:33:32.119"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:32.122" starttime="20160205 03:33:32.121"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:32.123" starttime="20160205 03:33:32.122"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:32.125" starttime="20160205 03:33:32.124"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:33:32.127" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:33:35.254" level="INFO">03:33:35,247 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:33:35.255" starttime="20160205 03:33:32.126"></status>
</kw>
<msg timestamp="20160205 03:33:35.258" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:33:35.259" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:33:35.257" starttime="20160205 03:33:32.125"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:33:35.271" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:33:35.271" starttime="20160205 03:33:35.268"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:33:35.275" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:33:35.274" starttime="20160205 03:33:35.272"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:33:35.279" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:33:35.278" starttime="20160205 03:33:35.276"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:33:35.285" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:33:35.286" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:33:35.287" starttime="20160205 03:33:35.282"></status>
</kw>
<msg timestamp="20160205 03:33:35.289" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:33:35.289" level="INFO">${return_log_entry} = 2016-02-05 03:33:35,247 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:33:35.288" starttime="20160205 03:33:35.280"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:35.299" starttime="20160205 03:33:35.297"></status>
</kw>
<msg timestamp="20160205 03:33:35.301" level="INFO">${return_log_entry} = 2016-02-05 03:33:35,247 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:33:35.300" starttime="20160205 03:33:35.290"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:35.310" starttime="20160205 03:33:35.308"></status>
</kw>
<msg timestamp="20160205 03:33:35.312" level="INFO">${return_log_entry} = 2016-02-05 03:33:35,247 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:33:35.311" starttime="20160205 03:33:35.302"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:35.322" starttime="20160205 03:33:35.319"></status>
</kw>
<msg timestamp="20160205 03:33:35.323" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:35.323" starttime="20160205 03:33:35.313"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:35.337" starttime="20160205 03:33:35.334"></status>
</kw>
<msg timestamp="20160205 03:33:35.338" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:35.337" starttime="20160205 03:33:35.324"></status>
</kw>
<msg timestamp="20160205 03:33:35.340" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:33:35.340" starttime="20160205 03:33:35.261"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:35.351" starttime="20160205 03:33:35.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:35.354" starttime="20160205 03:33:35.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:35.356" starttime="20160205 03:33:35.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:33:35.369" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:33:35.369" starttime="20160205 03:33:35.365"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:35.370" starttime="20160205 03:33:35.363"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:35.371" starttime="20160205 03:33:35.357"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:35.373" starttime="20160205 03:33:35.342"></status>
</kw>
<msg timestamp="20160205 03:33:35.376" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:33:35.374" starttime="20160205 03:33:32.068"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:33:35.378" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:33:35.378" starttime="20160205 03:33:35.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:35.379" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:33:35.380" starttime="20160205 03:33:35.379"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:35.381" starttime="20160205 03:33:32.063"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:35.381" starttime="20160205 03:33:30.010"></status>
</kw>
<test id="s1-s2-s1-s1-t1" name="Test USSD Start">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160205 03:33:35.394" level="INFO">/home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516</msg>
<status status="PASS" endtime="20160205 03:33:35.395" starttime="20160205 03:33:35.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160205 03:33:37.396" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160205 03:33:37.398" starttime="20160205 03:33:35.395"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:33:38.871" level="INFO">=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<msg timestamp="20160205 03:33:38.874" level="INFO">${output} = =====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:33:38.872" starttime="20160205 03:33:37.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160205 03:33:38.876" level="INFO">USSD Start: =====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:33:38.877" starttime="20160205 03:33:38.875"></status>
</kw>
<msg timestamp="20160205 03:33:38.878" level="INFO">${output} = =====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:33:38.878" starttime="20160205 03:33:35.386"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160205 03:33:40.881" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160205 03:33:40.882" starttime="20160205 03:33:38.879"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Hola weexer!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:40.884" starttime="20160205 03:33:40.883"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:40.890" starttime="20160205 03:33:40.889"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:33:40.891" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:33:40.936" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:40.937" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:33:40.936" starttime="20160205 03:33:40.890"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:40.940" starttime="20160205 03:33:40.939"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:40.944" starttime="20160205 03:33:40.942"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:40.946" starttime="20160205 03:33:40.945"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:33:40.950" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160205 03:33:41.035" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:41.038" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:33:41.039" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:33:41.036" starttime="20160205 03:33:40.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:41.048" starttime="20160205 03:33:41.040"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:41.050" starttime="20160205 03:33:41.049"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:41.053" starttime="20160205 03:33:41.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:41.056" starttime="20160205 03:33:41.054"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:41.059" starttime="20160205 03:33:41.057"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:41.062" starttime="20160205 03:33:41.060"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:41.065" starttime="20160205 03:33:41.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:41.068" starttime="20160205 03:33:41.066"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:41.071" starttime="20160205 03:33:41.069"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:41.074" starttime="20160205 03:33:41.072"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:41.076" starttime="20160205 03:33:41.075"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:41.077" starttime="20160205 03:33:40.886"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MVNA_MEX_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:33:41.079" starttime="20160205 03:33:35.382"></status>
</test>
<test id="s1-s2-s1-s1-t2" name="Test USSD Check Balance">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160205 03:33:41.100" level="INFO">Killed</msg>
<status status="PASS" endtime="20160205 03:33:41.100" starttime="20160205 03:33:41.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160205 03:33:43.103" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160205 03:33:43.105" starttime="20160205 03:33:41.101"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:33:44.537" level="INFO">[1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<msg timestamp="20160205 03:33:44.542" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF...</msg>
<status status="PASS" endtime="20160205 03:33:44.540" starttime="20160205 03:33:43.107"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160205 03:33:44.546" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:33:44.547" starttime="20160205 03:33:44.543"></status>
</kw>
<msg timestamp="20160205 03:33:44.550" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF...</msg>
<status status="PASS" endtime="20160205 03:33:44.548" starttime="20160205 03:33:41.090"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Checking the balance</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:44.553" level="INFO">Checking the balance</msg>
<status status="PASS" endtime="20160205 03:33:44.554" starttime="20160205 03:33:44.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160205 03:33:46.557" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160205 03:33:46.559" starttime="20160205 03:33:44.555"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Tu saldo es: 10 Pesos</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.563" starttime="20160205 03:33:46.561"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.576" starttime="20160205 03:33:46.573"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:33:46.578" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:33:46.625" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:46.627" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:33:46.626" starttime="20160205 03:33:46.577"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.630" starttime="20160205 03:33:46.628"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.632" starttime="20160205 03:33:46.631"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.635" starttime="20160205 03:33:46.634"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:33:46.639" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160205 03:33:46.698" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:46.700" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:33:46.700" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:33:46.699" starttime="20160205 03:33:46.636"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.709" starttime="20160205 03:33:46.702"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.712" starttime="20160205 03:33:46.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.715" starttime="20160205 03:33:46.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.717" starttime="20160205 03:33:46.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.720" starttime="20160205 03:33:46.718"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.723" starttime="20160205 03:33:46.721"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.726" starttime="20160205 03:33:46.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.729" starttime="20160205 03:33:46.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.732" starttime="20160205 03:33:46.730"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.735" starttime="20160205 03:33:46.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:46.737" starttime="20160205 03:33:46.736"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:46.738" starttime="20160205 03:33:46.567"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MVNA_MEX_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:33:46.740" starttime="20160205 03:33:41.083"></status>
</test>
<test id="s1-s2-s1-s1-t3" name="Test USSD Check My Number">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160205 03:33:46.760" level="INFO">Killed</msg>
<status status="PASS" endtime="20160205 03:33:46.761" starttime="20160205 03:33:46.756"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160205 03:33:48.764" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160205 03:33:48.766" starttime="20160205 03:33:46.762"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:33:49.357" level="INFO">[1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<msg timestamp="20160205 03:33:49.360" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF...</msg>
<status status="PASS" endtime="20160205 03:33:49.358" starttime="20160205 03:33:48.768"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160205 03:33:49.362" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:33:49.362" starttime="20160205 03:33:49.361"></status>
</kw>
<msg timestamp="20160205 03:33:49.364" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF...</msg>
<status status="PASS" endtime="20160205 03:33:49.363" starttime="20160205 03:33:46.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Checking My Number</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:49.365" level="INFO">Checking My Number</msg>
<status status="PASS" endtime="20160205 03:33:49.366" starttime="20160205 03:33:49.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160205 03:33:51.368" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160205 03:33:51.370" starttime="20160205 03:33:49.366"></status>
</kw>
<kw type="kw" name="${msisdn} = String.Get Substring">
<doc>Returns a substring from `start` index to `end` index.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>2</arg>
</arguments>
<msg timestamp="20160205 03:33:51.376" level="INFO">${msisdn} = 5516001000</msg>
<status status="PASS" endtime="20160205 03:33:51.375" starttime="20160205 03:33:51.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Tu numero es ${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.380" starttime="20160205 03:33:51.377"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.392" starttime="20160205 03:33:51.390"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:33:51.395" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:33:51.439" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:51.441" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:33:51.440" starttime="20160205 03:33:51.393"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.444" starttime="20160205 03:33:51.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.446" starttime="20160205 03:33:51.445"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.449" starttime="20160205 03:33:51.447"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:33:51.453" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160205 03:33:51.525" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:51.527" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:33:51.527" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:33:51.526" starttime="20160205 03:33:51.450"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.536" starttime="20160205 03:33:51.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.539" starttime="20160205 03:33:51.537"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.542" starttime="20160205 03:33:51.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.544" starttime="20160205 03:33:51.543"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.547" starttime="20160205 03:33:51.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.550" starttime="20160205 03:33:51.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.553" starttime="20160205 03:33:51.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.556" starttime="20160205 03:33:51.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.559" starttime="20160205 03:33:51.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.562" starttime="20160205 03:33:51.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:51.564" starttime="20160205 03:33:51.563"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:51.565" starttime="20160205 03:33:51.383"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MVNA_MEX_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:33:51.567" starttime="20160205 03:33:46.743"></status>
</test>
<test id="s1-s2-s1-s1-t4" name="Test USSD Switch Data On-Off">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160205 03:33:51.587" level="INFO">Killed</msg>
<status status="PASS" endtime="20160205 03:33:51.588" starttime="20160205 03:33:51.583"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160205 03:33:53.592" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160205 03:33:53.594" starttime="20160205 03:33:51.589"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:33:54.409" level="INFO">[1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<msg timestamp="20160205 03:33:54.411" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF...</msg>
<status status="PASS" endtime="20160205 03:33:54.410" starttime="20160205 03:33:53.596"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160205 03:33:54.413" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF de datos
Presiona # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:33:54.413" starttime="20160205 03:33:54.411"></status>
</kw>
<msg timestamp="20160205 03:33:54.414" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb19 ~]$[m /home/qa_automation/ussd/USSDtest.py 52551600 1000 963 525516
=====================
Hola weexer! Tu numero es 5516001000
Tu saldo es: 10 Pesos
1 ON/OFF...</msg>
<status status="PASS" endtime="20160205 03:33:54.414" starttime="20160205 03:33:51.577"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160205 03:33:56.416" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160205 03:33:56.418" starttime="20160205 03:33:54.415"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for data switch change</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:56.422" level="INFO">Pressing 1 for data switch change</msg>
<status status="PASS" endtime="20160205 03:33:56.423" starttime="20160205 03:33:56.420"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160205 03:33:56.431" level="INFO">1</msg>
<status status="PASS" endtime="20160205 03:33:56.432" starttime="20160205 03:33:56.424"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:33:56.532" level="INFO">=====================
Estado actual: On
Selecciona:
2. Apagar
Presiona * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20160205 03:33:56.535" level="INFO">${output} = =====================
Estado actual: On
Selecciona:
2. Apagar
Presiona * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:33:56.534" starttime="20160205 03:33:56.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Estado actual: On</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.540" starttime="20160205 03:33:56.537"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for confirmation</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:56.542" level="INFO">Pressing 2 for confirmation</msg>
<status status="PASS" endtime="20160205 03:33:56.544" starttime="20160205 03:33:56.541"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160205 03:33:56.551" level="INFO">2</msg>
<status status="PASS" endtime="20160205 03:33:56.551" starttime="20160205 03:33:56.545"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:33:56.704" level="INFO">=====================
Tu servicio de datos fue apagado.
Presiona * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20160205 03:33:56.705" level="INFO">${output} = =====================
Tu servicio de datos fue apagado.
Presiona * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:33:56.704" starttime="20160205 03:33:56.553"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Tu servicio de datos fue apagado.</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.707" starttime="20160205 03:33:56.706"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.712" starttime="20160205 03:33:56.711"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:33:56.713" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:33:56.746" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:56.747" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:33:56.747" starttime="20160205 03:33:56.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.750" starttime="20160205 03:33:56.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.753" starttime="20160205 03:33:56.751"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.756" starttime="20160205 03:33:56.754"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:33:56.760" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160205 03:33:56.835" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:56.836" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:33:56.837" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:33:56.836" starttime="20160205 03:33:56.757"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.846" starttime="20160205 03:33:56.838"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.848" starttime="20160205 03:33:56.847"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.851" starttime="20160205 03:33:56.849"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.854" starttime="20160205 03:33:56.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.857" starttime="20160205 03:33:56.855"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.860" starttime="20160205 03:33:56.858"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.863" starttime="20160205 03:33:56.861"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.866" starttime="20160205 03:33:56.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.869" starttime="20160205 03:33:56.867"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.871" starttime="20160205 03:33:56.870"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.874" starttime="20160205 03:33:56.872"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:56.875" starttime="20160205 03:33:56.708"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MVNA_MEX_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:33:56.876" starttime="20160205 03:33:51.570"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:33:56.906" starttime="20160205 03:33:56.901"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:56.907" starttime="20160205 03:33:56.895"></status>
</kw>
<doc>This suite uses USSDtest.py class to test the USSD interface. Various test cases (scenarios) will be checked for truu operator on
MVNA_MEX platform</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:33:56.908" starttime="20160205 03:33:29.859"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:33:56.949" starttime="20160205 03:33:29.845"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:33:56.988" starttime="20160205 03:33:29.831"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr" id="s1-s3" name="Xdr">
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification" id="s1-s3-s1" name="XDR-ticket-verification">
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/XDR_Test-robot-suite.txt" id="s1-s3-s1-s1" name="XDR Test-robot-suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:33:57.140" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:33:57.143" level="INFO">${time} = Fri Feb  5 03:33:57 CET 2016</msg>
<status status="PASS" endtime="20160205 03:33:57.143" starttime="20160205 03:33:57.135"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:57.145" level="INFO">Date and time: Fri Feb  5 03:33:57 CET 2016</msg>
<status status="PASS" endtime="20160205 03:33:57.146" starttime="20160205 03:33:57.144"></status>
</kw>
<kw type="kw" name="NTP Check on XDR">
<doc>Called at suite setup to check if ntp is up and running</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:57.176" starttime="20160205 03:33:57.150"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160205 03:33:57.178" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:33:58.768" level="INFO">Read output: Last login: Fri Feb  5 02:33:16 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$[m</msg>
<msg timestamp="20160205 03:33:58.771" level="INFO">${output_login} = Last login: Fri Feb  5 02:33:16 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$[m </msg>
<status status="PASS" endtime="20160205 03:33:58.770" starttime="20160205 03:33:57.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160205 03:33:58.772" level="INFO">Last login: Fri Feb  5 02:33:16 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$[m </msg>
<status status="PASS" endtime="20160205 03:33:58.773" starttime="20160205 03:33:58.771"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ntpstat</arg>
</arguments>
<msg timestamp="20160205 03:33:58.774" level="INFO">Executing command 'ntpstat'.</msg>
<msg timestamp="20160205 03:33:59.103" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:33:59.105" level="INFO">${output} = synchronised to NTP server (10.189.251.100) at stratum 3 
   time correct to within 65 ms
   polling server every 1024 s</msg>
<status status="PASS" endtime="20160205 03:33:59.104" starttime="20160205 03:33:58.773"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:33:59.107" starttime="20160205 03:33:59.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>synchronised to NTP server</arg>
<arg>msg=NTP sync problem!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:59.109" starttime="20160205 03:33:59.108"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NTP is synced</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:33:59.110" level="INFO">NTP is synced</msg>
<status status="PASS" endtime="20160205 03:33:59.111" starttime="20160205 03:33:59.110"></status>
</kw>
<status status="PASS" endtime="20160205 03:33:59.111" starttime="20160205 03:33:57.147"></status>
</kw>
<kw type="kw" name="Log The XDR Version">
<doc>Called at suite setup procedure to check if XDR is running and to see which version is there.</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:33:59.312" starttime="20160205 03:33:59.116"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160205 03:33:59.314" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:34:00.809" level="INFO">Read output: Last login: Fri Feb  5 02:33:57 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$[m</msg>
<msg timestamp="20160205 03:34:00.811" level="INFO">${output_login} = Last login: Fri Feb  5 02:33:57 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$[m </msg>
<status status="PASS" endtime="20160205 03:34:00.810" starttime="20160205 03:33:59.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160205 03:34:00.812" level="INFO">Last login: Fri Feb  5 02:33:57 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$[m </msg>
<status status="PASS" endtime="20160205 03:34:00.812" starttime="20160205 03:34:00.811"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-xdr status</arg>
</arguments>
<msg timestamp="20160205 03:34:00.814" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:34:01.514" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:34:01.515" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:34:01.514" starttime="20160205 03:34:00.813"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR Version and pid: ${output}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:34:01.517" level="INFO">XDR Version and pid: I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160205 03:34:01.518" starttime="20160205 03:34:01.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running PID:</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:01.519" starttime="20160205 03:34:01.518"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:34:01.521" starttime="20160205 03:34:01.520"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:01.522" starttime="20160205 03:33:59.113"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SUT:${SUT_RESOURCE}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:34:01.524" level="INFO">SUT:/opt/robot/robotworkspace/suts/MVNA-MEX-resource.txt</msg>
<status status="PASS" endtime="20160205 03:34:01.524" starttime="20160205 03:34:01.523"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR IP address:${XDR HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:34:01.526" level="INFO">XDR IP address:10.105.119.171</msg>
<status status="PASS" endtime="20160205 03:34:01.526" starttime="20160205 03:34:01.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Using ${SUT RELEASE TAG PREFIX} tickets</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:34:01.528" level="INFO">Using R6.1 tickets</msg>
<status status="PASS" endtime="20160205 03:34:01.528" starttime="20160205 03:34:01.527"></status>
</kw>
<kw type="kw" name="Check AMQ Availability">
<doc>Called at suite setup procedure to check if AMQ is UP</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${AMQ-XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:01.715" starttime="20160205 03:34:01.532"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160205 03:34:01.719" level="INFO">Logging into '10.105.119.124:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:34:03.476" level="INFO">Read output: Last login: Fri Feb  5 00:40:38 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb19 ~]$[m</msg>
<msg timestamp="20160205 03:34:03.479" level="INFO">${output_login} = Last login: Fri Feb  5 00:40:38 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb19 ~]$[m </msg>
<status status="PASS" endtime="20160205 03:34:03.477" starttime="20160205 03:34:01.716"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>netstat -an | grep ${AMQ-XDR PORT}</arg>
</arguments>
<msg timestamp="20160205 03:34:03.483" level="INFO">Executing command 'netstat -an | grep 61626'.</msg>
<msg timestamp="20160205 03:34:03.861" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:34:03.863" level="INFO">${output} = tcp        0      0 :::61626                    :::*                        LISTEN      
tcp        0      0 ::ffff:10.105.119.124:61626 ::ffff:10.105.119.135:33791 ESTABLISHED 
tcp        0      0 ::...</msg>
<status status="PASS" endtime="20160205 03:34:03.862" starttime="20160205 03:34:03.480"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>LISTEN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:03.866" starttime="20160205 03:34:03.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${output}=</arg>
<arg>Execute Command</arg>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} query -QQueue=${AMQ-XDR CRCE CDR QUEUE} | grep ConsumerCount</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:03.869" starttime="20160205 03:34:03.867"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} status</arg>
</arguments>
<msg timestamp="20160205 03:34:03.872" level="INFO">Executing command 'sudo /etc/init.d/amq-xdr-tb19 status'.</msg>
<msg timestamp="20160205 03:34:05.719" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:34:05.722" level="INFO">${output} = INFO: Using default configuration
(you can configure options in one of these file: /etc/default/activemq /root/.activemqrc)

INFO: Invoke the following command to create a configuration file
/etc/init...</msg>
<status status="PASS" endtime="20160205 03:34:05.720" starttime="20160205 03:34:03.870"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>ActiveMQ is running</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:05.726" starttime="20160205 03:34:05.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${count}=</arg>
<arg>Get Substring</arg>
<arg>${output}</arg>
<arg>16</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:05.728" starttime="20160205 03:34:05.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Evaluate</arg>
<arg>0 &lt; ${count}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:05.731" starttime="20160205 03:34:05.729"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:34:05.734" starttime="20160205 03:34:05.732"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:05.737" starttime="20160205 03:34:01.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>AMQ and consumers are UP</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:34:05.740" level="INFO">AMQ and consumers are UP</msg>
<status status="PASS" endtime="20160205 03:34:05.742" starttime="20160205 03:34:05.739"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${XDR DB HOST}:${XDR DB PORT}/${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:05.840" starttime="20160205 03:34:05.744"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:05.889" starttime="20160205 03:34:05.860"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:05.891" starttime="20160205 03:34:05.853"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:05.993" starttime="20160205 03:34:05.910"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:05.995" starttime="20160205 03:34:05.903"></status>
</kw>
<kw type="kw" name="${JNDI_PROVIDER_URL} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>tcp://${AMQ-XDR HOST}:${AMQ-XDR PORT}?jms.useAsyncSend=false</arg>
</arguments>
<msg timestamp="20160205 03:34:06.000" level="INFO">${JNDI_PROVIDER_URL} = tcp://10.105.119.124:61626?jms.useAsyncSend=false</msg>
<status status="PASS" endtime="20160205 03:34:05.999" starttime="20160205 03:34:05.996"></status>
</kw>
<kw type="kw" name="JMSLibrary.Init Provider">
<doc></doc>
<arguments>
<arg>${INITIAL_CONTEXT_FACTORY}</arg>
<arg>${JNDI_PROVIDER_URL}</arg>
<arg>connect=true</arg>
<arg>start=true</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:07.079" starttime="20160205 03:34:06.002"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:07.082" starttime="20160205 03:33:57.132"></status>
</kw>
<test id="s1-s3-s1-s1-t1" name="Test MOC ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC}</arg>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:07.143" starttime="20160205 03:34:07.141"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:07.207" starttime="20160205 03:34:07.152"></status>
</kw>
<msg timestamp="20160205 03:34:07.209" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160205 03:34:07.208" starttime="20160205 03:34:07.144"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:34:07.220" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:34:08.839" level="INFO">Read output: Last login: Fri Feb  5 02:33:59 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:34:08.840" starttime="20160205 03:34:07.218"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:08.841" starttime="20160205 03:34:07.210"></status>
</kw>
<msg timestamp="20160205 03:34:08.843" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160205 03:34:08.842" starttime="20160205 03:34:07.131"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:08.848" starttime="20160205 03:34:08.847"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:34:08.850" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160205 03:34:08.854" starttime="20160205 03:34:08.849"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:08.854" starttime="20160205 03:34:08.844"></status>
</kw>
<msg timestamp="20160205 03:34:08.856" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160205 03:34:08.855" starttime="20160205 03:34:07.118"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:08.868" starttime="20160205 03:34:08.865"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:08.870" starttime="20160205 03:34:08.862"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:08.896" starttime="20160205 03:34:08.878"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:08.937" starttime="20160205 03:34:08.897"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:08.938" starttime="20160205 03:34:08.871"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:34:18.943" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:34:18.944" starttime="20160205 03:34:08.940"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:18.957" starttime="20160205 03:34:18.954"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:34:18.964" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:34:18.964" starttime="20160205 03:34:18.958"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:34:18.973" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:34:18.974" starttime="20160205 03:34:18.966"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:18.985" starttime="20160205 03:34:18.982"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:34:18.988" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:34:19.082" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:34:19.085" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:34:19.083" starttime="20160205 03:34:18.986"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.088" starttime="20160205 03:34:19.086"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.091" starttime="20160205 03:34:19.089"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.094" starttime="20160205 03:34:19.092"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:34:19.098" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:34:19.214" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:34:19.216" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:34:19.217" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:34:19.216" starttime="20160205 03:34:19.095"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.225" starttime="20160205 03:34:19.218"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.228" starttime="20160205 03:34:19.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.231" starttime="20160205 03:34:19.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.234" starttime="20160205 03:34:19.232"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.237" starttime="20160205 03:34:19.235"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.240" starttime="20160205 03:34:19.238"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.243" starttime="20160205 03:34:19.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.246" starttime="20160205 03:34:19.244"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.249" starttime="20160205 03:34:19.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.252" starttime="20160205 03:34:19.250"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.255" starttime="20160205 03:34:19.253"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:19.256" starttime="20160205 03:34:18.975"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:34:19.261" level="INFO">Starting command 'cat tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160205 03:34:19.265" starttime="20160205 03:34:19.258"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:34:19.268" level="INFO">Reading output of command 'cat tmpfilemonitor4.log'.</msg>
<msg timestamp="20160205 03:34:19.308" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:34:19.310" level="INFO">${stdout_string} = [2016-02-05 02:34:08,924][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:34:19.309" starttime="20160205 03:34:19.266"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:34:19.313" level="INFO">Executing command 'rm tmpfilemonitor4.log'.</msg>
<msg timestamp="20160205 03:34:19.409" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:34:19.410" starttime="20160205 03:34:19.311"></status>
</kw>
<msg timestamp="20160205 03:34:19.413" level="INFO">${tailed_text} = [2016-02-05 02:34:08,924][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:34:19.411" starttime="20160205 03:34:18.951"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:34:19.425" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/MOC_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/MOC_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:34:19.426" starttime="20160205 03:34:19.421"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:19.427" starttime="20160205 03:34:19.414"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.438" starttime="20160205 03:34:19.435"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.441" starttime="20160205 03:34:19.439"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:19.443" starttime="20160205 03:34:19.428"></status>
</kw>
<msg timestamp="20160205 03:34:19.446" level="INFO">${tailed_text} = [2016-02-05 02:34:08,924][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:34:19.445" starttime="20160205 03:34:18.946"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.481" starttime="20160205 03:34:19.479"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.517" starttime="20160205 03:34:19.482"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.520" starttime="20160205 03:34:19.518"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:34:19.523" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:34:19.526" level="INFO">${queryResultSetLines} = 1000672|6.1|101|CDR|1|CRCE|crce01|2015-02-23 11:06:11.236|2015-02-22 09:15:50.025|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|Charge|null|BasicSession|530...</msg>
<status status="PASS" endtime="20160205 03:34:19.525" starttime="20160205 03:34:19.521"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.528" starttime="20160205 03:34:19.527"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:34:19.532" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:34:19.534" level="INFO">@{queryResultSet} = [ 1000672|6.1|101|CDR|1|CRCE|crce01|2015-02-23 11:06:11.236|2015-02-22 09:15:50.025|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|Charge|null|BasicSession|5...</msg>
<status status="PASS" endtime="20160205 03:34:19.532" starttime="20160205 03:34:19.530"></status>
</kw>
<msg timestamp="20160205 03:34:19.537" level="INFO">@{queryRows} = [ 1000672|6.1|101|CDR|1|CRCE|crce01|2015-02-23 11:06:11.236|2015-02-22 09:15:50.025|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|Charge|null|BasicSession|5...</msg>
<status status="PASS" endtime="20160205 03:34:19.536" starttime="20160205 03:34:19.471"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:34:19.541" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:34:19.542" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:34:19.542" starttime="20160205 03:34:19.538"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:34:19.546" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:34:19.547" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:34:19.547" starttime="20160205 03:34:19.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:34:19.557" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:34:19.558" starttime="20160205 03:34:19.555"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:19.559" starttime="20160205 03:34:19.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.567" starttime="20160205 03:34:19.561"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:19.568" starttime="20160205 03:34:19.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.575" starttime="20160205 03:34:19.570"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:19.576" starttime="20160205 03:34:07.097"></status>
</kw>
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. 

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:34:19.578" starttime="20160205 03:34:07.084"></status>
</test>
<test id="s1-s3-s1-s1-t2" name="Test SMS ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SMS}</arg>
<arg>SMS</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.633" starttime="20160205 03:34:19.632"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:19.679" starttime="20160205 03:34:19.637"></status>
</kw>
<msg timestamp="20160205 03:34:19.680" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160205 03:34:19.680" starttime="20160205 03:34:19.633"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:34:19.686" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:34:20.395" level="INFO">Read output: Last login: Fri Feb  5 02:34:08 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:34:20.396" starttime="20160205 03:34:19.684"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:20.397" starttime="20160205 03:34:19.681"></status>
</kw>
<msg timestamp="20160205 03:34:20.401" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160205 03:34:20.398" starttime="20160205 03:34:19.627"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:20.414" starttime="20160205 03:34:20.411"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:34:20.418" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160205 03:34:20.422" starttime="20160205 03:34:20.415"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:20.423" starttime="20160205 03:34:20.403"></status>
</kw>
<msg timestamp="20160205 03:34:20.426" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160205 03:34:20.425" starttime="20160205 03:34:19.614"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:20.453" starttime="20160205 03:34:20.447"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:20.454" starttime="20160205 03:34:20.439"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:20.465" starttime="20160205 03:34:20.463"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:20.477" starttime="20160205 03:34:20.466"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:20.478" starttime="20160205 03:34:20.456"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:34:30.483" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:34:30.485" starttime="20160205 03:34:20.479"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.507" starttime="20160205 03:34:30.504"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:34:30.514" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:34:30.513" starttime="20160205 03:34:30.508"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:34:30.520" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:34:30.521" starttime="20160205 03:34:30.515"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.532" starttime="20160205 03:34:30.530"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:34:30.535" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:34:30.569" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:34:30.571" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:34:30.570" starttime="20160205 03:34:30.534"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.574" starttime="20160205 03:34:30.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.577" starttime="20160205 03:34:30.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.580" starttime="20160205 03:34:30.578"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:34:30.585" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:34:30.654" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:34:30.656" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:34:30.657" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:34:30.656" starttime="20160205 03:34:30.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.665" starttime="20160205 03:34:30.659"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.668" starttime="20160205 03:34:30.667"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.671" starttime="20160205 03:34:30.669"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.674" starttime="20160205 03:34:30.672"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.677" starttime="20160205 03:34:30.675"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.680" starttime="20160205 03:34:30.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.683" starttime="20160205 03:34:30.681"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.686" starttime="20160205 03:34:30.684"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.689" starttime="20160205 03:34:30.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.692" starttime="20160205 03:34:30.690"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.695" starttime="20160205 03:34:30.693"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:30.696" starttime="20160205 03:34:30.523"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:34:30.700" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160205 03:34:30.704" starttime="20160205 03:34:30.697"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:34:30.706" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20160205 03:34:30.745" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:34:30.747" level="INFO">${stdout_string} = [2016-02-05 02:34:20,483][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:34:30.746" starttime="20160205 03:34:30.705"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:34:30.751" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20160205 03:34:30.830" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:34:30.832" starttime="20160205 03:34:30.748"></status>
</kw>
<msg timestamp="20160205 03:34:30.834" level="INFO">${tailed_text} = [2016-02-05 02:34:20,483][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:34:30.833" starttime="20160205 03:34:30.497"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:34:30.849" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/SMS_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/SMS_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:34:30.850" starttime="20160205 03:34:30.842"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:30.851" starttime="20160205 03:34:30.835"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.862" starttime="20160205 03:34:30.859"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.865" starttime="20160205 03:34:30.863"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:30.868" starttime="20160205 03:34:30.852"></status>
</kw>
<msg timestamp="20160205 03:34:30.871" level="INFO">${tailed_text} = [2016-02-05 02:34:20,483][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:34:30.870" starttime="20160205 03:34:30.488"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.906" starttime="20160205 03:34:30.904"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.913" starttime="20160205 03:34:30.907"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.916" starttime="20160205 03:34:30.915"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:34:30.920" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:34:30.922" level="INFO">${queryResultSetLines} = 1000673|6.1|101|CDR|1|CRCE|crce01|2015-02-23 09:36:19.022|2015-02-22 15:00:50.025|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.0|Charge|null|0|53099204199974...</msg>
<status status="PASS" endtime="20160205 03:34:30.921" starttime="20160205 03:34:30.918"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.925" starttime="20160205 03:34:30.923"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:34:30.928" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:34:30.929" level="INFO">@{queryResultSet} = [ 1000673|6.1|101|CDR|1|CRCE|crce01|2015-02-23 09:36:19.022|2015-02-22 15:00:50.025|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.0|Charge|null|0|530992041999...</msg>
<status status="PASS" endtime="20160205 03:34:30.929" starttime="20160205 03:34:30.926"></status>
</kw>
<msg timestamp="20160205 03:34:30.932" level="INFO">@{queryRows} = [ 1000673|6.1|101|CDR|1|CRCE|crce01|2015-02-23 09:36:19.022|2015-02-22 15:00:50.025|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.0|Charge|null|0|530992041999...</msg>
<status status="PASS" endtime="20160205 03:34:30.931" starttime="20160205 03:34:30.895"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:34:30.936" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:34:30.937" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:34:30.936" starttime="20160205 03:34:30.933"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:34:30.940" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:34:30.941" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:34:30.941" starttime="20160205 03:34:30.938"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:34:30.952" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:34:30.952" starttime="20160205 03:34:30.949"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:30.953" starttime="20160205 03:34:30.943"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.960" starttime="20160205 03:34:30.954"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:30.961" starttime="20160205 03:34:30.886"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:30.968" starttime="20160205 03:34:30.962"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:30.969" starttime="20160205 03:34:19.592"></status>
</kw>
<doc>Send the SMS XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:34:30.971" starttime="20160205 03:34:19.583"></status>
</test>
<test id="s1-s3-s1-s1-t3" name="Test DATA ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${DATA}</arg>
<arg>DATA</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:31.016" starttime="20160205 03:34:31.015"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:31.064" starttime="20160205 03:34:31.020"></status>
</kw>
<msg timestamp="20160205 03:34:31.065" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160205 03:34:31.065" starttime="20160205 03:34:31.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:34:31.071" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:34:31.670" level="INFO">Read output: Last login: Fri Feb  5 02:34:20 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:34:31.671" starttime="20160205 03:34:31.070"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:31.672" starttime="20160205 03:34:31.066"></status>
</kw>
<msg timestamp="20160205 03:34:31.673" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160205 03:34:31.673" starttime="20160205 03:34:31.010"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:31.680" starttime="20160205 03:34:31.679"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:34:31.682" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160205 03:34:31.685" starttime="20160205 03:34:31.680"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:31.686" starttime="20160205 03:34:31.675"></status>
</kw>
<msg timestamp="20160205 03:34:31.687" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160205 03:34:31.686" starttime="20160205 03:34:31.004"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:31.712" starttime="20160205 03:34:31.697"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:31.714" starttime="20160205 03:34:31.693"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:31.725" starttime="20160205 03:34:31.723"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:31.782" starttime="20160205 03:34:31.726"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:31.784" starttime="20160205 03:34:31.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:34:41.787" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:34:41.789" starttime="20160205 03:34:31.785"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:41.812" starttime="20160205 03:34:41.809"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:34:41.820" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:34:41.819" starttime="20160205 03:34:41.813"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:34:41.827" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:34:41.827" starttime="20160205 03:34:41.821"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:41.839" starttime="20160205 03:34:41.836"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:34:41.841" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:34:41.893" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:34:41.895" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:34:41.894" starttime="20160205 03:34:41.840"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:41.898" starttime="20160205 03:34:41.896"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:41.900" starttime="20160205 03:34:41.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:41.903" starttime="20160205 03:34:41.902"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:34:41.908" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:34:41.981" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:34:41.982" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:34:41.983" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:34:41.982" starttime="20160205 03:34:41.905"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:41.991" starttime="20160205 03:34:41.984"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:41.994" starttime="20160205 03:34:41.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:41.997" starttime="20160205 03:34:41.995"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.000" starttime="20160205 03:34:41.998"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.004" starttime="20160205 03:34:42.002"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.007" starttime="20160205 03:34:42.005"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.011" starttime="20160205 03:34:42.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.014" starttime="20160205 03:34:42.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.017" starttime="20160205 03:34:42.015"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.020" starttime="20160205 03:34:42.018"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.023" starttime="20160205 03:34:42.021"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:42.024" starttime="20160205 03:34:41.829"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:34:42.028" level="INFO">Starting command 'cat tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160205 03:34:42.033" starttime="20160205 03:34:42.026"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:34:42.035" level="INFO">Reading output of command 'cat tmpfilemonitor6.log'.</msg>
<msg timestamp="20160205 03:34:42.078" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:34:42.080" level="INFO">${stdout_string} = [2016-02-05 02:34:31,774][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:34:42.079" starttime="20160205 03:34:42.034"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:34:42.083" level="INFO">Executing command 'rm tmpfilemonitor6.log'.</msg>
<msg timestamp="20160205 03:34:42.169" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:34:42.170" starttime="20160205 03:34:42.081"></status>
</kw>
<msg timestamp="20160205 03:34:42.173" level="INFO">${tailed_text} = [2016-02-05 02:34:31,774][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:34:42.172" starttime="20160205 03:34:41.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:34:42.185" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/DATA_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/DATA_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:34:42.186" starttime="20160205 03:34:42.181"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:42.187" starttime="20160205 03:34:42.174"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.198" starttime="20160205 03:34:42.196"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.202" starttime="20160205 03:34:42.200"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:42.205" starttime="20160205 03:34:42.189"></status>
</kw>
<msg timestamp="20160205 03:34:42.208" level="INFO">${tailed_text} = [2016-02-05 02:34:31,774][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:34:42.206" starttime="20160205 03:34:41.793"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.241" starttime="20160205 03:34:42.239"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.296" starttime="20160205 03:34:42.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.299" starttime="20160205 03:34:42.297"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:34:42.303" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:34:42.305" level="INFO">${queryResultSetLines} = 1000674|6.1|101|CDR|1|CRCE|crce01|2015-02-23 09:37:42.312|2015-02-22 09:37:06|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|FinalCommit|null|BasicSession|5...</msg>
<status status="PASS" endtime="20160205 03:34:42.304" starttime="20160205 03:34:42.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.308" starttime="20160205 03:34:42.307"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:34:42.311" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:34:42.313" level="INFO">@{queryResultSet} = [ 1000674|6.1|101|CDR|1|CRCE|crce01|2015-02-23 09:37:42.312|2015-02-22 09:37:06|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|FinalCommit|null|BasicSession...</msg>
<status status="PASS" endtime="20160205 03:34:42.312" starttime="20160205 03:34:42.309"></status>
</kw>
<msg timestamp="20160205 03:34:42.315" level="INFO">@{queryRows} = [ 1000674|6.1|101|CDR|1|CRCE|crce01|2015-02-23 09:37:42.312|2015-02-22 09:37:06|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|FinalCommit|null|BasicSession...</msg>
<status status="PASS" endtime="20160205 03:34:42.314" starttime="20160205 03:34:42.231"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:34:42.319" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:34:42.320" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:34:42.320" starttime="20160205 03:34:42.316"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:34:42.324" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:34:42.325" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:34:42.324" starttime="20160205 03:34:42.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:34:42.335" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:34:42.336" starttime="20160205 03:34:42.333"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:42.337" starttime="20160205 03:34:42.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.343" starttime="20160205 03:34:42.338"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:42.345" starttime="20160205 03:34:42.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.351" starttime="20160205 03:34:42.346"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:42.352" starttime="20160205 03:34:30.984"></status>
</kw>
<doc>Send the DATA XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:34:42.354" starttime="20160205 03:34:30.975"></status>
</test>
<test id="s1-s3-s1-s1-t4" name="Test CRCE Recharge ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Rec}</arg>
<arg>CRCE_Rec</arg>
<arg>crce_recharge</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.416" starttime="20160205 03:34:42.414"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.470" starttime="20160205 03:34:42.424"></status>
</kw>
<msg timestamp="20160205 03:34:42.471" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160205 03:34:42.471" starttime="20160205 03:34:42.417"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:34:42.477" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:34:42.902" level="INFO">Read output: Last login: Fri Feb  5 02:34:31 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:34:42.903" starttime="20160205 03:34:42.476"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:42.903" starttime="20160205 03:34:42.472"></status>
</kw>
<msg timestamp="20160205 03:34:42.904" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160205 03:34:42.904" starttime="20160205 03:34:42.403"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:42.910" starttime="20160205 03:34:42.909"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:34:42.912" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160205 03:34:42.916" starttime="20160205 03:34:42.911"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:42.916" starttime="20160205 03:34:42.905"></status>
</kw>
<msg timestamp="20160205 03:34:42.917" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160205 03:34:42.917" starttime="20160205 03:34:42.390"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:43.280" starttime="20160205 03:34:42.926"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:43.283" starttime="20160205 03:34:42.923"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:43.295" starttime="20160205 03:34:43.293"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:43.338" starttime="20160205 03:34:43.296"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:43.340" starttime="20160205 03:34:43.285"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:34:53.343" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:34:53.345" starttime="20160205 03:34:43.341"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.367" starttime="20160205 03:34:53.364"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:34:53.374" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:34:53.373" starttime="20160205 03:34:53.368"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:34:53.381" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:34:53.381" starttime="20160205 03:34:53.375"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.393" starttime="20160205 03:34:53.390"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:34:53.396" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:34:53.448" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:34:53.450" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:34:53.449" starttime="20160205 03:34:53.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.453" starttime="20160205 03:34:53.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.456" starttime="20160205 03:34:53.454"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.459" starttime="20160205 03:34:53.457"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:34:53.463" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:34:53.546" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:34:53.547" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:34:53.548" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:34:53.547" starttime="20160205 03:34:53.460"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.556" starttime="20160205 03:34:53.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.558" starttime="20160205 03:34:53.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.561" starttime="20160205 03:34:53.559"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.564" starttime="20160205 03:34:53.562"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.567" starttime="20160205 03:34:53.565"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.570" starttime="20160205 03:34:53.568"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.574" starttime="20160205 03:34:53.571"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.577" starttime="20160205 03:34:53.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.579" starttime="20160205 03:34:53.578"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.582" starttime="20160205 03:34:53.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.585" starttime="20160205 03:34:53.583"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:53.586" starttime="20160205 03:34:53.383"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:34:53.590" level="INFO">Starting command 'cat tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160205 03:34:53.594" starttime="20160205 03:34:53.587"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:34:53.606" level="INFO">Reading output of command 'cat tmpfilemonitor7.log'.</msg>
<msg timestamp="20160205 03:34:53.637" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:34:53.638" level="INFO">${stdout_string} = [2016-02-05 02:34:43,326][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:34:53.637" starttime="20160205 03:34:53.605"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:34:53.639" level="INFO">Executing command 'rm tmpfilemonitor7.log'.</msg>
<msg timestamp="20160205 03:34:53.727" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:34:53.727" starttime="20160205 03:34:53.638"></status>
</kw>
<msg timestamp="20160205 03:34:53.729" level="INFO">${tailed_text} = [2016-02-05 02:34:43,326][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:34:53.728" starttime="20160205 03:34:53.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:34:53.734" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_Rec_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_Rec_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:34:53.735" starttime="20160205 03:34:53.732"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:53.735" starttime="20160205 03:34:53.729"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.740" starttime="20160205 03:34:53.739"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.742" starttime="20160205 03:34:53.741"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:53.744" starttime="20160205 03:34:53.736"></status>
</kw>
<msg timestamp="20160205 03:34:53.745" level="INFO">${tailed_text} = [2016-02-05 02:34:43,326][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:34:53.745" starttime="20160205 03:34:53.348"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.760" starttime="20160205 03:34:53.760"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.984" starttime="20160205 03:34:53.761"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.988" starttime="20160205 03:34:53.986"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:34:53.992" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:34:53.993" level="INFO">${queryResultSetLines} = 1276882|6.1|110|RECHARGE|1|CRCE|crce01|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|tarif...</msg>
<status status="PASS" endtime="20160205 03:34:53.993" starttime="20160205 03:34:53.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:53.996" starttime="20160205 03:34:53.995"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:34:53.999" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:34:54.002" level="INFO">@{queryResultSet} = [ 1276882|6.1|110|RECHARGE|1|CRCE|crce01|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|tar...</msg>
<status status="PASS" endtime="20160205 03:34:54.000" starttime="20160205 03:34:53.997"></status>
</kw>
<msg timestamp="20160205 03:34:54.005" level="INFO">@{queryRows} = [ 1276882|6.1|110|RECHARGE|1|CRCE|crce01|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|tar...</msg>
<status status="PASS" endtime="20160205 03:34:54.004" starttime="20160205 03:34:53.756"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:34:54.009" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:34:54.011" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:34:54.010" starttime="20160205 03:34:54.007"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:34:54.014" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:34:54.015" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:34:54.014" starttime="20160205 03:34:54.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:34:54.025" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:34:54.026" starttime="20160205 03:34:54.023"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:54.027" starttime="20160205 03:34:54.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:54.033" starttime="20160205 03:34:54.028"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:54.034" starttime="20160205 03:34:53.751"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:54.042" starttime="20160205 03:34:54.036"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:54.043" starttime="20160205 03:34:42.368"></status>
</kw>
<doc>Send the CRCE Recharge XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:34:54.045" starttime="20160205 03:34:42.359"></status>
</test>
<test id="s1-s3-s1-s1-t5" name="Test CRCE Confirmation ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Conf}</arg>
<arg>CRCE_Conf</arg>
<arg>crce_conf</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:54.108" starttime="20160205 03:34:54.106"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:54.172" starttime="20160205 03:34:54.116"></status>
</kw>
<msg timestamp="20160205 03:34:54.174" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160205 03:34:54.173" starttime="20160205 03:34:54.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:34:54.185" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:34:54.640" level="INFO">Read output: Last login: Fri Feb  5 02:34:42 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:34:54.641" starttime="20160205 03:34:54.182"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:54.641" starttime="20160205 03:34:54.175"></status>
</kw>
<msg timestamp="20160205 03:34:54.643" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160205 03:34:54.642" starttime="20160205 03:34:54.095"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:54.648" starttime="20160205 03:34:54.647"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:34:54.650" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160205 03:34:54.654" starttime="20160205 03:34:54.649"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:54.654" starttime="20160205 03:34:54.644"></status>
</kw>
<msg timestamp="20160205 03:34:54.655" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160205 03:34:54.655" starttime="20160205 03:34:54.082"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:54.789" starttime="20160205 03:34:54.664"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:54.790" starttime="20160205 03:34:54.661"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:54.801" starttime="20160205 03:34:54.799"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:34:54.823" starttime="20160205 03:34:54.802"></status>
</kw>
<status status="PASS" endtime="20160205 03:34:54.825" starttime="20160205 03:34:54.792"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:35:04.828" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:35:04.831" starttime="20160205 03:34:54.826"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:04.855" starttime="20160205 03:35:04.852"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:35:04.863" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:35:04.862" starttime="20160205 03:35:04.856"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:35:04.882" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:35:04.883" starttime="20160205 03:35:04.864"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:04.894" starttime="20160205 03:35:04.892"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:35:04.897" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:35:04.951" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:35:04.952" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:35:04.952" starttime="20160205 03:35:04.896"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:04.955" starttime="20160205 03:35:04.953"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:04.958" starttime="20160205 03:35:04.956"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:04.961" starttime="20160205 03:35:04.959"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:35:04.965" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:35:05.049" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:35:05.052" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:35:05.052" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:35:05.050" starttime="20160205 03:35:04.962"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.060" starttime="20160205 03:35:05.054"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.063" starttime="20160205 03:35:05.061"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.066" starttime="20160205 03:35:05.064"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.069" starttime="20160205 03:35:05.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.072" starttime="20160205 03:35:05.070"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.076" starttime="20160205 03:35:05.073"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.079" starttime="20160205 03:35:05.077"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.082" starttime="20160205 03:35:05.080"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.085" starttime="20160205 03:35:05.083"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.088" starttime="20160205 03:35:05.086"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.091" starttime="20160205 03:35:05.089"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:05.092" starttime="20160205 03:35:04.885"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:35:05.096" level="INFO">Starting command 'cat tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160205 03:35:05.101" starttime="20160205 03:35:05.094"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:35:05.104" level="INFO">Reading output of command 'cat tmpfilemonitor8.log'.</msg>
<msg timestamp="20160205 03:35:05.149" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:35:05.151" level="INFO">${stdout_string} = [2016-02-05 02:34:54,823][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:35:05.150" starttime="20160205 03:35:05.102"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:35:05.155" level="INFO">Executing command 'rm tmpfilemonitor8.log'.</msg>
<msg timestamp="20160205 03:35:05.237" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:35:05.238" starttime="20160205 03:35:05.152"></status>
</kw>
<msg timestamp="20160205 03:35:05.240" level="INFO">${tailed_text} = [2016-02-05 02:34:54,823][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:35:05.239" starttime="20160205 03:35:04.845"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:35:05.245" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_Conf_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_Conf_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:35:05.246" starttime="20160205 03:35:05.243"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:05.246" starttime="20160205 03:35:05.240"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.251" starttime="20160205 03:35:05.250"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.253" starttime="20160205 03:35:05.252"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:05.255" starttime="20160205 03:35:05.247"></status>
</kw>
<msg timestamp="20160205 03:35:05.256" level="INFO">${tailed_text} = [2016-02-05 02:34:54,823][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:35:05.256" starttime="20160205 03:35:04.836"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.271" starttime="20160205 03:35:05.271"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.360" starttime="20160205 03:35:05.272"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.363" starttime="20160205 03:35:05.361"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:35:05.367" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:35:05.369" level="INFO">${queryResultSetLines} = 1095615|6.1|130|CONF|1|CRCE|crce01|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff|1|null...</msg>
<status status="PASS" endtime="20160205 03:35:05.368" starttime="20160205 03:35:05.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.372" starttime="20160205 03:35:05.370"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:35:05.375" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:35:05.376" level="INFO">@{queryResultSet} = [ 1095615|6.1|130|CONF|1|CRCE|crce01|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff|1|nu...</msg>
<status status="PASS" endtime="20160205 03:35:05.375" starttime="20160205 03:35:05.373"></status>
</kw>
<msg timestamp="20160205 03:35:05.379" level="INFO">@{queryRows} = [ 1095615|6.1|130|CONF|1|CRCE|crce01|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff|1|nu...</msg>
<status status="PASS" endtime="20160205 03:35:05.378" starttime="20160205 03:35:05.267"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:35:05.383" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:35:05.384" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:35:05.383" starttime="20160205 03:35:05.380"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:35:05.387" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:35:05.389" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:35:05.388" starttime="20160205 03:35:05.385"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:35:05.398" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:35:05.399" starttime="20160205 03:35:05.396"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:05.400" starttime="20160205 03:35:05.390"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.407" starttime="20160205 03:35:05.401"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:05.408" starttime="20160205 03:35:05.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.414" starttime="20160205 03:35:05.409"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:05.415" starttime="20160205 03:34:54.060"></status>
</kw>
<doc>Send the CRCE Confirmation XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:35:05.416" starttime="20160205 03:34:54.049"></status>
</test>
<test id="s1-s3-s1-s1-t6" name="Test CRCE AccountChange ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Acc}</arg>
<arg>CRCE_Acc</arg>
<arg>crce_accountchange</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.449" starttime="20160205 03:35:05.448"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:05.574" starttime="20160205 03:35:05.454"></status>
</kw>
<msg timestamp="20160205 03:35:05.575" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160205 03:35:05.575" starttime="20160205 03:35:05.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:35:05.580" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:35:06.012" level="INFO">Read output: Last login: Fri Feb  5 02:34:54 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:35:06.013" starttime="20160205 03:35:05.579"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:06.014" starttime="20160205 03:35:05.576"></status>
</kw>
<msg timestamp="20160205 03:35:06.016" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160205 03:35:06.015" starttime="20160205 03:35:05.443"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:06.022" starttime="20160205 03:35:06.021"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:35:06.024" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160205 03:35:06.028" starttime="20160205 03:35:06.022"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:06.029" starttime="20160205 03:35:06.017"></status>
</kw>
<msg timestamp="20160205 03:35:06.032" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160205 03:35:06.031" starttime="20160205 03:35:05.436"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:06.433" starttime="20160205 03:35:06.053"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:06.434" starttime="20160205 03:35:06.046"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:06.445" starttime="20160205 03:35:06.443"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:06.480" starttime="20160205 03:35:06.447"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:06.481" starttime="20160205 03:35:06.436"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:35:16.484" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:35:16.486" starttime="20160205 03:35:06.482"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.509" starttime="20160205 03:35:16.506"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:35:16.518" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:35:16.517" starttime="20160205 03:35:16.510"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:35:16.524" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:35:16.525" starttime="20160205 03:35:16.519"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.536" starttime="20160205 03:35:16.533"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:35:16.539" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:35:16.590" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:35:16.592" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:35:16.591" starttime="20160205 03:35:16.537"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.595" starttime="20160205 03:35:16.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.598" starttime="20160205 03:35:16.596"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.601" starttime="20160205 03:35:16.599"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:35:16.606" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:35:16.675" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:35:16.677" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:35:16.677" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:35:16.676" starttime="20160205 03:35:16.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.685" starttime="20160205 03:35:16.679"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.688" starttime="20160205 03:35:16.686"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.691" starttime="20160205 03:35:16.689"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.694" starttime="20160205 03:35:16.692"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.697" starttime="20160205 03:35:16.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.700" starttime="20160205 03:35:16.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.703" starttime="20160205 03:35:16.701"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.706" starttime="20160205 03:35:16.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.709" starttime="20160205 03:35:16.707"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.712" starttime="20160205 03:35:16.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.715" starttime="20160205 03:35:16.713"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:16.716" starttime="20160205 03:35:16.526"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:35:16.719" level="INFO">Starting command 'cat tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160205 03:35:16.724" starttime="20160205 03:35:16.717"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:35:16.726" level="INFO">Reading output of command 'cat tmpfilemonitor9.log'.</msg>
<msg timestamp="20160205 03:35:16.757" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:35:16.759" level="INFO">${stdout_string} = [2016-02-05 02:35:06,458][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:35:16.758" starttime="20160205 03:35:16.725"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:35:16.762" level="INFO">Executing command 'rm tmpfilemonitor9.log'.</msg>
<msg timestamp="20160205 03:35:16.849" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:35:16.850" starttime="20160205 03:35:16.760"></status>
</kw>
<msg timestamp="20160205 03:35:16.852" level="INFO">${tailed_text} = [2016-02-05 02:35:06,458][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:35:16.851" starttime="20160205 03:35:16.499"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:35:16.864" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_Acc_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/CRCE_Acc_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:35:16.865" starttime="20160205 03:35:16.860"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:16.866" starttime="20160205 03:35:16.853"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.877" starttime="20160205 03:35:16.874"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.880" starttime="20160205 03:35:16.878"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:16.882" starttime="20160205 03:35:16.867"></status>
</kw>
<msg timestamp="20160205 03:35:16.885" level="INFO">${tailed_text} = [2016-02-05 02:35:06,458][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:35:16.884" starttime="20160205 03:35:16.490"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:16.918" starttime="20160205 03:35:16.916"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:17.233" starttime="20160205 03:35:16.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:17.237" starttime="20160205 03:35:17.235"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:35:17.241" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:35:17.243" level="INFO">${queryResultSetLines} = 1328650|6.1|140|ACCOUNT_CHANGE|1|CRCE|crce01|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0|t|OK|NONE|n...</msg>
<status status="PASS" endtime="20160205 03:35:17.242" starttime="20160205 03:35:17.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:17.246" starttime="20160205 03:35:17.244"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:35:17.249" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:35:17.250" level="INFO">@{queryResultSet} = [ 1328650|6.1|140|ACCOUNT_CHANGE|1|CRCE|crce01|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0|t|OK|NONE...</msg>
<status status="PASS" endtime="20160205 03:35:17.250" starttime="20160205 03:35:17.247"></status>
</kw>
<msg timestamp="20160205 03:35:17.254" level="INFO">@{queryRows} = [ 1328650|6.1|140|ACCOUNT_CHANGE|1|CRCE|crce01|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0|t|OK|NONE...</msg>
<status status="PASS" endtime="20160205 03:35:17.252" starttime="20160205 03:35:16.908"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:35:17.258" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:35:17.259" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:35:17.258" starttime="20160205 03:35:17.255"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:35:17.262" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:35:17.264" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:35:17.263" starttime="20160205 03:35:17.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:35:17.273" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:35:17.274" starttime="20160205 03:35:17.271"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:17.275" starttime="20160205 03:35:17.265"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:17.282" starttime="20160205 03:35:17.276"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:17.283" starttime="20160205 03:35:16.898"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:17.290" starttime="20160205 03:35:17.285"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:17.291" starttime="20160205 03:35:05.425"></status>
</kw>
<doc>Send the CRCE AccountChange ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:35:17.294" starttime="20160205 03:35:05.420"></status>
</test>
<test id="s1-s3-s1-s1-t7" name="Test Customer EDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${Cust_EDR}</arg>
<arg>Cust_EDR</arg>
<arg>customer_edr</arg>
<arg>customerid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:17.353" starttime="20160205 03:35:17.351"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:17.416" starttime="20160205 03:35:17.361"></status>
</kw>
<msg timestamp="20160205 03:35:17.418" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160205 03:35:17.417" starttime="20160205 03:35:17.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:35:17.429" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:35:17.891" level="INFO">Read output: Last login: Fri Feb  5 02:35:05 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:35:17.892" starttime="20160205 03:35:17.426"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:17.893" starttime="20160205 03:35:17.419"></status>
</kw>
<msg timestamp="20160205 03:35:17.896" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160205 03:35:17.895" starttime="20160205 03:35:17.341"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:17.908" starttime="20160205 03:35:17.906"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:35:17.912" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160205 03:35:17.917" starttime="20160205 03:35:17.909"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:17.918" starttime="20160205 03:35:17.898"></status>
</kw>
<msg timestamp="20160205 03:35:17.919" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160205 03:35:17.918" starttime="20160205 03:35:17.328"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:17.935" starttime="20160205 03:35:17.929"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:17.936" starttime="20160205 03:35:17.925"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:17.947" starttime="20160205 03:35:17.945"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:17.983" starttime="20160205 03:35:17.948"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:17.985" starttime="20160205 03:35:17.938"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:35:27.989" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:35:27.991" starttime="20160205 03:35:17.986"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.014" starttime="20160205 03:35:28.011"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:35:28.021" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:35:28.020" starttime="20160205 03:35:28.015"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:35:28.040" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:35:28.041" starttime="20160205 03:35:28.022"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.052" starttime="20160205 03:35:28.050"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:35:28.055" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:35:28.113" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:35:28.115" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:35:28.115" starttime="20160205 03:35:28.054"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.118" starttime="20160205 03:35:28.116"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.121" starttime="20160205 03:35:28.119"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.124" starttime="20160205 03:35:28.122"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:35:28.129" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:35:28.201" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:35:28.203" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:35:28.203" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:35:28.202" starttime="20160205 03:35:28.125"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.211" starttime="20160205 03:35:28.205"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.214" starttime="20160205 03:35:28.212"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.217" starttime="20160205 03:35:28.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.220" starttime="20160205 03:35:28.218"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.223" starttime="20160205 03:35:28.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.226" starttime="20160205 03:35:28.224"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.229" starttime="20160205 03:35:28.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.232" starttime="20160205 03:35:28.230"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.235" starttime="20160205 03:35:28.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.238" starttime="20160205 03:35:28.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.240" starttime="20160205 03:35:28.239"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:28.242" starttime="20160205 03:35:28.043"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:35:28.245" level="INFO">Starting command 'cat tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160205 03:35:28.250" starttime="20160205 03:35:28.243"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:35:28.253" level="INFO">Reading output of command 'cat tmpfilemonitor10.log'.</msg>
<msg timestamp="20160205 03:35:28.295" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:35:28.296" level="INFO">${stdout_string} = [2016-02-05 02:35:17,976][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|910|1|soa01|240...</msg>
<status status="PASS" endtime="20160205 03:35:28.296" starttime="20160205 03:35:28.251"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:35:28.300" level="INFO">Executing command 'rm tmpfilemonitor10.log'.</msg>
<msg timestamp="20160205 03:35:28.380" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:35:28.381" starttime="20160205 03:35:28.297"></status>
</kw>
<msg timestamp="20160205 03:35:28.384" level="INFO">${tailed_text} = [2016-02-05 02:35:17,976][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|910|1|soa01|240...</msg>
<status status="PASS" endtime="20160205 03:35:28.383" starttime="20160205 03:35:28.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:35:28.397" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/Cust_EDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/Cust_EDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:35:28.398" starttime="20160205 03:35:28.392"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:28.399" starttime="20160205 03:35:28.385"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.410" starttime="20160205 03:35:28.408"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.413" starttime="20160205 03:35:28.411"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:28.416" starttime="20160205 03:35:28.400"></status>
</kw>
<msg timestamp="20160205 03:35:28.419" level="INFO">${tailed_text} = [2016-02-05 02:35:17,976][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|910|1|soa01|240...</msg>
<status status="PASS" endtime="20160205 03:35:28.417" starttime="20160205 03:35:27.995"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.451" starttime="20160205 03:35:28.449"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.459" starttime="20160205 03:35:28.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.462" starttime="20160205 03:35:28.460"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:35:28.465" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:35:28.467" level="INFO">${queryResultSetLines} = 1000104|6.1|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.|
</msg>
<status status="PASS" endtime="20160205 03:35:28.466" starttime="20160205 03:35:28.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.470" starttime="20160205 03:35:28.468"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:35:28.473" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:35:28.474" level="INFO">@{queryResultSet} = [ 1000104|6.1|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.| ]</msg>
<status status="PASS" endtime="20160205 03:35:28.474" starttime="20160205 03:35:28.471"></status>
</kw>
<msg timestamp="20160205 03:35:28.477" level="INFO">@{queryRows} = [ 1000104|6.1|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.| ]</msg>
<status status="PASS" endtime="20160205 03:35:28.476" starttime="20160205 03:35:28.441"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:35:28.480" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:35:28.482" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:35:28.481" starttime="20160205 03:35:28.478"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:35:28.485" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:35:28.486" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:35:28.486" starttime="20160205 03:35:28.483"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:35:28.496" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:35:28.497" starttime="20160205 03:35:28.494"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:28.498" starttime="20160205 03:35:28.487"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.503" starttime="20160205 03:35:28.499"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:28.503" starttime="20160205 03:35:28.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.506" starttime="20160205 03:35:28.504"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:28.507" starttime="20160205 03:35:17.307"></status>
</kw>
<doc>Send the CRM EDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:35:28.508" starttime="20160205 03:35:17.298"></status>
</test>
<test id="s1-s3-s1-s1-t8" name="Test Customer SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SDR_IME}</arg>
<arg>SDR_IME</arg>
<arg>inotif_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.535" starttime="20160205 03:35:28.534"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:28.594" starttime="20160205 03:35:28.539"></status>
</kw>
<msg timestamp="20160205 03:35:28.596" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160205 03:35:28.595" starttime="20160205 03:35:28.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:35:28.606" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:35:29.034" level="INFO">Read output: Last login: Fri Feb  5 02:35:17 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:35:29.035" starttime="20160205 03:35:28.604"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:29.036" starttime="20160205 03:35:28.597"></status>
</kw>
<msg timestamp="20160205 03:35:29.038" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160205 03:35:29.037" starttime="20160205 03:35:28.529"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:29.044" starttime="20160205 03:35:29.042"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:35:29.045" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20160205 03:35:29.049" starttime="20160205 03:35:29.044"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:29.049" starttime="20160205 03:35:29.039"></status>
</kw>
<msg timestamp="20160205 03:35:29.051" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160205 03:35:29.050" starttime="20160205 03:35:28.524"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:29.066" starttime="20160205 03:35:29.060"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:29.066" starttime="20160205 03:35:29.057"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:29.071" starttime="20160205 03:35:29.070"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:29.193" starttime="20160205 03:35:29.071"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:29.194" starttime="20160205 03:35:29.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:35:39.199" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:35:39.202" starttime="20160205 03:35:29.195"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.224" starttime="20160205 03:35:39.222"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:35:39.232" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:35:39.232" starttime="20160205 03:35:39.225"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:35:39.239" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:35:39.240" starttime="20160205 03:35:39.234"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.251" starttime="20160205 03:35:39.249"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:35:39.253" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:35:39.300" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:35:39.301" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:35:39.301" starttime="20160205 03:35:39.252"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.303" starttime="20160205 03:35:39.302"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.305" starttime="20160205 03:35:39.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.307" starttime="20160205 03:35:39.306"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:35:39.312" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:35:39.394" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:35:39.396" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:35:39.396" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:35:39.395" starttime="20160205 03:35:39.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.404" starttime="20160205 03:35:39.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.408" starttime="20160205 03:35:39.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.410" starttime="20160205 03:35:39.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.417" starttime="20160205 03:35:39.412"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.420" starttime="20160205 03:35:39.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.423" starttime="20160205 03:35:39.421"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.426" starttime="20160205 03:35:39.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.429" starttime="20160205 03:35:39.427"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.432" starttime="20160205 03:35:39.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.434" starttime="20160205 03:35:39.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.437" starttime="20160205 03:35:39.435"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:39.438" starttime="20160205 03:35:39.242"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:35:39.442" level="INFO">Starting command 'cat tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20160205 03:35:39.447" starttime="20160205 03:35:39.439"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:35:39.449" level="INFO">Reading output of command 'cat tmpfilemonitor11.log'.</msg>
<msg timestamp="20160205 03:35:39.494" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:35:39.496" level="INFO">${stdout_string} = [2016-02-05 02:35:29,110][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160205 03:35:39.495" starttime="20160205 03:35:39.448"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:35:39.500" level="INFO">Executing command 'rm tmpfilemonitor11.log'.</msg>
<msg timestamp="20160205 03:35:39.585" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:35:39.586" starttime="20160205 03:35:39.498"></status>
</kw>
<msg timestamp="20160205 03:35:39.589" level="INFO">${tailed_text} = [2016-02-05 02:35:29,110][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160205 03:35:39.588" starttime="20160205 03:35:39.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:35:39.601" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/SDR_IME_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/SDR_IME_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:35:39.602" starttime="20160205 03:35:39.597"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:39.603" starttime="20160205 03:35:39.590"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.614" starttime="20160205 03:35:39.611"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.617" starttime="20160205 03:35:39.615"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:39.620" starttime="20160205 03:35:39.604"></status>
</kw>
<msg timestamp="20160205 03:35:39.622" level="INFO">${tailed_text} = [2016-02-05 02:35:29,110][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160205 03:35:39.622" starttime="20160205 03:35:39.206"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.658" starttime="20160205 03:35:39.656"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.667" starttime="20160205 03:35:39.659"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.670" starttime="20160205 03:35:39.668"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:35:39.673" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:35:39.675" level="INFO">${queryResultSetLines} = 1001134|6.1|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|6.1|null|NEW|2015-02-23 23...</msg>
<status status="PASS" endtime="20160205 03:35:39.674" starttime="20160205 03:35:39.671"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.678" starttime="20160205 03:35:39.676"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:35:39.681" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:35:39.682" level="INFO">@{queryResultSet} = [ 1001134|6.1|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|6.1|null|NEW|2015-02-23 ...</msg>
<status status="PASS" endtime="20160205 03:35:39.682" starttime="20160205 03:35:39.679"></status>
</kw>
<msg timestamp="20160205 03:35:39.685" level="INFO">@{queryRows} = [ 1001134|6.1|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|6.1|null|NEW|2015-02-23 ...</msg>
<status status="PASS" endtime="20160205 03:35:39.684" starttime="20160205 03:35:39.646"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:35:39.688" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:35:39.690" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:35:39.689" starttime="20160205 03:35:39.686"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:35:39.693" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:35:39.694" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:35:39.694" starttime="20160205 03:35:39.691"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:35:39.704" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:35:39.705" starttime="20160205 03:35:39.702"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:39.706" starttime="20160205 03:35:39.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.712" starttime="20160205 03:35:39.707"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:39.713" starttime="20160205 03:35:39.637"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.719" starttime="20160205 03:35:39.714"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:39.721" starttime="20160205 03:35:28.514"></status>
</kw>
<doc>Send the CRM SDR IME ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:35:39.723" starttime="20160205 03:35:28.510"></status>
</test>
<test id="s1-s3-s1-s1-t9" name="Test Customer IVR SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${IVR_SDR}</arg>
<arg>IVR_SDR</arg>
<arg>ivr_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.781" starttime="20160205 03:35:39.779"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:39.843" starttime="20160205 03:35:39.789"></status>
</kw>
<msg timestamp="20160205 03:35:39.845" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160205 03:35:39.844" starttime="20160205 03:35:39.783"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:35:39.855" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:35:40.891" level="INFO">Read output: Last login: Fri Feb  5 02:35:28 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:35:40.892" starttime="20160205 03:35:39.853"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:40.893" starttime="20160205 03:35:39.846"></status>
</kw>
<msg timestamp="20160205 03:35:40.896" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160205 03:35:40.895" starttime="20160205 03:35:39.770"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:40.902" starttime="20160205 03:35:40.901"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:35:40.904" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20160205 03:35:40.908" starttime="20160205 03:35:40.903"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:40.909" starttime="20160205 03:35:40.897"></status>
</kw>
<msg timestamp="20160205 03:35:40.910" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160205 03:35:40.909" starttime="20160205 03:35:39.757"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:40.942" starttime="20160205 03:35:40.919"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:40.944" starttime="20160205 03:35:40.916"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:40.955" starttime="20160205 03:35:40.953"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:40.970" starttime="20160205 03:35:40.956"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:40.971" starttime="20160205 03:35:40.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:35:50.974" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:35:50.976" starttime="20160205 03:35:40.972"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:50.998" starttime="20160205 03:35:50.996"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:35:51.009" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:35:51.007" starttime="20160205 03:35:50.999"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:35:51.017" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:35:51.018" starttime="20160205 03:35:51.010"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.029" starttime="20160205 03:35:51.027"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:35:51.032" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:35:51.084" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:35:51.086" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:35:51.086" starttime="20160205 03:35:51.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.090" starttime="20160205 03:35:51.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.093" starttime="20160205 03:35:51.091"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.095" starttime="20160205 03:35:51.094"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:35:51.100" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:35:51.172" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:35:51.174" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:35:51.175" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:35:51.173" starttime="20160205 03:35:51.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.183" starttime="20160205 03:35:51.176"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.186" starttime="20160205 03:35:51.184"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.189" starttime="20160205 03:35:51.187"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.191" starttime="20160205 03:35:51.190"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.194" starttime="20160205 03:35:51.192"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.197" starttime="20160205 03:35:51.195"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.200" starttime="20160205 03:35:51.198"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.203" starttime="20160205 03:35:51.201"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.206" starttime="20160205 03:35:51.204"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.209" starttime="20160205 03:35:51.207"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.211" starttime="20160205 03:35:51.210"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:51.212" starttime="20160205 03:35:51.019"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:35:51.216" level="INFO">Starting command 'cat tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20160205 03:35:51.220" starttime="20160205 03:35:51.214"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:35:51.223" level="INFO">Reading output of command 'cat tmpfilemonitor12.log'.</msg>
<msg timestamp="20160205 03:35:51.267" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:35:51.268" level="INFO">${stdout_string} = [2016-02-05 02:35:40,965][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=1.0|601|2015-02-23T...</msg>
<status status="PASS" endtime="20160205 03:35:51.268" starttime="20160205 03:35:51.222"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:35:51.272" level="INFO">Executing command 'rm tmpfilemonitor12.log'.</msg>
<msg timestamp="20160205 03:35:51.351" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:35:51.352" starttime="20160205 03:35:51.270"></status>
</kw>
<msg timestamp="20160205 03:35:51.356" level="INFO">${tailed_text} = [2016-02-05 02:35:40,965][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=1.0|601|2015-02-23T...</msg>
<status status="PASS" endtime="20160205 03:35:51.354" starttime="20160205 03:35:50.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:35:51.367" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/IVR_SDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/IVR_SDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:35:51.368" starttime="20160205 03:35:51.364"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:51.369" starttime="20160205 03:35:51.357"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.380" starttime="20160205 03:35:51.378"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.384" starttime="20160205 03:35:51.382"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:51.387" starttime="20160205 03:35:51.371"></status>
</kw>
<msg timestamp="20160205 03:35:51.390" level="INFO">${tailed_text} = [2016-02-05 02:35:40,965][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=1.0|601|2015-02-23T...</msg>
<status status="PASS" endtime="20160205 03:35:51.388" starttime="20160205 03:35:50.979"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.424" starttime="20160205 03:35:51.422"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.431" starttime="20160205 03:35:51.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.434" starttime="20160205 03:35:51.432"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:35:51.438" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:35:51.439" level="INFO">${queryResultSetLines} = 1000999|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0|A...</msg>
<status status="PASS" endtime="20160205 03:35:51.439" starttime="20160205 03:35:51.435"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.442" starttime="20160205 03:35:51.441"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:35:51.445" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:35:51.447" level="INFO">@{queryResultSet} = [ 1000999|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0...</msg>
<status status="PASS" endtime="20160205 03:35:51.446" starttime="20160205 03:35:51.443"></status>
</kw>
<msg timestamp="20160205 03:35:51.449" level="INFO">@{queryRows} = [ 1000999|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0...</msg>
<status status="PASS" endtime="20160205 03:35:51.448" starttime="20160205 03:35:51.414"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:35:51.453" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:35:51.454" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:35:51.453" starttime="20160205 03:35:51.450"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:35:51.457" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:35:51.459" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:35:51.458" starttime="20160205 03:35:51.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:35:51.468" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:35:51.469" starttime="20160205 03:35:51.466"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:51.470" starttime="20160205 03:35:51.460"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.476" starttime="20160205 03:35:51.471"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:51.477" starttime="20160205 03:35:51.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.484" starttime="20160205 03:35:51.478"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:51.485" starttime="20160205 03:35:39.736"></status>
</kw>
<doc>Send the IVR SDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:35:51.487" starttime="20160205 03:35:39.727"></status>
</test>
<test id="s1-s3-s1-s1-t10" name="Test Customer PROV SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${PROV_SDR}</arg>
<arg>PROV_SDR</arg>
<arg>prov_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.522" starttime="20160205 03:35:51.521"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:51.578" starttime="20160205 03:35:51.526"></status>
</kw>
<msg timestamp="20160205 03:35:51.580" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160205 03:35:51.579" starttime="20160205 03:35:51.522"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:35:51.590" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:35:52.009" level="INFO">Read output: Last login: Fri Feb  5 02:35:40 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:35:52.011" starttime="20160205 03:35:51.588"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:52.013" starttime="20160205 03:35:51.581"></status>
</kw>
<msg timestamp="20160205 03:35:52.017" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160205 03:35:52.016" starttime="20160205 03:35:51.516"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:52.029" starttime="20160205 03:35:52.027"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:35:52.033" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20160205 03:35:52.037" starttime="20160205 03:35:52.030"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:52.039" starttime="20160205 03:35:52.019"></status>
</kw>
<msg timestamp="20160205 03:35:52.042" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160205 03:35:52.040" starttime="20160205 03:35:51.511"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:52.106" starttime="20160205 03:35:52.062"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:52.107" starttime="20160205 03:35:52.055"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:52.118" starttime="20160205 03:35:52.116"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:35:52.209" starttime="20160205 03:35:52.119"></status>
</kw>
<status status="PASS" endtime="20160205 03:35:52.210" starttime="20160205 03:35:52.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:36:02.212" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:36:02.213" starttime="20160205 03:35:52.210"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.228" starttime="20160205 03:36:02.226"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:36:02.236" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:36:02.236" starttime="20160205 03:36:02.229"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:36:02.243" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:36:02.244" starttime="20160205 03:36:02.237"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.255" starttime="20160205 03:36:02.252"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:36:02.257" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:36:02.307" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:36:02.309" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:36:02.308" starttime="20160205 03:36:02.256"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.312" starttime="20160205 03:36:02.310"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.315" starttime="20160205 03:36:02.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.317" starttime="20160205 03:36:02.316"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:36:02.321" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:36:02.395" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:36:02.397" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:36:02.398" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:36:02.396" starttime="20160205 03:36:02.318"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.404" starttime="20160205 03:36:02.399"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.407" starttime="20160205 03:36:02.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.409" starttime="20160205 03:36:02.408"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.412" starttime="20160205 03:36:02.410"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.415" starttime="20160205 03:36:02.413"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.417" starttime="20160205 03:36:02.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.420" starttime="20160205 03:36:02.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.423" starttime="20160205 03:36:02.421"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.425" starttime="20160205 03:36:02.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.428" starttime="20160205 03:36:02.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.430" starttime="20160205 03:36:02.429"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:02.431" starttime="20160205 03:36:02.245"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:36:02.435" level="INFO">Starting command 'cat tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20160205 03:36:02.439" starttime="20160205 03:36:02.433"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:36:02.442" level="INFO">Reading output of command 'cat tmpfilemonitor13.log'.</msg>
<msg timestamp="20160205 03:36:02.481" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:36:02.483" level="INFO">${stdout_string} = [2016-02-05 02:35:52,135][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160205 03:36:02.482" starttime="20160205 03:36:02.440"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:36:02.486" level="INFO">Executing command 'rm tmpfilemonitor13.log'.</msg>
<msg timestamp="20160205 03:36:02.566" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:36:02.566" starttime="20160205 03:36:02.484"></status>
</kw>
<msg timestamp="20160205 03:36:02.567" level="INFO">${tailed_text} = [2016-02-05 02:35:52,135][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160205 03:36:02.567" starttime="20160205 03:36:02.219"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:36:02.573" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/PROV_SDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/PROV_SDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:36:02.573" starttime="20160205 03:36:02.571"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:02.573" starttime="20160205 03:36:02.568"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.578" starttime="20160205 03:36:02.577"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.580" starttime="20160205 03:36:02.579"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:02.581" starttime="20160205 03:36:02.574"></status>
</kw>
<msg timestamp="20160205 03:36:02.582" level="INFO">${tailed_text} = [2016-02-05 02:35:52,135][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160205 03:36:02.582" starttime="20160205 03:36:02.215"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.597" starttime="20160205 03:36:02.596"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.634" starttime="20160205 03:36:02.598"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.638" starttime="20160205 03:36:02.636"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:36:02.642" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:36:02.644" level="INFO">${queryResultSetLines} = 1052933|6.1|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|null|...</msg>
<status status="PASS" endtime="20160205 03:36:02.643" starttime="20160205 03:36:02.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.646" starttime="20160205 03:36:02.645"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:36:02.650" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:36:02.651" level="INFO">@{queryResultSet} = [ 1052933|6.1|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|nul...</msg>
<status status="PASS" endtime="20160205 03:36:02.651" starttime="20160205 03:36:02.648"></status>
</kw>
<msg timestamp="20160205 03:36:02.654" level="INFO">@{queryRows} = [ 1052933|6.1|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|nul...</msg>
<status status="PASS" endtime="20160205 03:36:02.653" starttime="20160205 03:36:02.593"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:36:02.658" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:36:02.659" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:36:02.659" starttime="20160205 03:36:02.655"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:36:02.662" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:36:02.664" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:36:02.663" starttime="20160205 03:36:02.660"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:36:02.674" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:36:02.674" starttime="20160205 03:36:02.671"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:02.675" starttime="20160205 03:36:02.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.682" starttime="20160205 03:36:02.677"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:02.683" starttime="20160205 03:36:02.589"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.689" starttime="20160205 03:36:02.684"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:02.691" starttime="20160205 03:35:51.500"></status>
</kw>
<doc>Send the PROV SDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:36:02.693" starttime="20160205 03:35:51.491"></status>
</test>
<test id="s1-s3-s1-s1-t11" name="Test MoneyTX ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MoneyTX}</arg>
<arg>MoneyTX</arg>
<arg>crce_moneytx</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.757" starttime="20160205 03:36:02.755"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:02.821" starttime="20160205 03:36:02.765"></status>
</kw>
<msg timestamp="20160205 03:36:02.823" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160205 03:36:02.822" starttime="20160205 03:36:02.758"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:36:02.833" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:36:03.308" level="INFO">Read output: Last login: Fri Feb  5 02:35:51 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:36:03.309" starttime="20160205 03:36:02.830"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:03.310" starttime="20160205 03:36:02.824"></status>
</kw>
<msg timestamp="20160205 03:36:03.312" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160205 03:36:03.311" starttime="20160205 03:36:02.745"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:03.317" starttime="20160205 03:36:03.316"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:36:03.319" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20160205 03:36:03.323" starttime="20160205 03:36:03.318"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:03.323" starttime="20160205 03:36:03.313"></status>
</kw>
<msg timestamp="20160205 03:36:03.325" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160205 03:36:03.324" starttime="20160205 03:36:02.732"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:03.340" starttime="20160205 03:36:03.334"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:03.341" starttime="20160205 03:36:03.331"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:03.351" starttime="20160205 03:36:03.349"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:03.408" starttime="20160205 03:36:03.352"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:03.409" starttime="20160205 03:36:03.342"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:36:13.415" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:36:13.417" starttime="20160205 03:36:03.410"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.438" starttime="20160205 03:36:13.436"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:36:13.446" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:36:13.445" starttime="20160205 03:36:13.439"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:36:13.453" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:36:13.454" starttime="20160205 03:36:13.447"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.465" starttime="20160205 03:36:13.463"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:36:13.468" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:36:13.520" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:36:13.521" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:36:13.521" starttime="20160205 03:36:13.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.524" starttime="20160205 03:36:13.523"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.527" starttime="20160205 03:36:13.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.530" starttime="20160205 03:36:13.528"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:36:13.534" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:36:13.608" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:36:13.610" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:36:13.611" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:36:13.609" starttime="20160205 03:36:13.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.618" starttime="20160205 03:36:13.612"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.621" starttime="20160205 03:36:13.619"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.624" starttime="20160205 03:36:13.622"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.627" starttime="20160205 03:36:13.625"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.630" starttime="20160205 03:36:13.628"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.632" starttime="20160205 03:36:13.631"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.636" starttime="20160205 03:36:13.634"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.639" starttime="20160205 03:36:13.637"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.641" starttime="20160205 03:36:13.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.644" starttime="20160205 03:36:13.642"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.647" starttime="20160205 03:36:13.645"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:13.648" starttime="20160205 03:36:13.456"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:36:13.651" level="INFO">Starting command 'cat tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20160205 03:36:13.656" starttime="20160205 03:36:13.649"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:36:13.659" level="INFO">Reading output of command 'cat tmpfilemonitor14.log'.</msg>
<msg timestamp="20160205 03:36:13.700" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:36:13.702" level="INFO">${stdout_string} = [2016-02-05 02:36:03,375][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|120|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:36:13.701" starttime="20160205 03:36:13.657"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:36:13.705" level="INFO">Executing command 'rm tmpfilemonitor14.log'.</msg>
<msg timestamp="20160205 03:36:13.785" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:36:13.786" starttime="20160205 03:36:13.703"></status>
</kw>
<msg timestamp="20160205 03:36:13.788" level="INFO">${tailed_text} = [2016-02-05 02:36:03,375][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|120|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:36:13.788" starttime="20160205 03:36:13.429"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:36:13.800" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/MoneyTX_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/MoneyTX_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:36:13.801" starttime="20160205 03:36:13.796"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:13.802" starttime="20160205 03:36:13.790"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.813" starttime="20160205 03:36:13.810"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.816" starttime="20160205 03:36:13.814"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:13.819" starttime="20160205 03:36:13.803"></status>
</kw>
<msg timestamp="20160205 03:36:13.821" level="INFO">${tailed_text} = [2016-02-05 02:36:03,375][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|120|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:36:13.820" starttime="20160205 03:36:13.420"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.853" starttime="20160205 03:36:13.851"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.861" starttime="20160205 03:36:13.854"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.864" starttime="20160205 03:36:13.862"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:36:13.867" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:36:13.869" level="INFO">${queryResultSetLines} = 1000123|6.1|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|1|...</msg>
<status status="PASS" endtime="20160205 03:36:13.868" starttime="20160205 03:36:13.865"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.872" starttime="20160205 03:36:13.870"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:36:13.875" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:36:13.876" level="INFO">@{queryResultSet} = [ 1000123|6.1|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|...</msg>
<status status="PASS" endtime="20160205 03:36:13.876" starttime="20160205 03:36:13.873"></status>
</kw>
<msg timestamp="20160205 03:36:13.879" level="INFO">@{queryRows} = [ 1000123|6.1|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|...</msg>
<status status="PASS" endtime="20160205 03:36:13.878" starttime="20160205 03:36:13.843"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:36:13.882" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:36:13.884" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:36:13.883" starttime="20160205 03:36:13.880"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:36:13.887" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:36:13.888" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:36:13.888" starttime="20160205 03:36:13.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:36:13.898" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:36:13.899" starttime="20160205 03:36:13.896"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:13.901" starttime="20160205 03:36:13.889"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.907" starttime="20160205 03:36:13.902"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:13.908" starttime="20160205 03:36:13.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.914" starttime="20160205 03:36:13.909"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:13.915" starttime="20160205 03:36:02.706"></status>
</kw>
<doc>Send the MoneyTX CRCE ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:36:13.917" starttime="20160205 03:36:02.697"></status>
</test>
<test id="s1-s3-s1-s1-t12" name="Test SwapSIM ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${swapSIM}</arg>
<arg>swapSIM</arg>
<arg>crce_simswap</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:13.976" starttime="20160205 03:36:13.974"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:14.027" starttime="20160205 03:36:13.984"></status>
</kw>
<msg timestamp="20160205 03:36:14.029" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160205 03:36:14.028" starttime="20160205 03:36:13.977"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:36:14.034" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:36:14.478" level="INFO">Read output: Last login: Fri Feb  5 02:36:03 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:36:14.479" starttime="20160205 03:36:14.033"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:14.479" starttime="20160205 03:36:14.030"></status>
</kw>
<msg timestamp="20160205 03:36:14.481" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160205 03:36:14.480" starttime="20160205 03:36:13.965"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:14.486" starttime="20160205 03:36:14.485"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:36:14.488" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20160205 03:36:14.491" starttime="20160205 03:36:14.487"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:14.492" starttime="20160205 03:36:14.482"></status>
</kw>
<msg timestamp="20160205 03:36:14.493" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160205 03:36:14.493" starttime="20160205 03:36:13.952"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:14.510" starttime="20160205 03:36:14.503"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:14.512" starttime="20160205 03:36:14.499"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:14.523" starttime="20160205 03:36:14.521"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:14.577" starttime="20160205 03:36:14.524"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:14.578" starttime="20160205 03:36:14.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:36:24.584" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:36:24.585" starttime="20160205 03:36:14.580"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.607" starttime="20160205 03:36:24.605"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:36:24.614" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:36:24.614" starttime="20160205 03:36:24.608"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:36:24.632" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:36:24.633" starttime="20160205 03:36:24.615"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.645" starttime="20160205 03:36:24.642"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:36:24.647" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:36:24.699" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:36:24.701" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:36:24.700" starttime="20160205 03:36:24.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.704" starttime="20160205 03:36:24.702"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.707" starttime="20160205 03:36:24.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.709" starttime="20160205 03:36:24.708"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:36:24.714" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:36:24.788" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:36:24.790" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:36:24.790" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:36:24.789" starttime="20160205 03:36:24.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.798" starttime="20160205 03:36:24.791"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.802" starttime="20160205 03:36:24.799"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.805" starttime="20160205 03:36:24.803"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.808" starttime="20160205 03:36:24.806"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.810" starttime="20160205 03:36:24.809"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.813" starttime="20160205 03:36:24.811"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.816" starttime="20160205 03:36:24.814"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.819" starttime="20160205 03:36:24.817"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.822" starttime="20160205 03:36:24.820"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.825" starttime="20160205 03:36:24.823"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.828" starttime="20160205 03:36:24.826"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:24.829" starttime="20160205 03:36:24.635"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:36:24.832" level="INFO">Starting command 'cat tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20160205 03:36:24.836" starttime="20160205 03:36:24.830"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:36:24.839" level="INFO">Reading output of command 'cat tmpfilemonitor15.log'.</msg>
<msg timestamp="20160205 03:36:24.881" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:36:24.882" level="INFO">${stdout_string} = [2016-02-05 02:36:14,542][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|160|true|16|CRC...</msg>
<status status="PASS" endtime="20160205 03:36:24.882" starttime="20160205 03:36:24.837"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:36:24.886" level="INFO">Executing command 'rm tmpfilemonitor15.log'.</msg>
<msg timestamp="20160205 03:36:24.966" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:36:24.967" starttime="20160205 03:36:24.883"></status>
</kw>
<msg timestamp="20160205 03:36:24.969" level="INFO">${tailed_text} = [2016-02-05 02:36:14,542][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|160|true|16|CRC...</msg>
<status status="PASS" endtime="20160205 03:36:24.968" starttime="20160205 03:36:24.598"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:36:24.982" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/swapSIM_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/swapSIM_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:36:24.983" starttime="20160205 03:36:24.977"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:24.984" starttime="20160205 03:36:24.970"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.995" starttime="20160205 03:36:24.993"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:36:24.998" starttime="20160205 03:36:24.996"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:25.001" starttime="20160205 03:36:24.986"></status>
</kw>
<msg timestamp="20160205 03:36:25.005" level="INFO">${tailed_text} = [2016-02-05 02:36:14,542][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|160|true|16|CRC...</msg>
<status status="PASS" endtime="20160205 03:36:25.004" starttime="20160205 03:36:24.589"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:25.042" starttime="20160205 03:36:25.040"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:25.051" starttime="20160205 03:36:25.043"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:25.054" starttime="20160205 03:36:25.052"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:36:25.057" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:36:25.059" level="INFO">${queryResultSetLines} = 1001667|6.1|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|nul...</msg>
<status status="PASS" endtime="20160205 03:36:25.059" starttime="20160205 03:36:25.055"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:25.062" starttime="20160205 03:36:25.060"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:36:25.065" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:36:25.067" level="INFO">@{queryResultSet} = [ 1001667|6.1|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|n...</msg>
<status status="PASS" endtime="20160205 03:36:25.066" starttime="20160205 03:36:25.063"></status>
</kw>
<msg timestamp="20160205 03:36:25.070" level="INFO">@{queryRows} = [ 1001667|6.1|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|n...</msg>
<status status="PASS" endtime="20160205 03:36:25.069" starttime="20160205 03:36:25.031"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:36:25.074" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:36:25.075" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:36:25.075" starttime="20160205 03:36:25.071"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:36:25.079" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:36:25.080" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:36:25.080" starttime="20160205 03:36:25.077"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:36:25.091" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:36:25.092" starttime="20160205 03:36:25.088"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:25.093" starttime="20160205 03:36:25.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:25.099" starttime="20160205 03:36:25.094"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:25.100" starttime="20160205 03:36:25.020"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:25.106" starttime="20160205 03:36:25.101"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:25.107" starttime="20160205 03:36:13.931"></status>
</kw>
<doc>Send the swapSIM CRCE ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:36:25.109" starttime="20160205 03:36:13.922"></status>
</test>
<test id="s1-s3-s1-s1-t13" name="Test MOC NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${MOC_NOK}</arg>
<arg>MOC_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160205 03:36:25.132" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160205 03:36:25.133" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160205 03:36:25.133" starttime="20160205 03:36:25.130"></status>
</kw>
<status status="FAIL" endtime="20160205 03:36:25.134" starttime="20160205 03:36:25.124"></status>
</kw>
<doc>Send the invalid MOC XDR ticket with following changes: Version (Header, Mandatory, changed), Provider (H,M,empty), Success (H,M,changed), CRCE Operation (B,M, changed), TrafficType (B,M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160205 03:36:25.135" starttime="20160205 03:36:25.114">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-s3-s1-s1-t14" name="Test SMS NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${SMS_NOK}</arg>
<arg>SMS_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160205 03:36:25.148" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160205 03:36:25.149" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160205 03:36:25.149" starttime="20160205 03:36:25.147"></status>
</kw>
<status status="FAIL" endtime="20160205 03:36:25.150" starttime="20160205 03:36:25.141"></status>
</kw>
<doc>Send the invalid SMS XDR ticket with following changes: Version (Header, Mandatory, changed), TrafficType (B, M, mpty), CRCE Result Code (B, M, changed). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160205 03:36:25.150" starttime="20160205 03:36:25.137">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-s3-s1-s1-t15" name="Test DATA NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${DATA_NOK}</arg>
<arg>DATA_NOK</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160205 03:36:25.162" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160205 03:36:25.163" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160205 03:36:25.164" starttime="20160205 03:36:25.161"></status>
</kw>
<status status="FAIL" endtime="20160205 03:36:25.164" starttime="20160205 03:36:25.157"></status>
</kw>
<doc>Send the invalid DATA XDR ticket with following changes: Application (Header, Mandatory, empty), Tariff (B, M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160205 03:36:25.165" starttime="20160205 03:36:25.152">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-s3-s1-s1-t16" name="Test MOC NOK - Invalid ASCII ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC_NOK_ASCII}</arg>
<arg>MOC_NOK_ASCII</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:25.191" starttime="20160205 03:36:25.191"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:25.237" starttime="20160205 03:36:25.195"></status>
</kw>
<msg timestamp="20160205 03:36:25.238" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160205 03:36:25.237" starttime="20160205 03:36:25.192"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:36:25.243" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:36:25.888" level="INFO">Read output: Last login: Fri Feb  5 02:36:14 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160205 03:36:25.889" starttime="20160205 03:36:25.242"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:25.889" starttime="20160205 03:36:25.239"></status>
</kw>
<msg timestamp="20160205 03:36:25.890" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160205 03:36:25.890" starttime="20160205 03:36:25.186"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:25.896" starttime="20160205 03:36:25.895"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:36:25.897" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.1.5/inew-mvno-xdr.log &gt; tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20160205 03:36:25.901" starttime="20160205 03:36:25.896"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:25.901" starttime="20160205 03:36:25.891"></status>
</kw>
<msg timestamp="20160205 03:36:25.902" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160205 03:36:25.902" starttime="20160205 03:36:25.181"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:25.917" starttime="20160205 03:36:25.912"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:25.918" starttime="20160205 03:36:25.908"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:25.929" starttime="20160205 03:36:25.927"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:25.952" starttime="20160205 03:36:25.930"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:25.953" starttime="20160205 03:36:25.920"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:36:35.957" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:36:35.960" starttime="20160205 03:36:25.954"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:35.985" starttime="20160205 03:36:35.982"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:36:35.993" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:36:35.992" starttime="20160205 03:36:35.987"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:36:35.999" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:36:35.999" starttime="20160205 03:36:35.994"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.011" starttime="20160205 03:36:36.009"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:36:36.014" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:36:36.066" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:36:36.067" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:36:36.067" starttime="20160205 03:36:36.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.070" starttime="20160205 03:36:36.068"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.073" starttime="20160205 03:36:36.071"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.076" starttime="20160205 03:36:36.074"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:36:36.080" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:36:36.157" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:36:36.159" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160205 03:36:36.160" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:36:36.158" starttime="20160205 03:36:36.077"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.167" starttime="20160205 03:36:36.161"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.170" starttime="20160205 03:36:36.168"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.173" starttime="20160205 03:36:36.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.176" starttime="20160205 03:36:36.174"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.178" starttime="20160205 03:36:36.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.181" starttime="20160205 03:36:36.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.185" starttime="20160205 03:36:36.182"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.188" starttime="20160205 03:36:36.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.190" starttime="20160205 03:36:36.189"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.193" starttime="20160205 03:36:36.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.196" starttime="20160205 03:36:36.194"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:36.197" starttime="20160205 03:36:36.001"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:36:36.200" level="INFO">Starting command 'cat tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20160205 03:36:36.205" starttime="20160205 03:36:36.198"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:36:36.207" level="INFO">Reading output of command 'cat tmpfilemonitor16.log'.</msg>
<msg timestamp="20160205 03:36:36.273" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:36:36.276" level="INFO">${stdout_string} = [2016-02-05 02:36:25,949][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:36:36.274" starttime="20160205 03:36:36.206"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:36:36.280" level="INFO">Executing command 'rm tmpfilemonitor16.log'.</msg>
<msg timestamp="20160205 03:36:36.363" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:36:36.364" starttime="20160205 03:36:36.277"></status>
</kw>
<msg timestamp="20160205 03:36:36.367" level="INFO">${tailed_text} = [2016-02-05 02:36:25,949][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:36:36.365" starttime="20160205 03:36:35.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:36:36.380" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/MOC_NOK_ASCII_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/log/MOC_NOK_ASCII_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:36:36.381" starttime="20160205 03:36:36.376"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:36.382" starttime="20160205 03:36:36.368"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.394" starttime="20160205 03:36:36.392"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.398" starttime="20160205 03:36:36.395"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:36.400" starttime="20160205 03:36:36.384"></status>
</kw>
<msg timestamp="20160205 03:36:36.402" level="INFO">${tailed_text} = [2016-02-05 02:36:25,949][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=6.1|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:36:36.401" starttime="20160205 03:36:35.964"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.445" starttime="20160205 03:36:36.445"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.450" starttime="20160205 03:36:36.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.451" starttime="20160205 03:36:36.450"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:36:36.452" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/MVNA_MEX/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:36:36.453" level="INFO">${queryResultSetLines} = </msg>
<status status="PASS" endtime="20160205 03:36:36.453" starttime="20160205 03:36:36.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.454" starttime="20160205 03:36:36.454"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:36:36.456" level="INFO">0 lines returned</msg>
<msg timestamp="20160205 03:36:36.457" level="INFO">@{queryResultSet} = [ ]</msg>
<status status="PASS" endtime="20160205 03:36:36.456" starttime="20160205 03:36:36.455"></status>
</kw>
<msg timestamp="20160205 03:36:36.457" level="INFO">@{queryRows} = [ ]</msg>
<status status="PASS" endtime="20160205 03:36:36.457" starttime="20160205 03:36:36.441"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:36:36.459" level="INFO">Length is 0</msg>
<msg timestamp="20160205 03:36:36.460" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20160205 03:36:36.459" starttime="20160205 03:36:36.458"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:36:36.461" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:36:36.462" level="INFO">${length_s} = 0</msg>
<status status="PASS" endtime="20160205 03:36:36.461" starttime="20160205 03:36:36.460"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.465" starttime="20160205 03:36:36.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:36:36.469" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:36:36.470" starttime="20160205 03:36:36.468"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:36.470" starttime="20160205 03:36:36.466"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:36.470" starttime="20160205 03:36:36.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.473" starttime="20160205 03:36:36.471"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:36.474" starttime="20160205 03:36:25.171"></status>
</kw>
<doc>Send the MOC XDR ticket with invalid ASCII garbage in it

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:36:36.475" starttime="20160205 03:36:25.167"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:36:36.506" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20160205 03:36:36.506" starttime="20160205 03:36:36.505"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:36:36.508" starttime="20160205 03:36:36.507"></status>
</kw>
<status status="PASS" endtime="20160205 03:36:36.508" starttime="20160205 03:36:36.501"></status>
</kw>
<doc>Main goal of the test suite is to check behaviour of XDR in several basic positive cases and a few negative (NOK) cases.
It uses Robot Framework's JMSLibrary to send tickets of different types (MOC, SMS, DATA,...) to AMQ where XDR consumers should process them.
After that XDR's log will be analysed and finally DB should be checked if ticket has landed also there.
Negative tests (NOK) test different (but not all) mandatory fields (empty field, different values than predefined) according to
XDR Specification v5.3.2. Each NOK test has modified different fields - which exactly is specified in test description of the test itself</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:36:36.509" starttime="20160205 03:33:57.037"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:36:36.572" starttime="20160205 03:33:57.023"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:36:36.632" starttime="20160205 03:33:57.007"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160205 03:36:36.720" starttime="20160205 03:28:47.404"></status>
</suite>
<statistics>
<total>
<stat pass="29" fail="2">Critical Tests</stat>
<stat pass="29" fail="5">All Tests</stat>
</total>
<tag>
<stat pass="0" info="non-critical" doc="" combined="" fail="3" links="">noncritical</stat>
<stat pass="12" info="" doc="" combined="" fail="2" links="">calls</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">ComponentTest</stat>
<stat pass="4" info="" doc="" combined="" fail="1" links="">DATA_only</stat>
<stat pass="29" info="" doc="" combined="" fail="5" links="">matko.sanseovic</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">MFC_only</stat>
<stat pass="3" info="" doc="" combined="" fail="1" links="">MOC_only</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">MTC_only</stat>
<stat pass="25" info="" doc="" combined="" fail="5" links="">MTEL_supported</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">MVNA_MEX_specific</stat>
<stat pass="25" info="" doc="" combined="" fail="5" links="">MVNA_MEX_supported</stat>
<stat pass="21" info="" doc="" combined="" fail="4" links="">SMARTSPACE_supported</stat>
<stat pass="6" info="" doc="" combined="" fail="0" links="">test</stat>
<stat pass="21" info="" doc="" combined="" fail="4" links="">TNZ_supported</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">USSD_only</stat>
<stat pass="11" info="" doc="" combined="" fail="4" links="">VIRGIN_COLUMBIA_supported</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">XDR_only</stat>
</tag>
<suite>
<stat pass="29" id="s1" fail="5" name="Robot Testsuites">Robot Testsuites</stat>
<stat pass="12" id="s1-s1" fail="2" name="Basic">Robot Testsuites.Basic</stat>
<stat pass="12" id="s1-s1-s1" fail="2" name="PrePaid">Robot Testsuites.Basic.PrePaid</stat>
<stat pass="4" id="s1-s1-s1-s1" fail="1" name="DATA">Robot Testsuites.Basic.PrePaid.DATA</stat>
<stat pass="4" id="s1-s1-s1-s1-s1" fail="1" name="Data-Regression-Suite">Robot Testsuites.Basic.PrePaid.DATA.Data-Regression-Suite</stat>
<stat pass="1" id="s1-s1-s1-s2" fail="0" name="MFC">Robot Testsuites.Basic.PrePaid.MFC</stat>
<stat pass="1" id="s1-s1-s1-s2-s1" fail="0" name="MFC PREPAID-ShortDuration">Robot Testsuites.Basic.PrePaid.MFC.MFC PREPAID-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s1" fail="0" name="MFC PREPAID-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MFC.MFC PREPAID-ShortDuration.MFC PREPAID-ShortDuration-robot-suite</stat>
<stat pass="3" id="s1-s1-s1-s3" fail="1" name="MOC">Robot Testsuites.Basic.PrePaid.MOC</stat>
<stat pass="3" id="s1-s1-s1-s3-s1" fail="1" name="OnNet">Robot Testsuites.Basic.PrePaid.MOC.OnNet</stat>
<stat pass="0" id="s1-s1-s1-s3-s1-s1" fail="1" name="MOC PREPAID ONNET-Abandon">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Abandon</stat>
<stat pass="0" id="s1-s1-s1-s3-s1-s1-s1" fail="1" name="MOC PREPAID ONNET-Abandon-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Abandon.MOC PREPAID ONNET-Abandon-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s2" fail="0" name="MOC PREPAID ONNET-Busy">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Busy</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s2-s1" fail="0" name="MOC PREPAID ONNET-Busy-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Busy.MOC PREPAID ONNET-Busy-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s3" fail="0" name="MOC PREPAID ONNET-NoAnswer">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoAnswer</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s3-s1" fail="0" name="MOC PREPAID ONNET-NoAnswer-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoAnswer.MOC PREPAID ONNET-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s4" fail="0" name="MOC PREPAID ONNET-ShortDuration">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s4-s1" fail="0" name="MOC PREPAID ONNET-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ShortDuration.MOC PREPAID ONNET-ShortDuration-robot-suite</stat>
<stat pass="4" id="s1-s1-s1-s4" fail="0" name="MTC">Robot Testsuites.Basic.PrePaid.MTC</stat>
<stat pass="1" id="s1-s1-s1-s4-s1" fail="0" name="MTC PREPAID-Abandon">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Abandon</stat>
<stat pass="1" id="s1-s1-s1-s4-s1-s1" fail="0" name="MTC PREPAID-Abandon-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Abandon.MTC PREPAID-Abandon-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s4-s2" fail="0" name="MTC PREPAID-Busy">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Busy</stat>
<stat pass="1" id="s1-s1-s1-s4-s2-s1" fail="0" name="MTC PREPAID-Busy-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Busy.MTC PREPAID-Busy-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s4-s3" fail="0" name="MTC PREPAID-NoAnswer">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-NoAnswer</stat>
<stat pass="1" id="s1-s1-s1-s4-s3-s1" fail="0" name="MTC PREPAID-NoAnswer-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-NoAnswer.MTC PREPAID-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s4-s4" fail="0" name="MTC PREPAID-ShortDuration">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s4-s4-s1" fail="0" name="MTC PREPAID-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-ShortDuration.MTC PREPAID-ShortDuration-robot-suite</stat>
<stat pass="4" id="s1-s2" fail="0" name="Ussd">Robot Testsuites.Ussd</stat>
<stat pass="4" id="s1-s2-s1" fail="0" name="MVNA MEX">Robot Testsuites.Ussd.MVNA MEX</stat>
<stat pass="4" id="s1-s2-s1-s1" fail="0" name="Ussd-Robot-Suite">Robot Testsuites.Ussd.MVNA MEX.Ussd-Robot-Suite</stat>
<stat pass="13" id="s1-s3" fail="3" name="Xdr">Robot Testsuites.Xdr</stat>
<stat pass="13" id="s1-s3-s1" fail="3" name="XDR-ticket-verification">Robot Testsuites.Xdr.XDR-ticket-verification</stat>
<stat pass="13" id="s1-s3-s1-s1" fail="3" name="XDR Test-robot-suite">Robot Testsuites.Xdr.XDR-ticket-verification.XDR Test-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
