<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20160202 10:19:19.427">
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/XDR_Test-robot-suite.txt" id="s1" name="XDR Test-robot-suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160202 10:19:21.255" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160202 10:19:21.259" level="INFO">${time} = Tue Feb  2 10:19:21 CET 2016</msg>
<status status="PASS" endtime="20160202 10:19:21.258" starttime="20160202 10:19:21.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160202 10:19:21.265" level="INFO">Date and time: Tue Feb  2 10:19:21 CET 2016</msg>
<status status="PASS" endtime="20160202 10:19:21.267" starttime="20160202 10:19:21.262"></status>
</kw>
<kw type="kw" name="NTP Check on XDR">
<doc>Called at suite setup to check if ntp is up and running</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:21.483" starttime="20160202 10:19:21.288"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160202 10:19:21.494" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:19:22.744" level="INFO">Read output: Last login: Tue Feb  2 08:21:27 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m</msg>
<msg timestamp="20160202 10:19:22.748" level="INFO">${output_login} = Last login: Tue Feb  2 08:21:27 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160202 10:19:22.746" starttime="20160202 10:19:21.487"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160202 10:19:22.753" level="INFO">Last login: Tue Feb  2 08:21:27 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160202 10:19:22.754" starttime="20160202 10:19:22.750"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ntpstat</arg>
</arguments>
<msg timestamp="20160202 10:19:22.759" level="INFO">Executing command 'ntpstat'.</msg>
<msg timestamp="20160202 10:19:22.803" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:19:22.808" level="INFO">${output} = synchronised to NTP server (10.189.251.100) at stratum 3 
   time correct to within 49 ms
   polling server every 1024 s</msg>
<status status="PASS" endtime="20160202 10:19:22.806" starttime="20160202 10:19:22.757"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:19:22.827" starttime="20160202 10:19:22.816"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>synchronised to NTP server</arg>
<arg>msg=NTP sync problem!</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:22.841" starttime="20160202 10:19:22.832"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NTP is synced</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160202 10:19:22.852" level="INFO">NTP is synced</msg>
<status status="PASS" endtime="20160202 10:19:22.854" starttime="20160202 10:19:22.846"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:22.858" starttime="20160202 10:19:21.270"></status>
</kw>
<kw type="kw" name="Log The XDR Version">
<doc>Called at suite setup procedure to check if XDR is running and to see which version is there.</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:22.952" starttime="20160202 10:19:22.905"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160202 10:19:22.958" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:19:24.159" level="INFO">Read output: Last login: Tue Feb  2 09:19:21 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m</msg>
<msg timestamp="20160202 10:19:24.162" level="INFO">${output_login} = Last login: Tue Feb  2 09:19:21 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160202 10:19:24.161" starttime="20160202 10:19:22.955"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160202 10:19:24.167" level="INFO">Last login: Tue Feb  2 09:19:21 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160202 10:19:24.169" starttime="20160202 10:19:24.165"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-xdr status</arg>
</arguments>
<msg timestamp="20160202 10:19:24.173" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160202 10:19:24.553" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:19:24.555" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160202 10:19:24.554" starttime="20160202 10:19:24.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR Version and pid: ${output}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160202 10:19:24.561" level="INFO">XDR Version and pid: I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160202 10:19:24.562" starttime="20160202 10:19:24.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running PID:</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:24.567" starttime="20160202 10:19:24.564"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:19:24.574" starttime="20160202 10:19:24.569"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:24.575" starttime="20160202 10:19:22.866"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SUT:${SUT_RESOURCE}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160202 10:19:24.581" level="INFO">SUT:/opt/robot/robotworkspace/suts/TNZ-resource.txt</msg>
<status status="PASS" endtime="20160202 10:19:24.582" starttime="20160202 10:19:24.578"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR IP address:${XDR HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160202 10:19:24.587" level="INFO">XDR IP address:10.105.113.171</msg>
<status status="PASS" endtime="20160202 10:19:24.588" starttime="20160202 10:19:24.584"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Using ${SUT RELEASE TAG PREFIX} tickets</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160202 10:19:24.593" level="INFO">Using R5.3 tickets</msg>
<status status="PASS" endtime="20160202 10:19:24.594" starttime="20160202 10:19:24.590"></status>
</kw>
<kw type="kw" name="Check AMQ Availability">
<doc>Called at suite setup procedure to check if AMQ is UP</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${AMQ-XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:24.667" starttime="20160202 10:19:24.611"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160202 10:19:24.678" level="INFO">Logging into '10.105.113.124:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:19:25.936" level="INFO">Read output: Last login: Tue Feb  2 08:18:59 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb13 ~]$[m</msg>
<msg timestamp="20160202 10:19:25.943" level="INFO">${output_login} = Last login: Tue Feb  2 08:18:59 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160202 10:19:25.940" starttime="20160202 10:19:24.672"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>netstat -an | grep ${AMQ-XDR PORT}</arg>
</arguments>
<msg timestamp="20160202 10:19:25.953" level="INFO">Executing command 'netstat -an | grep 61616'.</msg>
<msg timestamp="20160202 10:19:26.042" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:19:26.045" level="INFO">${output} = tcp        0      0 :::61616                    :::*                        LISTEN      
tcp        0      0 ::ffff:10.105.113.124:61616 ::ffff:10.189.230.161:59028 ESTABLISHED 
tcp        0      0 ::...</msg>
<status status="PASS" endtime="20160202 10:19:26.044" starttime="20160202 10:19:25.947"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>LISTEN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:26.050" starttime="20160202 10:19:26.047"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${output}=</arg>
<arg>Execute Command</arg>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} query -QQueue=${AMQ-XDR CRCE CDR QUEUE} | grep ConsumerCount</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:26.054" starttime="20160202 10:19:26.052"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} status</arg>
</arguments>
<msg timestamp="20160202 10:19:26.059" level="INFO">Executing command 'sudo /etc/init.d/amq-xdr-tb13 status'.</msg>
<msg timestamp="20160202 10:19:26.194" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:19:26.196" level="INFO">${output} = INFO: Using default configuration
(you can configure options in one of these file: /etc/default/activemq /root/.activemqrc)

INFO: Invoke the following command to create a configuration file
/etc/init...</msg>
<status status="PASS" endtime="20160202 10:19:26.195" starttime="20160202 10:19:26.056"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>ActiveMQ is running</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:26.201" starttime="20160202 10:19:26.198"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${count}=</arg>
<arg>Get Substring</arg>
<arg>${output}</arg>
<arg>16</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:26.205" starttime="20160202 10:19:26.203"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Evaluate</arg>
<arg>0 &lt; ${count}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:26.209" starttime="20160202 10:19:26.207"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:19:26.214" starttime="20160202 10:19:26.211"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:26.216" starttime="20160202 10:19:24.597"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>AMQ and consumers are UP</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160202 10:19:26.221" level="INFO">AMQ and consumers are UP</msg>
<status status="PASS" endtime="20160202 10:19:26.222" starttime="20160202 10:19:26.219"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${XDR DB HOST}:${XDR DB PORT}/${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:26.270" starttime="20160202 10:19:26.224"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:26.396" starttime="20160202 10:19:26.365"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:26.397" starttime="20160202 10:19:26.349"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:26.644" starttime="20160202 10:19:26.439"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:26.646" starttime="20160202 10:19:26.425"></status>
</kw>
<kw type="kw" name="${JNDI_PROVIDER_URL} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>tcp://${AMQ-XDR HOST}:${AMQ-XDR PORT}?jms.useAsyncSend=false</arg>
</arguments>
<msg timestamp="20160202 10:19:26.652" level="INFO">${JNDI_PROVIDER_URL} = tcp://10.105.113.124:61616?jms.useAsyncSend=false</msg>
<status status="PASS" endtime="20160202 10:19:26.651" starttime="20160202 10:19:26.648"></status>
</kw>
<kw type="kw" name="JMSLibrary.Init Provider">
<doc></doc>
<arguments>
<arg>${INITIAL_CONTEXT_FACTORY}</arg>
<arg>${JNDI_PROVIDER_URL}</arg>
<arg>connect=true</arg>
<arg>start=true</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:27.121" starttime="20160202 10:19:26.654"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:27.124" starttime="20160202 10:19:21.223"></status>
</kw>
<test id="s1-t1" name="Test MOC ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC}</arg>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:27.214" starttime="20160202 10:19:27.212"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:27.286" starttime="20160202 10:19:27.228"></status>
</kw>
<msg timestamp="20160202 10:19:27.291" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160202 10:19:27.289" starttime="20160202 10:19:27.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160202 10:19:27.314" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:19:27.712" level="INFO">Read output: Last login: Tue Feb  2 09:19:23 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160202 10:19:27.714" starttime="20160202 10:19:27.308"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:27.715" starttime="20160202 10:19:27.294"></status>
</kw>
<msg timestamp="20160202 10:19:27.717" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160202 10:19:27.716" starttime="20160202 10:19:27.197"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:27.733" starttime="20160202 10:19:27.731"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:19:27.737" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160202 10:19:27.741" starttime="20160202 10:19:27.735"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:27.742" starttime="20160202 10:19:27.720"></status>
</kw>
<msg timestamp="20160202 10:19:27.744" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160202 10:19:27.743" starttime="20160202 10:19:27.181"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:27.800" starttime="20160202 10:19:27.792"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:27.801" starttime="20160202 10:19:27.770"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:27.821" starttime="20160202 10:19:27.813"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:27.833" starttime="20160202 10:19:27.822"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:27.834" starttime="20160202 10:19:27.803"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160202 10:19:37.837" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160202 10:19:37.838" starttime="20160202 10:19:27.835"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:37.864" starttime="20160202 10:19:37.861"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160202 10:19:37.869" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160202 10:19:37.868" starttime="20160202 10:19:37.865"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160202 10:19:37.876" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160202 10:19:37.877" starttime="20160202 10:19:37.870"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:37.890" starttime="20160202 10:19:37.888"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160202 10:19:37.893" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160202 10:19:37.931" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:19:37.933" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160202 10:19:37.932" starttime="20160202 10:19:37.892"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:37.937" starttime="20160202 10:19:37.934"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:37.940" starttime="20160202 10:19:37.938"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:37.943" starttime="20160202 10:19:37.941"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160202 10:19:37.948" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160202 10:19:38.011" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:19:38.013" level="INFO">${stderr} = </msg>
<msg timestamp="20160202 10:19:38.014" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160202 10:19:38.012" starttime="20160202 10:19:37.945"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.020" starttime="20160202 10:19:38.015"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.023" starttime="20160202 10:19:38.021"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.027" starttime="20160202 10:19:38.024"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.030" starttime="20160202 10:19:38.028"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.034" starttime="20160202 10:19:38.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.037" starttime="20160202 10:19:38.035"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.042" starttime="20160202 10:19:38.039"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.045" starttime="20160202 10:19:38.043"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.049" starttime="20160202 10:19:38.047"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.052" starttime="20160202 10:19:38.050"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.056" starttime="20160202 10:19:38.053"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:38.057" starttime="20160202 10:19:37.879"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:19:38.061" level="INFO">Starting command 'cat tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160202 10:19:38.066" starttime="20160202 10:19:38.059"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160202 10:19:38.072" level="INFO">Reading output of command 'cat tmpfilemonitor4.log'.</msg>
<msg timestamp="20160202 10:19:38.100" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:19:38.101" level="INFO">${stdout_string} = [2016-02-02 09:19:27,832][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:19:38.101" starttime="20160202 10:19:38.069"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:19:38.105" level="INFO">Executing command 'rm tmpfilemonitor4.log'.</msg>
<msg timestamp="20160202 10:19:38.177" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160202 10:19:38.178" starttime="20160202 10:19:38.103"></status>
</kw>
<msg timestamp="20160202 10:19:38.181" level="INFO">${tailed_text} = [2016-02-02 09:19:27,832][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:19:38.180" starttime="20160202 10:19:37.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160202 10:19:38.192" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/MOC_ssh_tailed.log"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/MOC_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160202 10:19:38.193" starttime="20160202 10:19:38.189"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:38.194" starttime="20160202 10:19:38.183"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.208" starttime="20160202 10:19:38.206"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.211" starttime="20160202 10:19:38.209"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:38.213" starttime="20160202 10:19:38.196"></status>
</kw>
<msg timestamp="20160202 10:19:38.217" level="INFO">${tailed_text} = [2016-02-02 09:19:27,832][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:19:38.216" starttime="20160202 10:19:37.841"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.267" starttime="20160202 10:19:38.265"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.285" starttime="20160202 10:19:38.268"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.288" starttime="20160202 10:19:38.286"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160202 10:19:38.291" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160202 10:19:38.293" level="INFO">${queryResultSetLines} = 1008736|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessi...</msg>
<status status="PASS" endtime="20160202 10:19:38.293" starttime="20160202 10:19:38.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.296" starttime="20160202 10:19:38.295"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160202 10:19:38.300" level="INFO">1 lines returned</msg>
<msg timestamp="20160202 10:19:38.301" level="INFO">@{queryResultSet} = [ 1008736|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSes...</msg>
<status status="PASS" endtime="20160202 10:19:38.300" starttime="20160202 10:19:38.297"></status>
</kw>
<msg timestamp="20160202 10:19:38.303" level="INFO">@{queryRows} = [ 1008736|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSes...</msg>
<status status="PASS" endtime="20160202 10:19:38.303" starttime="20160202 10:19:38.255"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160202 10:19:38.307" level="INFO">Length is 1</msg>
<msg timestamp="20160202 10:19:38.308" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160202 10:19:38.308" starttime="20160202 10:19:38.305"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160202 10:19:38.312" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160202 10:19:38.313" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160202 10:19:38.312" starttime="20160202 10:19:38.310"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160202 10:19:38.384" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160202 10:19:38.386" starttime="20160202 10:19:38.377"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:38.389" starttime="20160202 10:19:38.314"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.403" starttime="20160202 10:19:38.393"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:38.405" starttime="20160202 10:19:38.244"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.459" starttime="20160202 10:19:38.453"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:38.462" starttime="20160202 10:19:38.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.474" starttime="20160202 10:19:38.464"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:38.476" starttime="20160202 10:19:38.420"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:38.479" starttime="20160202 10:19:38.407"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:38.481" starttime="20160202 10:19:27.148"></status>
</kw>
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. 

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160202 10:19:38.485" starttime="20160202 10:19:27.126"></status>
</test>
<test id="s1-t2" name="Test SMS ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SMS}</arg>
<arg>SMS</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.611" starttime="20160202 10:19:38.608"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:38.670" starttime="20160202 10:19:38.623"></status>
</kw>
<msg timestamp="20160202 10:19:38.672" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160202 10:19:38.671" starttime="20160202 10:19:38.614"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160202 10:19:38.681" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:19:39.066" level="INFO">Read output: Last login: Tue Feb  2 09:19:27 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160202 10:19:39.067" starttime="20160202 10:19:38.679"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:39.068" starttime="20160202 10:19:38.673"></status>
</kw>
<msg timestamp="20160202 10:19:39.071" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160202 10:19:39.070" starttime="20160202 10:19:38.588"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:39.084" starttime="20160202 10:19:39.082"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:19:39.087" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160202 10:19:39.091" starttime="20160202 10:19:39.085"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:39.092" starttime="20160202 10:19:39.074"></status>
</kw>
<msg timestamp="20160202 10:19:39.094" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160202 10:19:39.093" starttime="20160202 10:19:38.565"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:39.123" starttime="20160202 10:19:39.118"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:39.124" starttime="20160202 10:19:39.110"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:39.134" starttime="20160202 10:19:39.132"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:39.143" starttime="20160202 10:19:39.135"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:39.144" starttime="20160202 10:19:39.125"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160202 10:19:49.147" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160202 10:19:49.149" starttime="20160202 10:19:39.145"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.169" starttime="20160202 10:19:49.167"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160202 10:19:49.174" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160202 10:19:49.174" starttime="20160202 10:19:49.170"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160202 10:19:49.180" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160202 10:19:49.181" starttime="20160202 10:19:49.175"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.191" starttime="20160202 10:19:49.189"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160202 10:19:49.194" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160202 10:19:49.239" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:19:49.241" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160202 10:19:49.240" starttime="20160202 10:19:49.192"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.244" starttime="20160202 10:19:49.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.247" starttime="20160202 10:19:49.245"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.250" starttime="20160202 10:19:49.248"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160202 10:19:49.253" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160202 10:19:49.318" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:19:49.319" level="INFO">${stderr} = </msg>
<msg timestamp="20160202 10:19:49.320" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160202 10:19:49.319" starttime="20160202 10:19:49.251"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.325" starttime="20160202 10:19:49.321"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.328" starttime="20160202 10:19:49.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.331" starttime="20160202 10:19:49.329"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.334" starttime="20160202 10:19:49.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.337" starttime="20160202 10:19:49.335"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.340" starttime="20160202 10:19:49.338"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.344" starttime="20160202 10:19:49.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.347" starttime="20160202 10:19:49.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.350" starttime="20160202 10:19:49.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.353" starttime="20160202 10:19:49.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.356" starttime="20160202 10:19:49.354"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:49.357" starttime="20160202 10:19:49.182"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:19:49.360" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160202 10:19:49.364" starttime="20160202 10:19:49.358"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160202 10:19:49.366" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20160202 10:19:49.399" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:19:49.400" level="INFO">${stdout_string} = [2016-02-02 09:19:39,141][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:19:49.400" starttime="20160202 10:19:49.365"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:19:49.404" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20160202 10:19:49.475" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160202 10:19:49.477" starttime="20160202 10:19:49.402"></status>
</kw>
<msg timestamp="20160202 10:19:49.479" level="INFO">${tailed_text} = [2016-02-02 09:19:39,141][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:19:49.478" starttime="20160202 10:19:49.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160202 10:19:49.488" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/SMS_ssh_tailed.log"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/SMS_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160202 10:19:49.489" starttime="20160202 10:19:49.485"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:49.490" starttime="20160202 10:19:49.480"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.500" starttime="20160202 10:19:49.498"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.503" starttime="20160202 10:19:49.501"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:49.506" starttime="20160202 10:19:49.491"></status>
</kw>
<msg timestamp="20160202 10:19:49.508" level="INFO">${tailed_text} = [2016-02-02 09:19:39,141][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:19:49.507" starttime="20160202 10:19:49.152"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.544" starttime="20160202 10:19:49.542"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.551" starttime="20160202 10:19:49.545"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.554" starttime="20160202 10:19:49.552"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160202 10:19:49.558" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160202 10:19:49.559" level="INFO">${queryResultSetLines} = 1008737|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:36:19.022+00|2015-02-22 15:00:50.025+00|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.0|Charge|0|53099204...</msg>
<status status="PASS" endtime="20160202 10:19:49.559" starttime="20160202 10:19:49.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.562" starttime="20160202 10:19:49.560"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160202 10:19:49.565" level="INFO">1 lines returned</msg>
<msg timestamp="20160202 10:19:49.566" level="INFO">@{queryResultSet} = [ 1008737|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:36:19.022+00|2015-02-22 15:00:50.025+00|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.0|Charge|0|530992...</msg>
<status status="PASS" endtime="20160202 10:19:49.565" starttime="20160202 10:19:49.563"></status>
</kw>
<msg timestamp="20160202 10:19:49.568" level="INFO">@{queryRows} = [ 1008737|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:36:19.022+00|2015-02-22 15:00:50.025+00|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.0|Charge|0|530992...</msg>
<status status="PASS" endtime="20160202 10:19:49.567" starttime="20160202 10:19:49.534"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160202 10:19:49.571" level="INFO">Length is 1</msg>
<msg timestamp="20160202 10:19:49.573" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160202 10:19:49.572" starttime="20160202 10:19:49.569"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160202 10:19:49.575" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160202 10:19:49.577" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160202 10:19:49.576" starttime="20160202 10:19:49.574"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160202 10:19:49.584" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160202 10:19:49.585" starttime="20160202 10:19:49.582"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:49.586" starttime="20160202 10:19:49.578"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.591" starttime="20160202 10:19:49.587"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:49.592" starttime="20160202 10:19:49.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.612" starttime="20160202 10:19:49.609"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:49.613" starttime="20160202 10:19:49.605"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.660" starttime="20160202 10:19:49.614"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:49.662" starttime="20160202 10:19:49.598"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:49.663" starttime="20160202 10:19:49.593"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:49.664" starttime="20160202 10:19:38.519"></status>
</kw>
<doc>Send the SMS XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160202 10:19:49.667" starttime="20160202 10:19:38.496"></status>
</test>
<test id="s1-t3" name="Test DATA ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${DATA}</arg>
<arg>DATA</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.730" starttime="20160202 10:19:49.728"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:49.783" starttime="20160202 10:19:49.736"></status>
</kw>
<msg timestamp="20160202 10:19:49.785" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160202 10:19:49.784" starttime="20160202 10:19:49.731"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160202 10:19:49.793" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:19:50.180" level="INFO">Read output: Last login: Tue Feb  2 09:19:38 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160202 10:19:50.182" starttime="20160202 10:19:49.791"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:50.183" starttime="20160202 10:19:49.786"></status>
</kw>
<msg timestamp="20160202 10:19:50.186" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160202 10:19:50.185" starttime="20160202 10:19:49.717"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:50.198" starttime="20160202 10:19:50.196"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:19:50.201" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160202 10:19:50.205" starttime="20160202 10:19:50.199"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:50.206" starttime="20160202 10:19:50.188"></status>
</kw>
<msg timestamp="20160202 10:19:50.208" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160202 10:19:50.207" starttime="20160202 10:19:49.704"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:50.254" starttime="20160202 10:19:50.228"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:50.255" starttime="20160202 10:19:50.221"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:50.265" starttime="20160202 10:19:50.263"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:19:50.273" starttime="20160202 10:19:50.266"></status>
</kw>
<status status="PASS" endtime="20160202 10:19:50.273" starttime="20160202 10:19:50.257"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160202 10:20:00.277" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160202 10:20:00.279" starttime="20160202 10:19:50.274"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.301" starttime="20160202 10:20:00.297"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160202 10:20:00.311" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160202 10:20:00.310" starttime="20160202 10:20:00.303"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160202 10:20:00.320" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160202 10:20:00.321" starttime="20160202 10:20:00.313"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.343" starttime="20160202 10:20:00.339"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160202 10:20:00.348" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160202 10:20:00.397" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:00.399" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160202 10:20:00.398" starttime="20160202 10:20:00.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.405" starttime="20160202 10:20:00.401"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.410" starttime="20160202 10:20:00.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.416" starttime="20160202 10:20:00.412"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160202 10:20:00.423" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160202 10:20:00.478" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:00.481" level="INFO">${stderr} = </msg>
<msg timestamp="20160202 10:20:00.482" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160202 10:20:00.479" starttime="20160202 10:20:00.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.492" starttime="20160202 10:20:00.484"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.498" starttime="20160202 10:20:00.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.503" starttime="20160202 10:20:00.499"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.509" starttime="20160202 10:20:00.505"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.514" starttime="20160202 10:20:00.511"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.516" starttime="20160202 10:20:00.515"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.519" starttime="20160202 10:20:00.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.522" starttime="20160202 10:20:00.520"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.524" starttime="20160202 10:20:00.523"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.543" starttime="20160202 10:20:00.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.548" starttime="20160202 10:20:00.545"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:00.549" starttime="20160202 10:20:00.324"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:00.552" level="INFO">Starting command 'cat tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160202 10:20:00.555" starttime="20160202 10:20:00.550"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160202 10:20:00.558" level="INFO">Reading output of command 'cat tmpfilemonitor6.log'.</msg>
<msg timestamp="20160202 10:20:00.590" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:00.591" level="INFO">${stdout_string} = [2016-02-02 09:19:50,272][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:20:00.591" starttime="20160202 10:20:00.556"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:00.594" level="INFO">Executing command 'rm tmpfilemonitor6.log'.</msg>
<msg timestamp="20160202 10:20:00.667" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160202 10:20:00.668" starttime="20160202 10:20:00.592"></status>
</kw>
<msg timestamp="20160202 10:20:00.669" level="INFO">${tailed_text} = [2016-02-02 09:19:50,272][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:20:00.669" starttime="20160202 10:20:00.290"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160202 10:20:00.678" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/DATA_ssh_tailed.log"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/DATA_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160202 10:20:00.678" starttime="20160202 10:20:00.675"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:00.679" starttime="20160202 10:20:00.670"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.689" starttime="20160202 10:20:00.687"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.691" starttime="20160202 10:20:00.690"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:00.694" starttime="20160202 10:20:00.680"></status>
</kw>
<msg timestamp="20160202 10:20:00.695" level="INFO">${tailed_text} = [2016-02-02 09:19:50,272][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:20:00.695" starttime="20160202 10:20:00.282"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.726" starttime="20160202 10:20:00.725"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.779" starttime="20160202 10:20:00.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.782" starttime="20160202 10:20:00.780"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160202 10:20:00.785" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160202 10:20:00.786" level="INFO">${queryResultSetLines} = 1008738|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:37:42.312+00|2015-02-23 09:37:06+00|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|FinalCommit|BasicSes...</msg>
<status status="PASS" endtime="20160202 10:20:00.785" starttime="20160202 10:20:00.783"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.788" starttime="20160202 10:20:00.787"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160202 10:20:00.791" level="INFO">1 lines returned</msg>
<msg timestamp="20160202 10:20:00.792" level="INFO">@{queryResultSet} = [ 1008738|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:37:42.312+00|2015-02-23 09:37:06+00|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|FinalCommit|BasicS...</msg>
<status status="PASS" endtime="20160202 10:20:00.791" starttime="20160202 10:20:00.789"></status>
</kw>
<msg timestamp="20160202 10:20:00.793" level="INFO">@{queryRows} = [ 1008738|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:37:42.312+00|2015-02-23 09:37:06+00|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|FinalCommit|BasicS...</msg>
<status status="PASS" endtime="20160202 10:20:00.793" starttime="20160202 10:20:00.717"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160202 10:20:00.796" level="INFO">Length is 1</msg>
<msg timestamp="20160202 10:20:00.797" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160202 10:20:00.797" starttime="20160202 10:20:00.794"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160202 10:20:00.800" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160202 10:20:00.801" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160202 10:20:00.800" starttime="20160202 10:20:00.798"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160202 10:20:00.808" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160202 10:20:00.808" starttime="20160202 10:20:00.806"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:00.809" starttime="20160202 10:20:00.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.815" starttime="20160202 10:20:00.811"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:00.815" starttime="20160202 10:20:00.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.835" starttime="20160202 10:20:00.832"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:00.835" starttime="20160202 10:20:00.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.840" starttime="20160202 10:20:00.836"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:00.841" starttime="20160202 10:20:00.821"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:00.842" starttime="20160202 10:20:00.816"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:00.842" starttime="20160202 10:19:49.683"></status>
</kw>
<doc>Send the DATA XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160202 10:20:00.844" starttime="20160202 10:19:49.673"></status>
</test>
<test id="s1-t4" name="Test CRCE Recharge ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Rec}</arg>
<arg>CRCE_Rec</arg>
<arg>crce_recharge</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.889" starttime="20160202 10:20:00.887"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:00.935" starttime="20160202 10:20:00.894"></status>
</kw>
<msg timestamp="20160202 10:20:00.937" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160202 10:20:00.936" starttime="20160202 10:20:00.889"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160202 10:20:00.945" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:20:01.360" level="INFO">Read output: Last login: Tue Feb  2 09:19:49 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160202 10:20:01.362" starttime="20160202 10:20:00.943"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:01.363" starttime="20160202 10:20:00.938"></status>
</kw>
<msg timestamp="20160202 10:20:01.366" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160202 10:20:01.365" starttime="20160202 10:20:00.880"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:01.377" starttime="20160202 10:20:01.375"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:01.380" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160202 10:20:01.383" starttime="20160202 10:20:01.378"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:01.384" starttime="20160202 10:20:01.369"></status>
</kw>
<msg timestamp="20160202 10:20:01.386" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160202 10:20:01.385" starttime="20160202 10:20:00.872"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:01.539" starttime="20160202 10:20:01.405"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:01.541" starttime="20160202 10:20:01.399"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:01.548" starttime="20160202 10:20:01.547"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:01.557" starttime="20160202 10:20:01.549"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:01.558" starttime="20160202 10:20:01.542"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160202 10:20:11.562" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160202 10:20:11.563" starttime="20160202 10:20:01.559"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.582" starttime="20160202 10:20:11.580"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160202 10:20:11.587" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160202 10:20:11.586" starttime="20160202 10:20:11.583"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160202 10:20:11.592" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160202 10:20:11.593" starttime="20160202 10:20:11.588"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.601" starttime="20160202 10:20:11.599"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160202 10:20:11.603" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160202 10:20:11.642" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:11.643" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160202 10:20:11.643" starttime="20160202 10:20:11.602"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.646" starttime="20160202 10:20:11.644"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.648" starttime="20160202 10:20:11.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.650" starttime="20160202 10:20:11.649"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160202 10:20:11.654" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160202 10:20:11.719" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:11.721" level="INFO">${stderr} = </msg>
<msg timestamp="20160202 10:20:11.721" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160202 10:20:11.720" starttime="20160202 10:20:11.651"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.728" starttime="20160202 10:20:11.722"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.730" starttime="20160202 10:20:11.729"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.732" starttime="20160202 10:20:11.731"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.735" starttime="20160202 10:20:11.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.737" starttime="20160202 10:20:11.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.740" starttime="20160202 10:20:11.738"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.743" starttime="20160202 10:20:11.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.745" starttime="20160202 10:20:11.743"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.747" starttime="20160202 10:20:11.746"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.750" starttime="20160202 10:20:11.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.752" starttime="20160202 10:20:11.750"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:11.753" starttime="20160202 10:20:11.594"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:11.755" level="INFO">Starting command 'cat tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160202 10:20:11.759" starttime="20160202 10:20:11.754"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160202 10:20:11.761" level="INFO">Reading output of command 'cat tmpfilemonitor7.log'.</msg>
<msg timestamp="20160202 10:20:11.793" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:11.795" level="INFO">${stdout_string} = [2016-02-02 09:20:01,555][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:20:11.794" starttime="20160202 10:20:11.759"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:11.797" level="INFO">Executing command 'rm tmpfilemonitor7.log'.</msg>
<msg timestamp="20160202 10:20:11.869" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160202 10:20:11.870" starttime="20160202 10:20:11.795"></status>
</kw>
<msg timestamp="20160202 10:20:11.871" level="INFO">${tailed_text} = [2016-02-02 09:20:01,555][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:20:11.871" starttime="20160202 10:20:11.573"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160202 10:20:11.880" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/CRCE_Rec_ssh_tailed.log"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/CRCE_Rec_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160202 10:20:11.880" starttime="20160202 10:20:11.877"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:11.881" starttime="20160202 10:20:11.872"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.889" starttime="20160202 10:20:11.887"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.893" starttime="20160202 10:20:11.890"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:11.894" starttime="20160202 10:20:11.882"></status>
</kw>
<msg timestamp="20160202 10:20:11.895" level="INFO">${tailed_text} = [2016-02-02 09:20:01,555][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:20:11.895" starttime="20160202 10:20:11.565"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.921" starttime="20160202 10:20:11.919"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.970" starttime="20160202 10:20:11.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.972" starttime="20160202 10:20:11.971"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160202 10:20:11.975" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160202 10:20:11.976" level="INFO">${queryResultSetLines} = 1043846|5.3|110|RECHARGE|1|CRCE|crce01.tb13|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|...</msg>
<status status="PASS" endtime="20160202 10:20:11.975" starttime="20160202 10:20:11.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:11.978" starttime="20160202 10:20:11.977"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160202 10:20:11.980" level="INFO">1 lines returned</msg>
<msg timestamp="20160202 10:20:11.981" level="INFO">@{queryResultSet} = [ 1043846|5.3|110|RECHARGE|1|CRCE|crce01.tb13|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1....</msg>
<status status="PASS" endtime="20160202 10:20:11.981" starttime="20160202 10:20:11.979"></status>
</kw>
<msg timestamp="20160202 10:20:11.983" level="INFO">@{queryRows} = [ 1043846|5.3|110|RECHARGE|1|CRCE|crce01.tb13|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1....</msg>
<status status="PASS" endtime="20160202 10:20:11.982" starttime="20160202 10:20:11.914"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160202 10:20:11.985" level="INFO">Length is 1</msg>
<msg timestamp="20160202 10:20:11.986" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160202 10:20:11.986" starttime="20160202 10:20:11.984"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160202 10:20:11.989" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160202 10:20:11.990" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160202 10:20:11.989" starttime="20160202 10:20:11.987"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160202 10:20:11.996" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160202 10:20:11.997" starttime="20160202 10:20:11.995"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:11.998" starttime="20160202 10:20:11.991"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:12.002" starttime="20160202 10:20:11.999"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:12.003" starttime="20160202 10:20:11.908"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:12.020" starttime="20160202 10:20:12.018"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:12.021" starttime="20160202 10:20:12.015"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:12.026" starttime="20160202 10:20:12.022"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:12.026" starttime="20160202 10:20:12.009"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:12.027" starttime="20160202 10:20:12.005"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:12.028" starttime="20160202 10:20:00.855"></status>
</kw>
<doc>Send the CRCE Recharge XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160202 10:20:12.029" starttime="20160202 10:20:00.847"></status>
</test>
<test id="s1-t5" name="Test CRCE Confirmation ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Conf}</arg>
<arg>CRCE_Conf</arg>
<arg>crce_conf</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:12.071" starttime="20160202 10:20:12.070"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:12.118" starttime="20160202 10:20:12.076"></status>
</kw>
<msg timestamp="20160202 10:20:12.120" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160202 10:20:12.119" starttime="20160202 10:20:12.072"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160202 10:20:12.127" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:20:12.629" level="INFO">Read output: Last login: Tue Feb  2 09:20:01 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160202 10:20:12.632" starttime="20160202 10:20:12.125"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:12.634" starttime="20160202 10:20:12.121"></status>
</kw>
<msg timestamp="20160202 10:20:12.639" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160202 10:20:12.638" starttime="20160202 10:20:12.064"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:12.649" starttime="20160202 10:20:12.647"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:12.652" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160202 10:20:12.657" starttime="20160202 10:20:12.650"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:12.657" starttime="20160202 10:20:12.642"></status>
</kw>
<msg timestamp="20160202 10:20:12.659" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160202 10:20:12.658" starttime="20160202 10:20:12.056"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:12.703" starttime="20160202 10:20:12.675"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:12.704" starttime="20160202 10:20:12.671"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:12.711" starttime="20160202 10:20:12.710"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:12.719" starttime="20160202 10:20:12.712"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:12.720" starttime="20160202 10:20:12.706"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160202 10:20:22.724" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160202 10:20:22.725" starttime="20160202 10:20:12.721"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.738" starttime="20160202 10:20:22.736"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160202 10:20:22.743" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160202 10:20:22.743" starttime="20160202 10:20:22.739"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160202 10:20:22.749" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160202 10:20:22.750" starttime="20160202 10:20:22.744"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.756" starttime="20160202 10:20:22.755"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160202 10:20:22.758" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160202 10:20:22.793" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:22.794" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160202 10:20:22.794" starttime="20160202 10:20:22.757"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.797" starttime="20160202 10:20:22.795"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.799" starttime="20160202 10:20:22.797"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.801" starttime="20160202 10:20:22.799"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160202 10:20:22.804" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160202 10:20:22.870" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:22.871" level="INFO">${stderr} = </msg>
<msg timestamp="20160202 10:20:22.871" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160202 10:20:22.870" starttime="20160202 10:20:22.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.876" starttime="20160202 10:20:22.872"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.878" starttime="20160202 10:20:22.876"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.880" starttime="20160202 10:20:22.878"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.882" starttime="20160202 10:20:22.881"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.884" starttime="20160202 10:20:22.883"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.887" starttime="20160202 10:20:22.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.890" starttime="20160202 10:20:22.887"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.892" starttime="20160202 10:20:22.890"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.894" starttime="20160202 10:20:22.893"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.896" starttime="20160202 10:20:22.895"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:22.898" starttime="20160202 10:20:22.897"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:22.899" starttime="20160202 10:20:22.751"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:22.901" level="INFO">Starting command 'cat tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160202 10:20:22.905" starttime="20160202 10:20:22.900"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160202 10:20:22.906" level="INFO">Reading output of command 'cat tmpfilemonitor8.log'.</msg>
<msg timestamp="20160202 10:20:22.937" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:22.939" level="INFO">${stdout_string} = [2016-02-02 09:20:12,717][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:20:22.938" starttime="20160202 10:20:22.905"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:22.944" level="INFO">Executing command 'rm tmpfilemonitor8.log'.</msg>
<msg timestamp="20160202 10:20:23.011" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160202 10:20:23.013" starttime="20160202 10:20:22.941"></status>
</kw>
<msg timestamp="20160202 10:20:23.019" level="INFO">${tailed_text} = [2016-02-02 09:20:12,717][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:20:23.017" starttime="20160202 10:20:22.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160202 10:20:23.036" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/CRCE_Conf_ssh_tailed.log"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/CRCE_Conf_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160202 10:20:23.037" starttime="20160202 10:20:23.030"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:23.039" starttime="20160202 10:20:23.021"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:23.053" starttime="20160202 10:20:23.050"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:20:23.058" starttime="20160202 10:20:23.055"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:23.063" starttime="20160202 10:20:23.041"></status>
</kw>
<msg timestamp="20160202 10:20:23.067" level="INFO">${tailed_text} = [2016-02-02 09:20:12,717][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:20:23.065" starttime="20160202 10:20:22.728"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:23.119" starttime="20160202 10:20:23.116"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:23.139" starttime="20160202 10:20:23.121"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:23.141" starttime="20160202 10:20:23.140"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160202 10:20:23.144" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160202 10:20:23.145" level="INFO">${queryResultSetLines} = 2069764|5.3|130|CONF|1|CRCE|crce01.tb13|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff|1...</msg>
<status status="PASS" endtime="20160202 10:20:23.145" starttime="20160202 10:20:23.142"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:23.147" starttime="20160202 10:20:23.146"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160202 10:20:23.149" level="INFO">1 lines returned</msg>
<msg timestamp="20160202 10:20:23.150" level="INFO">@{queryResultSet} = [ 2069764|5.3|130|CONF|1|CRCE|crce01.tb13|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff...</msg>
<status status="PASS" endtime="20160202 10:20:23.150" starttime="20160202 10:20:23.148"></status>
</kw>
<msg timestamp="20160202 10:20:23.152" level="INFO">@{queryRows} = [ 2069764|5.3|130|CONF|1|CRCE|crce01.tb13|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff...</msg>
<status status="PASS" endtime="20160202 10:20:23.151" starttime="20160202 10:20:23.106"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160202 10:20:23.154" level="INFO">Length is 1</msg>
<msg timestamp="20160202 10:20:23.155" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160202 10:20:23.155" starttime="20160202 10:20:23.153"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160202 10:20:23.157" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160202 10:20:23.158" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160202 10:20:23.158" starttime="20160202 10:20:23.156"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160202 10:20:23.164" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160202 10:20:23.165" starttime="20160202 10:20:23.163"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:23.165" starttime="20160202 10:20:23.159"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:23.169" starttime="20160202 10:20:23.166"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:23.170" starttime="20160202 10:20:23.093"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:23.185" starttime="20160202 10:20:23.183"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:23.186" starttime="20160202 10:20:23.180"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:23.190" starttime="20160202 10:20:23.187"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:23.191" starttime="20160202 10:20:23.175"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:23.191" starttime="20160202 10:20:23.171"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:23.192" starttime="20160202 10:20:12.040"></status>
</kw>
<doc>Send the CRCE Confirmation XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160202 10:20:23.193" starttime="20160202 10:20:12.032"></status>
</test>
<test id="s1-t6" name="Test CRCE AccountChange ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Acc}</arg>
<arg>CRCE_Acc</arg>
<arg>crce_accountchange</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:23.232" starttime="20160202 10:20:23.231"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:23.292" starttime="20160202 10:20:23.237"></status>
</kw>
<msg timestamp="20160202 10:20:23.295" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160202 10:20:23.294" starttime="20160202 10:20:23.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160202 10:20:23.310" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:20:23.691" level="INFO">Read output: Last login: Tue Feb  2 09:20:12 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160202 10:20:23.694" starttime="20160202 10:20:23.306"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:23.696" starttime="20160202 10:20:23.297"></status>
</kw>
<msg timestamp="20160202 10:20:23.701" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160202 10:20:23.700" starttime="20160202 10:20:23.225"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:23.720" starttime="20160202 10:20:23.717"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:23.726" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160202 10:20:23.731" starttime="20160202 10:20:23.722"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:23.732" starttime="20160202 10:20:23.708"></status>
</kw>
<msg timestamp="20160202 10:20:23.735" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160202 10:20:23.734" starttime="20160202 10:20:23.218"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:23.879" starttime="20160202 10:20:23.765"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:23.881" starttime="20160202 10:20:23.759"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:23.887" starttime="20160202 10:20:23.885"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:23.895" starttime="20160202 10:20:23.887"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:23.896" starttime="20160202 10:20:23.882"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160202 10:20:33.898" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160202 10:20:33.899" starttime="20160202 10:20:23.896"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:33.911" starttime="20160202 10:20:33.909"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160202 10:20:33.915" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160202 10:20:33.915" starttime="20160202 10:20:33.911"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160202 10:20:33.921" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160202 10:20:33.921" starttime="20160202 10:20:33.916"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:33.928" starttime="20160202 10:20:33.926"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160202 10:20:33.929" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160202 10:20:33.967" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:33.968" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160202 10:20:33.968" starttime="20160202 10:20:33.928"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:33.970" starttime="20160202 10:20:33.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:33.972" starttime="20160202 10:20:33.971"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:33.974" starttime="20160202 10:20:33.973"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160202 10:20:33.977" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160202 10:20:34.044" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:34.046" level="INFO">${stderr} = </msg>
<msg timestamp="20160202 10:20:34.046" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160202 10:20:34.045" starttime="20160202 10:20:33.975"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.050" starttime="20160202 10:20:34.047"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.052" starttime="20160202 10:20:34.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.055" starttime="20160202 10:20:34.053"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.057" starttime="20160202 10:20:34.055"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.059" starttime="20160202 10:20:34.057"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.061" starttime="20160202 10:20:34.059"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.063" starttime="20160202 10:20:34.061"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.065" starttime="20160202 10:20:34.064"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.067" starttime="20160202 10:20:34.066"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.069" starttime="20160202 10:20:34.068"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.071" starttime="20160202 10:20:34.070"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:34.072" starttime="20160202 10:20:33.922"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:34.074" level="INFO">Starting command 'cat tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160202 10:20:34.078" starttime="20160202 10:20:34.073"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160202 10:20:34.080" level="INFO">Reading output of command 'cat tmpfilemonitor9.log'.</msg>
<msg timestamp="20160202 10:20:34.110" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:34.111" level="INFO">${stdout_string} = [2016-02-02 09:20:23,893][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:20:34.110" starttime="20160202 10:20:34.079"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:34.113" level="INFO">Executing command 'rm tmpfilemonitor9.log'.</msg>
<msg timestamp="20160202 10:20:34.188" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160202 10:20:34.189" starttime="20160202 10:20:34.112"></status>
</kw>
<msg timestamp="20160202 10:20:34.191" level="INFO">${tailed_text} = [2016-02-02 09:20:23,893][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:20:34.190" starttime="20160202 10:20:33.906"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160202 10:20:34.198" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/CRCE_Acc_ssh_tailed.log"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/CRCE_Acc_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160202 10:20:34.198" starttime="20160202 10:20:34.195"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:34.199" starttime="20160202 10:20:34.191"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.205" starttime="20160202 10:20:34.203"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.207" starttime="20160202 10:20:34.206"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:34.210" starttime="20160202 10:20:34.200"></status>
</kw>
<msg timestamp="20160202 10:20:34.211" level="INFO">${tailed_text} = [2016-02-02 09:20:23,893][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:20:34.210" starttime="20160202 10:20:33.901"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.233" starttime="20160202 10:20:34.232"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.262" starttime="20160202 10:20:34.234"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.264" starttime="20160202 10:20:34.263"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160202 10:20:34.267" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160202 10:20:34.268" level="INFO">${queryResultSetLines} = 1033128|5.3|140|ACCOUNT_CHANGE|1|CRCE|crce01.tb13|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01.tb13123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0|t...</msg>
<status status="PASS" endtime="20160202 10:20:34.267" starttime="20160202 10:20:34.265"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.270" starttime="20160202 10:20:34.269"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160202 10:20:34.272" level="INFO">1 lines returned</msg>
<msg timestamp="20160202 10:20:34.273" level="INFO">@{queryResultSet} = [ 1033128|5.3|140|ACCOUNT_CHANGE|1|CRCE|crce01.tb13|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01.tb13123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0...</msg>
<status status="PASS" endtime="20160202 10:20:34.272" starttime="20160202 10:20:34.270"></status>
</kw>
<msg timestamp="20160202 10:20:34.274" level="INFO">@{queryRows} = [ 1033128|5.3|140|ACCOUNT_CHANGE|1|CRCE|crce01.tb13|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01.tb13123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0...</msg>
<status status="PASS" endtime="20160202 10:20:34.274" starttime="20160202 10:20:34.228"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160202 10:20:34.276" level="INFO">Length is 1</msg>
<msg timestamp="20160202 10:20:34.277" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160202 10:20:34.277" starttime="20160202 10:20:34.275"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160202 10:20:34.279" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160202 10:20:34.280" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160202 10:20:34.280" starttime="20160202 10:20:34.278"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160202 10:20:34.286" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160202 10:20:34.286" starttime="20160202 10:20:34.284"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:34.287" starttime="20160202 10:20:34.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.291" starttime="20160202 10:20:34.288"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:34.292" starttime="20160202 10:20:34.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.305" starttime="20160202 10:20:34.304"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:34.306" starttime="20160202 10:20:34.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.310" starttime="20160202 10:20:34.307"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:34.311" starttime="20160202 10:20:34.296"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:34.311" starttime="20160202 10:20:34.292"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:34.312" starttime="20160202 10:20:23.204"></status>
</kw>
<doc>Send the CRCE AccountChange ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160202 10:20:34.313" starttime="20160202 10:20:23.196"></status>
</test>
<test id="s1-t7" name="Test Customer EDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${Cust_EDR}</arg>
<arg>Cust_EDR</arg>
<arg>customer_edr</arg>
<arg>customerid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.349" starttime="20160202 10:20:34.348"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.407" starttime="20160202 10:20:34.354"></status>
</kw>
<msg timestamp="20160202 10:20:34.410" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160202 10:20:34.409" starttime="20160202 10:20:34.350"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160202 10:20:34.424" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:20:34.806" level="INFO">Read output: Last login: Tue Feb  2 09:20:23 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160202 10:20:34.808" starttime="20160202 10:20:34.421"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:34.810" starttime="20160202 10:20:34.412"></status>
</kw>
<msg timestamp="20160202 10:20:34.813" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160202 10:20:34.812" starttime="20160202 10:20:34.343"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.830" starttime="20160202 10:20:34.826"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:34.835" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160202 10:20:34.841" starttime="20160202 10:20:34.831"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:34.843" starttime="20160202 10:20:34.818"></status>
</kw>
<msg timestamp="20160202 10:20:34.846" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160202 10:20:34.845" starttime="20160202 10:20:34.336"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.885" starttime="20160202 10:20:34.877"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:34.886" starttime="20160202 10:20:34.869"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.893" starttime="20160202 10:20:34.891"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:34.901" starttime="20160202 10:20:34.894"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:34.902" starttime="20160202 10:20:34.888"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160202 10:20:44.905" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160202 10:20:44.906" starttime="20160202 10:20:34.903"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:44.919" starttime="20160202 10:20:44.917"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160202 10:20:44.923" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160202 10:20:44.923" starttime="20160202 10:20:44.919"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160202 10:20:44.929" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160202 10:20:44.929" starttime="20160202 10:20:44.924"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:44.940" starttime="20160202 10:20:44.937"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160202 10:20:44.944" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160202 10:20:44.983" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:44.986" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160202 10:20:44.985" starttime="20160202 10:20:44.942"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:44.990" starttime="20160202 10:20:44.987"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:44.994" starttime="20160202 10:20:44.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:44.999" starttime="20160202 10:20:44.996"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160202 10:20:45.005" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160202 10:20:45.061" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:45.063" level="INFO">${stderr} = </msg>
<msg timestamp="20160202 10:20:45.064" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160202 10:20:45.062" starttime="20160202 10:20:45.000"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.073" starttime="20160202 10:20:45.066"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.077" starttime="20160202 10:20:45.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.081" starttime="20160202 10:20:45.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.086" starttime="20160202 10:20:45.083"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.090" starttime="20160202 10:20:45.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.095" starttime="20160202 10:20:45.092"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.100" starttime="20160202 10:20:45.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.105" starttime="20160202 10:20:45.102"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.109" starttime="20160202 10:20:45.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.113" starttime="20160202 10:20:45.110"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.117" starttime="20160202 10:20:45.115"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:45.119" starttime="20160202 10:20:44.930"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:45.125" level="INFO">Starting command 'cat tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160202 10:20:45.129" starttime="20160202 10:20:45.121"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160202 10:20:45.133" level="INFO">Reading output of command 'cat tmpfilemonitor10.log'.</msg>
<msg timestamp="20160202 10:20:45.162" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:45.163" level="INFO">${stdout_string} = [2016-02-02 09:20:34,899][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|910|1|soa01|240...</msg>
<status status="PASS" endtime="20160202 10:20:45.162" starttime="20160202 10:20:45.131"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:45.165" level="INFO">Executing command 'rm tmpfilemonitor10.log'.</msg>
<msg timestamp="20160202 10:20:45.237" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160202 10:20:45.237" starttime="20160202 10:20:45.164"></status>
</kw>
<msg timestamp="20160202 10:20:45.239" level="INFO">${tailed_text} = [2016-02-02 09:20:34,899][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|910|1|soa01|240...</msg>
<status status="PASS" endtime="20160202 10:20:45.238" starttime="20160202 10:20:44.913"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160202 10:20:45.246" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/Cust_EDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/Cust_EDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160202 10:20:45.247" starttime="20160202 10:20:45.244"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:45.247" starttime="20160202 10:20:45.240"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.253" starttime="20160202 10:20:45.252"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.255" starttime="20160202 10:20:45.254"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:45.259" starttime="20160202 10:20:45.248"></status>
</kw>
<msg timestamp="20160202 10:20:45.260" level="INFO">${tailed_text} = [2016-02-02 09:20:34,899][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|910|1|soa01|240...</msg>
<status status="PASS" endtime="20160202 10:20:45.259" starttime="20160202 10:20:44.909"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.282" starttime="20160202 10:20:45.281"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.287" starttime="20160202 10:20:45.283"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.289" starttime="20160202 10:20:45.288"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160202 10:20:45.291" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160202 10:20:45.292" level="INFO">${queryResultSetLines} = 1000768|5.3|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.|
</msg>
<status status="PASS" endtime="20160202 10:20:45.292" starttime="20160202 10:20:45.290"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.294" starttime="20160202 10:20:45.293"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160202 10:20:45.296" level="INFO">1 lines returned</msg>
<msg timestamp="20160202 10:20:45.297" level="INFO">@{queryResultSet} = [ 1000768|5.3|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.| ]</msg>
<status status="PASS" endtime="20160202 10:20:45.297" starttime="20160202 10:20:45.295"></status>
</kw>
<msg timestamp="20160202 10:20:45.298" level="INFO">@{queryRows} = [ 1000768|5.3|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.| ]</msg>
<status status="PASS" endtime="20160202 10:20:45.298" starttime="20160202 10:20:45.277"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160202 10:20:45.301" level="INFO">Length is 1</msg>
<msg timestamp="20160202 10:20:45.302" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160202 10:20:45.301" starttime="20160202 10:20:45.299"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160202 10:20:45.304" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160202 10:20:45.304" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160202 10:20:45.304" starttime="20160202 10:20:45.302"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160202 10:20:45.310" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160202 10:20:45.311" starttime="20160202 10:20:45.309"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:45.311" starttime="20160202 10:20:45.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.315" starttime="20160202 10:20:45.312"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:45.316" starttime="20160202 10:20:45.271"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.330" starttime="20160202 10:20:45.328"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:45.331" starttime="20160202 10:20:45.325"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.334" starttime="20160202 10:20:45.331"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:45.335" starttime="20160202 10:20:45.320"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:45.336" starttime="20160202 10:20:45.317"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:45.336" starttime="20160202 10:20:34.322"></status>
</kw>
<doc>Send the CRM EDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160202 10:20:45.338" starttime="20160202 10:20:34.316"></status>
</test>
<test id="s1-t8" name="Test Customer SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SDR_IME}</arg>
<arg>SDR_IME</arg>
<arg>inotif_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.374" starttime="20160202 10:20:45.373"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.433" starttime="20160202 10:20:45.379"></status>
</kw>
<msg timestamp="20160202 10:20:45.436" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160202 10:20:45.435" starttime="20160202 10:20:45.375"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160202 10:20:45.451" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:20:45.831" level="INFO">Read output: Last login: Tue Feb  2 09:20:34 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160202 10:20:45.832" starttime="20160202 10:20:45.448"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:45.832" starttime="20160202 10:20:45.439"></status>
</kw>
<msg timestamp="20160202 10:20:45.834" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160202 10:20:45.834" starttime="20160202 10:20:45.368"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:45.843" starttime="20160202 10:20:45.840"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:45.845" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20160202 10:20:45.849" starttime="20160202 10:20:45.844"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:45.849" starttime="20160202 10:20:45.836"></status>
</kw>
<msg timestamp="20160202 10:20:45.851" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160202 10:20:45.850" starttime="20160202 10:20:45.361"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:48.912" starttime="20160202 10:20:45.863"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:48.914" starttime="20160202 10:20:45.859"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:48.921" starttime="20160202 10:20:48.919"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:48.929" starttime="20160202 10:20:48.921"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:48.929" starttime="20160202 10:20:48.915"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160202 10:20:58.932" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160202 10:20:58.933" starttime="20160202 10:20:48.930"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:58.944" starttime="20160202 10:20:58.943"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160202 10:20:58.949" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160202 10:20:58.948" starttime="20160202 10:20:58.945"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160202 10:20:58.954" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160202 10:20:58.954" starttime="20160202 10:20:58.950"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:58.961" starttime="20160202 10:20:58.959"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160202 10:20:58.963" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160202 10:20:59.001" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:59.002" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160202 10:20:59.001" starttime="20160202 10:20:58.962"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.004" starttime="20160202 10:20:59.003"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.006" starttime="20160202 10:20:59.005"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.008" starttime="20160202 10:20:59.007"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160202 10:20:59.010" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160202 10:20:59.079" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:59.081" level="INFO">${stderr} = </msg>
<msg timestamp="20160202 10:20:59.081" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160202 10:20:59.080" starttime="20160202 10:20:59.009"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.085" starttime="20160202 10:20:59.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.087" starttime="20160202 10:20:59.086"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.089" starttime="20160202 10:20:59.087"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.090" starttime="20160202 10:20:59.089"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.092" starttime="20160202 10:20:59.091"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.094" starttime="20160202 10:20:59.093"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.096" starttime="20160202 10:20:59.095"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.098" starttime="20160202 10:20:59.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.100" starttime="20160202 10:20:59.099"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.101" starttime="20160202 10:20:59.100"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.103" starttime="20160202 10:20:59.102"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:59.104" starttime="20160202 10:20:58.955"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:59.106" level="INFO">Starting command 'cat tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20160202 10:20:59.110" starttime="20160202 10:20:59.105"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160202 10:20:59.111" level="INFO">Reading output of command 'cat tmpfilemonitor11.log'.</msg>
<msg timestamp="20160202 10:20:59.143" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:20:59.144" level="INFO">${stdout_string} = [2016-02-02 09:20:48,928][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160202 10:20:59.143" starttime="20160202 10:20:59.110"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:20:59.146" level="INFO">Executing command 'rm tmpfilemonitor11.log'.</msg>
<msg timestamp="20160202 10:20:59.221" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160202 10:20:59.221" starttime="20160202 10:20:59.144"></status>
</kw>
<msg timestamp="20160202 10:20:59.223" level="INFO">${tailed_text} = [2016-02-02 09:20:48,928][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160202 10:20:59.222" starttime="20160202 10:20:58.939"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160202 10:20:59.229" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/SDR_IME_ssh_tailed.log"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/SDR_IME_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160202 10:20:59.229" starttime="20160202 10:20:59.227"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:59.230" starttime="20160202 10:20:59.223"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.236" starttime="20160202 10:20:59.234"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.237" starttime="20160202 10:20:59.236"></status>
</kw>
<status status="PASS" endtime="20160202 10:20:59.240" starttime="20160202 10:20:59.231"></status>
</kw>
<msg timestamp="20160202 10:20:59.241" level="INFO">${tailed_text} = [2016-02-02 09:20:48,928][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160202 10:20:59.241" starttime="20160202 10:20:58.935"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:20:59.259" starttime="20160202 10:20:59.258"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:00.387" starttime="20160202 10:20:59.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:00.390" starttime="20160202 10:21:00.389"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160202 10:21:00.392" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160202 10:21:00.393" level="INFO">${queryResultSetLines} = 5556173|5.3|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|5.3|null|NEW|2015-02-23 23...</msg>
<status status="PASS" endtime="20160202 10:21:00.393" starttime="20160202 10:21:00.391"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:00.395" starttime="20160202 10:21:00.394"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160202 10:21:00.397" level="INFO">1 lines returned</msg>
<msg timestamp="20160202 10:21:00.398" level="INFO">@{queryResultSet} = [ 5556173|5.3|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|5.3|null|NEW|2015-02-23 ...</msg>
<status status="PASS" endtime="20160202 10:21:00.397" starttime="20160202 10:21:00.396"></status>
</kw>
<msg timestamp="20160202 10:21:00.399" level="INFO">@{queryRows} = [ 5556173|5.3|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|5.3|null|NEW|2015-02-23 ...</msg>
<status status="PASS" endtime="20160202 10:21:00.399" starttime="20160202 10:20:59.254"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160202 10:21:00.402" level="INFO">Length is 1</msg>
<msg timestamp="20160202 10:21:00.403" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160202 10:21:00.402" starttime="20160202 10:21:00.400"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160202 10:21:00.404" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160202 10:21:00.405" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160202 10:21:00.405" starttime="20160202 10:21:00.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160202 10:21:00.411" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160202 10:21:00.411" starttime="20160202 10:21:00.409"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:00.412" starttime="20160202 10:21:00.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:00.415" starttime="20160202 10:21:00.412"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:00.416" starttime="20160202 10:20:59.250"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:00.429" starttime="20160202 10:21:00.427"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:00.430" starttime="20160202 10:21:00.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:00.433" starttime="20160202 10:21:00.430"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:00.434" starttime="20160202 10:21:00.420"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:00.434" starttime="20160202 10:21:00.417"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:00.435" starttime="20160202 10:20:45.346"></status>
</kw>
<doc>Send the CRM SDR IME ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160202 10:21:00.436" starttime="20160202 10:20:45.340"></status>
</test>
<test id="s1-t9" name="Test Customer IVR SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${IVR_SDR}</arg>
<arg>IVR_SDR</arg>
<arg>ivr_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:00.469" starttime="20160202 10:21:00.468"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:00.526" starttime="20160202 10:21:00.474"></status>
</kw>
<msg timestamp="20160202 10:21:00.530" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160202 10:21:00.528" starttime="20160202 10:21:00.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160202 10:21:00.542" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:21:00.927" level="INFO">Read output: Last login: Tue Feb  2 09:20:45 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160202 10:21:00.931" starttime="20160202 10:21:00.539"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:00.932" starttime="20160202 10:21:00.531"></status>
</kw>
<msg timestamp="20160202 10:21:00.935" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160202 10:21:00.935" starttime="20160202 10:21:00.463"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:00.953" starttime="20160202 10:21:00.948"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:21:00.957" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20160202 10:21:00.962" starttime="20160202 10:21:00.954"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:00.963" starttime="20160202 10:21:00.939"></status>
</kw>
<msg timestamp="20160202 10:21:00.966" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160202 10:21:00.965" starttime="20160202 10:21:00.457"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:00.998" starttime="20160202 10:21:00.990"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:00.999" starttime="20160202 10:21:00.982"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:01.004" starttime="20160202 10:21:01.003"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:01.012" starttime="20160202 10:21:01.005"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:01.013" starttime="20160202 10:21:01.000"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160202 10:21:11.015" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160202 10:21:11.016" starttime="20160202 10:21:01.014"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.027" starttime="20160202 10:21:11.026"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160202 10:21:11.032" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160202 10:21:11.031" starttime="20160202 10:21:11.028"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160202 10:21:11.037" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160202 10:21:11.037" starttime="20160202 10:21:11.032"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.043" starttime="20160202 10:21:11.042"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160202 10:21:11.044" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160202 10:21:11.082" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:21:11.083" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160202 10:21:11.083" starttime="20160202 10:21:11.043"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.085" starttime="20160202 10:21:11.084"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.086" starttime="20160202 10:21:11.085"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.088" starttime="20160202 10:21:11.087"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160202 10:21:11.090" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160202 10:21:11.161" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:21:11.162" level="INFO">${stderr} = </msg>
<msg timestamp="20160202 10:21:11.163" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160202 10:21:11.162" starttime="20160202 10:21:11.089"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.166" starttime="20160202 10:21:11.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.168" starttime="20160202 10:21:11.167"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.170" starttime="20160202 10:21:11.169"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.171" starttime="20160202 10:21:11.170"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.173" starttime="20160202 10:21:11.172"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.175" starttime="20160202 10:21:11.174"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.177" starttime="20160202 10:21:11.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.178" starttime="20160202 10:21:11.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.180" starttime="20160202 10:21:11.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.182" starttime="20160202 10:21:11.181"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.183" starttime="20160202 10:21:11.182"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:11.184" starttime="20160202 10:21:11.038"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:21:11.186" level="INFO">Starting command 'cat tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20160202 10:21:11.189" starttime="20160202 10:21:11.185"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160202 10:21:11.191" level="INFO">Reading output of command 'cat tmpfilemonitor12.log'.</msg>
<msg timestamp="20160202 10:21:11.224" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:21:11.225" level="INFO">${stdout_string} = [2016-02-02 09:21:01,010][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=1.0|601|2015-02-23T...</msg>
<status status="PASS" endtime="20160202 10:21:11.225" starttime="20160202 10:21:11.190"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:21:11.227" level="INFO">Executing command 'rm tmpfilemonitor12.log'.</msg>
<msg timestamp="20160202 10:21:11.299" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160202 10:21:11.300" starttime="20160202 10:21:11.226"></status>
</kw>
<msg timestamp="20160202 10:21:11.301" level="INFO">${tailed_text} = [2016-02-02 09:21:01,010][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=1.0|601|2015-02-23T...</msg>
<status status="PASS" endtime="20160202 10:21:11.301" starttime="20160202 10:21:11.023"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160202 10:21:11.307" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/IVR_SDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/IVR_SDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160202 10:21:11.307" starttime="20160202 10:21:11.305"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:11.308" starttime="20160202 10:21:11.302"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.313" starttime="20160202 10:21:11.312"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.315" starttime="20160202 10:21:11.314"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:11.318" starttime="20160202 10:21:11.309"></status>
</kw>
<msg timestamp="20160202 10:21:11.319" level="INFO">${tailed_text} = [2016-02-02 09:21:01,010][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=1.0|601|2015-02-23T...</msg>
<status status="PASS" endtime="20160202 10:21:11.319" starttime="20160202 10:21:11.018"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.352" starttime="20160202 10:21:11.350"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.362" starttime="20160202 10:21:11.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.365" starttime="20160202 10:21:11.363"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160202 10:21:11.370" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160202 10:21:11.372" level="INFO">${queryResultSetLines} = 1000761|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0|A...</msg>
<status status="PASS" endtime="20160202 10:21:11.371" starttime="20160202 10:21:11.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.375" starttime="20160202 10:21:11.373"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160202 10:21:11.379" level="INFO">1 lines returned</msg>
<msg timestamp="20160202 10:21:11.381" level="INFO">@{queryResultSet} = [ 1000761|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0...</msg>
<status status="PASS" endtime="20160202 10:21:11.380" starttime="20160202 10:21:11.377"></status>
</kw>
<msg timestamp="20160202 10:21:11.384" level="INFO">@{queryRows} = [ 1000761|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0...</msg>
<status status="PASS" endtime="20160202 10:21:11.383" starttime="20160202 10:21:11.342"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160202 10:21:11.389" level="INFO">Length is 1</msg>
<msg timestamp="20160202 10:21:11.390" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160202 10:21:11.390" starttime="20160202 10:21:11.385"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160202 10:21:11.394" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160202 10:21:11.396" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160202 10:21:11.395" starttime="20160202 10:21:11.392"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160202 10:21:11.407" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160202 10:21:11.408" starttime="20160202 10:21:11.404"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:11.409" starttime="20160202 10:21:11.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.417" starttime="20160202 10:21:11.411"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:11.418" starttime="20160202 10:21:11.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.445" starttime="20160202 10:21:11.442"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:11.447" starttime="20160202 10:21:11.435"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.454" starttime="20160202 10:21:11.448"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:11.456" starttime="20160202 10:21:11.427"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:11.457" starttime="20160202 10:21:11.420"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:11.458" starttime="20160202 10:21:00.445"></status>
</kw>
<doc>Send the IVR SDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160202 10:21:11.461" starttime="20160202 10:21:00.439"></status>
</test>
<test id="s1-t10" name="Test Customer PROV SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${PROV_SDR}</arg>
<arg>PROV_SDR</arg>
<arg>prov_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.533" starttime="20160202 10:21:11.531"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:11.584" starttime="20160202 10:21:11.541"></status>
</kw>
<msg timestamp="20160202 10:21:11.585" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160202 10:21:11.585" starttime="20160202 10:21:11.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160202 10:21:11.591" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:21:11.983" level="INFO">Read output: Last login: Tue Feb  2 09:21:00 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160202 10:21:11.985" starttime="20160202 10:21:11.590"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:11.986" starttime="20160202 10:21:11.586"></status>
</kw>
<msg timestamp="20160202 10:21:11.989" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160202 10:21:11.988" starttime="20160202 10:21:11.517"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:12.004" starttime="20160202 10:21:12.001"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:21:12.009" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20160202 10:21:12.013" starttime="20160202 10:21:12.006"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:12.015" starttime="20160202 10:21:11.993"></status>
</kw>
<msg timestamp="20160202 10:21:12.019" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160202 10:21:12.017" starttime="20160202 10:21:11.504"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:12.061" starttime="20160202 10:21:12.043"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:12.062" starttime="20160202 10:21:12.035"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:12.068" starttime="20160202 10:21:12.067"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:12.076" starttime="20160202 10:21:12.069"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:12.077" starttime="20160202 10:21:12.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160202 10:21:22.080" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160202 10:21:22.082" starttime="20160202 10:21:12.078"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.093" starttime="20160202 10:21:22.092"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160202 10:21:22.098" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160202 10:21:22.097" starttime="20160202 10:21:22.094"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160202 10:21:22.102" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160202 10:21:22.102" starttime="20160202 10:21:22.098"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.108" starttime="20160202 10:21:22.107"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160202 10:21:22.110" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160202 10:21:22.147" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:21:22.148" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160202 10:21:22.147" starttime="20160202 10:21:22.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.150" starttime="20160202 10:21:22.149"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.152" starttime="20160202 10:21:22.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.153" starttime="20160202 10:21:22.152"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160202 10:21:22.155" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160202 10:21:22.227" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:21:22.228" level="INFO">${stderr} = </msg>
<msg timestamp="20160202 10:21:22.228" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160202 10:21:22.227" starttime="20160202 10:21:22.154"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.233" starttime="20160202 10:21:22.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.234" starttime="20160202 10:21:22.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.236" starttime="20160202 10:21:22.235"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.238" starttime="20160202 10:21:22.237"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.239" starttime="20160202 10:21:22.238"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.241" starttime="20160202 10:21:22.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.243" starttime="20160202 10:21:22.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.245" starttime="20160202 10:21:22.244"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.247" starttime="20160202 10:21:22.246"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.248" starttime="20160202 10:21:22.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.250" starttime="20160202 10:21:22.249"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:22.251" starttime="20160202 10:21:22.103"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:21:22.252" level="INFO">Starting command 'cat tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20160202 10:21:22.256" starttime="20160202 10:21:22.251"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160202 10:21:22.258" level="INFO">Reading output of command 'cat tmpfilemonitor13.log'.</msg>
<msg timestamp="20160202 10:21:22.289" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:21:22.290" level="INFO">${stdout_string} = [2016-02-02 09:21:12,074][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160202 10:21:22.290" starttime="20160202 10:21:22.256"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:21:22.292" level="INFO">Executing command 'rm tmpfilemonitor13.log'.</msg>
<msg timestamp="20160202 10:21:22.364" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160202 10:21:22.365" starttime="20160202 10:21:22.291"></status>
</kw>
<msg timestamp="20160202 10:21:22.366" level="INFO">${tailed_text} = [2016-02-02 09:21:12,074][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160202 10:21:22.366" starttime="20160202 10:21:22.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160202 10:21:22.372" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/PROV_SDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/PROV_SDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160202 10:21:22.373" starttime="20160202 10:21:22.370"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:22.373" starttime="20160202 10:21:22.367"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.379" starttime="20160202 10:21:22.377"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.380" starttime="20160202 10:21:22.379"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:22.384" starttime="20160202 10:21:22.374"></status>
</kw>
<msg timestamp="20160202 10:21:22.385" level="INFO">${tailed_text} = [2016-02-02 09:21:12,074][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160202 10:21:22.385" starttime="20160202 10:21:22.084"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.405" starttime="20160202 10:21:22.404"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.416" starttime="20160202 10:21:22.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.418" starttime="20160202 10:21:22.417"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160202 10:21:22.420" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160202 10:21:22.421" level="INFO">${queryResultSetLines} = 1012171|5.3|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|null|...</msg>
<status status="PASS" endtime="20160202 10:21:22.420" starttime="20160202 10:21:22.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.422" starttime="20160202 10:21:22.421"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160202 10:21:22.424" level="INFO">1 lines returned</msg>
<msg timestamp="20160202 10:21:22.425" level="INFO">@{queryResultSet} = [ 1012171|5.3|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|nul...</msg>
<status status="PASS" endtime="20160202 10:21:22.424" starttime="20160202 10:21:22.423"></status>
</kw>
<msg timestamp="20160202 10:21:22.426" level="INFO">@{queryRows} = [ 1012171|5.3|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|nul...</msg>
<status status="PASS" endtime="20160202 10:21:22.426" starttime="20160202 10:21:22.401"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160202 10:21:22.428" level="INFO">Length is 1</msg>
<msg timestamp="20160202 10:21:22.429" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160202 10:21:22.428" starttime="20160202 10:21:22.427"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160202 10:21:22.431" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160202 10:21:22.432" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160202 10:21:22.431" starttime="20160202 10:21:22.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160202 10:21:22.437" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160202 10:21:22.437" starttime="20160202 10:21:22.435"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:22.438" starttime="20160202 10:21:22.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.441" starttime="20160202 10:21:22.438"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:22.442" starttime="20160202 10:21:22.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.454" starttime="20160202 10:21:22.452"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:22.455" starttime="20160202 10:21:22.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.458" starttime="20160202 10:21:22.455"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:22.459" starttime="20160202 10:21:22.446"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:22.459" starttime="20160202 10:21:22.442"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:22.460" starttime="20160202 10:21:11.479"></status>
</kw>
<doc>Send the PROV SDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160202 10:21:22.461" starttime="20160202 10:21:11.465"></status>
</test>
<test id="s1-t11" name="Test MoneyTX ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MoneyTX}</arg>
<arg>MoneyTX</arg>
<arg>crce_moneytx</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.493" starttime="20160202 10:21:22.492"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.551" starttime="20160202 10:21:22.497"></status>
</kw>
<msg timestamp="20160202 10:21:22.554" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160202 10:21:22.553" starttime="20160202 10:21:22.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160202 10:21:22.566" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:21:22.973" level="INFO">Read output: Last login: Tue Feb  2 09:21:11 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160202 10:21:22.974" starttime="20160202 10:21:22.563"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:22.976" starttime="20160202 10:21:22.555"></status>
</kw>
<msg timestamp="20160202 10:21:22.979" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160202 10:21:22.978" starttime="20160202 10:21:22.487"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:22.992" starttime="20160202 10:21:22.989"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:21:22.996" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20160202 10:21:23.001" starttime="20160202 10:21:22.994"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:23.003" starttime="20160202 10:21:22.982"></status>
</kw>
<msg timestamp="20160202 10:21:23.008" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160202 10:21:23.006" starttime="20160202 10:21:22.481"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:23.040" starttime="20160202 10:21:23.032"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:23.042" starttime="20160202 10:21:23.024"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:23.054" starttime="20160202 10:21:23.051"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:23.064" starttime="20160202 10:21:23.055"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:23.065" starttime="20160202 10:21:23.044"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160202 10:21:33.071" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160202 10:21:33.072" starttime="20160202 10:21:23.067"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.083" starttime="20160202 10:21:33.082"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160202 10:21:33.087" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160202 10:21:33.087" starttime="20160202 10:21:33.084"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160202 10:21:33.092" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160202 10:21:33.092" starttime="20160202 10:21:33.088"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.098" starttime="20160202 10:21:33.097"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160202 10:21:33.099" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160202 10:21:33.137" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:21:33.138" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160202 10:21:33.138" starttime="20160202 10:21:33.099"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.140" starttime="20160202 10:21:33.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.141" starttime="20160202 10:21:33.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.143" starttime="20160202 10:21:33.142"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160202 10:21:33.145" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160202 10:21:33.216" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:21:33.216" level="INFO">${stderr} = </msg>
<msg timestamp="20160202 10:21:33.217" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160202 10:21:33.216" starttime="20160202 10:21:33.144"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.221" starttime="20160202 10:21:33.218"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.223" starttime="20160202 10:21:33.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.224" starttime="20160202 10:21:33.223"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.226" starttime="20160202 10:21:33.225"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.227" starttime="20160202 10:21:33.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.229" starttime="20160202 10:21:33.228"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.231" starttime="20160202 10:21:33.230"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.233" starttime="20160202 10:21:33.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.234" starttime="20160202 10:21:33.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.236" starttime="20160202 10:21:33.235"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.238" starttime="20160202 10:21:33.237"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:33.239" starttime="20160202 10:21:33.093"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:21:33.241" level="INFO">Starting command 'cat tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20160202 10:21:33.244" starttime="20160202 10:21:33.239"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160202 10:21:33.245" level="INFO">Reading output of command 'cat tmpfilemonitor14.log'.</msg>
<msg timestamp="20160202 10:21:33.276" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:21:33.276" level="INFO">${stdout_string} = [2016-02-02 09:21:23,062][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|120|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:21:33.276" starttime="20160202 10:21:33.245"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:21:33.278" level="INFO">Executing command 'rm tmpfilemonitor14.log'.</msg>
<msg timestamp="20160202 10:21:33.349" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160202 10:21:33.349" starttime="20160202 10:21:33.277"></status>
</kw>
<msg timestamp="20160202 10:21:33.351" level="INFO">${tailed_text} = [2016-02-02 09:21:23,062][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|120|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:21:33.350" starttime="20160202 10:21:33.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160202 10:21:33.356" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/MoneyTX_ssh_tailed.log"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/MoneyTX_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160202 10:21:33.357" starttime="20160202 10:21:33.354"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:33.357" starttime="20160202 10:21:33.351"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.363" starttime="20160202 10:21:33.362"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.365" starttime="20160202 10:21:33.364"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:33.368" starttime="20160202 10:21:33.358"></status>
</kw>
<msg timestamp="20160202 10:21:33.369" level="INFO">${tailed_text} = [2016-02-02 09:21:23,062][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|120|true|1|CRCE...</msg>
<status status="PASS" endtime="20160202 10:21:33.368" starttime="20160202 10:21:33.074"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.386" starttime="20160202 10:21:33.385"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.391" starttime="20160202 10:21:33.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.393" starttime="20160202 10:21:33.392"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160202 10:21:33.395" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160202 10:21:33.396" level="INFO">${queryResultSetLines} = 1000844|5.3|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|1|...</msg>
<status status="PASS" endtime="20160202 10:21:33.396" starttime="20160202 10:21:33.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.398" starttime="20160202 10:21:33.397"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160202 10:21:33.399" level="INFO">1 lines returned</msg>
<msg timestamp="20160202 10:21:33.400" level="INFO">@{queryResultSet} = [ 1000844|5.3|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|...</msg>
<status status="PASS" endtime="20160202 10:21:33.400" starttime="20160202 10:21:33.398"></status>
</kw>
<msg timestamp="20160202 10:21:33.401" level="INFO">@{queryRows} = [ 1000844|5.3|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|...</msg>
<status status="PASS" endtime="20160202 10:21:33.401" starttime="20160202 10:21:33.381"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160202 10:21:33.403" level="INFO">Length is 1</msg>
<msg timestamp="20160202 10:21:33.404" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160202 10:21:33.404" starttime="20160202 10:21:33.402"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160202 10:21:33.407" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160202 10:21:33.408" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160202 10:21:33.408" starttime="20160202 10:21:33.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160202 10:21:33.413" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160202 10:21:33.414" starttime="20160202 10:21:33.412"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:33.414" starttime="20160202 10:21:33.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.417" starttime="20160202 10:21:33.415"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:33.418" starttime="20160202 10:21:33.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.430" starttime="20160202 10:21:33.428"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:33.431" starttime="20160202 10:21:33.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.434" starttime="20160202 10:21:33.431"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:33.434" starttime="20160202 10:21:33.422"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:33.435" starttime="20160202 10:21:33.419"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:33.436" starttime="20160202 10:21:22.469"></status>
</kw>
<doc>Send the MoneyTX CRCE ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160202 10:21:33.437" starttime="20160202 10:21:22.463"></status>
</test>
<test id="s1-t12" name="Test SwapSIM ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${swapSIM}</arg>
<arg>swapSIM</arg>
<arg>crce_simswap</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.486" starttime="20160202 10:21:33.484"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.554" starttime="20160202 10:21:33.494"></status>
</kw>
<msg timestamp="20160202 10:21:33.557" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160202 10:21:33.556" starttime="20160202 10:21:33.488"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160202 10:21:33.570" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:21:33.949" level="INFO">Read output: Last login: Tue Feb  2 09:21:22 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160202 10:21:33.950" starttime="20160202 10:21:33.567"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:33.951" starttime="20160202 10:21:33.559"></status>
</kw>
<msg timestamp="20160202 10:21:33.954" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160202 10:21:33.953" starttime="20160202 10:21:33.474"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:33.969" starttime="20160202 10:21:33.966"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:21:33.974" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20160202 10:21:33.978" starttime="20160202 10:21:33.971"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:33.979" starttime="20160202 10:21:33.958"></status>
</kw>
<msg timestamp="20160202 10:21:33.982" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160202 10:21:33.981" starttime="20160202 10:21:33.462"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:34.014" starttime="20160202 10:21:34.006"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:34.015" starttime="20160202 10:21:33.999"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:34.022" starttime="20160202 10:21:34.020"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:34.030" starttime="20160202 10:21:34.022"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:34.030" starttime="20160202 10:21:34.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160202 10:21:44.033" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160202 10:21:44.035" starttime="20160202 10:21:34.031"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.057" starttime="20160202 10:21:44.054"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160202 10:21:44.065" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160202 10:21:44.064" starttime="20160202 10:21:44.059"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160202 10:21:44.072" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160202 10:21:44.073" starttime="20160202 10:21:44.066"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.084" starttime="20160202 10:21:44.082"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160202 10:21:44.088" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160202 10:21:44.128" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:21:44.130" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160202 10:21:44.129" starttime="20160202 10:21:44.086"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.133" starttime="20160202 10:21:44.131"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.137" starttime="20160202 10:21:44.135"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.173" starttime="20160202 10:21:44.168"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160202 10:21:44.178" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160202 10:21:44.222" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:21:44.224" level="INFO">${stderr} = </msg>
<msg timestamp="20160202 10:21:44.225" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160202 10:21:44.223" starttime="20160202 10:21:44.174"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.232" starttime="20160202 10:21:44.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.236" starttime="20160202 10:21:44.234"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.239" starttime="20160202 10:21:44.237"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.242" starttime="20160202 10:21:44.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.245" starttime="20160202 10:21:44.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.249" starttime="20160202 10:21:44.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.252" starttime="20160202 10:21:44.250"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.256" starttime="20160202 10:21:44.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.259" starttime="20160202 10:21:44.257"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.262" starttime="20160202 10:21:44.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.264" starttime="20160202 10:21:44.263"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:44.265" starttime="20160202 10:21:44.075"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:21:44.266" level="INFO">Starting command 'cat tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20160202 10:21:44.270" starttime="20160202 10:21:44.265"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160202 10:21:44.271" level="INFO">Reading output of command 'cat tmpfilemonitor15.log'.</msg>
<msg timestamp="20160202 10:21:44.303" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:21:44.304" level="INFO">${stdout_string} = [2016-02-02 09:21:34,027][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|160|true|16|CRC...</msg>
<status status="PASS" endtime="20160202 10:21:44.304" starttime="20160202 10:21:44.270"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:21:44.306" level="INFO">Executing command 'rm tmpfilemonitor15.log'.</msg>
<msg timestamp="20160202 10:21:44.379" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160202 10:21:44.380" starttime="20160202 10:21:44.305"></status>
</kw>
<msg timestamp="20160202 10:21:44.381" level="INFO">${tailed_text} = [2016-02-02 09:21:34,027][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|160|true|16|CRC...</msg>
<status status="PASS" endtime="20160202 10:21:44.380" starttime="20160202 10:21:44.048"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160202 10:21:44.387" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/swapSIM_ssh_tailed.log"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/swapSIM_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160202 10:21:44.387" starttime="20160202 10:21:44.385"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:44.388" starttime="20160202 10:21:44.382"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.400" starttime="20160202 10:21:44.397"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.404" starttime="20160202 10:21:44.402"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:44.408" starttime="20160202 10:21:44.390"></status>
</kw>
<msg timestamp="20160202 10:21:44.410" level="INFO">${tailed_text} = [2016-02-02 09:21:34,027][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|160|true|16|CRC...</msg>
<status status="PASS" endtime="20160202 10:21:44.409" starttime="20160202 10:21:44.039"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.447" starttime="20160202 10:21:44.445"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.457" starttime="20160202 10:21:44.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.460" starttime="20160202 10:21:44.458"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160202 10:21:44.464" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160202 10:21:44.467" level="INFO">${queryResultSetLines} = 1000702|5.3|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|nul...</msg>
<status status="PASS" endtime="20160202 10:21:44.466" starttime="20160202 10:21:44.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.470" starttime="20160202 10:21:44.468"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160202 10:21:44.473" level="INFO">1 lines returned</msg>
<msg timestamp="20160202 10:21:44.475" level="INFO">@{queryResultSet} = [ 1000702|5.3|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|n...</msg>
<status status="PASS" endtime="20160202 10:21:44.474" starttime="20160202 10:21:44.471"></status>
</kw>
<msg timestamp="20160202 10:21:44.478" level="INFO">@{queryRows} = [ 1000702|5.3|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|n...</msg>
<status status="PASS" endtime="20160202 10:21:44.477" starttime="20160202 10:21:44.437"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160202 10:21:44.482" level="INFO">Length is 1</msg>
<msg timestamp="20160202 10:21:44.484" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160202 10:21:44.483" starttime="20160202 10:21:44.479"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160202 10:21:44.487" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160202 10:21:44.489" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160202 10:21:44.488" starttime="20160202 10:21:44.485"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160202 10:21:44.499" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160202 10:21:44.500" starttime="20160202 10:21:44.497"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:44.502" starttime="20160202 10:21:44.490"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.509" starttime="20160202 10:21:44.503"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:44.510" starttime="20160202 10:21:44.427"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.535" starttime="20160202 10:21:44.532"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:44.536" starttime="20160202 10:21:44.526"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.542" starttime="20160202 10:21:44.537"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:44.544" starttime="20160202 10:21:44.519"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:44.545" starttime="20160202 10:21:44.512"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:44.546" starttime="20160202 10:21:33.444"></status>
</kw>
<doc>Send the swapSIM CRCE ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160202 10:21:44.548" starttime="20160202 10:21:33.439"></status>
</test>
<test id="s1-t13" name="Test MOC NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${MOC_NOK}</arg>
<arg>MOC_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160202 10:21:44.579" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160202 10:21:44.620" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160202 10:21:44.621" starttime="20160202 10:21:44.576"></status>
</kw>
<status status="FAIL" endtime="20160202 10:21:44.622" starttime="20160202 10:21:44.568"></status>
</kw>
<doc>Send the invalid MOC XDR ticket with following changes: Version (Header, Mandatory, changed), Provider (H,M,empty), Success (H,M,changed), CRCE Operation (B,M, changed), TrafficType (B,M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160202 10:21:44.625" starttime="20160202 10:21:44.552">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-t14" name="Test SMS NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${SMS_NOK}</arg>
<arg>SMS_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160202 10:21:44.648" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160202 10:21:44.649" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160202 10:21:44.650" starttime="20160202 10:21:44.647"></status>
</kw>
<status status="FAIL" endtime="20160202 10:21:44.650" starttime="20160202 10:21:44.642"></status>
</kw>
<doc>Send the invalid SMS XDR ticket with following changes: Version (Header, Mandatory, changed), TrafficType (B, M, mpty), CRCE Result Code (B, M, changed). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160202 10:21:44.651" starttime="20160202 10:21:44.629">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-t15" name="Test DATA NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${DATA_NOK}</arg>
<arg>DATA_NOK</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160202 10:21:44.665" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160202 10:21:44.666" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160202 10:21:44.667" starttime="20160202 10:21:44.664"></status>
</kw>
<status status="FAIL" endtime="20160202 10:21:44.667" starttime="20160202 10:21:44.660"></status>
</kw>
<doc>Send the invalid DATA XDR ticket with following changes: Application (Header, Mandatory, empty), Tariff (B, M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160202 10:21:44.668" starttime="20160202 10:21:44.653">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-t16" name="Test MOC NOK - Invalid ASCII ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC_NOK_ASCII}</arg>
<arg>MOC_NOK_ASCII</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.698" starttime="20160202 10:21:44.697"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:44.756" starttime="20160202 10:21:44.702"></status>
</kw>
<msg timestamp="20160202 10:21:44.760" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160202 10:21:44.759" starttime="20160202 10:21:44.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160202 10:21:44.775" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160202 10:21:45.160" level="INFO">Read output: Last login: Tue Feb  2 09:21:33 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160202 10:21:45.161" starttime="20160202 10:21:44.772"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:45.162" starttime="20160202 10:21:44.762"></status>
</kw>
<msg timestamp="20160202 10:21:45.164" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160202 10:21:45.164" starttime="20160202 10:21:44.693"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:45.171" starttime="20160202 10:21:45.169"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:21:45.173" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20160202 10:21:45.176" starttime="20160202 10:21:45.171"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:45.177" starttime="20160202 10:21:45.166"></status>
</kw>
<msg timestamp="20160202 10:21:45.178" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160202 10:21:45.177" starttime="20160202 10:21:44.687"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:45.192" starttime="20160202 10:21:45.189"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:45.193" starttime="20160202 10:21:45.186"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:45.199" starttime="20160202 10:21:45.198"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:45.206" starttime="20160202 10:21:45.200"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:45.206" starttime="20160202 10:21:45.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160202 10:21:55.208" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160202 10:21:55.209" starttime="20160202 10:21:45.207"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.219" starttime="20160202 10:21:55.218"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160202 10:21:55.223" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160202 10:21:55.223" starttime="20160202 10:21:55.220"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160202 10:21:55.228" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160202 10:21:55.228" starttime="20160202 10:21:55.224"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.234" starttime="20160202 10:21:55.232"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160202 10:21:55.235" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160202 10:21:55.271" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:21:55.272" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160202 10:21:55.272" starttime="20160202 10:21:55.234"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.274" starttime="20160202 10:21:55.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.275" starttime="20160202 10:21:55.274"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.277" starttime="20160202 10:21:55.276"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160202 10:21:55.279" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160202 10:21:55.348" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:21:55.350" level="INFO">${stderr} = </msg>
<msg timestamp="20160202 10:21:55.350" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160202 10:21:55.349" starttime="20160202 10:21:55.278"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.355" starttime="20160202 10:21:55.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.356" starttime="20160202 10:21:55.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.358" starttime="20160202 10:21:55.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.360" starttime="20160202 10:21:55.359"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.361" starttime="20160202 10:21:55.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.363" starttime="20160202 10:21:55.362"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.365" starttime="20160202 10:21:55.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.367" starttime="20160202 10:21:55.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.368" starttime="20160202 10:21:55.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.370" starttime="20160202 10:21:55.369"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.371" starttime="20160202 10:21:55.370"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:55.372" starttime="20160202 10:21:55.229"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:21:55.374" level="INFO">Starting command 'cat tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20160202 10:21:55.377" starttime="20160202 10:21:55.373"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160202 10:21:55.378" level="INFO">Reading output of command 'cat tmpfilemonitor16.log'.</msg>
<msg timestamp="20160202 10:21:55.411" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160202 10:21:55.412" level="INFO">${stdout_string} = [2016-02-02 09:21:45,214][ERROR][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 145] An unknown exception occurred:
org.beanio.I...</msg>
<status status="PASS" endtime="20160202 10:21:55.411" starttime="20160202 10:21:55.378"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160202 10:21:55.414" level="INFO">Executing command 'rm tmpfilemonitor16.log'.</msg>
<msg timestamp="20160202 10:21:55.485" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160202 10:21:55.485" starttime="20160202 10:21:55.412"></status>
</kw>
<msg timestamp="20160202 10:21:55.486" level="INFO">${tailed_text} = [2016-02-02 09:21:45,214][ERROR][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 145] An unknown exception occurred:
org.beanio.I...</msg>
<status status="PASS" endtime="20160202 10:21:55.486" starttime="20160202 10:21:55.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160202 10:21:55.493" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/MOC_NOK_ASCII_ssh_tailed.log"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/log/MOC_NOK_ASCII_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160202 10:21:55.493" starttime="20160202 10:21:55.490"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:55.494" starttime="20160202 10:21:55.487"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.499" starttime="20160202 10:21:55.498"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.501" starttime="20160202 10:21:55.500"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:55.506" starttime="20160202 10:21:55.495"></status>
</kw>
<msg timestamp="20160202 10:21:55.507" level="INFO">${tailed_text} = [2016-02-02 09:21:45,214][ERROR][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 145] An unknown exception occurred:
org.beanio.I...</msg>
<status status="PASS" endtime="20160202 10:21:55.507" starttime="20160202 10:21:55.211"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.524" starttime="20160202 10:21:55.523"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.529" starttime="20160202 10:21:55.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.530" starttime="20160202 10:21:55.529"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160202 10:21:55.532" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160202 10:21:55.533" level="INFO">${queryResultSetLines} = </msg>
<status status="PASS" endtime="20160202 10:21:55.533" starttime="20160202 10:21:55.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.534" starttime="20160202 10:21:55.534"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160202 10:21:55.536" level="INFO">0 lines returned</msg>
<msg timestamp="20160202 10:21:55.537" level="INFO">@{queryResultSet} = [ ]</msg>
<status status="PASS" endtime="20160202 10:21:55.537" starttime="20160202 10:21:55.535"></status>
</kw>
<msg timestamp="20160202 10:21:55.538" level="INFO">@{queryRows} = [ ]</msg>
<status status="PASS" endtime="20160202 10:21:55.538" starttime="20160202 10:21:55.520"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160202 10:21:55.540" level="INFO">Length is 0</msg>
<msg timestamp="20160202 10:21:55.541" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20160202 10:21:55.540" starttime="20160202 10:21:55.539"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160202 10:21:55.542" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160202 10:21:55.543" level="INFO">${length_s} = 0</msg>
<status status="PASS" endtime="20160202 10:21:55.543" starttime="20160202 10:21:55.541"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.547" starttime="20160202 10:21:55.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160202 10:21:55.551" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160202 10:21:55.552" starttime="20160202 10:21:55.550"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:55.552" starttime="20160202 10:21:55.547"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:55.553" starttime="20160202 10:21:55.515"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.563" starttime="20160202 10:21:55.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.568" starttime="20160202 10:21:55.566"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:55.569" starttime="20160202 10:21:55.564"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:55.569" starttime="20160202 10:21:55.557"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:55.570" starttime="20160202 10:21:55.554"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:55.570" starttime="20160202 10:21:44.675"></status>
</kw>
<doc>Send the MOC XDR ticket with invalid ASCII garbage in it

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160202 10:21:55.572" starttime="20160202 10:21:44.670"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20160202 10:21:55.605" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20160202 10:21:55.606" starttime="20160202 10:21:55.604"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160202 10:21:55.608" starttime="20160202 10:21:55.606"></status>
</kw>
<status status="PASS" endtime="20160202 10:21:55.608" starttime="20160202 10:21:55.601"></status>
</kw>
<doc>Main goal of the test suite is to check behaviour of XDR in several basic positive cases and a few negative (NOK) cases.
It uses Robot Framework's JMSLibrary to send tickets of different types (MOC, SMS, DATA,...) to AMQ where XDR consumers should process them.
After that XDR's log will be analysed and finally DB should be checked if ticket has landed also there.
Negative tests (NOK) test different (but not all) mandatory fields (empty field, different values than predefined) according to
XDR Specification v5.3.2. Each NOK test has modified different fields - which exactly is specified in test description of the test itself</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160202 10:21:55.609" starttime="20160202 10:19:19.434"></status>
</suite>
<statistics>
<total>
<stat pass="13" fail="0">Critical Tests</stat>
<stat pass="13" fail="3">All Tests</stat>
</total>
<tag>
<stat pass="0" info="non-critical" doc="" combined="" fail="3" links="">noncritical</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">ComponentTest</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">matko.sanseovic</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">MTEL_supported</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">MVNA_MEX_supported</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">SMARTSPACE_supported</stat>
<stat pass="6" info="" doc="" combined="" fail="0" links="">test</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">TNZ_supported</stat>
<stat pass="4" info="" doc="" combined="" fail="3" links="">VIRGIN_COLUMBIA_supported</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">XDR_only</stat>
</tag>
<suite>
<stat pass="13" id="s1" fail="3" name="XDR Test-robot-suite">XDR Test-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
