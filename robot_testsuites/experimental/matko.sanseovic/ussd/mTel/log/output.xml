<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20160126 14:02:54.144">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/ussd-robot-suite.txt" id="s1" name="Ussd-Robot-Suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160126 14:02:55.739" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160126 14:02:55.742" level="INFO">${time} = Tue Jan 26 14:02:55 CET 2016</msg>
<status status="PASS" endtime="20160126 14:02:55.741" starttime="20160126 14:02:55.726"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:02:55.748" level="INFO">Date and time: Tue Jan 26 14:02:55 CET 2016</msg>
<status status="PASS" endtime="20160126 14:02:55.749" starttime="20160126 14:02:55.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD test on mTel</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:02:55.753" level="INFO">USSD test on mTel</msg>
<status status="PASS" endtime="20160126 14:02:55.754" starttime="20160126 14:02:55.751"></status>
</kw>
<kw type="kw" name="${conn_id} = SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${USSD HOST}</arg>
</arguments>
<msg timestamp="20160126 14:02:55.925" level="INFO">${conn_id} = 1</msg>
<status status="PASS" endtime="20160126 14:02:55.924" starttime="20160126 14:02:55.757"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${conn_id}</arg>
</arguments>
<msg timestamp="20160126 14:02:55.931" level="INFO">${conn_id} = 1</msg>
<status status="PASS" endtime="20160126 14:02:55.932" starttime="20160126 14:02:55.928"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USSD USER}</arg>
<arg>${USSD PWD}</arg>
</arguments>
<msg timestamp="20160126 14:02:55.938" level="INFO">Logging into '10.105.125.143:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 14:02:57.175" level="INFO">Read output: Last login: Tue Jan 26 02:23:52 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ivr-app01.tb25 ~]$[m</msg>
<msg timestamp="20160126 14:02:57.178" level="INFO">${output_login} = Last login: Tue Jan 26 02:23:52 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ivr-app01.tb25 ~]$[m </msg>
<status status="PASS" endtime="20160126 14:02:57.176" starttime="20160126 14:02:55.935"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160126 14:02:57.184" level="INFO">Last login: Tue Jan 26 02:23:52 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ivr-app01.tb25 ~]$[m </msg>
<status status="PASS" endtime="20160126 14:02:57.185" starttime="20160126 14:02:57.181"></status>
</kw>
<kw type="kw" name="SSHLibrary.Put File">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>${USSD_PY_TOOL}</arg>
<arg>${USSD HOME}/ussd/</arg>
</arguments>
<msg timestamp="20160126 14:02:57.247" level="INFO">'/opt/robot/robotworkspace/robot_testsuites/ussd/tool/USSDtest.py' -&gt; '/home/qa_automation//ussd//USSDtest.py'</msg>
<status status="PASS" endtime="20160126 14:02:57.248" starttime="20160126 14:02:57.187"></status>
</kw>
<kw type="kw" name="SSHLibrary.File Should Exist">
<doc>Fails if the given `path` does NOT point to an existing file.</doc>
<arguments>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<status status="PASS" endtime="20160126 14:02:57.254" starttime="20160126 14:02:57.250"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ussd_tool}</arg>
<arg>${USSD HOME}/ussd/USSDtest.py</arg>
</arguments>
<msg timestamp="20160126 14:02:57.290" level="INFO">${ussd_tool} = /home/qa_automation//ussd/USSDtest.py</msg>
<status status="PASS" endtime="20160126 14:02:57.291" starttime="20160126 14:02:57.256"></status>
</kw>
<kw type="kw" name="Create Prepaid Subscriber">
<doc>Test will create two prepaid subscribers with some money on balance that will be used for testing</doc>
<arguments>
</arguments>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160126 14:02:57.311" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160126 14:02:57.310" starttime="20160126 14:02:57.307"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160126 14:02:57.340" level="INFO">msg=crce_host=10.105.125.159</msg>
<status status="PASS" endtime="20160126 14:02:57.341" starttime="20160126 14:02:57.338"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160126 14:02:57.346" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160126 14:02:57.347" starttime="20160126 14:02:57.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160126 14:02:57.352" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160126 14:02:57.353" starttime="20160126 14:02:57.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160126 14:02:57.357" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160126 14:02:57.358" starttime="20160126 14:02:57.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160126 14:02:57.364" level="INFO">msg=imsiRangeStart=232201667725900</msg>
<status status="PASS" endtime="20160126 14:02:57.365" starttime="20160126 14:02:57.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160126 14:02:57.369" level="INFO">msg=msisdnRangeStart=43667725900</msg>
<status status="PASS" endtime="20160126 14:02:57.370" starttime="20160126 14:02:57.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160126 14:02:57.375" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160126 14:02:57.376" starttime="20160126 14:02:57.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160126 14:02:57.381" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160126 14:02:57.382" starttime="20160126 14:02:57.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160126 14:02:57.386" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160126 14:02:57.387" starttime="20160126 14:02:57.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160126 14:02:57.392" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160126 14:02:57.393" starttime="20160126 14:02:57.389"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160126 14:02:57.418" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 14:02:57.419" starttime="20160126 14:02:57.414"></status>
</kw>
<status status="PASS" endtime="20160126 14:02:57.420" starttime="20160126 14:02:57.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160126 14:02:57.428" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 14:02:57.430" starttime="20160126 14:02:57.425"></status>
</kw>
<status status="PASS" endtime="20160126 14:02:57.431" starttime="20160126 14:02:57.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160126 14:02:57.439" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 14:02:57.440" starttime="20160126 14:02:57.436"></status>
</kw>
<status status="PASS" endtime="20160126 14:02:57.441" starttime="20160126 14:02:57.433"></status>
</kw>
<status status="PASS" endtime="20160126 14:02:57.443" starttime="20160126 14:02:57.397"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160126 14:02:57.449" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160126 14:02:57.450" starttime="20160126 14:02:57.445"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:02:57.454" starttime="20160126 14:02:57.452"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:02:57.459" starttime="20160126 14:02:57.456"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:02:57.463" starttime="20160126 14:02:57.461"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160126 14:02:57.467" starttime="20160126 14:02:57.465"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160126 14:02:57.471" starttime="20160126 14:02:57.469"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:02:57.475" starttime="20160126 14:02:57.473"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:02:57.479" starttime="20160126 14:02:57.477"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:02:57.484" starttime="20160126 14:02:57.481"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:02:57.488" starttime="20160126 14:02:57.485"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:02:57.492" starttime="20160126 14:02:57.489"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:02:57.496" starttime="20160126 14:02:57.493"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:02:57.500" starttime="20160126 14:02:57.498"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160126 14:02:57.506" level="INFO">Running with the following project properties set: [u'crceHost=10.105.125.159', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=232201667725900', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=43667725900', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160126 14:03:01.994" level="INFO">14:02:58,069 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/ext] for external libraries
14:02:58,070 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
14:02:59,659 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
14:02:59,679 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.125.159]
14:02:59,679 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
14:02:59,679 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
14:02:59,679 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [2]
14:02:59,679 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [232201667725900]
14:02:59,679 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [43667725900]
14:02:59,680 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
14:02:59,680 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
14:02:59,680 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
14:02:59,680 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
14:02:59,680 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
14:02:59,680 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
14:02:59,689 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
14:02:59,695 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
14:03:00,136 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
14:03:00,196 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
14:03:00,343 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:03:00,344 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
14:03:00,400 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:03:00,403 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:03:00,486 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:03:00,486 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:03:00,486 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:03:00,486 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
14:03:00,548 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
14:03:00,815 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
14:03:00,842 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
14:03:00,844 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:03:00,845 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:03:00,846 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
14:03:00,966 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:03:00,966 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:03:00,970 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:03:00,970 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:03:00,970 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:03:00,970 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
14:03:01,003 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
14:03:01,006 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
14:03:01,030 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
14:03:01,032 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:03:01,034 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:03:01,034 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
14:03:01,048 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:03:01,048 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:03:01,051 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:03:01,052 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:03:01,052 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:03:01,052 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
14:03:01,112 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
14:03:01,118 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
14:03:01,138 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
14:03:01,140 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:03:01,141 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:03:01,141 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
14:03:01,210 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:03:01,211 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:03:01,214 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:03:01,214 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:03:01,214 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:03:01,214 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
14:03:01,246 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
14:03:01,248 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
14:03:01,269 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
14:03:01,271 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:03:01,273 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:03:01,273 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
14:03:01,292 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:03:01,292 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:03:01,299 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:03:01,299 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:03:01,299 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:03:01,299 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
14:03:01,328 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
14:03:01,337 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
14:03:01,358 INFO  [SoapUITestCaseRunner] running step [setBalance]
14:03:01,359 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:03:01,361 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:03:01,361 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
14:03:01,411 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:03:01,411 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:03:01,417 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:03:01,417 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:03:01,417 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:03:01,417 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
14:03:01,452 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
14:03:01,459 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
14:03:01,492 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
14:03:01,536 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
14:03:01,539 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
14:03:01,540 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:03:01,542 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:03:01,542 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
14:03:01,555 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:03:01,555 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:03:01,567 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:03:01,567 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:03:01,568 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:03:01,568 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
14:03:01,568 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
14:03:01,585 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
14:03:01,585 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
14:03:01,587 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:03:01,589 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:03:01,589 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
14:03:01,692 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:03:01,692 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:03:01,698 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:03:01,699 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:03:01,699 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:03:01,699 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
14:03:01,699 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
14:03:01,705 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
14:03:01,706 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
14:03:01,709 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:03:01,711 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:03:01,711 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
14:03:01,722 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:03:01,722 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:03:01,727 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:03:01,727 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:03:01,728 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:03:01,728 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
14:03:01,728 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
14:03:01,738 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
14:03:01,739 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
14:03:01,741 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:03:01,743 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:03:01,743 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
14:03:01,835 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:03:01,835 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:03:01,838 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:03:01,838 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:03:01,838 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:03:01,838 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
14:03:01,839 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
14:03:01,841 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
14:03:01,841 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
14:03:01,843 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:03:01,844 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:03:01,844 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
14:03:01,877 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:03:01,878 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:03:01,883 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:03:01,883 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:03:01,883 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:03:01,883 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
14:03:01,883 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
14:03:01,893 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
14:03:01,893 INFO  [SoapUITestCaseRunner] running step [setBalance]
14:03:01,894 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:03:01,896 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:03:01,896 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
14:03:01,946 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:03:01,946 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:03:01,951 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:03:01,951 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:03:01,951 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:03:01,951 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
14:03:01,951 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
14:03:01,955 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
14:03:01,956 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
14:03:01,956 INFO  [SoapUITestCaseRunner] running step [finish_successful]
14:03:01,988 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
14:03:01,989 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 2252ms, status: FINISHED
14:03:01,989 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 2252ms</msg>
<status status="PASS" endtime="20160126 14:03:01.998" starttime="20160126 14:02:57.504"></status>
</kw>
<msg timestamp="20160126 14:03:02.003" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160126 14:03:02.004" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160126 14:03:02.001" starttime="20160126 14:02:57.502"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160126 14:03:02.027" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160126 14:03:02.026" starttime="20160126 14:03:02.023"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.032" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160126 14:03:02.031" starttime="20160126 14:03:02.029"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.036" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160126 14:03:02.036" starttime="20160126 14:03:02.034"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.044" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160126 14:03:02.050" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160126 14:03:02.051" starttime="20160126 14:03:02.041"></status>
</kw>
<msg timestamp="20160126 14:03:02.052" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160126 14:03:02.053" level="INFO">${return_log_entry} = 2016-01-26 14:03:01,988 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 14:03:02.052" starttime="20160126 14:03:02.038"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.069" starttime="20160126 14:03:02.066"></status>
</kw>
<msg timestamp="20160126 14:03:02.070" level="INFO">${return_log_entry} = 2016-01-26 14:03:01,988 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 14:03:02.070" starttime="20160126 14:03:02.055"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.079" starttime="20160126 14:03:02.077"></status>
</kw>
<msg timestamp="20160126 14:03:02.081" level="INFO">${return_log_entry} = 2016-01-26 14:03:01,988 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 14:03:02.080" starttime="20160126 14:03:02.072"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.093" starttime="20160126 14:03:02.090"></status>
</kw>
<msg timestamp="20160126 14:03:02.094" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 14:03:02.094" starttime="20160126 14:03:02.083"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.106" starttime="20160126 14:03:02.104"></status>
</kw>
<msg timestamp="20160126 14:03:02.108" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 14:03:02.107" starttime="20160126 14:03:02.096"></status>
</kw>
<msg timestamp="20160126 14:03:02.110" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 14:03:02.110" starttime="20160126 14:03:02.009"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.125" starttime="20160126 14:03:02.123"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.129" starttime="20160126 14:03:02.127"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.132" starttime="20160126 14:03:02.130"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160126 14:03:02.147" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160126 14:03:02.148" starttime="20160126 14:03:02.141"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:02.149" starttime="20160126 14:03:02.138"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:02.150" starttime="20160126 14:03:02.133"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:02.151" starttime="20160126 14:03:02.112"></status>
</kw>
<msg timestamp="20160126 14:03:02.153" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160126 14:03:02.152" starttime="20160126 14:02:57.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160126 14:03:02.157" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 14:03:02.158" starttime="20160126 14:03:02.155"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Prepaid (PrP) Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:02.161" level="INFO">Test Prepaid (PrP) Subscribers Created!</msg>
<status status="PASS" endtime="20160126 14:03:02.162" starttime="20160126 14:03:02.159"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:02.163" starttime="20160126 14:02:57.293"></status>
</kw>
<kw type="kw" name="Create Postpaid Subscriber">
<doc>Test will create two postpaid subscribers that will be used in tests below. Subscriber will be created with postpaid tariff plan</doc>
<arguments>
</arguments>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20160126 14:03:02.176" level="INFO">${INITIAL_BALANCE} = 0</msg>
<status status="PASS" endtime="20160126 14:03:02.175" starttime="20160126 14:03:02.174"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS PP IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}</arg>
<arg>POSTPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${POSTPAID TARIFF PLAN ID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.196" level="INFO">msg=crce_host=10.105.125.159</msg>
<status status="PASS" endtime="20160126 14:03:02.196" starttime="20160126 14:03:02.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.199" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160126 14:03:02.200" starttime="20160126 14:03:02.198"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.203" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160126 14:03:02.204" starttime="20160126 14:03:02.201"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.207" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160126 14:03:02.208" starttime="20160126 14:03:02.205"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.211" level="INFO">msg=imsiRangeStart=232201667725500</msg>
<status status="PASS" endtime="20160126 14:03:02.212" starttime="20160126 14:03:02.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.215" level="INFO">msg=msisdnRangeStart=43667725500</msg>
<status status="PASS" endtime="20160126 14:03:02.216" starttime="20160126 14:03:02.213"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.219" level="INFO">msg=type=POSTPAID</msg>
<status status="PASS" endtime="20160126 14:03:02.220" starttime="20160126 14:03:02.217"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.223" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160126 14:03:02.224" starttime="20160126 14:03:02.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.227" level="INFO">msg=tariffId=101005</msg>
<status status="PASS" endtime="20160126 14:03:02.228" starttime="20160126 14:03:02.225"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.231" level="INFO">msg=balance=0</msg>
<status status="PASS" endtime="20160126 14:03:02.231" starttime="20160126 14:03:02.229"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.247" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 14:03:02.248" starttime="20160126 14:03:02.245"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:02.249" starttime="20160126 14:03:02.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.256" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 14:03:02.257" starttime="20160126 14:03:02.254"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:02.258" starttime="20160126 14:03:02.251"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.264" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 14:03:02.265" starttime="20160126 14:03:02.262"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:02.266" starttime="20160126 14:03:02.259"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:02.267" starttime="20160126 14:03:02.234"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160126 14:03:02.271" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160126 14:03:02.272" starttime="20160126 14:03:02.268"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.275" starttime="20160126 14:03:02.273"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.278" starttime="20160126 14:03:02.276"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.282" starttime="20160126 14:03:02.279"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.284" starttime="20160126 14:03:02.283"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.287" starttime="20160126 14:03:02.286"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.291" starttime="20160126 14:03:02.289"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.294" starttime="20160126 14:03:02.292"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.298" starttime="20160126 14:03:02.295"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.301" starttime="20160126 14:03:02.299"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.304" starttime="20160126 14:03:02.302"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.308" starttime="20160126 14:03:02.306"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:02.311" starttime="20160126 14:03:02.309"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160126 14:03:02.316" level="INFO">Running with the following project properties set: [u'crceHost=10.105.125.159', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=232201667725900', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=43667725900', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.125.159', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=232201667725500', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=43667725500', u'HighLevelOps.createTestSubscribers.input.type=POSTPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101005', u'HighLevelOps.createTestSubscribers.input.balance=0']</msg>
<msg timestamp="20160126 14:03:03.930" level="INFO">14:03:03,928 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 14:03:03.931" starttime="20160126 14:03:02.314"></status>
</kw>
<msg timestamp="20160126 14:03:03.935" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160126 14:03:03.936" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160126 14:03:03.933" starttime="20160126 14:03:02.312"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160126 14:03:03.952" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160126 14:03:03.952" starttime="20160126 14:03:03.949"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160126 14:03:03.956" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160126 14:03:03.956" starttime="20160126 14:03:03.954"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160126 14:03:03.960" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160126 14:03:03.959" starttime="20160126 14:03:03.957"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160126 14:03:03.966" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160126 14:03:03.967" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160126 14:03:03.968" starttime="20160126 14:03:03.964"></status>
</kw>
<msg timestamp="20160126 14:03:03.970" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160126 14:03:03.970" level="INFO">${return_log_entry} = 2016-01-26 14:03:03,928 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 14:03:03.969" starttime="20160126 14:03:03.961"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:03.980" starttime="20160126 14:03:03.978"></status>
</kw>
<msg timestamp="20160126 14:03:03.982" level="INFO">${return_log_entry} = 2016-01-26 14:03:03,928 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 14:03:03.981" starttime="20160126 14:03:03.972"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:03.990" starttime="20160126 14:03:03.988"></status>
</kw>
<msg timestamp="20160126 14:03:03.992" level="INFO">${return_log_entry} = 2016-01-26 14:03:03,928 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 14:03:03.991" starttime="20160126 14:03:03.983"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:04.001" starttime="20160126 14:03:03.998"></status>
</kw>
<msg timestamp="20160126 14:03:04.004" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 14:03:04.003" starttime="20160126 14:03:03.993"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:04.015" starttime="20160126 14:03:04.013"></status>
</kw>
<msg timestamp="20160126 14:03:04.016" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 14:03:04.016" starttime="20160126 14:03:04.005"></status>
</kw>
<msg timestamp="20160126 14:03:04.019" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 14:03:04.018" starttime="20160126 14:03:03.939"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:04.032" starttime="20160126 14:03:04.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:04.035" starttime="20160126 14:03:04.033"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:04.039" starttime="20160126 14:03:04.037"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160126 14:03:04.049" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/mTel/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160126 14:03:04.050" starttime="20160126 14:03:04.047"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:04.051" starttime="20160126 14:03:04.045"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:04.052" starttime="20160126 14:03:04.040"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:04.053" starttime="20160126 14:03:04.021"></status>
</kw>
<msg timestamp="20160126 14:03:04.055" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160126 14:03:04.054" starttime="20160126 14:03:02.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160126 14:03:04.059" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 14:03:04.060" starttime="20160126 14:03:04.057"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Postpaid (PoP) Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:04.062" level="INFO">Test Postpaid (PoP) Subscribers Created!</msg>
<status status="PASS" endtime="20160126 14:03:04.063" starttime="20160126 14:03:04.061"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:04.064" starttime="20160126 14:03:02.164"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:04.066" starttime="20160126 14:02:55.713"></status>
</kw>
<test id="s1-t1" name="Test PrP USSD Start">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160126 14:03:04.098" level="INFO">/home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770</msg>
<status status="PASS" endtime="20160126 14:03:04.099" starttime="20160126 14:03:04.087"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:04.635" level="INFO">=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:04.638" level="INFO">${output} = =====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input...</msg>
<status status="PASS" endtime="20160126 14:03:04.637" starttime="20160126 14:03:04.100"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160126 14:03:04.643" level="INFO">USSD Start: =====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:04.643" starttime="20160126 14:03:04.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160126 14:03:06.648" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160126 14:03:06.649" starttime="20160126 14:03:04.645"></status>
</kw>
<msg timestamp="20160126 14:03:06.652" level="INFO">${output} = =====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input...</msg>
<status status="PASS" endtime="20160126 14:03:06.651" starttime="20160126 14:03:04.079"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Waehlen Sie:</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.656" starttime="20160126 14:03:06.654"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.669" starttime="20160126 14:03:06.667"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160126 14:03:06.671" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160126 14:03:06.714" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:06.715" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160126 14:03:06.715" starttime="20160126 14:03:06.670"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.719" starttime="20160126 14:03:06.717"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.721" starttime="20160126 14:03:06.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.724" starttime="20160126 14:03:06.722"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160126 14:03:06.728" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160126 14:03:06.795" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:06.796" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160126 14:03:06.797" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 14:03:06.796" starttime="20160126 14:03:06.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.803" starttime="20160126 14:03:06.798"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.805" starttime="20160126 14:03:06.804"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.808" starttime="20160126 14:03:06.806"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.811" starttime="20160126 14:03:06.809"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.815" starttime="20160126 14:03:06.813"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.818" starttime="20160126 14:03:06.816"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.821" starttime="20160126 14:03:06.819"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.824" starttime="20160126 14:03:06.822"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.827" starttime="20160126 14:03:06.825"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.829" starttime="20160126 14:03:06.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:06.832" starttime="20160126 14:03:06.830"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:06.833" starttime="20160126 14:03:06.658"></status>
</kw>
<doc>Simple test that checks if USSD menu can be started for prepaid subscriber
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160126 14:03:06.834" starttime="20160126 14:03:04.068"></status>
</test>
<test id="s1-t2" name="Test PrP USSD Check Balance">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160126 14:03:06.858" level="INFO">Killed</msg>
<status status="PASS" endtime="20160126 14:03:06.859" starttime="20160126 14:03:06.855"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:07.362" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:07.366" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160126 14:03:07.364" starttime="20160126 14:03:06.860"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160126 14:03:07.369" level="INFO">USSD Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:07.370" starttime="20160126 14:03:07.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160126 14:03:09.374" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160126 14:03:09.375" starttime="20160126 14:03:07.371"></status>
</kw>
<msg timestamp="20160126 14:03:09.378" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160126 14:03:09.377" starttime="20160126 14:03:06.848"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for checking balance</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:09.381" level="INFO">Pressing 2 for checking balance</msg>
<status status="PASS" endtime="20160126 14:03:09.382" starttime="20160126 14:03:09.379"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160126 14:03:09.387" level="INFO">2</msg>
<status status="PASS" endtime="20160126 14:03:09.387" starttime="20160126 14:03:09.383"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:09.447" level="INFO">=====================
Ihre Rechnung: 10,00 Euro laeuft am 26.03.2016 14:03 ab.
Mehr Informationen:
1. Geldabrechnung
2. Minuten
3. Daten
4. SMS
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:09.449" level="INFO">${output} = =====================
Ihre Rechnung: 10,00 Euro laeuft am 26.03.2016 14:03 ab.
Mehr Informationen:
1. Geldabrechnung
2. Minuten
3. Daten
4. SMS
* Zurueck
# Ausgang 
===================...</msg>
<status status="PASS" endtime="20160126 14:03:09.448" starttime="20160126 14:03:09.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Ihre Rechnung: 10,00 Euro</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.452" starttime="20160126 14:03:09.450"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.464" starttime="20160126 14:03:09.462"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160126 14:03:09.466" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160126 14:03:09.506" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:09.507" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160126 14:03:09.507" starttime="20160126 14:03:09.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.510" starttime="20160126 14:03:09.508"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.512" starttime="20160126 14:03:09.511"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.515" starttime="20160126 14:03:09.513"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160126 14:03:09.518" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160126 14:03:09.585" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:09.587" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160126 14:03:09.587" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 14:03:09.586" starttime="20160126 14:03:09.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.593" starttime="20160126 14:03:09.588"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.595" starttime="20160126 14:03:09.594"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.598" starttime="20160126 14:03:09.596"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.601" starttime="20160126 14:03:09.599"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.603" starttime="20160126 14:03:09.602"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.606" starttime="20160126 14:03:09.604"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.609" starttime="20160126 14:03:09.607"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.612" starttime="20160126 14:03:09.610"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.615" starttime="20160126 14:03:09.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.617" starttime="20160126 14:03:09.616"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:09.620" starttime="20160126 14:03:09.618"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:09.621" starttime="20160126 14:03:09.454"></status>
</kw>
<doc>Basic test for balance check. Expected value is set with the default test automation subscriber
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160126 14:03:09.622" starttime="20160126 14:03:06.837"></status>
</test>
<test id="s1-t3" name="Test PoP USSD Check Balance">
<kw type="kw" name="${output} = USSD Postpaid Start">
<doc>Keyword for starting the postpaid subscriber's USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS PP MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160126 14:03:09.647" level="INFO">Killed</msg>
<status status="PASS" endtime="20160126 14:03:09.647" starttime="20160126 14:03:09.643"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:10.159" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarife
3 Weitere Services
4 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:10.163" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarif...</msg>
<status status="PASS" endtime="20160126 14:03:10.161" starttime="20160126 14:03:09.648"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Postpaid Start: ${output}</arg>
</arguments>
<msg timestamp="20160126 14:03:10.166" level="INFO">USSD Postpaid Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarife
3 Weitere Services
4 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:10.167" starttime="20160126 14:03:10.164"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160126 14:03:12.169" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160126 14:03:12.170" starttime="20160126 14:03:10.168"></status>
</kw>
<msg timestamp="20160126 14:03:12.173" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarif...</msg>
<status status="PASS" endtime="20160126 14:03:12.172" starttime="20160126 14:03:09.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for checking balance</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:12.176" level="INFO">Pressing 1 for checking balance</msg>
<status status="PASS" endtime="20160126 14:03:12.177" starttime="20160126 14:03:12.174"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160126 14:03:12.182" level="INFO">1</msg>
<status status="PASS" endtime="20160126 14:03:12.183" starttime="20160126 14:03:12.178"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:12.272" level="INFO">=====================
Ihr anfallendes Entgelt im aktuellen Zeitraum beträgt €0,00, exkl. Monatsentgelt, exkl. MwSt..
Mehr Informationen:
1. Geldabrechnung
2. Minuten
3. Daten
4. SMS
* Zurück
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:12.274" level="INFO">${output} = =====================
Ihr anfallendes Entgelt im aktuellen Zeitraum beträgt €0,00, exkl. Monatsentgelt, exkl. MwSt..
Mehr Informationen:
1. Geldabrechnung
2. Minuten
3. Daten
4. SMS
* Zur...</msg>
<status status="PASS" endtime="20160126 14:03:12.273" starttime="20160126 14:03:12.184"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for checking monetary debt</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:12.276" level="INFO">Pressing 1 for checking monetary debt</msg>
<status status="PASS" endtime="20160126 14:03:12.277" starttime="20160126 14:03:12.275"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160126 14:03:12.281" level="INFO">1</msg>
<status status="PASS" endtime="20160126 14:03:12.282" starttime="20160126 14:03:12.278"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:12.343" level="INFO">=====================
Es tut uns leid, Sie haben keine Euro uebrig.
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:12.346" level="INFO">${output} = =====================
Es tut uns leid, Sie haben keine Euro uebrig.
* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:12.345" starttime="20160126 14:03:12.283"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Es tut uns leid, Sie haben keine Euro uebrig</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.349" starttime="20160126 14:03:12.347"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.359" starttime="20160126 14:03:12.358"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160126 14:03:12.362" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160126 14:03:12.424" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:12.425" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160126 14:03:12.425" starttime="20160126 14:03:12.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.428" starttime="20160126 14:03:12.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.430" starttime="20160126 14:03:12.429"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.432" starttime="20160126 14:03:12.431"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160126 14:03:12.436" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160126 14:03:12.502" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:12.503" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160126 14:03:12.503" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 14:03:12.502" starttime="20160126 14:03:12.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.508" starttime="20160126 14:03:12.504"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.511" starttime="20160126 14:03:12.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.513" starttime="20160126 14:03:12.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.516" starttime="20160126 14:03:12.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.518" starttime="20160126 14:03:12.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.521" starttime="20160126 14:03:12.519"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.524" starttime="20160126 14:03:12.522"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.526" starttime="20160126 14:03:12.524"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.528" starttime="20160126 14:03:12.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.531" starttime="20160126 14:03:12.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:12.533" starttime="20160126 14:03:12.531"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:12.534" starttime="20160126 14:03:12.351"></status>
</kw>
<doc>Basic test for postpaid consumption check. After creation subscriber's cumsumption is 0
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160126 14:03:12.535" starttime="20160126 14:03:09.624"></status>
</test>
<test id="s1-t4" name="Test PrP USSD Subscription Check">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160126 14:03:12.557" level="INFO">Killed</msg>
<status status="PASS" endtime="20160126 14:03:12.558" starttime="20160126 14:03:12.554"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:12.918" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:12.923" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160126 14:03:12.921" starttime="20160126 14:03:12.559"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160126 14:03:12.927" level="INFO">USSD Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:12.928" starttime="20160126 14:03:12.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160126 14:03:14.932" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160126 14:03:14.934" starttime="20160126 14:03:12.929"></status>
</kw>
<msg timestamp="20160126 14:03:14.936" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160126 14:03:14.935" starttime="20160126 14:03:12.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for subscription menu</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:14.939" level="INFO">Pressing 3 for subscription menu</msg>
<status status="PASS" endtime="20160126 14:03:14.939" starttime="20160126 14:03:14.937"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20160126 14:03:14.945" level="INFO">3</msg>
<status status="PASS" endtime="20160126 14:03:14.945" starttime="20160126 14:03:14.940"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:14.961" level="INFO">=====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:14.962" level="INFO">${output} = =====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
============...</msg>
<status status="PASS" endtime="20160126 14:03:14.962" starttime="20160126 14:03:14.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for subscription check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:14.964" level="INFO">Pressing 1 for subscription check</msg>
<status status="PASS" endtime="20160126 14:03:14.965" starttime="20160126 14:03:14.963"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160126 14:03:14.969" level="INFO">1</msg>
<status status="PASS" endtime="20160126 14:03:14.970" starttime="20160126 14:03:14.966"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:15.065" level="INFO">=====================
Sie sind im Grundtarif. 
0 Anfangsmenu
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:15.068" level="INFO">${output} = =====================
Sie sind im Grundtarif. 
0 Anfangsmenu
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:15.067" starttime="20160126 14:03:14.971"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Sie sind im Grundtarif.</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.070" starttime="20160126 14:03:15.069"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.081" starttime="20160126 14:03:15.079"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160126 14:03:15.083" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160126 14:03:15.129" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:15.130" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160126 14:03:15.130" starttime="20160126 14:03:15.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.132" starttime="20160126 14:03:15.131"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.135" starttime="20160126 14:03:15.133"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.137" starttime="20160126 14:03:15.135"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160126 14:03:15.140" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160126 14:03:15.215" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:15.216" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160126 14:03:15.216" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 14:03:15.215" starttime="20160126 14:03:15.138"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.221" starttime="20160126 14:03:15.217"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.224" starttime="20160126 14:03:15.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.228" starttime="20160126 14:03:15.224"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.230" starttime="20160126 14:03:15.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.232" starttime="20160126 14:03:15.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.235" starttime="20160126 14:03:15.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.238" starttime="20160126 14:03:15.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.240" starttime="20160126 14:03:15.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.243" starttime="20160126 14:03:15.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.245" starttime="20160126 14:03:15.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:15.247" starttime="20160126 14:03:15.246"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:15.248" starttime="20160126 14:03:15.072"></status>
</kw>
<doc>Menu entry for checking the subscriptions, if any subscription is active for subscriber it will be listed here. By default subscribers
have default (basic) tariff active</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160126 14:03:15.249" starttime="20160126 14:03:12.537"></status>
</test>
<test id="s1-t5" name="Test PoP USSD Subscription Check">
<kw type="kw" name="${output} = USSD Postpaid Start">
<doc>Keyword for starting the postpaid subscriber's USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS PP MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160126 14:03:15.271" level="INFO">Killed</msg>
<status status="PASS" endtime="20160126 14:03:15.271" starttime="20160126 14:03:15.268"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:15.667" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarife
3 Weitere Services
4 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:15.670" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarif...</msg>
<status status="PASS" endtime="20160126 14:03:15.669" starttime="20160126 14:03:15.272"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Postpaid Start: ${output}</arg>
</arguments>
<msg timestamp="20160126 14:03:15.673" level="INFO">USSD Postpaid Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarife
3 Weitere Services
4 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:15.674" starttime="20160126 14:03:15.671"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160126 14:03:17.678" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160126 14:03:17.679" starttime="20160126 14:03:15.675"></status>
</kw>
<msg timestamp="20160126 14:03:17.682" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarif...</msg>
<status status="PASS" endtime="20160126 14:03:17.681" starttime="20160126 14:03:15.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for subscription menu</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:17.684" level="INFO">Pressing 2 for subscription menu</msg>
<status status="PASS" endtime="20160126 14:03:17.685" starttime="20160126 14:03:17.683"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160126 14:03:17.689" level="INFO">2</msg>
<status status="PASS" endtime="20160126 14:03:17.690" starttime="20160126 14:03:17.686"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:17.706" level="INFO">=====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:17.707" level="INFO">${output} = =====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
============...</msg>
<status status="PASS" endtime="20160126 14:03:17.707" starttime="20160126 14:03:17.691"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for subscription check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:17.710" level="INFO">Pressing 1 for subscription check</msg>
<status status="PASS" endtime="20160126 14:03:17.710" starttime="20160126 14:03:17.708"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160126 14:03:17.714" level="INFO">1</msg>
<status status="PASS" endtime="20160126 14:03:17.715" starttime="20160126 14:03:17.711"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:17.830" level="INFO">=====================
Ihr Plan Postpaid tarifni plan 1 wird am 01.02.2016 00:00 erneuert und wird 24,92 Euro kosten. 
Auswahl:
1. Guthabenstatus
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:17.832" level="INFO">${output} = =====================
Ihr Plan Postpaid tarifni plan 1 wird am 01.02.2016 00:00 erneuert und wird 24,92 Euro kosten. 
Auswahl:
1. Guthabenstatus
* Zurueck
# Ausgang 
=====================
U...</msg>
<status status="PASS" endtime="20160126 14:03:17.831" starttime="20160126 14:03:17.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Ihr Plan Postpaid tarifni plan 1 wird am</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:17.835" starttime="20160126 14:03:17.833"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:17.845" starttime="20160126 14:03:17.844"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160126 14:03:17.847" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160126 14:03:17.900" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:17.901" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160126 14:03:17.901" starttime="20160126 14:03:17.846"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:17.903" starttime="20160126 14:03:17.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:17.906" starttime="20160126 14:03:17.904"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:17.908" starttime="20160126 14:03:17.906"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160126 14:03:17.911" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160126 14:03:17.981" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:17.982" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160126 14:03:17.982" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 14:03:17.981" starttime="20160126 14:03:17.909"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:17.988" starttime="20160126 14:03:17.983"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:17.990" starttime="20160126 14:03:17.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:17.992" starttime="20160126 14:03:17.991"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:17.994" starttime="20160126 14:03:17.993"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:17.997" starttime="20160126 14:03:17.995"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:17.999" starttime="20160126 14:03:17.997"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:18.002" starttime="20160126 14:03:18.000"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:18.004" starttime="20160126 14:03:18.003"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:18.007" starttime="20160126 14:03:18.005"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:18.009" starttime="20160126 14:03:18.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:18.011" starttime="20160126 14:03:18.010"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:18.012" starttime="20160126 14:03:17.837"></status>
</kw>
<doc>Menu entry for checking the subscriptions (tariff, plan), subscriber's active subscription will be listed here</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160126 14:03:18.014" starttime="20160126 14:03:15.251"></status>
</test>
<test id="s1-t6" name="Test PrP Buying">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160126 14:03:18.036" level="INFO">Killed</msg>
<status status="PASS" endtime="20160126 14:03:18.036" starttime="20160126 14:03:18.033"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:18.487" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:18.489" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160126 14:03:18.488" starttime="20160126 14:03:18.037"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160126 14:03:18.493" level="INFO">USSD Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:18.494" starttime="20160126 14:03:18.490"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160126 14:03:20.496" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160126 14:03:20.497" starttime="20160126 14:03:18.495"></status>
</kw>
<msg timestamp="20160126 14:03:20.500" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160126 14:03:20.499" starttime="20160126 14:03:18.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for subscription menu</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:20.503" level="INFO">Pressing 3 for subscription menu</msg>
<status status="PASS" endtime="20160126 14:03:20.503" starttime="20160126 14:03:20.501"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20160126 14:03:20.525" level="INFO">3</msg>
<status status="PASS" endtime="20160126 14:03:20.526" starttime="20160126 14:03:20.504"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:20.531" level="INFO">=====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:20.532" level="INFO">${output} = =====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
============...</msg>
<status status="PASS" endtime="20160126 14:03:20.531" starttime="20160126 14:03:20.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for options management</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:20.534" level="INFO">Pressing 2 for options management</msg>
<status status="PASS" endtime="20160126 14:03:20.535" starttime="20160126 14:03:20.533"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160126 14:03:20.550" level="INFO">2</msg>
<status status="PASS" endtime="20160126 14:03:20.551" starttime="20160126 14:03:20.536"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:20.705" level="INFO">=====================
Auswahl:
1. Plan aktivieren
2. Option aktivieren
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:20.707" level="INFO">${output} = =====================
Auswahl:
1. Plan aktivieren
2. Option aktivieren
* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:20.707" starttime="20160126 14:03:20.552"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for buying the option</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:20.710" level="INFO">Pressing 2 for buying the option</msg>
<status status="PASS" endtime="20160126 14:03:20.711" starttime="20160126 14:03:20.709"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160126 14:03:20.716" level="INFO">2</msg>
<status status="PASS" endtime="20160126 14:03:20.717" starttime="20160126 14:03:20.712"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:20.888" level="INFO">=====================
Auswahl:
1. Kauf der einmaligen Option
2. Kauf der erneuerbaren Option
0 Anfangsmenu
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:20.889" level="INFO">${output} = =====================
Auswahl:
1. Kauf der einmaligen Option
2. Kauf der erneuerbaren Option
0 Anfangsmenu
* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:20.889" starttime="20160126 14:03:20.718"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for one-off bundle</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:20.892" level="INFO">Pressing 1 for one-off bundle</msg>
<status status="PASS" endtime="20160126 14:03:20.892" starttime="20160126 14:03:20.890"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160126 14:03:20.899" level="INFO">1</msg>
<status status="PASS" endtime="20160126 14:03:20.900" starttime="20160126 14:03:20.893"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:20.916" level="INFO">=====================
Auswahl:
1. Data Bundles
2. Test Bundles

* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:20.917" level="INFO">${output} = =====================
Auswahl:
1. Data Bundles
2. Test Bundles

* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:20.916" starttime="20160126 14:03:20.901"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for available bundles list</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:20.919" level="INFO">Pressing 1 for available bundles list</msg>
<status status="PASS" endtime="20160126 14:03:20.920" starttime="20160126 14:03:20.918"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160126 14:03:20.926" level="INFO">1</msg>
<status status="PASS" endtime="20160126 14:03:20.927" starttime="20160126 14:03:20.921"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:20.995" level="INFO">=====================
Optionswahl:
1. Super Net 5,00 Euro
2. DataBundle100MB 1,00 Euro
3. DataUnlimited 1,00 Euro
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:20.996" level="INFO">${output} = =====================
Optionswahl:
1. Super Net 5,00 Euro
2. DataBundle100MB 1,00 Euro
3. DataUnlimited 1,00 Euro
* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:20.995" starttime="20160126 14:03:20.928"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for selecting the bundle</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:20.999" level="INFO">Pressing 1 for selecting the bundle</msg>
<status status="PASS" endtime="20160126 14:03:20.999" starttime="20160126 14:03:20.997"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160126 14:03:21.019" level="INFO">1</msg>
<status status="PASS" endtime="20160126 14:03:21.021" starttime="20160126 14:03:21.001"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:21.085" level="INFO">=====================
Sie moechten Super Net fuer den Preis von 5,00 Euro und mit einer Gueltigkeitsfrist von 15 DAYS(n) kaufen. 
Auswahl:
1. Bestaetigung
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:21.087" level="INFO">${output} = =====================
Sie moechten Super Net fuer den Preis von 5,00 Euro und mit einer Gueltigkeitsfrist von 15 DAYS(n) kaufen. 
Auswahl:
1. Bestaetigung
* Zurueck
# Ausgang 
==============...</msg>
<status status="PASS" endtime="20160126 14:03:21.086" starttime="20160126 14:03:21.022"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Sie moechten Super Net fuer den Preis von 5,00 Euro</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.102" starttime="20160126 14:03:21.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 to select</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:21.105" level="INFO">Pressing 1 to select</msg>
<status status="PASS" endtime="20160126 14:03:21.106" starttime="20160126 14:03:21.104"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160126 14:03:21.112" level="INFO">1</msg>
<status status="PASS" endtime="20160126 14:03:21.113" starttime="20160126 14:03:21.107"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:21.256" level="INFO">=====================
Super Net wurde erfolgreich fuer den Preis von 5,00 Euro gekauft.
Auswahl:
1. Weitere Option
0 Anfangsmenu
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:21.257" level="INFO">${output} = =====================
Super Net wurde erfolgreich fuer den Preis von 5,00 Euro gekauft.
Auswahl:
1. Weitere Option
0 Anfangsmenu
* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:21.257" starttime="20160126 14:03:21.114"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Super Net wurde erfolgreich fuer den Preis von 5,00 Euro gekauft</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.260" starttime="20160126 14:03:21.258"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.271" starttime="20160126 14:03:21.269"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160126 14:03:21.273" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160126 14:03:21.321" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:21.322" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160126 14:03:21.321" starttime="20160126 14:03:21.272"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.324" starttime="20160126 14:03:21.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.327" starttime="20160126 14:03:21.325"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.329" starttime="20160126 14:03:21.327"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160126 14:03:21.333" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160126 14:03:21.399" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:21.400" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160126 14:03:21.400" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 14:03:21.399" starttime="20160126 14:03:21.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.406" starttime="20160126 14:03:21.401"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.408" starttime="20160126 14:03:21.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.410" starttime="20160126 14:03:21.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.413" starttime="20160126 14:03:21.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.415" starttime="20160126 14:03:21.413"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.417" starttime="20160126 14:03:21.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.420" starttime="20160126 14:03:21.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.423" starttime="20160126 14:03:21.421"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.425" starttime="20160126 14:03:21.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.427" starttime="20160126 14:03:21.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:21.429" starttime="20160126 14:03:21.428"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:21.430" starttime="20160126 14:03:21.262"></status>
</kw>
<doc>Activating bundle from the USSD menu. Precondition is that there is enaugh balance in account. Subscriber will buy a bundle for 5 EUR and in
balance there is 10 EUR. So activation should be OK</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160126 14:03:21.431" starttime="20160126 14:03:18.016"></status>
</test>
<test id="s1-t7" name="Test PoP Buying">
<kw type="kw" name="${output} = USSD Postpaid Start">
<doc>Keyword for starting the postpaid subscriber's USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS PP MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160126 14:03:21.451" level="INFO">Killed</msg>
<status status="PASS" endtime="20160126 14:03:21.451" starttime="20160126 14:03:21.448"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:21.970" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarife
3 Weitere Services
4 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:21.972" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarif...</msg>
<status status="PASS" endtime="20160126 14:03:21.971" starttime="20160126 14:03:21.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Postpaid Start: ${output}</arg>
</arguments>
<msg timestamp="20160126 14:03:21.975" level="INFO">USSD Postpaid Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarife
3 Weitere Services
4 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:21.976" starttime="20160126 14:03:21.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160126 14:03:23.979" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160126 14:03:23.980" starttime="20160126 14:03:21.976"></status>
</kw>
<msg timestamp="20160126 14:03:23.983" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarif...</msg>
<status status="PASS" endtime="20160126 14:03:23.982" starttime="20160126 14:03:21.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for subscription menu</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:23.985" level="INFO">Pressing 2 for subscription menu</msg>
<status status="PASS" endtime="20160126 14:03:23.986" starttime="20160126 14:03:23.984"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160126 14:03:23.991" level="INFO">2</msg>
<status status="PASS" endtime="20160126 14:03:23.991" starttime="20160126 14:03:23.987"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:24.007" level="INFO">=====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:24.009" level="INFO">${output} = =====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
============...</msg>
<status status="PASS" endtime="20160126 14:03:24.008" starttime="20160126 14:03:23.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for offers list</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:24.011" level="INFO">Pressing 3 for offers list</msg>
<status status="PASS" endtime="20160126 14:03:24.012" starttime="20160126 14:03:24.010"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20160126 14:03:24.016" level="INFO">3</msg>
<status status="PASS" endtime="20160126 14:03:24.017" starttime="20160126 14:03:24.013"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:24.107" level="INFO">=====================
Auswahl: 
1. Plaene
2. Optionen
 
* Anfangsmenue
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:24.109" level="INFO">${output} = =====================
Auswahl: 
1. Plaene
2. Optionen
 
* Anfangsmenue
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:24.108" starttime="20160126 14:03:24.018"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for buying the option</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:24.112" level="INFO">Pressing 2 for buying the option</msg>
<status status="PASS" endtime="20160126 14:03:24.113" starttime="20160126 14:03:24.110"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160126 14:03:24.116" level="INFO">2</msg>
<status status="PASS" endtime="20160126 14:03:24.117" starttime="20160126 14:03:24.113"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:24.269" level="INFO">=====================
Auswahl: 
1. Data Bundles
2. Data Bundles
3. Roaming Bundles
4. Test Bundles

* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:24.271" level="INFO">${output} = =====================
Auswahl: 
1. Data Bundles
2. Data Bundles
3. Roaming Bundles
4. Test Bundles

* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:24.270" starttime="20160126 14:03:24.118"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for one-off bundle</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:24.273" level="INFO">Pressing 1 for one-off bundle</msg>
<status status="PASS" endtime="20160126 14:03:24.274" starttime="20160126 14:03:24.272"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160126 14:03:24.278" level="INFO">1</msg>
<status status="PASS" endtime="20160126 14:03:24.279" starttime="20160126 14:03:24.275"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:24.330" level="INFO">=====================
Fuer die Informationen ueber die Optionen waehlen Sie:
1. Tarifni dodatak 1 4,17 Euro
2. testbundle 2,00 Euro
3. 2nd periodic bundle 3,00 Euro
4. DataBundle100MB 1,00 Euro

0 Naechste Seite
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:24.331" level="INFO">${output} = =====================
Fuer die Informationen ueber die Optionen waehlen Sie:
1. Tarifni dodatak 1 4,17 Euro
2. testbundle 2,00 Euro
3. 2nd periodic bundle 3,00 Euro
4. DataBundle100MB 1,00 Euro...</msg>
<status status="PASS" endtime="20160126 14:03:24.331" starttime="20160126 14:03:24.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for selecting the bundle</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:24.334" level="INFO">Pressing 1 for selecting the bundle</msg>
<status status="PASS" endtime="20160126 14:03:24.335" starttime="20160126 14:03:24.332"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160126 14:03:24.339" level="INFO">1</msg>
<status status="PASS" endtime="20160126 14:03:24.340" starttime="20160126 14:03:24.336"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:24.367" level="INFO">=====================
Tarifni dodatak 1 ist gueltig bis 30 Tage und kostet 4,17 Euro. Die Option enthaelt
0,98 MB Data
Eingeben
1. Tarifni dodatak 1 kaufen
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:24.368" level="INFO">${output} = =====================
Tarifni dodatak 1 ist gueltig bis 30 Tage und kostet 4,17 Euro. Die Option enthaelt
0,98 MB Data
Eingeben
1. Tarifni dodatak 1 kaufen
* Zurueck
# Ausgang 
===========...</msg>
<status status="PASS" endtime="20160126 14:03:24.368" starttime="20160126 14:03:24.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for info</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:24.371" level="INFO">Pressing 1 for info</msg>
<status status="PASS" endtime="20160126 14:03:24.372" starttime="20160126 14:03:24.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Tarifni dodatak 1 ist gueltig bis 30 Tage und kostet 4,17 Euro</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.374" starttime="20160126 14:03:24.373"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160126 14:03:24.378" level="INFO">1</msg>
<status status="PASS" endtime="20160126 14:03:24.379" starttime="20160126 14:03:24.375"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:24.449" level="INFO">=====================
Sie moechten Tarifni dodatak 1 fuer den Preis von 4,17 Euro und mit einer Gueltigkeitsfrist von 30 DAYS(n) kaufen. 
Auswahl:
1. Bestaetigung
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:24.451" level="INFO">${output} = =====================
Sie moechten Tarifni dodatak 1 fuer den Preis von 4,17 Euro und mit einer Gueltigkeitsfrist von 30 DAYS(n) kaufen. 
Auswahl:
1. Bestaetigung
* Zurueck
# Ausgang 
======...</msg>
<status status="PASS" endtime="20160126 14:03:24.451" starttime="20160126 14:03:24.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 to select</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:24.454" level="INFO">Pressing 1 to select</msg>
<status status="PASS" endtime="20160126 14:03:24.455" starttime="20160126 14:03:24.453"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160126 14:03:24.459" level="INFO">1</msg>
<status status="PASS" endtime="20160126 14:03:24.460" starttime="20160126 14:03:24.456"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:24.584" level="INFO">=====================
Tarifni dodatak 1 wurde erfolgreich fuer den Preis von 4,17 Euro gekauft.
Auswahl:
1. Weitere Option
0 Anfangsmenu
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:24.586" level="INFO">${output} = =====================
Tarifni dodatak 1 wurde erfolgreich fuer den Preis von 4,17 Euro gekauft.
Auswahl:
1. Weitere Option
0 Anfangsmenu
* Zurueck
# Ausgang 
=====================
User in...</msg>
<status status="PASS" endtime="20160126 14:03:24.585" starttime="20160126 14:03:24.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Tarifni dodatak 1 wurde erfolgreich fuer den Preis von 4,17 Euro gekauft.</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.589" starttime="20160126 14:03:24.587"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.599" starttime="20160126 14:03:24.597"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160126 14:03:24.601" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160126 14:03:24.644" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:24.645" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160126 14:03:24.645" starttime="20160126 14:03:24.599"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.648" starttime="20160126 14:03:24.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.650" starttime="20160126 14:03:24.648"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.652" starttime="20160126 14:03:24.651"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160126 14:03:24.655" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160126 14:03:24.722" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:24.724" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160126 14:03:24.724" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 14:03:24.723" starttime="20160126 14:03:24.653"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.730" starttime="20160126 14:03:24.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.732" starttime="20160126 14:03:24.730"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.734" starttime="20160126 14:03:24.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.736" starttime="20160126 14:03:24.735"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.738" starttime="20160126 14:03:24.737"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.741" starttime="20160126 14:03:24.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.744" starttime="20160126 14:03:24.742"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.746" starttime="20160126 14:03:24.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.748" starttime="20160126 14:03:24.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.750" starttime="20160126 14:03:24.749"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:24.752" starttime="20160126 14:03:24.751"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:24.753" starttime="20160126 14:03:24.590"></status>
</kw>
<doc>Activating bundle from the USSD menu.</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160126 14:03:24.754" starttime="20160126 14:03:21.434"></status>
</test>
<test id="s1-t8" name="Test PrP What Is My Number">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160126 14:03:24.774" level="INFO">Killed</msg>
<status status="PASS" endtime="20160126 14:03:24.774" starttime="20160126 14:03:24.771"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:25.313" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:25.317" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160126 14:03:25.315" starttime="20160126 14:03:24.775"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160126 14:03:25.319" level="INFO">USSD Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:25.320" starttime="20160126 14:03:25.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160126 14:03:27.323" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160126 14:03:27.326" starttime="20160126 14:03:25.320"></status>
</kw>
<msg timestamp="20160126 14:03:27.331" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160126 14:03:27.330" starttime="20160126 14:03:24.765"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 4 for other services</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:27.336" level="INFO">Pressing 4 for other services</msg>
<status status="PASS" endtime="20160126 14:03:27.337" starttime="20160126 14:03:27.333"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20160126 14:03:27.343" level="INFO">4</msg>
<status status="PASS" endtime="20160126 14:03:27.344" starttime="20160126 14:03:27.338"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:27.360" level="INFO">=====================
Waehlen Sie:
1. Ruf mich zurueck
2. Eigene Rufnummer anzeigen
Druecken Sie *, um einen Schritt zurueck zu gehen oder #, um zu beenden. 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:27.362" level="INFO">${output} = =====================
Waehlen Sie:
1. Ruf mich zurueck
2. Eigene Rufnummer anzeigen
Druecken Sie *, um einen Schritt zurueck zu gehen oder #, um zu beenden. 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:27.361" starttime="20160126 14:03:27.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for what is my number service</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:27.366" level="INFO">Pressing 2 for what is my number service</msg>
<status status="PASS" endtime="20160126 14:03:27.367" starttime="20160126 14:03:27.364"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160126 14:03:27.375" level="INFO">2</msg>
<status status="PASS" endtime="20160126 14:03:27.376" starttime="20160126 14:03:27.369"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:27.397" level="INFO">=====================
Ihre Nummer lautet:
43667725900
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:27.399" level="INFO">${output} = =====================
Ihre Nummer lautet:
43667725900
* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:27.398" starttime="20160126 14:03:27.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.406" starttime="20160126 14:03:27.401"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.426" starttime="20160126 14:03:27.423"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160126 14:03:27.434" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160126 14:03:27.480" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:27.483" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160126 14:03:27.481" starttime="20160126 14:03:27.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.488" starttime="20160126 14:03:27.485"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.492" starttime="20160126 14:03:27.489"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.497" starttime="20160126 14:03:27.494"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160126 14:03:27.503" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160126 14:03:27.560" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:27.561" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160126 14:03:27.562" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 14:03:27.561" starttime="20160126 14:03:27.499"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.566" starttime="20160126 14:03:27.562"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.568" starttime="20160126 14:03:27.567"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.571" starttime="20160126 14:03:27.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.573" starttime="20160126 14:03:27.571"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.575" starttime="20160126 14:03:27.573"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.577" starttime="20160126 14:03:27.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.579" starttime="20160126 14:03:27.578"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.581" starttime="20160126 14:03:27.580"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.584" starttime="20160126 14:03:27.582"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.586" starttime="20160126 14:03:27.584"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:27.587" starttime="20160126 14:03:27.586"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:27.588" starttime="20160126 14:03:27.409"></status>
</kw>
<doc>Default service offered in USSD menu under "other services". Menu returns subscriber's MSISDN
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160126 14:03:27.589" starttime="20160126 14:03:24.756"></status>
</test>
<test id="s1-t9" name="Test PrP Call Me Back">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160126 14:03:27.609" level="INFO">Killed</msg>
<status status="PASS" endtime="20160126 14:03:27.609" starttime="20160126 14:03:27.606"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:28.076" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:28.079" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160126 14:03:28.077" starttime="20160126 14:03:27.610"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160126 14:03:28.081" level="INFO">USSD Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:28.082" starttime="20160126 14:03:28.080"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160126 14:03:30.084" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160126 14:03:30.085" starttime="20160126 14:03:28.083"></status>
</kw>
<msg timestamp="20160126 14:03:30.088" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160126 14:03:30.087" starttime="20160126 14:03:27.601"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 4 for other services</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:30.090" level="INFO">Pressing 4 for other services</msg>
<status status="PASS" endtime="20160126 14:03:30.091" starttime="20160126 14:03:30.089"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20160126 14:03:30.096" level="INFO">4</msg>
<status status="PASS" endtime="20160126 14:03:30.096" starttime="20160126 14:03:30.091"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:30.113" level="INFO">=====================
Waehlen Sie:
1. Ruf mich zurueck
2. Eigene Rufnummer anzeigen
Druecken Sie *, um einen Schritt zurueck zu gehen oder #, um zu beenden. 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:30.114" level="INFO">${output} = =====================
Waehlen Sie:
1. Ruf mich zurueck
2. Eigene Rufnummer anzeigen
Druecken Sie *, um einen Schritt zurueck zu gehen oder #, um zu beenden. 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:30.114" starttime="20160126 14:03:30.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for call me back service</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:30.116" level="INFO">Pressing 1 for call me back service</msg>
<status status="PASS" endtime="20160126 14:03:30.117" starttime="20160126 14:03:30.115"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160126 14:03:30.121" level="INFO">1</msg>
<status status="PASS" endtime="20160126 14:03:30.122" starttime="20160126 14:03:30.118"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:30.159" level="INFO">=====================
Bitte geben Sie die Rufnummer an, von der Sie angerufen werden moechten.  
Verwenden Sie das Format
06671234567 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:30.160" level="INFO">${output} = =====================
Bitte geben Sie die Rufnummer an, von der Sie angerufen werden moechten.  
Verwenden Sie das Format
06671234567 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:30.160" starttime="20160126 14:03:30.123"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Entering the mobile number</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:30.163" level="INFO">Entering the mobile number</msg>
<status status="PASS" endtime="20160126 14:03:30.163" starttime="20160126 14:03:30.161"></status>
</kw>
<kw type="kw" name="${recipient} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160126 14:03:30.169" level="INFO">${recipient} = 43667725901</msg>
<status status="PASS" endtime="20160126 14:03:30.169" starttime="20160126 14:03:30.164"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${recipient}</arg>
</arguments>
<msg timestamp="20160126 14:03:30.175" level="INFO">43667725901</msg>
<status status="PASS" endtime="20160126 14:03:30.175" starttime="20160126 14:03:30.170"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:30.249" level="INFO">=====================
Eine SMS wurde an die Nummer 667725901 verschickt.
Sie nutzten 1 von 3 Moglichkeiten pro Tag. 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:30.251" level="INFO">${output} = =====================
Eine SMS wurde an die Nummer 667725901 verschickt.
Sie nutzten 1 von 3 Moglichkeiten pro Tag. 
=====================
User input:</msg>
<status status="PASS" endtime="20160126 14:03:30.251" starttime="20160126 14:03:30.176"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Eine SMS wurde an die Nummer</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.254" starttime="20160126 14:03:30.252"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.263" starttime="20160126 14:03:30.262"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160126 14:03:30.265" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160126 14:03:30.307" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:30.308" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160126 14:03:30.307" starttime="20160126 14:03:30.264"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.310" starttime="20160126 14:03:30.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.312" starttime="20160126 14:03:30.311"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.314" starttime="20160126 14:03:30.313"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160126 14:03:30.317" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160126 14:03:30.393" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:30.394" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160126 14:03:30.394" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 14:03:30.393" starttime="20160126 14:03:30.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.399" starttime="20160126 14:03:30.395"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.401" starttime="20160126 14:03:30.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.403" starttime="20160126 14:03:30.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.405" starttime="20160126 14:03:30.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.407" starttime="20160126 14:03:30.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.410" starttime="20160126 14:03:30.408"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.412" starttime="20160126 14:03:30.410"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.414" starttime="20160126 14:03:30.413"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.416" starttime="20160126 14:03:30.415"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.418" starttime="20160126 14:03:30.417"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:30.420" starttime="20160126 14:03:30.419"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:30.421" starttime="20160126 14:03:30.256"></status>
</kw>
<doc>Default service offered in USSD menu under "other services". Menu offers to send a SMS to MSISDN of subscriber's choice
to return a call</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160126 14:03:30.422" starttime="20160126 14:03:27.591"></status>
</test>
<test id="s1-t10" name="Test PrP Direct Access To Balance Check">
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Going to USSD code 102 directly to check the balance</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:30.433" level="INFO">Going to USSD code 102 directly to check the balance</msg>
<status status="PASS" endtime="20160126 14:03:30.433" starttime="20160126 14:03:30.431"></status>
</kw>
<kw type="kw" name="${subs} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160126 14:03:30.438" level="INFO">${subs} = 43667725901</msg>
<status status="PASS" endtime="20160126 14:03:30.437" starttime="20160126 14:03:30.434"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${subs} 102 ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160126 14:03:30.441" level="INFO">Killed</msg>
<status status="PASS" endtime="20160126 14:03:30.441" starttime="20160126 14:03:30.439"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:31.016" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 901 102 43667770
=====================
Ihre Rechnung: 10,00 Euro laeuft am 26.03.2016 14:03 ab.
Mehr Informationen:
1. Geldabrechnung
2. Minuten
3. Daten
4. SMS
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:31.019" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 901 102 43667770
=====================
Ihre Rechnung: 10,00 Euro laeuft am 26.03.2016 14:03 ab.
Mehr Infor...</msg>
<status status="PASS" endtime="20160126 14:03:31.018" starttime="20160126 14:03:30.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Ihre Rechnung: 10,00 Euro</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.022" starttime="20160126 14:03:31.020"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.032" starttime="20160126 14:03:31.030"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160126 14:03:31.033" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160126 14:03:31.073" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:31.074" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160126 14:03:31.074" starttime="20160126 14:03:31.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.077" starttime="20160126 14:03:31.075"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.079" starttime="20160126 14:03:31.077"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.081" starttime="20160126 14:03:31.079"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160126 14:03:31.084" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160126 14:03:31.155" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:31.156" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160126 14:03:31.156" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 14:03:31.155" starttime="20160126 14:03:31.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.161" starttime="20160126 14:03:31.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.163" starttime="20160126 14:03:31.162"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.165" starttime="20160126 14:03:31.164"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.167" starttime="20160126 14:03:31.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.169" starttime="20160126 14:03:31.168"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.171" starttime="20160126 14:03:31.170"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.174" starttime="20160126 14:03:31.172"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.176" starttime="20160126 14:03:31.174"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.178" starttime="20160126 14:03:31.176"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.180" starttime="20160126 14:03:31.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.182" starttime="20160126 14:03:31.181"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:31.183" starttime="20160126 14:03:31.024"></status>
</kw>
<doc>mTel offers USSD code 102 as shortcut for balance check for prepaid subscribers
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160126 14:03:31.183" starttime="20160126 14:03:30.423"></status>
</test>
<test id="s1-t11" name="Test PoP Direct Access To Balance Check">
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Going to USSD code 102 directly to check the balance</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 14:03:31.194" level="INFO">Going to USSD code 102 directly to check the balance</msg>
<status status="PASS" endtime="20160126 14:03:31.195" starttime="20160126 14:03:31.193"></status>
</kw>
<kw type="kw" name="${subs} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160126 14:03:31.199" level="INFO">${subs} = 43667725501</msg>
<status status="PASS" endtime="20160126 14:03:31.199" starttime="20160126 14:03:31.196"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${subs} 102 ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160126 14:03:31.202" level="INFO">Killed</msg>
<status status="PASS" endtime="20160126 14:03:31.203" starttime="20160126 14:03:31.200"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160126 14:03:31.764" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 501 102 43667770
=====================
Ihre Rechnung: 0,00 Euro laeuft am 26.01.2026 14:03 ab.
Mehr Informationen:
1. Geldabrechnung
2. Minuten
3. Daten
4. SMS
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160126 14:03:31.766" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 501 102 43667770
=====================
Ihre Rechnung: 0,00 Euro laeuft am 26.01.2026 14:03 ab.
Mehr Inform...</msg>
<status status="PASS" endtime="20160126 14:03:31.765" starttime="20160126 14:03:31.204"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Ihre Rechnung: 0,00 Euro</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.769" starttime="20160126 14:03:31.767"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.779" starttime="20160126 14:03:31.777"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160126 14:03:31.780" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160126 14:03:31.821" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:31.822" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160126 14:03:31.822" starttime="20160126 14:03:31.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.824" starttime="20160126 14:03:31.823"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.826" starttime="20160126 14:03:31.825"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.828" starttime="20160126 14:03:31.827"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160126 14:03:31.831" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160126 14:03:31.903" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 14:03:31.904" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160126 14:03:31.905" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 14:03:31.904" starttime="20160126 14:03:31.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.910" starttime="20160126 14:03:31.906"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.912" starttime="20160126 14:03:31.911"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.914" starttime="20160126 14:03:31.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.916" starttime="20160126 14:03:31.914"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.918" starttime="20160126 14:03:31.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.920" starttime="20160126 14:03:31.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.922" starttime="20160126 14:03:31.921"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.924" starttime="20160126 14:03:31.923"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.926" starttime="20160126 14:03:31.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.928" starttime="20160126 14:03:31.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.930" starttime="20160126 14:03:31.929"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:31.931" starttime="20160126 14:03:31.771"></status>
</kw>
<doc>mTel offers USSD code 102 as shortcut for balance check as well as for postpaid subscribers
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160126 14:03:31.932" starttime="20160126 14:03:31.185"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 14:03:31.959" starttime="20160126 14:03:31.956"></status>
</kw>
<status status="PASS" endtime="20160126 14:03:31.960" starttime="20160126 14:03:31.951"></status>
</kw>
<doc>This suite uses USSDtest.py class to test the USSD interface. Various test cases (scenarios) will be checked. As USSD self care menus are different from customer to customer - so are these tests. The goal is to make a rough check of the main (and not all) functions - menu items.</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160126 14:03:31.961" starttime="20160126 14:02:54.151"></status>
</suite>
<statistics>
<total>
<stat pass="11" fail="0">Critical Tests</stat>
<stat pass="11" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="11" info="" doc="" combined="" fail="0" links="">matko.sanseovic</stat>
<stat pass="11" info="" doc="" combined="" fail="0" links="">MTEL_specific</stat>
<stat pass="11" info="" doc="" combined="" fail="0" links="">USSD_only</stat>
</tag>
<suite>
<stat pass="11" id="s1" fail="0" name="Ussd-Robot-Suite">Ussd-Robot-Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
