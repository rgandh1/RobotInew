<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20150625 11:23:24.763">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/time_trial_xdr-robot-suite.txt" id="s1" name="Time Trial Xdr-Robot-Suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20150625 11:23:26.007" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20150625 11:23:26.129" level="INFO">${time} = Thu Jun 25 11:23:26 CEST 2015</msg>
<status status="PASS" endtime="20150625 11:23:26.123" starttime="20150625 11:23:25.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150625 11:23:26.163" level="INFO">Date and time: Thu Jun 25 11:23:26 CEST 2015</msg>
<status status="PASS" endtime="20150625 11:23:26.167" starttime="20150625 11:23:26.153"></status>
</kw>
<kw type="kw" name="Log The XDR Version">
<doc>Called at suite setup procedure to check if XDR is running and to see which version is there.</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:26.457" starttime="20150625 11:23:26.212"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20150625 11:23:26.475" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150625 11:23:27.757" level="INFO">Read output: Last login: Thu Jun 25 06:35:48 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$[m</msg>
<msg timestamp="20150625 11:23:27.765" level="INFO">${output_login} = Last login: Thu Jun 25 06:35:48 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150625 11:23:27.762" starttime="20150625 11:23:26.464"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20150625 11:23:27.780" level="INFO">Last login: Thu Jun 25 06:35:48 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150625 11:23:27.784" starttime="20150625 11:23:27.773"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-xdr status</arg>
</arguments>
<msg timestamp="20150625 11:23:27.796" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20150625 11:23:28.247" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150625 11:23:28.254" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.0.22932 is running PID: 5666 </msg>
<status status="PASS" endtime="20150625 11:23:28.251" starttime="20150625 11:23:27.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR Version and pid: ${output}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150625 11:23:28.268" level="INFO">XDR Version and pid: I-New UMS MVNO - XDR - Server 5.3.0.22932 is running PID: 5666 </msg>
<status status="PASS" endtime="20150625 11:23:28.272" starttime="20150625 11:23:28.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>I-New UMS MVNO - XDR</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:28.286" starttime="20150625 11:23:28.278"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>SSHLibrary.Close Connection</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:28.297" starttime="20150625 11:23:28.291"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:28.301" starttime="20150625 11:23:26.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SUT:${SUT_RESOURCE}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150625 11:23:28.315" level="INFO">SUT:/opt/robot/robotworkspace/suts/TNZ-resource.txt</msg>
<status status="PASS" endtime="20150625 11:23:28.318" starttime="20150625 11:23:28.307"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR IP address:${XDR HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150625 11:23:28.330" level="INFO">XDR IP address:10.105.113.171</msg>
<status status="PASS" endtime="20150625 11:23:28.333" starttime="20150625 11:23:28.323"></status>
</kw>
<kw type="kw" name="Check AMQ Availability">
<doc>Called at suite setup procedure to check if AMQ is UP</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${AMQ-XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:28.440" starttime="20150625 11:23:28.373"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20150625 11:23:28.455" level="INFO">Logging into '10.105.113.124:22' as 'qa_automation'.</msg>
<msg timestamp="20150625 11:23:29.715" level="INFO">Read output: Last login: Thu Jun 25 06:35:21 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb13 ~]$[m</msg>
<msg timestamp="20150625 11:23:29.722" level="INFO">${output_login} = Last login: Thu Jun 25 06:35:21 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150625 11:23:29.719" starttime="20150625 11:23:28.446"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>netstat -an | grep ${AMQ-SIG PORT}</arg>
</arguments>
<msg timestamp="20150625 11:23:29.736" level="INFO">Executing command 'netstat -an | grep 61616'.</msg>
<msg timestamp="20150625 11:23:29.828" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150625 11:23:29.833" level="INFO">${output} = tcp        0      0 :::61616                    :::*                        LISTEN      
tcp        0      0 ::ffff:10.105.113.124:61616 ::ffff:10.105.113.171:37734 ESTABLISHED 
tcp        0      0 ::...</msg>
<status status="PASS" endtime="20150625 11:23:29.831" starttime="20150625 11:23:29.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>LISTEN</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:29.846" starttime="20150625 11:23:29.839"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} query -QQueue=${AMQ-XDR CRCE CDR QUEUE} | grep ConsumerCount</arg>
</arguments>
<msg timestamp="20150625 11:23:29.862" level="INFO">Executing command 'sudo /etc/init.d/amq-xdr-tb13 query -QQueue=inew-cs.crce.cdr | grep ConsumerCount'.</msg>
<msg timestamp="20150625 11:23:31.357" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150625 11:23:31.364" level="INFO">${output} = ConsumerCount = 10</msg>
<status status="PASS" endtime="20150625 11:23:31.361" starttime="20150625 11:23:29.851"></status>
</kw>
<kw type="kw" name="${count} = String.Get Substring">
<doc>Returns a substring from `start` index to `end` index.</doc>
<arguments>
<arg>${output}</arg>
<arg>16</arg>
</arguments>
<msg timestamp="20150625 11:23:31.379" level="INFO">${count} = 10</msg>
<status status="PASS" endtime="20150625 11:23:31.377" starttime="20150625 11:23:31.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>0 &lt; ${count}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:31.405" starttime="20150625 11:23:31.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150625 11:23:31.415" starttime="20150625 11:23:31.410"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150625 11:23:31.427" starttime="20150625 11:23:31.421"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:31.434" starttime="20150625 11:23:28.340"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>AMQ and consumers are UP</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150625 11:23:31.444" level="INFO">AMQ and consumers are UP</msg>
<status status="PASS" endtime="20150625 11:23:31.446" starttime="20150625 11:23:31.439"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${XDR DB HOST}:${XDR DB PORT}/${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:31.545" starttime="20150625 11:23:31.451"></status>
</kw>
<kw type="kw" name="OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>rm -f ssh_tail_log-xdr.log</arg>
</arguments>
<msg timestamp="20150625 11:23:31.561" level="INFO">Running command 'rm -f ssh_tail_log-xdr.log 2&gt;&amp;1'</msg>
<status status="PASS" endtime="20150625 11:23:31.567" starttime="20150625 11:23:31.550"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:31.687" starttime="20150625 11:23:31.652"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:31.690" starttime="20150625 11:23:31.621"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:31.851" starttime="20150625 11:23:31.771"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:31.854" starttime="20150625 11:23:31.741"></status>
</kw>
<kw type="kw" name="${JNDI_PROVIDER_URL} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>tcp://${AMQ-XDR HOST}:${AMQ-SIG PORT}?jms.useAsyncSend=false</arg>
</arguments>
<msg timestamp="20150625 11:23:31.869" level="INFO">${JNDI_PROVIDER_URL} = tcp://10.105.113.124:61616?jms.useAsyncSend=false</msg>
<status status="PASS" endtime="20150625 11:23:31.868" starttime="20150625 11:23:31.859"></status>
</kw>
<kw type="kw" name="JMSLibrary.Init Provider">
<doc></doc>
<arguments>
<arg>${INITIAL_CONTEXT_FACTORY}</arg>
<arg>${JNDI_PROVIDER_URL}</arg>
<arg>connect=true</arg>
<arg>start=true</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:32.234" starttime="20150625 11:23:31.874"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:32.238" starttime="20150625 11:23:25.976"></status>
</kw>
<test id="s1-t1" name="Run Statistical Check">
<kw type="kw" name="${failure} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20150625 11:23:32.283" level="INFO">${failure} = 0</msg>
<status status="PASS" endtime="20150625 11:23:32.281" starttime="20150625 11:23:32.276"></status>
</kw>
<kw type="kw" name="${delay_ms} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20150625 11:23:32.294" level="INFO">${delay_ms} = 0</msg>
<status status="PASS" endtime="20150625 11:23:32.292" starttime="20150625 11:23:32.288"></status>
</kw>
<kw type="for" name="${delay_10ms} IN RANGE [ 1 | 11 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${delay_10ms} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${delay_ms} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${delay_10ms}*10</arg>
</arguments>
<msg timestamp="20150625 11:23:32.314" level="INFO">${delay_ms} = 10</msg>
<status status="PASS" endtime="20150625 11:23:32.312" starttime="20150625 11:23:32.303"></status>
</kw>
<kw type="kw" name="${failures} = Internal Loop">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${delay_ms}</arg>
</arguments>
<kw type="kw" name="${failures} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20150625 11:23:32.353" level="INFO">${failures} = 0</msg>
<status status="PASS" endtime="20150625 11:23:32.352" starttime="20150625 11:23:32.347"></status>
</kw>
<kw type="for" name="${executions} IN RANGE [ 0 | 10 ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${executions} = 0">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
<arg>${delay_ms}</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
<arg>${delay_ms}</arg>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
<arg>${delay_secs}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:32.463" starttime="20150625 11:23:32.461"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:32.536" starttime="20150625 11:23:32.473"></status>
</kw>
<msg timestamp="20150625 11:23:32.541" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150625 11:23:32.539" starttime="20150625 11:23:32.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150625 11:23:32.569" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150625 11:23:33.056" level="INFO">Read output: Last login: Thu Jun 25 09:23:26 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150625 11:23:33.059" starttime="20150625 11:23:32.562"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:33.063" starttime="20150625 11:23:32.546"></status>
</kw>
<msg timestamp="20150625 11:23:33.071" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150625 11:23:33.069" starttime="20150625 11:23:32.442"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:33.106" starttime="20150625 11:23:33.100"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150625 11:23:33.116" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor3.log'.</msg>
<status status="PASS" endtime="20150625 11:23:33.123" starttime="20150625 11:23:33.109"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:33.125" starttime="20150625 11:23:33.077"></status>
</kw>
<msg timestamp="20150625 11:23:33.132" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150625 11:23:33.129" starttime="20150625 11:23:32.419"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:33.212" starttime="20150625 11:23:33.202"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:33.215" starttime="20150625 11:23:33.178"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>T: ${${ticket_type}}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150625 11:23:33.251" level="INFO">T: [u'5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||']</msg>
<status status="PASS" endtime="20150625 11:23:33.254" starttime="20150625 11:23:33.242"></status>
</kw>
<kw type="kw" name="${tic_str} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${${ticket_type}}</arg>
</arguments>
<msg timestamp="20150625 11:23:33.265" level="INFO">Argument types are:
&lt;type 'list'&gt;</msg>
<msg timestamp="20150625 11:23:33.268" level="INFO">${tic_str} = [u'5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5...</msg>
<status status="PASS" endtime="20150625 11:23:33.267" starttime="20150625 11:23:33.257"></status>
</kw>
<kw type="kw" name="${tic_1} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${tic_str}</arg>
<arg>[u'</arg>
</arguments>
<msg timestamp="20150625 11:23:33.279" level="INFO">${tic_1} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309...</msg>
<status status="PASS" endtime="20150625 11:23:33.278" starttime="20150625 11:23:33.272"></status>
</kw>
<kw type="kw" name="${tic_2} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${tic_1}</arg>
<arg>']</arg>
</arguments>
<msg timestamp="20150625 11:23:33.290" level="INFO">${tic_2} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309...</msg>
<status status="PASS" endtime="20150625 11:23:33.288" starttime="20150625 11:23:33.283"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${tic_2}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:33.313" starttime="20150625 11:23:33.293"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:33.331" starttime="20150625 11:23:33.316"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:33.334" starttime="20150625 11:23:33.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Sleep</arg>
<arg>${delay_secs}ms</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:33.342" starttime="20150625 11:23:33.337"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:33.382" starttime="20150625 11:23:33.379"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150625 11:23:33.388" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150625 11:23:33.387" starttime="20150625 11:23:33.383"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150625 11:23:33.395" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150625 11:23:33.396" starttime="20150625 11:23:33.389"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:33.410" starttime="20150625 11:23:33.408"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150625 11:23:33.414" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150625 11:23:33.462" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150625 11:23:33.464" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150625 11:23:33.463" starttime="20150625 11:23:33.412"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150625 11:23:33.468" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150625 11:23:33.564" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150625 11:23:33.567" level="INFO">${processes_string} =  1448 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor3.log
 1464 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
 1489 ?       ...</msg>
<status status="PASS" endtime="20150625 11:23:33.566" starttime="20150625 11:23:33.466"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150625 11:23:33.578" level="INFO">@{processes_list} = [  1448 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor3.log |  1464 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |  1489 ? ...</msg>
<status status="PASS" endtime="20150625 11:23:33.577" starttime="20150625 11:23:33.571"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =  1448 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor3.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150625 11:23:33.593" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150625 11:23:33.591" starttime="20150625 11:23:33.586"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150625 11:23:33.600" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150625 11:23:33.647" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150625 11:23:33.649" starttime="20150625 11:23:33.596"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:33.651" starttime="20150625 11:23:33.583"></status>
</kw>
<kw type="foritem" name="${process} =  1464 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150625 11:23:33.663" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150625 11:23:33.661" starttime="20150625 11:23:33.655"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150625 11:23:33.671" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150625 11:23:33.729" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150625 11:23:33.731" starttime="20150625 11:23:33.666"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:33.734" starttime="20150625 11:23:33.652"></status>
</kw>
<kw type="foritem" name="${process} =  1489 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150625 11:23:33.746" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150625 11:23:33.744" starttime="20150625 11:23:33.737"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150625 11:23:33.754" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150625 11:23:33.814" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150625 11:23:33.816" starttime="20150625 11:23:33.749"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:33.818" starttime="20150625 11:23:33.735"></status>
</kw>
<kw type="foritem" name="${process} =  1507 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150625 11:23:33.829" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150625 11:23:33.828" starttime="20150625 11:23:33.822"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150625 11:23:33.838" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150625 11:23:33.897" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150625 11:23:33.899" starttime="20150625 11:23:33.833"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:33.901" starttime="20150625 11:23:33.819"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:33.903" starttime="20150625 11:23:33.581"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:33.905" starttime="20150625 11:23:33.398"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150625 11:23:33.913" level="INFO">Starting command 'cat tmpfilemonitor3.log'.</msg>
<status status="PASS" endtime="20150625 11:23:33.941" starttime="20150625 11:23:33.908"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150625 11:23:33.947" level="INFO">Reading output of command 'cat tmpfilemonitor3.log'.</msg>
<msg timestamp="20150625 11:23:33.985" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150625 11:23:33.988" level="INFO">${stdout_string} = [2015-06-25 09:23:33,328][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150625 11:23:33.987" starttime="20150625 11:23:33.944"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150625 11:23:33.997" level="INFO">Executing command 'rm tmpfilemonitor3.log'.</msg>
<msg timestamp="20150625 11:23:34.071" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150625 11:23:34.074" starttime="20150625 11:23:33.992"></status>
</kw>
<msg timestamp="20150625 11:23:34.081" level="INFO">${tailed_text} = [2015-06-25 09:23:33,328][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150625 11:23:34.079" starttime="20150625 11:23:33.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:34.097" starttime="20150625 11:23:34.085"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:34.127" starttime="20150625 11:23:34.121"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150625 11:23:34.135" starttime="20150625 11:23:34.130"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:34.140" starttime="20150625 11:23:34.101"></status>
</kw>
<msg timestamp="20150625 11:23:34.146" level="INFO">${tailed_text} = [2015-06-25 09:23:33,328][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150625 11:23:34.144" starttime="20150625 11:23:33.348"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${tic_str} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${${ticket}}</arg>
</arguments>
<msg timestamp="20150625 11:23:34.183" level="INFO">Argument types are:
&lt;type 'list'&gt;</msg>
<msg timestamp="20150625 11:23:34.187" level="INFO">${tic_str} = [u'5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5...</msg>
<status status="PASS" endtime="20150625 11:23:34.186" starttime="20150625 11:23:34.176"></status>
</kw>
<kw type="kw" name="${tic_1} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${tic_str}</arg>
<arg>[u'</arg>
</arguments>
<msg timestamp="20150625 11:23:34.197" level="INFO">${tic_1} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309...</msg>
<status status="PASS" endtime="20150625 11:23:34.196" starttime="20150625 11:23:34.191"></status>
</kw>
<kw type="kw" name="${tic_2} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${tic_1}</arg>
<arg>']</arg>
</arguments>
<msg timestamp="20150625 11:23:34.208" level="INFO">${tic_2} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309...</msg>
<status status="PASS" endtime="20150625 11:23:34.206" starttime="20150625 11:23:34.201"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Ticket successfully routed [ticket=${tic_2}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Ticket successfully routed [ticket=${tic_2}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:34.230" starttime="20150625 11:23:34.223"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:34.233" starttime="20150625 11:23:34.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Ticket successfully routed [ticket=${tic_2}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:34.245" starttime="20150625 11:23:34.236"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:34.246" starttime="20150625 11:23:34.153"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:34.286" starttime="20150625 11:23:34.284"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:34.307" starttime="20150625 11:23:34.287"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:34.310" starttime="20150625 11:23:34.308"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150625 11:23:34.314" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/time_trial_xdr/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150625 11:23:34.316" level="INFO">${queryResultSetLines} = 1005371|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessi...</msg>
<status status="PASS" endtime="20150625 11:23:34.315" starttime="20150625 11:23:34.311"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:34.319" starttime="20150625 11:23:34.317"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150625 11:23:34.323" level="INFO">1 lines returned</msg>
<msg timestamp="20150625 11:23:34.324" level="INFO">@{queryResultSet} = [ 1005371|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSes...</msg>
<status status="PASS" endtime="20150625 11:23:34.324" starttime="20150625 11:23:34.321"></status>
</kw>
<msg timestamp="20150625 11:23:34.327" level="INFO">@{queryRows} = [ 1005371|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSes...</msg>
<status status="PASS" endtime="20150625 11:23:34.326" starttime="20150625 11:23:34.275"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150625 11:23:34.331" level="INFO">Length is 1</msg>
<msg timestamp="20150625 11:23:34.332" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20150625 11:23:34.332" starttime="20150625 11:23:34.328"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20150625 11:23:34.336" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150625 11:23:34.338" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20150625 11:23:34.337" starttime="20150625 11:23:34.334"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20150625 11:23:34.347" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150625 11:23:34.347" starttime="20150625 11:23:34.344"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:34.348" starttime="20150625 11:23:34.339"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:34.354" starttime="20150625 11:23:34.350"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:34.355" starttime="20150625 11:23:34.264"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:34.357" starttime="20150625 11:23:32.382"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:34.358" starttime="20150625 11:23:32.368"></status>
</kw>
<msg timestamp="20150625 11:23:34.361" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20150625 11:23:34.360" starttime="20150625 11:23:32.362"></status>
</kw>
<kw type="kw" name="${failures} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>${passed}=='False'</arg>
<arg>Evaluate</arg>
<arg>${failures}+1</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${failures}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${failures}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:34.370" starttime="20150625 11:23:34.368"></status>
</kw>
<msg timestamp="20150625 11:23:34.372" level="INFO">${failures} = 0</msg>
<status status="PASS" endtime="20150625 11:23:34.371" starttime="20150625 11:23:34.362"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:34.373" starttime="20150625 11:23:32.358"></status>
</kw>
<kw type="foritem" name="${executions} = 1">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${passed} = BuiltIn.Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Execute Sending MOC ticket</arg>
<arg>${delay_ms}</arg>
</arguments>
<kw type="kw" name="Execute Sending MOC ticket">
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. </doc>
<arguments>
<arg>${delay_ms}</arg>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
<arg>${delay_secs}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:34.442" starttime="20150625 11:23:34.440"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:34.838" starttime="20150625 11:23:34.449"></status>
</kw>
<msg timestamp="20150625 11:23:34.843" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150625 11:23:34.841" starttime="20150625 11:23:34.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150625 11:23:34.867" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150625 11:23:35.515" level="INFO">Read output: Last login: Thu Jun 25 09:23:32 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150625 11:23:35.517" starttime="20150625 11:23:34.861"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:35.518" starttime="20150625 11:23:34.847"></status>
</kw>
<msg timestamp="20150625 11:23:35.522" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150625 11:23:35.521" starttime="20150625 11:23:34.427"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:35.536" starttime="20150625 11:23:35.534"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150625 11:23:35.540" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20150625 11:23:35.545" starttime="20150625 11:23:35.538"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:35.546" starttime="20150625 11:23:35.524"></status>
</kw>
<msg timestamp="20150625 11:23:35.548" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150625 11:23:35.547" starttime="20150625 11:23:34.412"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:35.581" starttime="20150625 11:23:35.573"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:35.584" starttime="20150625 11:23:35.565"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send text from ticket to JMS queue</doc>
<arguments>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>T: ${${ticket_type}}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150625 11:23:35.613" level="INFO">T: [u'5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|530992041999740|642041999740|true|642041999415|(network) XdrComponentTest|Local (on-net)|Originating||||Voice|false||(network) XdrComponentTest|2015-02-22T09:15:45.930+0000|0|120000|120000|0|0|1|false|101026|15734486|101026|2|2|Minutes|15|PREPAID|OK||']</msg>
<status status="PASS" endtime="20150625 11:23:35.617" starttime="20150625 11:23:35.605"></status>
</kw>
<kw type="kw" name="${tic_str} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${${ticket_type}}</arg>
</arguments>
<msg timestamp="20150625 11:23:35.627" level="INFO">Argument types are:
&lt;type 'list'&gt;</msg>
<msg timestamp="20150625 11:23:35.630" level="INFO">${tic_str} = [u'5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5...</msg>
<status status="PASS" endtime="20150625 11:23:35.629" starttime="20150625 11:23:35.620"></status>
</kw>
<kw type="kw" name="${tic_1} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${tic_str}</arg>
<arg>[u'</arg>
</arguments>
<msg timestamp="20150625 11:23:35.640" level="INFO">${tic_1} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309...</msg>
<status status="PASS" endtime="20150625 11:23:35.638" starttime="20150625 11:23:35.633"></status>
</kw>
<kw type="kw" name="${tic_2} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${tic_1}</arg>
<arg>']</arg>
</arguments>
<msg timestamp="20150625 11:23:35.649" level="INFO">${tic_2} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309...</msg>
<status status="PASS" endtime="20150625 11:23:35.648" starttime="20150625 11:23:35.643"></status>
</kw>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${tic_2}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:35.656" starttime="20150625 11:23:35.652"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:35.671" starttime="20150625 11:23:35.659"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:35.674" starttime="20150625 11:23:35.588"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Sleep</arg>
<arg>${delay_secs}ms</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:35.680" starttime="20150625 11:23:35.676"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:35.726" starttime="20150625 11:23:35.721"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150625 11:23:35.737" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150625 11:23:35.736" starttime="20150625 11:23:35.728"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150625 11:23:35.748" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150625 11:23:35.748" starttime="20150625 11:23:35.740"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:35.760" starttime="20150625 11:23:35.758"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150625 11:23:35.763" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150625 11:23:35.810" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150625 11:23:35.812" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150625 11:23:35.811" starttime="20150625 11:23:35.761"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150625 11:23:35.816" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150625 11:23:35.937" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150625 11:23:35.945" level="INFO">${processes_string} =  1448 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor3.log
 1464 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
 1635 ?       ...</msg>
<status status="PASS" endtime="20150625 11:23:35.943" starttime="20150625 11:23:35.813"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150625 11:23:35.960" level="INFO">@{processes_list} = [  1448 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor3.log |  1464 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log |  1635 ? ...</msg>
<status status="PASS" endtime="20150625 11:23:35.958" starttime="20150625 11:23:35.950"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =  1448 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor3.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150625 11:23:35.977" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150625 11:23:35.976" starttime="20150625 11:23:35.968"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150625 11:23:35.986" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150625 11:23:36.033" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150625 11:23:36.036" starttime="20150625 11:23:35.981"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:36.040" starttime="20150625 11:23:35.966"></status>
</kw>
<kw type="foritem" name="${process} =  1464 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150625 11:23:36.052" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150625 11:23:36.050" starttime="20150625 11:23:36.044"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150625 11:23:36.059" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150625 11:23:36.119" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150625 11:23:36.122" starttime="20150625 11:23:36.054"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:36.123" starttime="20150625 11:23:36.042"></status>
</kw>
<kw type="foritem" name="${process} =  1635 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150625 11:23:36.133" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150625 11:23:36.132" starttime="20150625 11:23:36.126"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150625 11:23:36.140" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150625 11:23:36.204" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150625 11:23:36.206" starttime="20150625 11:23:36.136"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:36.207" starttime="20150625 11:23:36.124"></status>
</kw>
<kw type="foritem" name="${process} =  1653 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150625 11:23:36.217" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150625 11:23:36.216" starttime="20150625 11:23:36.210"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150625 11:23:36.224" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150625 11:23:36.286" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150625 11:23:36.288" starttime="20150625 11:23:36.220"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:36.290" starttime="20150625 11:23:36.208"></status>
</kw>
<kw type="foritem" name="${process} =  1672 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150625 11:23:36.300" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150625 11:23:36.299" starttime="20150625 11:23:36.293"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150625 11:23:36.307" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150625 11:23:36.376" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150625 11:23:36.378" starttime="20150625 11:23:36.303"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:36.380" starttime="20150625 11:23:36.291"></status>
</kw>
<kw type="foritem" name="${process} =  1689 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150625 11:23:36.389" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150625 11:23:36.388" starttime="20150625 11:23:36.383"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150625 11:23:36.396" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150625 11:23:36.458" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150625 11:23:36.460" starttime="20150625 11:23:36.392"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:36.462" starttime="20150625 11:23:36.381"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:36.462" starttime="20150625 11:23:35.963"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:36.465" starttime="20150625 11:23:35.750"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150625 11:23:36.473" level="INFO">Starting command 'cat tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20150625 11:23:36.502" starttime="20150625 11:23:36.468"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150625 11:23:36.507" level="INFO">Reading output of command 'cat tmpfilemonitor4.log'.</msg>
<msg timestamp="20150625 11:23:36.542" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150625 11:23:36.545" level="INFO">${stdout_string} = [2015-06-25 09:23:35,667][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150625 11:23:36.544" starttime="20150625 11:23:36.504"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150625 11:23:36.552" level="INFO">Executing command 'rm tmpfilemonitor4.log'.</msg>
<msg timestamp="20150625 11:23:36.629" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150625 11:23:36.631" starttime="20150625 11:23:36.548"></status>
</kw>
<msg timestamp="20150625 11:23:36.636" level="INFO">${tailed_text} = [2015-06-25 09:23:35,667][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150625 11:23:36.634" starttime="20150625 11:23:35.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:36.649" starttime="20150625 11:23:36.639"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:36.673" starttime="20150625 11:23:36.669"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150625 11:23:36.681" starttime="20150625 11:23:36.676"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:36.685" starttime="20150625 11:23:36.653"></status>
</kw>
<msg timestamp="20150625 11:23:36.690" level="INFO">${tailed_text} = [2015-06-25 09:23:35,667][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150625 11:23:36.688" starttime="20150625 11:23:35.686"></status>
</kw>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticketSignature}</arg>
</arguments>
<kw type="kw" name="${tic_str} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${${ticket}}</arg>
</arguments>
<msg timestamp="20150625 11:23:36.720" level="INFO">Argument types are:
&lt;type 'list'&gt;</msg>
<msg timestamp="20150625 11:23:36.723" level="INFO">${tic_str} = [u'5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5...</msg>
<status status="PASS" endtime="20150625 11:23:36.722" starttime="20150625 11:23:36.714"></status>
</kw>
<kw type="kw" name="${tic_1} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${tic_str}</arg>
<arg>[u'</arg>
</arguments>
<msg timestamp="20150625 11:23:36.732" level="INFO">${tic_1} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309...</msg>
<status status="PASS" endtime="20150625 11:23:36.731" starttime="20150625 11:23:36.726"></status>
</kw>
<kw type="kw" name="${tic_2} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${tic_1}</arg>
<arg>']</arg>
</arguments>
<msg timestamp="20150625 11:23:36.741" level="INFO">${tic_2} = 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-02-23T11:06:11.236+0000|2015-02-22T09:15:50.025+0000|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE||0|NONE|OK||1.2|Charge|BasicSession|1|5309...</msg>
<status status="PASS" endtime="20150625 11:23:36.739" starttime="20150625 11:23:36.735"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_file}</arg>
<arg>Ticket successfully routed [ticket=${tic_2}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_file}</arg>
<arg>Ticket successfully routed [ticket=${tic_2}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:36.760" starttime="20150625 11:23:36.753"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:36.762" starttime="20150625 11:23:36.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_file}</arg>
<arg>Ticket successfully routed [ticket=${tic_2}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:36.773" starttime="20150625 11:23:36.764"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:36.776" starttime="20150625 11:23:36.696"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '%XdrComponentTest';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:36.850" starttime="20150625 11:23:36.847"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:36.863" starttime="20150625 11:23:36.853"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:36.871" starttime="20150625 11:23:36.865"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="FAIL" endtime="20150625 11:23:36.875" starttime="20150625 11:23:36.872"></status>
</kw>
<status status="FAIL" endtime="20150625 11:23:36.876" starttime="20150625 11:23:36.831"></status>
</kw>
<status status="FAIL" endtime="20150625 11:23:36.878" starttime="20150625 11:23:36.810"></status>
</kw>
<status status="FAIL" endtime="20150625 11:23:36.879" starttime="20150625 11:23:34.387"></status>
</kw>
<status status="FAIL" endtime="20150625 11:23:36.880" starttime="20150625 11:23:34.377"></status>
</kw>
<status status="FAIL" endtime="20150625 11:23:36.882" starttime="20150625 11:23:34.375"></status>
</kw>
<status status="FAIL" endtime="20150625 11:23:36.883" starttime="20150625 11:23:34.374"></status>
</kw>
<status status="FAIL" endtime="20150625 11:23:36.884" starttime="20150625 11:23:32.356"></status>
</kw>
<status status="FAIL" endtime="20150625 11:23:36.885" starttime="20150625 11:23:32.318"></status>
</kw>
<status status="FAIL" endtime="20150625 11:23:36.886" starttime="20150625 11:23:32.299"></status>
</kw>
<status status="FAIL" endtime="20150625 11:23:36.887" starttime="20150625 11:23:32.297"></status>
</kw>
<doc>General test case skeleton to be executed. Contains all steps for single test case

Arguments:
==========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20150625 11:23:36.889" starttime="20150625 11:23:32.240">Execution terminated by signal</status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150625 11:23:36.902" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150625 11:23:36.903" starttime="20150625 11:23:36.900"></status>
</kw>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:36.926" starttime="20150625 11:23:36.924"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150625 11:23:37.003" starttime="20150625 11:23:36.933"></status>
</kw>
<msg timestamp="20150625 11:23:37.007" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150625 11:23:37.005" starttime="20150625 11:23:36.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150625 11:23:37.017" level="INFO">Logging into ':22' as 'qa_automation'.</msg>
<msg timestamp="20150625 11:23:37.627" level="INFO">Read output: Last login: Thu Jun 25 08:35:50 2015 from localhost
id: cannot find name for group ID 20007
[1m[qa_automation@testautomation ~]$</msg>
<status status="PASS" endtime="20150625 11:23:37.629" starttime="20150625 11:23:37.015"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:37.631" starttime="20150625 11:23:37.008"></status>
</kw>
<msg timestamp="20150625 11:23:37.638" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150625 11:23:37.636" starttime="20150625 11:23:36.917"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo pkill tail</arg>
</arguments>
<msg timestamp="20150625 11:23:37.644" level="INFO">Executing command 'sudo pkill tail'.</msg>
<msg timestamp="20150625 11:23:37.722" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150625 11:23:37.724" starttime="20150625 11:23:37.640"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150625 11:23:37.733" starttime="20150625 11:23:37.726"></status>
</kw>
<status status="PASS" endtime="20150625 11:23:37.735" starttime="20150625 11:23:36.895"></status>
</kw>
<doc>This suite will collect "statistical" data - test execution time needed for single XDR ticket processing</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20150625 11:23:37.738" starttime="20150625 11:23:24.778"></status>
</suite>
<statistics>
<total>
<stat pass="0" fail="1">Critical Tests</stat>
<stat pass="0" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" info="" doc="" combined="" fail="1" links="">ComponentTest</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">matko.sanseovic</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">TNZ_supported</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">XDR_only</stat>
</tag>
<suite>
<stat pass="0" id="s1" fail="1" name="Time Trial Xdr-Robot-Suite">Time Trial Xdr-Robot-Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
