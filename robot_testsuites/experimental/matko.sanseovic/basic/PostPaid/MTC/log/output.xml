<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20151203 10:07:43.710">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC" id="s1" name="MTC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/MTC_POSTPAID-Abandon" id="s1-s1" name="MTC POSTPAID-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/MTC_POSTPAID-Abandon/MTC_POSTPAID-Abandon-robot-suite.txt" id="s1-s1-s1" name="MTC POSTPAID-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20151203 10:07:45.513" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20151203 10:07:45.516" level="INFO">${date} = Thu Dec  3 10:07:45 CET 2015</msg>
<status status="PASS" endtime="20151203 10:07:45.515" starttime="20151203 10:07:45.495"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:07:45.520" level="INFO">Date and time: Thu Dec  3 10:07:45 CET 2015</msg>
<status status="PASS" endtime="20151203 10:07:45.521" starttime="20151203 10:07:45.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:07:45.526" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20151203 10:07:45.527" starttime="20151203 10:07:45.523"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:45.607" starttime="20151203 10:07:45.605"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:46.654" starttime="20151203 10:07:45.622"></status>
</kw>
<msg timestamp="20151203 10:07:46.661" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20151203 10:07:46.658" starttime="20151203 10:07:45.609"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:07:46.682" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:07:48.088" level="INFO">Read output: Last login: Thu Dec  3 02:59:26 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:07:48.090" starttime="20151203 10:07:46.677"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:48.091" starttime="20151203 10:07:46.664"></status>
</kw>
<msg timestamp="20151203 10:07:48.095" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20151203 10:07:48.094" starttime="20151203 10:07:45.589"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:07:48.101" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:07:48.100" starttime="20151203 10:07:48.096"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:07:48.104" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20151203 10:07:48.964" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:07:48.968" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.11.12-14:31:57 is running PID: 12768 </msg>
<status status="PASS" endtime="20151203 10:07:48.966" starttime="20151203 10:07:48.102"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:48.983" starttime="20151203 10:07:48.977"></status>
</kw>
<msg timestamp="20151203 10:07:48.986" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:07:48.988" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:07:48.985" starttime="20151203 10:07:48.971"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:49.007" starttime="20151203 10:07:49.002"></status>
</kw>
<msg timestamp="20151203 10:07:49.011" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:07:49.009" starttime="20151203 10:07:48.991"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20151203 10:07:49.019" level="INFO">${version_r} =  1.0.0 2015.11.12-14:31:57 is running PID: 12768 </msg>
<status status="PASS" endtime="20151203 10:07:49.018" starttime="20151203 10:07:49.014"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:07:49.029" level="INFO">${version} =  1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:07:49.028" starttime="20151203 10:07:49.022"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:49.036" starttime="20151203 10:07:49.032"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:49.062" starttime="20151203 10:07:49.057"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:07:49.100" starttime="20151203 10:07:49.065"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:49.106" starttime="20151203 10:07:49.039"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:49.124" starttime="20151203 10:07:49.120"></status>
</kw>
<msg timestamp="20151203 10:07:49.127" level="INFO">${ver} =  1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:07:49.126" starttime="20151203 10:07:49.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:49.135" starttime="20151203 10:07:49.130"></status>
</kw>
<msg timestamp="20151203 10:07:49.140" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20151203 10:07:49.142" level="INFO">${in_version} =  1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:07:49.138" starttime="20151203 10:07:45.550"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:49.251" starttime="20151203 10:07:49.247"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:49.308" starttime="20151203 10:07:49.260"></status>
</kw>
<msg timestamp="20151203 10:07:49.311" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20151203 10:07:49.310" starttime="20151203 10:07:49.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:07:49.330" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:07:49.585" level="INFO">Read output: Last login: Thu Dec  3 03:02:44 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:07:49.588" starttime="20151203 10:07:49.325"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:49.590" starttime="20151203 10:07:49.314"></status>
</kw>
<msg timestamp="20151203 10:07:49.594" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20151203 10:07:49.593" starttime="20151203 10:07:49.225"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:07:49.607" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:07:49.606" starttime="20151203 10:07:49.597"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:07:49.614" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20151203 10:07:49.803" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:07:49.806" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 5581 </msg>
<status status="PASS" endtime="20151203 10:07:49.805" starttime="20151203 10:07:49.610"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:49.820" starttime="20151203 10:07:49.814"></status>
</kw>
<msg timestamp="20151203 10:07:49.823" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:07:49.824" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:07:49.822" starttime="20151203 10:07:49.809"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:49.840" starttime="20151203 10:07:49.837"></status>
</kw>
<msg timestamp="20151203 10:07:49.844" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:07:49.843" starttime="20151203 10:07:49.827"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20151203 10:07:49.852" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 5581 </msg>
<status status="PASS" endtime="20151203 10:07:49.851" starttime="20151203 10:07:49.846"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:07:49.860" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:07:49.859" starttime="20151203 10:07:49.855"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:49.866" starttime="20151203 10:07:49.863"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:49.891" starttime="20151203 10:07:49.887"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:07:49.897" starttime="20151203 10:07:49.894"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:49.902" starttime="20151203 10:07:49.869"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:49.918" starttime="20151203 10:07:49.914"></status>
</kw>
<msg timestamp="20151203 10:07:49.921" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:07:49.920" starttime="20151203 10:07:49.904"></status>
</kw>
<msg timestamp="20151203 10:07:49.926" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20151203 10:07:49.927" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:07:49.925" starttime="20151203 10:07:49.173"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.024" starttime="20151203 10:07:50.020"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.084" starttime="20151203 10:07:50.037"></status>
</kw>
<msg timestamp="20151203 10:07:50.088" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20151203 10:07:50.086" starttime="20151203 10:07:50.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:07:50.107" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:07:50.268" level="INFO">Read output: Last login: Thu Dec  3 02:59:30 2015 from 10.105.80.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:07:50.270" starttime="20151203 10:07:50.103"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:50.272" starttime="20151203 10:07:50.091"></status>
</kw>
<msg timestamp="20151203 10:07:50.276" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20151203 10:07:50.275" starttime="20151203 10:07:50.009"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:07:50.290" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:07:50.289" starttime="20151203 10:07:50.279"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:07:50.297" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20151203 10:07:50.384" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:07:50.387" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.0.30830
Negret Rating &amp; Charging Engine 6.2.0.30830 is running (PID:28716, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151203 10:07:50.386" starttime="20151203 10:07:50.292"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.401" starttime="20151203 10:07:50.395"></status>
</kw>
<msg timestamp="20151203 10:07:50.404" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:07:50.405" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:07:50.403" starttime="20151203 10:07:50.390"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.422" starttime="20151203 10:07:50.419"></status>
</kw>
<msg timestamp="20151203 10:07:50.425" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:07:50.424" starttime="20151203 10:07:50.408"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151203 10:07:50.433" level="INFO">${version_r} =  6.2.0.30830 is running (PID:28716, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151203 10:07:50.432" starttime="20151203 10:07:50.428"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:07:50.441" level="INFO">${version} =  6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:07:50.440" starttime="20151203 10:07:50.435"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.447" starttime="20151203 10:07:50.443"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.471" starttime="20151203 10:07:50.467"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.477" starttime="20151203 10:07:50.473"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:50.481" starttime="20151203 10:07:50.450"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.496" starttime="20151203 10:07:50.493"></status>
</kw>
<msg timestamp="20151203 10:07:50.499" level="INFO">${ver} =  6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:07:50.498" starttime="20151203 10:07:50.484"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.506" starttime="20151203 10:07:50.502"></status>
</kw>
<msg timestamp="20151203 10:07:50.509" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20151203 10:07:50.510" level="INFO">${crce_version} =  6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:07:50.507" starttime="20151203 10:07:49.959"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.557" starttime="20151203 10:07:50.555"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.644" starttime="20151203 10:07:50.563"></status>
</kw>
<msg timestamp="20151203 10:07:50.648" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20151203 10:07:50.646" starttime="20151203 10:07:50.558"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:07:50.666" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:07:50.772" level="INFO">Read output: Last login: Thu Dec  3 09:07:50 2015 from 10.105.80.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:07:50.774" starttime="20151203 10:07:50.662"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:50.776" starttime="20151203 10:07:50.650"></status>
</kw>
<msg timestamp="20151203 10:07:50.780" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20151203 10:07:50.779" starttime="20151203 10:07:50.546"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:07:50.793" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:07:50.792" starttime="20151203 10:07:50.782"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:07:50.799" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20151203 10:07:50.850" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:07:50.853" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 6110)</msg>
<status status="PASS" endtime="20151203 10:07:50.852" starttime="20151203 10:07:50.795"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.867" starttime="20151203 10:07:50.861"></status>
</kw>
<msg timestamp="20151203 10:07:50.870" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:07:50.871" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:07:50.868" starttime="20151203 10:07:50.856"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.887" starttime="20151203 10:07:50.884"></status>
</kw>
<msg timestamp="20151203 10:07:50.890" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:07:50.889" starttime="20151203 10:07:50.874"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151203 10:07:50.898" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 6110)</msg>
<status status="PASS" endtime="20151203 10:07:50.897" starttime="20151203 10:07:50.893"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:07:50.906" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:07:50.905" starttime="20151203 10:07:50.901"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.911" starttime="20151203 10:07:50.908"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.935" starttime="20151203 10:07:50.931"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:07:50.980" starttime="20151203 10:07:50.938"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:50.984" starttime="20151203 10:07:50.914"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:51.002" starttime="20151203 10:07:50.997"></status>
</kw>
<msg timestamp="20151203 10:07:51.007" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:07:51.004" starttime="20151203 10:07:50.986"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:51.014" starttime="20151203 10:07:51.009"></status>
</kw>
<msg timestamp="20151203 10:07:51.019" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20151203 10:07:51.020" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:07:51.017" starttime="20151203 10:07:50.524"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:07:51.027" level="INFO">IN state= OK version= 1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:07:51.029" starttime="20151203 10:07:51.022"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:07:51.036" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:07:51.038" starttime="20151203 10:07:51.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:07:51.045" level="INFO">CRCE state= OK version= 6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:07:51.047" starttime="20151203 10:07:51.040"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:07:51.054" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:07:51.056" starttime="20151203 10:07:51.049"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20151203 10:07:51.063" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:07:51.065" starttime="20151203 10:07:51.059"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20151203 10:07:51.071" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:07:51.073" starttime="20151203 10:07:51.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20151203 10:07:51.080" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:07:51.081" starttime="20151203 10:07:51.075"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20151203 10:07:51.088" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:07:51.089" starttime="20151203 10:07:51.083"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.102" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/experimental/matko.sanseovic/reroute_changes</msg>
<status status="PASS" endtime="20151203 10:07:51.101" starttime="20151203 10:07:51.091"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.110" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/experimental/matko.sanseovic/reroute_changes</msg>
<status status="PASS" endtime="20151203 10:07:51.112" starttime="20151203 10:07:51.105"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:51.114" starttime="20151203 10:07:45.471"></status>
</kw>
<test id="s1-s1-s1-t1" name="Run PP MTC Abandon Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:51.135" starttime="20151203 10:07:51.133"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20151203 10:07:51.138" level="INFO">${INITIAL_BALANCE} = 0</msg>
<status status="PASS" endtime="20151203 10:07:51.138" starttime="20151203 10:07:51.136"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS PP IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}</arg>
<arg>POSTPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS PP DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.153" level="INFO">msg=crce_host=10.105.125.159</msg>
<status status="PASS" endtime="20151203 10:07:51.154" starttime="20151203 10:07:51.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.157" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20151203 10:07:51.157" starttime="20151203 10:07:51.155"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.160" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20151203 10:07:51.161" starttime="20151203 10:07:51.158"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.163" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20151203 10:07:51.164" starttime="20151203 10:07:51.162"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.167" level="INFO">msg=imsiRangeStart=232201667725500</msg>
<status status="PASS" endtime="20151203 10:07:51.167" starttime="20151203 10:07:51.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.170" level="INFO">msg=msisdnRangeStart=43667725500</msg>
<status status="PASS" endtime="20151203 10:07:51.171" starttime="20151203 10:07:51.168"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.173" level="INFO">msg=type=POSTPAID</msg>
<status status="PASS" endtime="20151203 10:07:51.174" starttime="20151203 10:07:51.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.176" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20151203 10:07:51.177" starttime="20151203 10:07:51.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.179" level="INFO">msg=tariffId=101004</msg>
<status status="PASS" endtime="20151203 10:07:51.180" starttime="20151203 10:07:51.178"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.183" level="INFO">msg=balance=0</msg>
<status status="PASS" endtime="20151203 10:07:51.183" starttime="20151203 10:07:51.181"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.196" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:07:51.197" starttime="20151203 10:07:51.193"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:51.198" starttime="20151203 10:07:51.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.203" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:07:51.203" starttime="20151203 10:07:51.201"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:51.204" starttime="20151203 10:07:51.199"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.209" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:07:51.210" starttime="20151203 10:07:51.207"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:51.211" starttime="20151203 10:07:51.205"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:51.212" starttime="20151203 10:07:51.185"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20151203 10:07:51.216" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20151203 10:07:51.216" starttime="20151203 10:07:51.213"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:51.219" starttime="20151203 10:07:51.217"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:51.226" starttime="20151203 10:07:51.221"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:51.232" starttime="20151203 10:07:51.228"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:51.237" starttime="20151203 10:07:51.234"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:51.242" starttime="20151203 10:07:51.239"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:51.249" starttime="20151203 10:07:51.245"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:51.255" starttime="20151203 10:07:51.251"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:51.261" starttime="20151203 10:07:51.257"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:51.267" starttime="20151203 10:07:51.263"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:51.274" starttime="20151203 10:07:51.270"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:51.280" starttime="20151203 10:07:51.276"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:51.286" starttime="20151203 10:07:51.282"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20151203 10:07:51.295" level="INFO">Running with the following project properties set: [u'crceHost=10.105.125.159', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=232201667725500', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=43667725500', u'HighLevelOps.createTestSubscribers.input.type=POSTPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101004', u'HighLevelOps.createTestSubscribers.input.balance=0']</msg>
<msg timestamp="20151203 10:07:56.168" level="INFO">10:07:51,596 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/ext] for external libraries
10:07:51,597 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
10:07:53,480 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
10:07:53,500 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.125.159]
10:07:53,500 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
10:07:53,500 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
10:07:53,500 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [2]
10:07:53,500 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [232201667725500]
10:07:53,501 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [43667725500]
10:07:53,501 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [POSTPAID]
10:07:53,501 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
10:07:53,501 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101004]
10:07:53,501 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [0]
10:07:53,501 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
10:07:53,502 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
10:07:53,513 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
10:07:53,520 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
10:07:53,973 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
10:07:54,094 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
10:07:54,365 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:07:54,366 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:07:54,392 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:07:54,399 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:07:54,583 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:07:54,583 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:07:54,583 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:07:54,584 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
10:07:54,671 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
10:07:54,937 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
10:07:54,963 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
10:07:54,965 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:07:54,967 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:07:54,967 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:07:55,021 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:07:55,021 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:07:55,028 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:07:55,028 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:07:55,028 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:07:55,029 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
10:07:55,108 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
10:07:55,114 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
10:07:55,163 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
10:07:55,166 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:07:55,168 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:07:55,168 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:07:55,179 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:07:55,179 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:07:55,185 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:07:55,185 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:07:55,185 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:07:55,185 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
10:07:55,252 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
10:07:55,263 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
10:07:55,307 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
10:07:55,310 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:07:55,311 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:07:55,312 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:07:55,339 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:07:55,339 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:07:55,345 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:07:55,346 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:07:55,346 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:07:55,346 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
10:07:55,396 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
10:07:55,398 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
10:07:55,418 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
10:07:55,420 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:07:55,421 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:07:55,421 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
10:07:55,433 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:07:55,433 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:07:55,442 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:07:55,442 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:07:55,442 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:07:55,443 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
10:07:55,505 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
10:07:55,520 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
10:07:55,551 INFO  [SoapUITestCaseRunner] running step [setBalance]
10:07:55,553 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:07:55,555 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:07:55,555 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
10:07:55,574 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:07:55,574 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:07:55,582 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:07:55,582 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:07:55,582 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:07:55,582 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
10:07:55,627 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
10:07:55,634 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
10:07:55,665 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
10:07:55,711 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
10:07:55,714 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
10:07:55,716 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:07:55,718 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:07:55,718 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:07:55,728 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:07:55,728 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:07:55,745 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:07:55,745 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:07:55,745 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:07:55,745 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
10:07:55,746 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
10:07:55,771 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
10:07:55,772 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
10:07:55,775 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:07:55,776 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:07:55,776 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:07:55,843 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:07:55,843 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:07:55,849 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:07:55,849 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:07:55,849 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:07:55,849 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
10:07:55,849 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
10:07:55,855 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
10:07:55,856 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
10:07:55,858 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:07:55,860 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:07:55,860 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:07:55,871 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:07:55,872 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:07:55,877 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:07:55,877 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:07:55,877 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:07:55,877 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
10:07:55,878 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
10:07:55,888 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
10:07:55,889 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
10:07:55,891 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:07:55,893 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:07:55,893 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:07:55,946 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:07:55,946 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:07:55,951 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:07:55,952 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:07:55,952 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:07:55,952 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
10:07:55,952 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
10:07:55,957 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
10:07:55,958 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
10:07:55,960 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:07:55,962 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:07:55,962 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
10:07:55,995 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:07:55,995 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:07:56,007 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:07:56,007 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:07:56,007 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:07:56,007 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
10:07:56,008 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
10:07:56,028 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
10:07:56,029 INFO  [SoapUITestCaseRunner] running step [setBalance]
10:07:56,031 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:07:56,033 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:07:56,033 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
10:07:56,066 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:07:56,066 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:07:56,077 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:07:56,077 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:07:56,077 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:07:56,077 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
10:07:56,078 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
10:07:56,086 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
10:07:56,087 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
10:07:56,089 INFO  [SoapUITestCaseRunner] running step [finish_successful]
10:07:56,157 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
10:07:56,158 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 2587ms, status: FINISHED
10:07:56,159 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 2587ms</msg>
<status status="PASS" endtime="20151203 10:07:56.178" starttime="20151203 10:07:51.292"></status>
</kw>
<msg timestamp="20151203 10:07:56.185" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151203 10:07:56.186" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20151203 10:07:56.181" starttime="20151203 10:07:51.288"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20151203 10:07:56.219" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20151203 10:07:56.218" starttime="20151203 10:07:56.212"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151203 10:07:56.227" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20151203 10:07:56.226" starttime="20151203 10:07:56.222"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151203 10:07:56.235" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20151203 10:07:56.234" starttime="20151203 10:07:56.230"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20151203 10:07:56.249" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20151203 10:07:56.258" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20151203 10:07:56.259" starttime="20151203 10:07:56.243"></status>
</kw>
<msg timestamp="20151203 10:07:56.260" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151203 10:07:56.261" level="INFO">${return_log_entry} = 2015-12-03 10:07:56,157 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151203 10:07:56.260" starttime="20151203 10:07:56.238"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:56.270" starttime="20151203 10:07:56.268"></status>
</kw>
<msg timestamp="20151203 10:07:56.272" level="INFO">${return_log_entry} = 2015-12-03 10:07:56,157 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151203 10:07:56.271" starttime="20151203 10:07:56.262"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:56.317" starttime="20151203 10:07:56.314"></status>
</kw>
<msg timestamp="20151203 10:07:56.318" level="INFO">${return_log_entry} = 2015-12-03 10:07:56,157 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151203 10:07:56.318" starttime="20151203 10:07:56.273"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:56.327" starttime="20151203 10:07:56.324"></status>
</kw>
<msg timestamp="20151203 10:07:56.328" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:07:56.327" starttime="20151203 10:07:56.319"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:56.338" starttime="20151203 10:07:56.336"></status>
</kw>
<msg timestamp="20151203 10:07:56.340" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:07:56.339" starttime="20151203 10:07:56.329"></status>
</kw>
<msg timestamp="20151203 10:07:56.342" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:07:56.341" starttime="20151203 10:07:56.191"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:56.353" starttime="20151203 10:07:56.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:56.355" starttime="20151203 10:07:56.353"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:56.358" starttime="20151203 10:07:56.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20151203 10:07:56.371" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20151203 10:07:56.372" starttime="20151203 10:07:56.365"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:56.373" starttime="20151203 10:07:56.363"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:56.373" starttime="20151203 10:07:56.359"></status>
</kw>
<status status="PASS" endtime="20151203 10:07:56.374" starttime="20151203 10:07:56.343"></status>
</kw>
<msg timestamp="20151203 10:07:56.377" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20151203 10:07:56.376" starttime="20151203 10:07:51.141"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20151203 10:07:56.384" level="INFO">${calling_party_msisdn} = 43667725501</msg>
<status status="PASS" endtime="20151203 10:07:56.383" starttime="20151203 10:07:56.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20151203 10:07:56.387" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:07:56.388" starttime="20151203 10:07:56.385"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Postpaid Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:07:56.391" level="INFO">Test Postpaid Subscribers Created!</msg>
<status status="PASS" endtime="20151203 10:07:56.392" starttime="20151203 10:07:56.390"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC abandon *******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:56.395" starttime="20151203 10:07:56.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MTC abandon call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:07:56.398" level="INFO">Running the MTC abandon call...</msg>
<status status="PASS" endtime="20151203 10:07:56.400" starttime="20151203 10:07:56.397"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Abandon">
<doc>Runs an abandoned non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS PP IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-abandon</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20151203 10:07:56.439" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv</msg>
<status status="PASS" endtime="20151203 10:07:56.438" starttime="20151203 10:07:56.436"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20151203 10:07:56.443" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv</msg>
<status status="PASS" endtime="20151203 10:07:56.442" starttime="20151203 10:07:56.440"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20151203 10:07:56.447" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini</msg>
<status status="PASS" endtime="20151203 10:07:56.446" starttime="20151203 10:07:56.444"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20151203 10:07:56.451" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs</msg>
<status status="PASS" endtime="20151203 10:07:56.450" starttime="20151203 10:07:56.448"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:56.454" starttime="20151203 10:07:56.452"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20151203 10:07:56.459" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:07:56.460" starttime="20151203 10:07:56.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:56.463" starttime="20151203 10:07:56.461"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20151203 10:07:56.468" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:07:56.468" starttime="20151203 10:07:56.464"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20151203 10:07:56.475" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:07:56.475" starttime="20151203 10:07:56.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:56.478" starttime="20151203 10:07:56.477"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20151203 10:07:56.483" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:07:56.484" starttime="20151203 10:07:56.479"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20151203 10:07:56.490" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:07:56.491" starttime="20151203 10:07:56.485"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:07:56.494" starttime="20151203 10:07:56.492"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20151203 10:07:56.508" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs /opt/robot/robotworkspace/external_tests/experimental/matko.sanseovic/reroute_changes -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20151203 10:08:10.072" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151203 10:08:10.069" starttime="20151203 10:07:56.495"></status>
</kw>
<msg timestamp="20151203 10:08:10.077" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151203 10:08:10.074" starttime="20151203 10:07:56.420"></status>
</kw>
<msg timestamp="20151203 10:08:10.081" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151203 10:08:10.079" starttime="20151203 10:07:56.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:10.087" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20151203 10:08:10.089" starttime="20151203 10:08:10.084"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20151203 10:08:10.096" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:10.098" starttime="20151203 10:08:10.091"></status>
</kw>
<doc>Test will make an abandoned MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>mTel_PPLIGHT_TB25_supported</tag>
<tag>POSTPAID_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151203 10:08:10.100" starttime="20151203 10:07:51.118"></status>
</test>
<doc>Testing the abandoned MTC call for postpaid subscriber

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151203 10:08:10.110" starttime="20151203 10:07:44.074"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151203 10:08:10.132" starttime="20151203 10:07:44.043"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/MTC_POSTPAID-Busy" id="s1-s2" name="MTC POSTPAID-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/MTC_POSTPAID-Busy/MTC_POSTPAID-Busy-robot-suite.txt" id="s1-s2-s1" name="MTC POSTPAID-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20151203 10:08:10.409" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20151203 10:08:10.413" level="INFO">${date} = Thu Dec  3 10:08:10 CET 2015</msg>
<status status="PASS" endtime="20151203 10:08:10.413" starttime="20151203 10:08:10.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:10.416" level="INFO">Date and time: Thu Dec  3 10:08:10 CET 2015</msg>
<status status="PASS" endtime="20151203 10:08:10.417" starttime="20151203 10:08:10.414"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:10.420" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20151203 10:08:10.420" starttime="20151203 10:08:10.418"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:10.461" starttime="20151203 10:08:10.459"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:10.548" starttime="20151203 10:08:10.467"></status>
</kw>
<msg timestamp="20151203 10:08:10.554" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20151203 10:08:10.552" starttime="20151203 10:08:10.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:08:10.571" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:08:10.800" level="INFO">Read output: Last login: Thu Dec  3 09:07:47 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:08:10.802" starttime="20151203 10:08:10.567"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:10.803" starttime="20151203 10:08:10.556"></status>
</kw>
<msg timestamp="20151203 10:08:10.808" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20151203 10:08:10.807" starttime="20151203 10:08:10.452"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:08:10.819" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:08:10.818" starttime="20151203 10:08:10.810"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:08:10.825" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20151203 10:08:11.027" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:08:11.033" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.11.12-14:31:57 is running PID: 12768 </msg>
<status status="PASS" endtime="20151203 10:08:11.030" starttime="20151203 10:08:10.821"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:11.044" starttime="20151203 10:08:11.039"></status>
</kw>
<msg timestamp="20151203 10:08:11.047" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:08:11.048" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:08:11.046" starttime="20151203 10:08:11.035"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:11.062" starttime="20151203 10:08:11.059"></status>
</kw>
<msg timestamp="20151203 10:08:11.065" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:11.064" starttime="20151203 10:08:11.050"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20151203 10:08:11.072" level="INFO">${version_r} =  1.0.0 2015.11.12-14:31:57 is running PID: 12768 </msg>
<status status="PASS" endtime="20151203 10:08:11.071" starttime="20151203 10:08:11.067"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:08:11.079" level="INFO">${version} =  1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:08:11.078" starttime="20151203 10:08:11.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:11.083" starttime="20151203 10:08:11.081"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:11.100" starttime="20151203 10:08:11.096"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:08:11.109" starttime="20151203 10:08:11.102"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:11.110" starttime="20151203 10:08:11.086"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:11.123" starttime="20151203 10:08:11.120"></status>
</kw>
<msg timestamp="20151203 10:08:11.126" level="INFO">${ver} =  1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:08:11.125" starttime="20151203 10:08:11.112"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:11.132" starttime="20151203 10:08:11.128"></status>
</kw>
<msg timestamp="20151203 10:08:11.137" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20151203 10:08:11.138" level="INFO">${in_version} =  1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:08:11.135" starttime="20151203 10:08:10.432"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:11.218" starttime="20151203 10:08:11.214"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:11.273" starttime="20151203 10:08:11.229"></status>
</kw>
<msg timestamp="20151203 10:08:11.277" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20151203 10:08:11.275" starttime="20151203 10:08:11.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:08:11.293" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:08:11.605" level="INFO">Read output: Last login: Thu Dec  3 09:07:49 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:08:11.609" starttime="20151203 10:08:11.289"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:11.610" starttime="20151203 10:08:11.279"></status>
</kw>
<msg timestamp="20151203 10:08:11.616" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20151203 10:08:11.615" starttime="20151203 10:08:11.201"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:08:11.630" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:08:11.629" starttime="20151203 10:08:11.618"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:08:11.636" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20151203 10:08:11.826" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:08:11.829" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 5581 </msg>
<status status="PASS" endtime="20151203 10:08:11.828" starttime="20151203 10:08:11.632"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:11.841" starttime="20151203 10:08:11.836"></status>
</kw>
<msg timestamp="20151203 10:08:11.843" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:08:11.844" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:08:11.842" starttime="20151203 10:08:11.831"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:11.859" starttime="20151203 10:08:11.856"></status>
</kw>
<msg timestamp="20151203 10:08:11.861" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:11.860" starttime="20151203 10:08:11.846"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20151203 10:08:11.868" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 5581 </msg>
<status status="PASS" endtime="20151203 10:08:11.867" starttime="20151203 10:08:11.863"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:08:11.874" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:08:11.873" starttime="20151203 10:08:11.870"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:11.879" starttime="20151203 10:08:11.876"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:11.896" starttime="20151203 10:08:11.892"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:08:11.901" starttime="20151203 10:08:11.898"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:11.906" starttime="20151203 10:08:11.882"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:11.920" starttime="20151203 10:08:11.917"></status>
</kw>
<msg timestamp="20151203 10:08:11.922" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:08:11.921" starttime="20151203 10:08:11.908"></status>
</kw>
<msg timestamp="20151203 10:08:11.926" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20151203 10:08:11.927" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:08:11.925" starttime="20151203 10:08:11.163"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.002" starttime="20151203 10:08:11.998"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.050" starttime="20151203 10:08:12.011"></status>
</kw>
<msg timestamp="20151203 10:08:12.054" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20151203 10:08:12.052" starttime="20151203 10:08:12.005"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:08:12.070" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:08:12.236" level="INFO">Read output: Last login: Thu Dec  3 09:07:50 2015 from 10.105.80.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:08:12.238" starttime="20151203 10:08:12.066"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:12.239" starttime="20151203 10:08:12.056"></status>
</kw>
<msg timestamp="20151203 10:08:12.246" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20151203 10:08:12.244" starttime="20151203 10:08:11.985"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:08:12.258" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:08:12.257" starttime="20151203 10:08:12.248"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:08:12.263" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20151203 10:08:12.354" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:08:12.356" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.0.30830
Negret Rating &amp; Charging Engine 6.2.0.30830 is running (PID:28716, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151203 10:08:12.355" starttime="20151203 10:08:12.260"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.373" starttime="20151203 10:08:12.368"></status>
</kw>
<msg timestamp="20151203 10:08:12.375" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:08:12.376" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:08:12.374" starttime="20151203 10:08:12.359"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.391" starttime="20151203 10:08:12.388"></status>
</kw>
<msg timestamp="20151203 10:08:12.394" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:12.393" starttime="20151203 10:08:12.379"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151203 10:08:12.400" level="INFO">${version_r} =  6.2.0.30830 is running (PID:28716, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151203 10:08:12.399" starttime="20151203 10:08:12.396"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:08:12.407" level="INFO">${version} =  6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:08:12.406" starttime="20151203 10:08:12.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.411" starttime="20151203 10:08:12.409"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.432" starttime="20151203 10:08:12.428"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.440" starttime="20151203 10:08:12.434"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:12.442" starttime="20151203 10:08:12.414"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.455" starttime="20151203 10:08:12.452"></status>
</kw>
<msg timestamp="20151203 10:08:12.458" level="INFO">${ver} =  6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:08:12.457" starttime="20151203 10:08:12.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.463" starttime="20151203 10:08:12.459"></status>
</kw>
<msg timestamp="20151203 10:08:12.468" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20151203 10:08:12.469" level="INFO">${crce_version} =  6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:08:12.466" starttime="20151203 10:08:11.950"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.543" starttime="20151203 10:08:12.540"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.602" starttime="20151203 10:08:12.554"></status>
</kw>
<msg timestamp="20151203 10:08:12.605" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20151203 10:08:12.604" starttime="20151203 10:08:12.545"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:08:12.622" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:08:12.727" level="INFO">Read output: Last login: Thu Dec  3 09:08:12 2015 from 10.105.80.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:08:12.728" starttime="20151203 10:08:12.618"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:12.730" starttime="20151203 10:08:12.608"></status>
</kw>
<msg timestamp="20151203 10:08:12.734" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20151203 10:08:12.733" starttime="20151203 10:08:12.527"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:08:12.744" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:08:12.743" starttime="20151203 10:08:12.736"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:08:12.750" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20151203 10:08:12.791" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:08:12.793" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 6110)</msg>
<status status="PASS" endtime="20151203 10:08:12.792" starttime="20151203 10:08:12.746"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.804" starttime="20151203 10:08:12.799"></status>
</kw>
<msg timestamp="20151203 10:08:12.807" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:08:12.808" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:08:12.806" starttime="20151203 10:08:12.795"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.822" starttime="20151203 10:08:12.819"></status>
</kw>
<msg timestamp="20151203 10:08:12.824" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:12.823" starttime="20151203 10:08:12.810"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151203 10:08:12.831" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 6110)</msg>
<status status="PASS" endtime="20151203 10:08:12.830" starttime="20151203 10:08:12.826"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:08:12.837" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:08:12.837" starttime="20151203 10:08:12.833"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.842" starttime="20151203 10:08:12.839"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.857" starttime="20151203 10:08:12.854"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.866" starttime="20151203 10:08:12.859"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:12.868" starttime="20151203 10:08:12.844"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.880" starttime="20151203 10:08:12.877"></status>
</kw>
<msg timestamp="20151203 10:08:12.883" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:08:12.882" starttime="20151203 10:08:12.869"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.889" starttime="20151203 10:08:12.885"></status>
</kw>
<msg timestamp="20151203 10:08:12.892" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20151203 10:08:12.893" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:08:12.891" starttime="20151203 10:08:12.492"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:12.899" level="INFO">IN state= OK version= 1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:08:12.900" starttime="20151203 10:08:12.895"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:12.906" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:08:12.908" starttime="20151203 10:08:12.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:12.913" level="INFO">CRCE state= OK version= 6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:08:12.915" starttime="20151203 10:08:12.909"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:12.920" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:08:12.922" starttime="20151203 10:08:12.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20151203 10:08:12.927" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:12.929" starttime="20151203 10:08:12.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20151203 10:08:12.934" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:12.935" starttime="20151203 10:08:12.930"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20151203 10:08:12.940" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:12.942" starttime="20151203 10:08:12.937"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20151203 10:08:12.947" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:12.948" starttime="20151203 10:08:12.944"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<msg timestamp="20151203 10:08:12.960" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/experimental/matko.sanseovic/reroute_changes</msg>
<status status="PASS" endtime="20151203 10:08:12.959" starttime="20151203 10:08:12.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20151203 10:08:12.966" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/experimental/matko.sanseovic/reroute_changes</msg>
<status status="PASS" endtime="20151203 10:08:12.967" starttime="20151203 10:08:12.962"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:12.969" starttime="20151203 10:08:10.399"></status>
</kw>
<test id="s1-s2-s1-t1" name="Run PP MTC Busy Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:12.987" starttime="20151203 10:08:12.984"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20151203 10:08:12.993" level="INFO">${INITIAL_BALANCE} = 0</msg>
<status status="PASS" endtime="20151203 10:08:12.992" starttime="20151203 10:08:12.989"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS PP IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}</arg>
<arg>POSTPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS PP DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20151203 10:08:13.012" level="INFO">msg=crce_host=10.105.125.159</msg>
<status status="PASS" endtime="20151203 10:08:13.013" starttime="20151203 10:08:13.011"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20151203 10:08:13.015" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20151203 10:08:13.016" starttime="20151203 10:08:13.014"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20151203 10:08:13.018" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20151203 10:08:13.018" starttime="20151203 10:08:13.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20151203 10:08:13.021" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20151203 10:08:13.021" starttime="20151203 10:08:13.019"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20151203 10:08:13.023" level="INFO">msg=imsiRangeStart=232201667725500</msg>
<status status="PASS" endtime="20151203 10:08:13.024" starttime="20151203 10:08:13.022"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20151203 10:08:13.026" level="INFO">msg=msisdnRangeStart=43667725500</msg>
<status status="PASS" endtime="20151203 10:08:13.027" starttime="20151203 10:08:13.025"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20151203 10:08:13.029" level="INFO">msg=type=POSTPAID</msg>
<status status="PASS" endtime="20151203 10:08:13.029" starttime="20151203 10:08:13.028"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20151203 10:08:13.032" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20151203 10:08:13.032" starttime="20151203 10:08:13.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20151203 10:08:13.034" level="INFO">msg=tariffId=101004</msg>
<status status="PASS" endtime="20151203 10:08:13.035" starttime="20151203 10:08:13.033"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20151203 10:08:13.037" level="INFO">msg=balance=0</msg>
<status status="PASS" endtime="20151203 10:08:13.038" starttime="20151203 10:08:13.036"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20151203 10:08:13.047" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:13.048" starttime="20151203 10:08:13.045"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:13.049" starttime="20151203 10:08:13.043"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20151203 10:08:13.053" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:13.053" starttime="20151203 10:08:13.051"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:13.054" starttime="20151203 10:08:13.049"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20151203 10:08:13.058" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:13.059" starttime="20151203 10:08:13.056"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:13.059" starttime="20151203 10:08:13.055"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:13.060" starttime="20151203 10:08:13.039"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20151203 10:08:13.063" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20151203 10:08:13.064" starttime="20151203 10:08:13.061"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:13.066" starttime="20151203 10:08:13.065"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:13.069" starttime="20151203 10:08:13.067"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:13.071" starttime="20151203 10:08:13.070"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:13.073" starttime="20151203 10:08:13.072"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:13.075" starttime="20151203 10:08:13.074"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:13.078" starttime="20151203 10:08:13.076"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:13.080" starttime="20151203 10:08:13.079"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:13.083" starttime="20151203 10:08:13.081"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:13.086" starttime="20151203 10:08:13.084"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:13.088" starttime="20151203 10:08:13.087"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:13.091" starttime="20151203 10:08:13.089"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:13.093" starttime="20151203 10:08:13.092"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20151203 10:08:13.097" level="INFO">Running with the following project properties set: [u'crceHost=10.105.125.159', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=232201667725500', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=43667725500', u'HighLevelOps.createTestSubscribers.input.type=POSTPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101004', u'HighLevelOps.createTestSubscribers.input.balance=0']</msg>
<msg timestamp="20151203 10:08:14.475" level="INFO">10:08:14,472 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151203 10:08:14.478" starttime="20151203 10:08:13.095"></status>
</kw>
<msg timestamp="20151203 10:08:14.483" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151203 10:08:14.484" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20151203 10:08:14.481" starttime="20151203 10:08:13.094"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20151203 10:08:14.505" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20151203 10:08:14.504" starttime="20151203 10:08:14.499"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151203 10:08:14.511" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20151203 10:08:14.510" starttime="20151203 10:08:14.507"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151203 10:08:14.518" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20151203 10:08:14.516" starttime="20151203 10:08:14.513"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20151203 10:08:14.528" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20151203 10:08:14.530" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20151203 10:08:14.531" starttime="20151203 10:08:14.524"></status>
</kw>
<msg timestamp="20151203 10:08:14.533" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151203 10:08:14.534" level="INFO">${return_log_entry} = 2015-12-03 10:08:14,472 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151203 10:08:14.532" starttime="20151203 10:08:14.520"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:14.549" starttime="20151203 10:08:14.546"></status>
</kw>
<msg timestamp="20151203 10:08:14.551" level="INFO">${return_log_entry} = 2015-12-03 10:08:14,472 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151203 10:08:14.551" starttime="20151203 10:08:14.536"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:14.565" starttime="20151203 10:08:14.562"></status>
</kw>
<msg timestamp="20151203 10:08:14.568" level="INFO">${return_log_entry} = 2015-12-03 10:08:14,472 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151203 10:08:14.567" starttime="20151203 10:08:14.553"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:14.583" starttime="20151203 10:08:14.579"></status>
</kw>
<msg timestamp="20151203 10:08:14.585" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:14.584" starttime="20151203 10:08:14.570"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:14.604" starttime="20151203 10:08:14.601"></status>
</kw>
<msg timestamp="20151203 10:08:14.607" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:14.606" starttime="20151203 10:08:14.587"></status>
</kw>
<msg timestamp="20151203 10:08:14.610" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:14.609" starttime="20151203 10:08:14.489"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:14.625" starttime="20151203 10:08:14.622"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:14.630" starttime="20151203 10:08:14.627"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:14.633" starttime="20151203 10:08:14.631"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20151203 10:08:14.641" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20151203 10:08:14.642" starttime="20151203 10:08:14.639"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:14.642" starttime="20151203 10:08:14.638"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:14.643" starttime="20151203 10:08:14.634"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:14.644" starttime="20151203 10:08:14.613"></status>
</kw>
<msg timestamp="20151203 10:08:14.646" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20151203 10:08:14.645" starttime="20151203 10:08:12.998"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20151203 10:08:14.650" level="INFO">${calling_party_msisdn} = 43667725501</msg>
<status status="PASS" endtime="20151203 10:08:14.649" starttime="20151203 10:08:14.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20151203 10:08:14.652" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:14.653" starttime="20151203 10:08:14.651"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Postpaid Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:14.655" level="INFO">Test Postpaid Subscribers Created!</msg>
<status status="PASS" endtime="20151203 10:08:14.656" starttime="20151203 10:08:14.654"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run busy MTC *******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:14.658" starttime="20151203 10:08:14.657"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:14.660" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20151203 10:08:14.661" starttime="20151203 10:08:14.659"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Busy">
<doc>Runs a busy non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS PP IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-busy</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20151203 10:08:14.682" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv</msg>
<status status="PASS" endtime="20151203 10:08:14.681" starttime="20151203 10:08:14.680"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20151203 10:08:14.685" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv</msg>
<status status="PASS" endtime="20151203 10:08:14.684" starttime="20151203 10:08:14.683"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20151203 10:08:14.688" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini</msg>
<status status="PASS" endtime="20151203 10:08:14.687" starttime="20151203 10:08:14.686"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20151203 10:08:14.691" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs</msg>
<status status="PASS" endtime="20151203 10:08:14.690" starttime="20151203 10:08:14.689"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:14.693" starttime="20151203 10:08:14.691"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20151203 10:08:14.696" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:14.697" starttime="20151203 10:08:14.693"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:14.699" starttime="20151203 10:08:14.697"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20151203 10:08:14.702" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:14.702" starttime="20151203 10:08:14.699"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20151203 10:08:14.706" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:14.707" starttime="20151203 10:08:14.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:14.709" starttime="20151203 10:08:14.707"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20151203 10:08:14.712" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:14.713" starttime="20151203 10:08:14.709"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20151203 10:08:14.717" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:14.717" starttime="20151203 10:08:14.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:14.719" starttime="20151203 10:08:14.718"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20151203 10:08:14.729" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs /opt/robot/robotworkspace/external_tests/experimental/matko.sanseovic/reroute_changes -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20151203 10:08:23.115" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151203 10:08:23.110" starttime="20151203 10:08:14.720"></status>
</kw>
<msg timestamp="20151203 10:08:23.120" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151203 10:08:23.118" starttime="20151203 10:08:14.672"></status>
</kw>
<msg timestamp="20151203 10:08:23.124" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151203 10:08:23.123" starttime="20151203 10:08:14.663"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:23.130" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20151203 10:08:23.132" starttime="20151203 10:08:23.127"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20151203 10:08:23.138" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:23.140" starttime="20151203 10:08:23.134"></status>
</kw>
<doc>Test will make a busy MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>mTel_PPLIGHT_TB25_supported</tag>
<tag>POSTPAID_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151203 10:08:23.142" starttime="20151203 10:08:12.972"></status>
</test>
<doc>Testing the postpaid busy MTC call (called party is busy)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151203 10:08:23.150" starttime="20151203 10:08:10.186"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151203 10:08:23.170" starttime="20151203 10:08:10.145"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/MTC_POSTPAID-NoAnswer" id="s1-s3" name="MTC POSTPAID-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/MTC_POSTPAID-NoAnswer/MTC_POSTPAID-NoAnswer-robot-suite.txt" id="s1-s3-s1" name="MTC POSTPAID-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20151203 10:08:23.529" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20151203 10:08:23.538" level="INFO">${date} = Thu Dec  3 10:08:23 CET 2015</msg>
<status status="PASS" endtime="20151203 10:08:23.536" starttime="20151203 10:08:23.524"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:23.544" level="INFO">Date and time: Thu Dec  3 10:08:23 CET 2015</msg>
<status status="PASS" endtime="20151203 10:08:23.545" starttime="20151203 10:08:23.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:23.550" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20151203 10:08:23.552" starttime="20151203 10:08:23.547"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:23.624" starttime="20151203 10:08:23.621"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:23.682" starttime="20151203 10:08:23.636"></status>
</kw>
<msg timestamp="20151203 10:08:23.685" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20151203 10:08:23.684" starttime="20151203 10:08:23.626"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:08:23.700" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:08:23.888" level="INFO">Read output: Last login: Thu Dec  3 09:08:10 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:08:23.890" starttime="20151203 10:08:23.697"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:23.891" starttime="20151203 10:08:23.687"></status>
</kw>
<msg timestamp="20151203 10:08:23.894" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20151203 10:08:23.893" starttime="20151203 10:08:23.609"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:08:23.905" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:08:23.904" starttime="20151203 10:08:23.896"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:08:23.910" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20151203 10:08:24.106" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:08:24.109" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.11.12-14:31:57 is running PID: 12768 </msg>
<status status="PASS" endtime="20151203 10:08:24.107" starttime="20151203 10:08:23.906"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:24.120" starttime="20151203 10:08:24.115"></status>
</kw>
<msg timestamp="20151203 10:08:24.122" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:08:24.123" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:08:24.121" starttime="20151203 10:08:24.111"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:24.136" starttime="20151203 10:08:24.133"></status>
</kw>
<msg timestamp="20151203 10:08:24.138" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:24.137" starttime="20151203 10:08:24.125"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20151203 10:08:24.144" level="INFO">${version_r} =  1.0.0 2015.11.12-14:31:57 is running PID: 12768 </msg>
<status status="PASS" endtime="20151203 10:08:24.143" starttime="20151203 10:08:24.140"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:08:24.151" level="INFO">${version} =  1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:08:24.150" starttime="20151203 10:08:24.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:24.155" starttime="20151203 10:08:24.152"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:24.170" starttime="20151203 10:08:24.166"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:08:24.178" starttime="20151203 10:08:24.171"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:24.180" starttime="20151203 10:08:24.157"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:24.238" starttime="20151203 10:08:24.233"></status>
</kw>
<msg timestamp="20151203 10:08:24.241" level="INFO">${ver} =  1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:08:24.240" starttime="20151203 10:08:24.181"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:24.247" starttime="20151203 10:08:24.243"></status>
</kw>
<msg timestamp="20151203 10:08:24.252" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20151203 10:08:24.253" level="INFO">${in_version} =  1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:08:24.250" starttime="20151203 10:08:23.575"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:24.326" starttime="20151203 10:08:24.323"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:24.379" starttime="20151203 10:08:24.337"></status>
</kw>
<msg timestamp="20151203 10:08:24.381" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20151203 10:08:24.380" starttime="20151203 10:08:24.328"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:08:24.389" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:08:24.636" level="INFO">Read output: Last login: Thu Dec  3 09:08:11 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:08:24.638" starttime="20151203 10:08:24.387"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:24.639" starttime="20151203 10:08:24.382"></status>
</kw>
<msg timestamp="20151203 10:08:24.643" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20151203 10:08:24.642" starttime="20151203 10:08:24.311"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:08:24.653" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:08:24.652" starttime="20151203 10:08:24.645"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:08:24.658" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20151203 10:08:24.841" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:08:24.844" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 5581 </msg>
<status status="PASS" endtime="20151203 10:08:24.843" starttime="20151203 10:08:24.655"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:24.854" starttime="20151203 10:08:24.850"></status>
</kw>
<msg timestamp="20151203 10:08:24.856" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:08:24.857" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:08:24.855" starttime="20151203 10:08:24.846"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:24.870" starttime="20151203 10:08:24.867"></status>
</kw>
<msg timestamp="20151203 10:08:24.874" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:24.873" starttime="20151203 10:08:24.859"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20151203 10:08:24.882" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 5581 </msg>
<status status="PASS" endtime="20151203 10:08:24.881" starttime="20151203 10:08:24.877"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:08:24.888" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:08:24.887" starttime="20151203 10:08:24.884"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:24.892" starttime="20151203 10:08:24.890"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:24.907" starttime="20151203 10:08:24.904"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:08:24.912" starttime="20151203 10:08:24.909"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:24.916" starttime="20151203 10:08:24.895"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:24.929" starttime="20151203 10:08:24.926"></status>
</kw>
<msg timestamp="20151203 10:08:24.931" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:08:24.930" starttime="20151203 10:08:24.917"></status>
</kw>
<msg timestamp="20151203 10:08:24.935" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20151203 10:08:24.935" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:08:24.934" starttime="20151203 10:08:24.277"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.004" starttime="20151203 10:08:25.001"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.050" starttime="20151203 10:08:25.010"></status>
</kw>
<msg timestamp="20151203 10:08:25.053" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20151203 10:08:25.052" starttime="20151203 10:08:25.006"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.069" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:08:25.186" level="INFO">Read output: Last login: Thu Dec  3 09:08:12 2015 from 10.105.80.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:08:25.187" starttime="20151203 10:08:25.065"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:25.189" starttime="20151203 10:08:25.055"></status>
</kw>
<msg timestamp="20151203 10:08:25.193" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20151203 10:08:25.191" starttime="20151203 10:08:24.989"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:08:25.203" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:08:25.202" starttime="20151203 10:08:25.195"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:08:25.208" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20151203 10:08:25.290" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:08:25.292" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.0.30830
Negret Rating &amp; Charging Engine 6.2.0.30830 is running (PID:28716, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151203 10:08:25.291" starttime="20151203 10:08:25.205"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.302" starttime="20151203 10:08:25.298"></status>
</kw>
<msg timestamp="20151203 10:08:25.305" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:08:25.305" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:08:25.304" starttime="20151203 10:08:25.294"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.318" starttime="20151203 10:08:25.316"></status>
</kw>
<msg timestamp="20151203 10:08:25.321" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:25.320" starttime="20151203 10:08:25.307"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151203 10:08:25.327" level="INFO">${version_r} =  6.2.0.30830 is running (PID:28716, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151203 10:08:25.326" starttime="20151203 10:08:25.323"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:08:25.332" level="INFO">${version} =  6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:08:25.332" starttime="20151203 10:08:25.328"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.337" starttime="20151203 10:08:25.334"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.351" starttime="20151203 10:08:25.348"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.356" starttime="20151203 10:08:25.353"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:25.361" starttime="20151203 10:08:25.339"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.374" starttime="20151203 10:08:25.371"></status>
</kw>
<msg timestamp="20151203 10:08:25.376" level="INFO">${ver} =  6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:08:25.375" starttime="20151203 10:08:25.363"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.381" starttime="20151203 10:08:25.378"></status>
</kw>
<msg timestamp="20151203 10:08:25.385" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20151203 10:08:25.386" level="INFO">${crce_version} =  6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:08:25.383" starttime="20151203 10:08:24.957"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.454" starttime="20151203 10:08:25.451"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.506" starttime="20151203 10:08:25.465"></status>
</kw>
<msg timestamp="20151203 10:08:25.509" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20151203 10:08:25.508" starttime="20151203 10:08:25.456"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.523" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:08:25.643" level="INFO">Read output: Last login: Thu Dec  3 09:08:25 2015 from 10.105.80.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:08:25.644" starttime="20151203 10:08:25.519"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:25.646" starttime="20151203 10:08:25.511"></status>
</kw>
<msg timestamp="20151203 10:08:25.649" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20151203 10:08:25.648" starttime="20151203 10:08:25.439"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:08:25.659" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:08:25.658" starttime="20151203 10:08:25.651"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:08:25.664" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20151203 10:08:25.710" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:08:25.711" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 6110)</msg>
<status status="PASS" endtime="20151203 10:08:25.711" starttime="20151203 10:08:25.661"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.719" starttime="20151203 10:08:25.716"></status>
</kw>
<msg timestamp="20151203 10:08:25.720" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:08:25.721" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:08:25.720" starttime="20151203 10:08:25.712"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.727" starttime="20151203 10:08:25.726"></status>
</kw>
<msg timestamp="20151203 10:08:25.728" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:25.727" starttime="20151203 10:08:25.722"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151203 10:08:25.730" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 6110)</msg>
<status status="PASS" endtime="20151203 10:08:25.730" starttime="20151203 10:08:25.729"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:08:25.733" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:08:25.733" starttime="20151203 10:08:25.731"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.735" starttime="20151203 10:08:25.734"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.741" starttime="20151203 10:08:25.740"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.744" starttime="20151203 10:08:25.742"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:25.745" starttime="20151203 10:08:25.736"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.751" starttime="20151203 10:08:25.750"></status>
</kw>
<msg timestamp="20151203 10:08:25.752" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:08:25.752" starttime="20151203 10:08:25.746"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.754" starttime="20151203 10:08:25.753"></status>
</kw>
<msg timestamp="20151203 10:08:25.755" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20151203 10:08:25.756" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:08:25.755" starttime="20151203 10:08:25.408"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:25.758" level="INFO">IN state= OK version= 1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:08:25.759" starttime="20151203 10:08:25.757"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:25.762" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:08:25.762" starttime="20151203 10:08:25.760"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:25.765" level="INFO">CRCE state= OK version= 6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:08:25.765" starttime="20151203 10:08:25.763"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:25.768" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:08:25.768" starttime="20151203 10:08:25.766"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20151203 10:08:25.770" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:25.771" starttime="20151203 10:08:25.769"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20151203 10:08:25.773" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:25.774" starttime="20151203 10:08:25.772"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20151203 10:08:25.776" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:25.776" starttime="20151203 10:08:25.774"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20151203 10:08:25.778" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:25.779" starttime="20151203 10:08:25.777"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.784" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/experimental/matko.sanseovic/reroute_changes</msg>
<status status="PASS" endtime="20151203 10:08:25.783" starttime="20151203 10:08:25.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.788" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/experimental/matko.sanseovic/reroute_changes</msg>
<status status="PASS" endtime="20151203 10:08:25.794" starttime="20151203 10:08:25.785"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:25.795" starttime="20151203 10:08:23.520"></status>
</kw>
<test id="s1-s3-s1-t1" name="Run PP MTC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.815" starttime="20151203 10:08:25.812"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20151203 10:08:25.820" level="INFO">${INITIAL_BALANCE} = 0</msg>
<status status="PASS" endtime="20151203 10:08:25.819" starttime="20151203 10:08:25.817"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS PP IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}</arg>
<arg>POSTPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS PP DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.842" level="INFO">msg=crce_host=10.105.125.159</msg>
<status status="PASS" endtime="20151203 10:08:25.843" starttime="20151203 10:08:25.840"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.845" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20151203 10:08:25.845" starttime="20151203 10:08:25.843"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.847" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20151203 10:08:25.848" starttime="20151203 10:08:25.846"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.850" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20151203 10:08:25.850" starttime="20151203 10:08:25.848"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.852" level="INFO">msg=imsiRangeStart=232201667725500</msg>
<status status="PASS" endtime="20151203 10:08:25.852" starttime="20151203 10:08:25.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.854" level="INFO">msg=msisdnRangeStart=43667725500</msg>
<status status="PASS" endtime="20151203 10:08:25.855" starttime="20151203 10:08:25.853"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.857" level="INFO">msg=type=POSTPAID</msg>
<status status="PASS" endtime="20151203 10:08:25.857" starttime="20151203 10:08:25.856"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.859" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20151203 10:08:25.860" starttime="20151203 10:08:25.858"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.861" level="INFO">msg=tariffId=101004</msg>
<status status="PASS" endtime="20151203 10:08:25.862" starttime="20151203 10:08:25.860"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.864" level="INFO">msg=balance=0</msg>
<status status="PASS" endtime="20151203 10:08:25.864" starttime="20151203 10:08:25.863"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.913" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:25.914" starttime="20151203 10:08:25.910"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:25.914" starttime="20151203 10:08:25.907"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.920" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:25.921" starttime="20151203 10:08:25.917"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:25.921" starttime="20151203 10:08:25.915"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.926" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:25.927" starttime="20151203 10:08:25.924"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:25.928" starttime="20151203 10:08:25.922"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:25.929" starttime="20151203 10:08:25.866"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20151203 10:08:25.932" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20151203 10:08:25.933" starttime="20151203 10:08:25.929"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.935" starttime="20151203 10:08:25.934"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.938" starttime="20151203 10:08:25.936"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.941" starttime="20151203 10:08:25.939"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.943" starttime="20151203 10:08:25.942"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.945" starttime="20151203 10:08:25.944"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.948" starttime="20151203 10:08:25.946"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.950" starttime="20151203 10:08:25.949"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.953" starttime="20151203 10:08:25.951"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.956" starttime="20151203 10:08:25.954"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.958" starttime="20151203 10:08:25.957"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.961" starttime="20151203 10:08:25.959"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:25.964" starttime="20151203 10:08:25.962"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20151203 10:08:25.967" level="INFO">Running with the following project properties set: [u'crceHost=10.105.125.159', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=232201667725500', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=43667725500', u'HighLevelOps.createTestSubscribers.input.type=POSTPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101004', u'HighLevelOps.createTestSubscribers.input.balance=0']</msg>
<msg timestamp="20151203 10:08:27.057" level="INFO">10:08:27,054 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151203 10:08:27.058" starttime="20151203 10:08:25.966"></status>
</kw>
<msg timestamp="20151203 10:08:27.063" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151203 10:08:27.063" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20151203 10:08:27.061" starttime="20151203 10:08:25.965"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20151203 10:08:27.084" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20151203 10:08:27.083" starttime="20151203 10:08:27.076"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151203 10:08:27.089" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20151203 10:08:27.088" starttime="20151203 10:08:27.085"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151203 10:08:27.094" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20151203 10:08:27.093" starttime="20151203 10:08:27.091"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20151203 10:08:27.103" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20151203 10:08:27.104" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20151203 10:08:27.105" starttime="20151203 10:08:27.099"></status>
</kw>
<msg timestamp="20151203 10:08:27.108" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151203 10:08:27.109" level="INFO">${return_log_entry} = 2015-12-03 10:08:27,054 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151203 10:08:27.107" starttime="20151203 10:08:27.096"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:27.122" starttime="20151203 10:08:27.119"></status>
</kw>
<msg timestamp="20151203 10:08:27.124" level="INFO">${return_log_entry} = 2015-12-03 10:08:27,054 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151203 10:08:27.123" starttime="20151203 10:08:27.110"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:27.133" starttime="20151203 10:08:27.132"></status>
</kw>
<msg timestamp="20151203 10:08:27.134" level="INFO">${return_log_entry} = 2015-12-03 10:08:27,054 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151203 10:08:27.134" starttime="20151203 10:08:27.126"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:27.140" starttime="20151203 10:08:27.139"></status>
</kw>
<msg timestamp="20151203 10:08:27.141" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:27.141" starttime="20151203 10:08:27.135"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:27.149" starttime="20151203 10:08:27.148"></status>
</kw>
<msg timestamp="20151203 10:08:27.150" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:27.150" starttime="20151203 10:08:27.142"></status>
</kw>
<msg timestamp="20151203 10:08:27.151" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:27.151" starttime="20151203 10:08:27.067"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:27.157" starttime="20151203 10:08:27.156"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:27.159" starttime="20151203 10:08:27.158"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:27.161" starttime="20151203 10:08:27.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20151203 10:08:27.168" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20151203 10:08:27.169" starttime="20151203 10:08:27.166"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:27.170" starttime="20151203 10:08:27.165"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:27.170" starttime="20151203 10:08:27.162"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:27.171" starttime="20151203 10:08:27.152"></status>
</kw>
<msg timestamp="20151203 10:08:27.172" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20151203 10:08:27.172" starttime="20151203 10:08:25.825"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20151203 10:08:27.176" level="INFO">${calling_party_msisdn} = 43667725501</msg>
<status status="PASS" endtime="20151203 10:08:27.176" starttime="20151203 10:08:27.173"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20151203 10:08:27.179" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:27.179" starttime="20151203 10:08:27.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Postpaid Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:27.181" level="INFO">Test Postpaid Subscribers Created!</msg>
<status status="PASS" endtime="20151203 10:08:27.181" starttime="20151203 10:08:27.180"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:27.183" starttime="20151203 10:08:27.182"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:27.185" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20151203 10:08:27.186" starttime="20151203 10:08:27.184"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC NoAnswer">
<doc>Runs a noAnswer non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS PP IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-noanswer</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20151203 10:08:27.204" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20151203 10:08:27.203" starttime="20151203 10:08:27.202"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20151203 10:08:27.206" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20151203 10:08:27.206" starttime="20151203 10:08:27.204"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20151203 10:08:27.208" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20151203 10:08:27.208" starttime="20151203 10:08:27.207"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20151203 10:08:27.211" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs</msg>
<status status="PASS" endtime="20151203 10:08:27.210" starttime="20151203 10:08:27.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:27.212" starttime="20151203 10:08:27.211"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20151203 10:08:27.216" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:27.216" starttime="20151203 10:08:27.213"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:27.218" starttime="20151203 10:08:27.217"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20151203 10:08:27.221" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:27.221" starttime="20151203 10:08:27.219"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20151203 10:08:27.224" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:27.225" starttime="20151203 10:08:27.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:27.226" starttime="20151203 10:08:27.225"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20151203 10:08:27.229" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:27.229" starttime="20151203 10:08:27.227"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20151203 10:08:27.233" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:27.233" starttime="20151203 10:08:27.230"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:27.235" starttime="20151203 10:08:27.234"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20151203 10:08:27.243" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs /opt/robot/robotworkspace/external_tests/experimental/matko.sanseovic/reroute_changes -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20151203 10:08:31.543" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151203 10:08:31.540" starttime="20151203 10:08:27.236"></status>
</kw>
<msg timestamp="20151203 10:08:31.548" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151203 10:08:31.546" starttime="20151203 10:08:27.195"></status>
</kw>
<msg timestamp="20151203 10:08:31.551" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151203 10:08:31.549" starttime="20151203 10:08:27.188"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:31.557" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20151203 10:08:31.558" starttime="20151203 10:08:31.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20151203 10:08:31.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:31.564" starttime="20151203 10:08:31.560"></status>
</kw>
<doc>Test will make the no answer MTC call for postpaid subscriber

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>mTel_PPLIGHT_TB25_supported</tag>
<tag>POSTPAID_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151203 10:08:31.566" starttime="20151203 10:08:25.798"></status>
</test>
<doc>Testing the postpaid no answer MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151203 10:08:31.573" starttime="20151203 10:08:23.219"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151203 10:08:31.592" starttime="20151203 10:08:23.182"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/MTC_POSTPAID-ShortDuration" id="s1-s4" name="MTC POSTPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/MTC_POSTPAID-ShortDuration/MTC_POSTPAID-ShortDuration-robot-suite.txt" id="s1-s4-s1" name="MTC POSTPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20151203 10:08:31.906" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20151203 10:08:31.911" level="INFO">${date} = Thu Dec  3 10:08:31 CET 2015</msg>
<status status="PASS" endtime="20151203 10:08:31.910" starttime="20151203 10:08:31.855"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:31.914" level="INFO">Date and time: Thu Dec  3 10:08:31 CET 2015</msg>
<status status="PASS" endtime="20151203 10:08:31.915" starttime="20151203 10:08:31.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:31.918" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20151203 10:08:31.919" starttime="20151203 10:08:31.916"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:31.959" starttime="20151203 10:08:31.957"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:32.009" starttime="20151203 10:08:31.966"></status>
</kw>
<msg timestamp="20151203 10:08:32.014" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20151203 10:08:32.012" starttime="20151203 10:08:31.960"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:08:32.027" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:08:32.228" level="INFO">Read output: Last login: Thu Dec  3 09:08:23 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:08:32.230" starttime="20151203 10:08:32.024"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:32.231" starttime="20151203 10:08:32.015"></status>
</kw>
<msg timestamp="20151203 10:08:32.235" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20151203 10:08:32.233" starttime="20151203 10:08:31.951"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:08:32.245" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:08:32.244" starttime="20151203 10:08:32.237"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:08:32.249" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20151203 10:08:32.569" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:08:32.572" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.11.12-14:31:57 is running PID: 12768 </msg>
<status status="PASS" endtime="20151203 10:08:32.571" starttime="20151203 10:08:32.246"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:32.580" starttime="20151203 10:08:32.577"></status>
</kw>
<msg timestamp="20151203 10:08:32.583" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:08:32.583" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:08:32.582" starttime="20151203 10:08:32.574"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:32.596" starttime="20151203 10:08:32.593"></status>
</kw>
<msg timestamp="20151203 10:08:32.598" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:32.597" starttime="20151203 10:08:32.585"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20151203 10:08:32.603" level="INFO">${version_r} =  1.0.0 2015.11.12-14:31:57 is running PID: 12768 </msg>
<status status="PASS" endtime="20151203 10:08:32.602" starttime="20151203 10:08:32.599"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:08:32.608" level="INFO">${version} =  1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:08:32.607" starttime="20151203 10:08:32.604"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:32.611" starttime="20151203 10:08:32.609"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:32.625" starttime="20151203 10:08:32.622"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:08:32.639" starttime="20151203 10:08:32.632"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:32.640" starttime="20151203 10:08:32.614"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:32.651" starttime="20151203 10:08:32.648"></status>
</kw>
<msg timestamp="20151203 10:08:32.653" level="INFO">${ver} =  1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:08:32.652" starttime="20151203 10:08:32.642"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:32.657" starttime="20151203 10:08:32.654"></status>
</kw>
<msg timestamp="20151203 10:08:32.661" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20151203 10:08:32.662" level="INFO">${in_version} =  1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:08:32.659" starttime="20151203 10:08:31.932"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:32.725" starttime="20151203 10:08:32.723"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:32.780" starttime="20151203 10:08:32.735"></status>
</kw>
<msg timestamp="20151203 10:08:32.782" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20151203 10:08:32.781" starttime="20151203 10:08:32.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:08:32.795" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:08:33.033" level="INFO">Read output: Last login: Thu Dec  3 09:08:24 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:08:33.035" starttime="20151203 10:08:32.792"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:33.037" starttime="20151203 10:08:32.784"></status>
</kw>
<msg timestamp="20151203 10:08:33.042" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20151203 10:08:33.040" starttime="20151203 10:08:32.712"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:08:33.052" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:08:33.051" starttime="20151203 10:08:33.044"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:08:33.056" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20151203 10:08:33.236" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:08:33.239" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 5581 </msg>
<status status="PASS" endtime="20151203 10:08:33.238" starttime="20151203 10:08:33.054"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.247" starttime="20151203 10:08:33.243"></status>
</kw>
<msg timestamp="20151203 10:08:33.249" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:08:33.250" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:08:33.248" starttime="20151203 10:08:33.240"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.262" starttime="20151203 10:08:33.259"></status>
</kw>
<msg timestamp="20151203 10:08:33.264" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:33.263" starttime="20151203 10:08:33.252"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20151203 10:08:33.269" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 5581 </msg>
<status status="PASS" endtime="20151203 10:08:33.268" starttime="20151203 10:08:33.265"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:08:33.273" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:08:33.273" starttime="20151203 10:08:33.270"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.277" starttime="20151203 10:08:33.275"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.290" starttime="20151203 10:08:33.287"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.297" starttime="20151203 10:08:33.292"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:33.299" starttime="20151203 10:08:33.279"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.310" starttime="20151203 10:08:33.308"></status>
</kw>
<msg timestamp="20151203 10:08:33.313" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:08:33.312" starttime="20151203 10:08:33.300"></status>
</kw>
<msg timestamp="20151203 10:08:33.317" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20151203 10:08:33.317" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:08:33.315" starttime="20151203 10:08:32.683"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.378" starttime="20151203 10:08:33.375"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.424" starttime="20151203 10:08:33.384"></status>
</kw>
<msg timestamp="20151203 10:08:33.427" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20151203 10:08:33.426" starttime="20151203 10:08:33.379"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:08:33.440" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:08:33.559" level="INFO">Read output: Last login: Thu Dec  3 09:08:25 2015 from 10.105.80.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:08:33.560" starttime="20151203 10:08:33.437"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:33.561" starttime="20151203 10:08:33.428"></status>
</kw>
<msg timestamp="20151203 10:08:33.564" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20151203 10:08:33.563" starttime="20151203 10:08:33.366"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:08:33.572" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:08:33.572" starttime="20151203 10:08:33.565"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:08:33.576" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20151203 10:08:33.659" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:08:33.662" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.0.30830
Negret Rating &amp; Charging Engine 6.2.0.30830 is running (PID:28716, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151203 10:08:33.661" starttime="20151203 10:08:33.574"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.670" starttime="20151203 10:08:33.667"></status>
</kw>
<msg timestamp="20151203 10:08:33.672" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:08:33.673" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:08:33.671" starttime="20151203 10:08:33.664"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.684" starttime="20151203 10:08:33.682"></status>
</kw>
<msg timestamp="20151203 10:08:33.686" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:33.685" starttime="20151203 10:08:33.675"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151203 10:08:33.691" level="INFO">${version_r} =  6.2.0.30830 is running (PID:28716, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151203 10:08:33.690" starttime="20151203 10:08:33.688"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:08:33.696" level="INFO">${version} =  6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:08:33.695" starttime="20151203 10:08:33.693"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.699" starttime="20151203 10:08:33.697"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.711" starttime="20151203 10:08:33.709"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.716" starttime="20151203 10:08:33.713"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:33.720" starttime="20151203 10:08:33.701"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.731" starttime="20151203 10:08:33.729"></status>
</kw>
<msg timestamp="20151203 10:08:33.733" level="INFO">${ver} =  6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:08:33.733" starttime="20151203 10:08:33.722"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.737" starttime="20151203 10:08:33.735"></status>
</kw>
<msg timestamp="20151203 10:08:33.740" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20151203 10:08:33.741" level="INFO">${crce_version} =  6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:08:33.740" starttime="20151203 10:08:33.337"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.804" starttime="20151203 10:08:33.802"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:33.863" starttime="20151203 10:08:33.813"></status>
</kw>
<msg timestamp="20151203 10:08:33.865" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20151203 10:08:33.864" starttime="20151203 10:08:33.806"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151203 10:08:33.879" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20151203 10:08:34.026" level="INFO">Read output: Last login: Thu Dec  3 09:08:33 2015 from 10.105.80.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20151203 10:08:34.028" starttime="20151203 10:08:33.875"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:34.031" starttime="20151203 10:08:33.867"></status>
</kw>
<msg timestamp="20151203 10:08:34.036" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20151203 10:08:34.034" starttime="20151203 10:08:33.792"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151203 10:08:34.047" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151203 10:08:34.046" starttime="20151203 10:08:34.038"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151203 10:08:34.051" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20151203 10:08:34.133" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151203 10:08:34.136" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 6110)</msg>
<status status="PASS" endtime="20151203 10:08:34.135" starttime="20151203 10:08:34.049"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.144" starttime="20151203 10:08:34.140"></status>
</kw>
<msg timestamp="20151203 10:08:34.146" level="INFO">${status} = PASS</msg>
<msg timestamp="20151203 10:08:34.147" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151203 10:08:34.146" starttime="20151203 10:08:34.137"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.158" starttime="20151203 10:08:34.155"></status>
</kw>
<msg timestamp="20151203 10:08:34.160" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:34.159" starttime="20151203 10:08:34.149"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151203 10:08:34.164" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 6110)</msg>
<status status="PASS" endtime="20151203 10:08:34.164" starttime="20151203 10:08:34.161"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151203 10:08:34.169" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:08:34.168" starttime="20151203 10:08:34.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.173" starttime="20151203 10:08:34.171"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.184" starttime="20151203 10:08:34.182"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.190" starttime="20151203 10:08:34.186"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:34.192" starttime="20151203 10:08:34.174"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.203" starttime="20151203 10:08:34.200"></status>
</kw>
<msg timestamp="20151203 10:08:34.205" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:08:34.204" starttime="20151203 10:08:34.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.208" starttime="20151203 10:08:34.206"></status>
</kw>
<msg timestamp="20151203 10:08:34.212" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20151203 10:08:34.213" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:08:34.211" starttime="20151203 10:08:33.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:34.217" level="INFO">IN state= OK version= 1.0.0 2015.11.12-14:31:57 </msg>
<status status="PASS" endtime="20151203 10:08:34.219" starttime="20151203 10:08:34.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:34.223" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20151203 10:08:34.224" starttime="20151203 10:08:34.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:34.229" level="INFO">CRCE state= OK version= 6.2.0.30830 </msg>
<status status="PASS" endtime="20151203 10:08:34.230" starttime="20151203 10:08:34.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:34.234" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20151203 10:08:34.236" starttime="20151203 10:08:34.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20151203 10:08:34.239" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:34.240" starttime="20151203 10:08:34.237"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20151203 10:08:34.244" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:34.245" starttime="20151203 10:08:34.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20151203 10:08:34.249" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:34.250" starttime="20151203 10:08:34.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20151203 10:08:34.254" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:34.255" starttime="20151203 10:08:34.252"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.260" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/experimental/matko.sanseovic/reroute_changes</msg>
<status status="PASS" endtime="20151203 10:08:34.260" starttime="20151203 10:08:34.256"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.262" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/experimental/matko.sanseovic/reroute_changes</msg>
<status status="PASS" endtime="20151203 10:08:34.263" starttime="20151203 10:08:34.261"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:34.263" starttime="20151203 10:08:31.851"></status>
</kw>
<test id="s1-s4-s1-t1" name="Run PP MTC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.270" starttime="20151203 10:08:34.270"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20151203 10:08:34.273" level="INFO">${INITIAL_BALANCE} = 0</msg>
<status status="PASS" endtime="20151203 10:08:34.272" starttime="20151203 10:08:34.271"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS PP IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}</arg>
<arg>POSTPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS PP DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.281" level="INFO">msg=crce_host=10.105.125.159</msg>
<status status="PASS" endtime="20151203 10:08:34.281" starttime="20151203 10:08:34.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.283" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20151203 10:08:34.284" starttime="20151203 10:08:34.282"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.285" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20151203 10:08:34.286" starttime="20151203 10:08:34.284"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.287" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20151203 10:08:34.288" starttime="20151203 10:08:34.286"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.289" level="INFO">msg=imsiRangeStart=232201667725500</msg>
<status status="PASS" endtime="20151203 10:08:34.290" starttime="20151203 10:08:34.288"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.292" level="INFO">msg=msisdnRangeStart=43667725500</msg>
<status status="PASS" endtime="20151203 10:08:34.292" starttime="20151203 10:08:34.291"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.294" level="INFO">msg=type=POSTPAID</msg>
<status status="PASS" endtime="20151203 10:08:34.294" starttime="20151203 10:08:34.293"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.296" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20151203 10:08:34.296" starttime="20151203 10:08:34.295"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.298" level="INFO">msg=tariffId=101004</msg>
<status status="PASS" endtime="20151203 10:08:34.298" starttime="20151203 10:08:34.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.300" level="INFO">msg=balance=0</msg>
<status status="PASS" endtime="20151203 10:08:34.300" starttime="20151203 10:08:34.299"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.308" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:34.309" starttime="20151203 10:08:34.306"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:34.309" starttime="20151203 10:08:34.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.312" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:34.313" starttime="20151203 10:08:34.311"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:34.313" starttime="20151203 10:08:34.310"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.316" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:34.317" starttime="20151203 10:08:34.315"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:34.317" starttime="20151203 10:08:34.314"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:34.318" starttime="20151203 10:08:34.302"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20151203 10:08:34.321" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20151203 10:08:34.321" starttime="20151203 10:08:34.319"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.323" starttime="20151203 10:08:34.322"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.325" starttime="20151203 10:08:34.324"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.327" starttime="20151203 10:08:34.325"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.328" starttime="20151203 10:08:34.327"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.330" starttime="20151203 10:08:34.329"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.332" starttime="20151203 10:08:34.331"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.334" starttime="20151203 10:08:34.332"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.336" starttime="20151203 10:08:34.334"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.337" starttime="20151203 10:08:34.336"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.339" starttime="20151203 10:08:34.338"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.341" starttime="20151203 10:08:34.340"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:34.343" starttime="20151203 10:08:34.342"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20151203 10:08:34.346" level="INFO">Running with the following project properties set: [u'crceHost=10.105.125.159', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=232201667725500', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=43667725500', u'HighLevelOps.createTestSubscribers.input.type=POSTPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101004', u'HighLevelOps.createTestSubscribers.input.balance=0']</msg>
<msg timestamp="20151203 10:08:35.234" level="INFO">10:08:35,231 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151203 10:08:35.236" starttime="20151203 10:08:34.345"></status>
</kw>
<msg timestamp="20151203 10:08:35.239" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151203 10:08:35.240" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20151203 10:08:35.238" starttime="20151203 10:08:34.344"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20151203 10:08:35.255" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20151203 10:08:35.254" starttime="20151203 10:08:35.251"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151203 10:08:35.260" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20151203 10:08:35.259" starttime="20151203 10:08:35.257"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151203 10:08:35.265" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20151203 10:08:35.264" starttime="20151203 10:08:35.261"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20151203 10:08:35.272" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20151203 10:08:35.273" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20151203 10:08:35.274" starttime="20151203 10:08:35.269"></status>
</kw>
<msg timestamp="20151203 10:08:35.276" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151203 10:08:35.277" level="INFO">${return_log_entry} = 2015-12-03 10:08:35,231 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151203 10:08:35.275" starttime="20151203 10:08:35.266"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:35.288" starttime="20151203 10:08:35.286"></status>
</kw>
<msg timestamp="20151203 10:08:35.290" level="INFO">${return_log_entry} = 2015-12-03 10:08:35,231 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151203 10:08:35.290" starttime="20151203 10:08:35.279"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:35.301" starttime="20151203 10:08:35.299"></status>
</kw>
<msg timestamp="20151203 10:08:35.303" level="INFO">${return_log_entry} = 2015-12-03 10:08:35,231 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151203 10:08:35.303" starttime="20151203 10:08:35.292"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:35.315" starttime="20151203 10:08:35.312"></status>
</kw>
<msg timestamp="20151203 10:08:35.317" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:35.316" starttime="20151203 10:08:35.305"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:35.332" starttime="20151203 10:08:35.330"></status>
</kw>
<msg timestamp="20151203 10:08:35.334" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:35.333" starttime="20151203 10:08:35.318"></status>
</kw>
<msg timestamp="20151203 10:08:35.337" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151203 10:08:35.336" starttime="20151203 10:08:35.243"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:35.348" starttime="20151203 10:08:35.346"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:35.352" starttime="20151203 10:08:35.350"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:35.355" starttime="20151203 10:08:35.353"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20151203 10:08:35.369" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PostPaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20151203 10:08:35.370" starttime="20151203 10:08:35.366"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:35.371" starttime="20151203 10:08:35.363"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:35.373" starttime="20151203 10:08:35.357"></status>
</kw>
<status status="PASS" endtime="20151203 10:08:35.374" starttime="20151203 10:08:35.339"></status>
</kw>
<msg timestamp="20151203 10:08:35.377" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20151203 10:08:35.376" starttime="20151203 10:08:34.275"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20151203 10:08:35.383" level="INFO">${calling_party_msisdn} = 43667725501</msg>
<status status="PASS" endtime="20151203 10:08:35.383" starttime="20151203 10:08:35.379"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20151203 10:08:35.385" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:35.385" starttime="20151203 10:08:35.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Postpaid Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:35.387" level="INFO">Test Postpaid Subscribers Created!</msg>
<status status="PASS" endtime="20151203 10:08:35.387" starttime="20151203 10:08:35.386"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:35.389" starttime="20151203 10:08:35.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:35.391" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20151203 10:08:35.391" starttime="20151203 10:08:35.390"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC 1s">
<doc>Runs a standard (i.e. non-roaming) MTC 1s session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS PP IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20151203 10:08:35.407" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv</msg>
<status status="PASS" endtime="20151203 10:08:35.407" starttime="20151203 10:08:35.406"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20151203 10:08:35.410" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv</msg>
<status status="PASS" endtime="20151203 10:08:35.409" starttime="20151203 10:08:35.408"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20151203 10:08:35.412" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini</msg>
<status status="PASS" endtime="20151203 10:08:35.412" starttime="20151203 10:08:35.410"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20151203 10:08:35.414" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs</msg>
<status status="PASS" endtime="20151203 10:08:35.414" starttime="20151203 10:08:35.413"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:35.416" starttime="20151203 10:08:35.415"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20151203 10:08:35.419" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:35.419" starttime="20151203 10:08:35.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:35.421" starttime="20151203 10:08:35.420"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20151203 10:08:35.423" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:35.424" starttime="20151203 10:08:35.421"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20151203 10:08:35.427" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:35.427" starttime="20151203 10:08:35.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:35.429" starttime="20151203 10:08:35.428"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20151203 10:08:35.431" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:35.431" starttime="20151203 10:08:35.429"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20151203 10:08:35.435" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151203 10:08:35.435" starttime="20151203 10:08:35.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20151203 10:08:35.437" starttime="20151203 10:08:35.436"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20151203 10:08:35.447" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs /opt/robot/robotworkspace/external_tests/experimental/matko.sanseovic/reroute_changes -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20151203 10:08:40.821" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151203 10:08:40.818" starttime="20151203 10:08:35.437"></status>
</kw>
<msg timestamp="20151203 10:08:40.826" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151203 10:08:40.824" starttime="20151203 10:08:35.400"></status>
</kw>
<msg timestamp="20151203 10:08:40.830" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151203 10:08:40.828" starttime="20151203 10:08:35.393"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151203 10:08:40.835" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20151203 10:08:40.836" starttime="20151203 10:08:40.832"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20151203 10:08:40.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151203 10:08:40.842" starttime="20151203 10:08:40.837"></status>
</kw>
<doc>Test will make a short MTC call with postpaid subscriber

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>mTel_PPLIGHT_TB25_supported</tag>
<tag>POSTPAID_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151203 10:08:40.843" starttime="20151203 10:08:34.265"></status>
</test>
<doc>Testing the postpaid MTC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151203 10:08:40.850" starttime="20151203 10:08:31.645"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151203 10:08:40.869" starttime="20151203 10:08:31.605"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151203 10:08:40.895" starttime="20151203 10:07:43.718"></status>
</suite>
<statistics>
<total>
<stat pass="4" fail="0">Critical Tests</stat>
<stat pass="4" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="4" info="" doc="" combined="" fail="0" links="">matko.sanseovic</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">MTC_only</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">mTel_PPLIGHT_TB25_supported</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">POSTPAID_only</stat>
</tag>
<suite>
<stat pass="4" id="s1" fail="0" name="MTC">MTC</stat>
<stat pass="1" id="s1-s1" fail="0" name="MTC POSTPAID-Abandon">MTC.MTC POSTPAID-Abandon</stat>
<stat pass="1" id="s1-s1-s1" fail="0" name="MTC POSTPAID-Abandon-robot-suite">MTC.MTC POSTPAID-Abandon.MTC POSTPAID-Abandon-robot-suite</stat>
<stat pass="1" id="s1-s2" fail="0" name="MTC POSTPAID-Busy">MTC.MTC POSTPAID-Busy</stat>
<stat pass="1" id="s1-s2-s1" fail="0" name="MTC POSTPAID-Busy-robot-suite">MTC.MTC POSTPAID-Busy.MTC POSTPAID-Busy-robot-suite</stat>
<stat pass="1" id="s1-s3" fail="0" name="MTC POSTPAID-NoAnswer">MTC.MTC POSTPAID-NoAnswer</stat>
<stat pass="1" id="s1-s3-s1" fail="0" name="MTC POSTPAID-NoAnswer-robot-suite">MTC.MTC POSTPAID-NoAnswer.MTC POSTPAID-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s4" fail="0" name="MTC POSTPAID-ShortDuration">MTC.MTC POSTPAID-ShortDuration</stat>
<stat pass="1" id="s1-s4-s1" fail="0" name="MTC POSTPAID-ShortDuration-robot-suite">MTC.MTC POSTPAID-ShortDuration.MTC POSTPAID-ShortDuration-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
