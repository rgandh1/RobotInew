<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20160126 08:32:47.827">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC" id="s1" name="MTC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-Abandon" id="s1-s1" name="MTC PREPAID-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-Abandon/MTC_PREPAID-Abandon-robot-suite.txt" id="s1-s1-s1" name="MTC PREPAID-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160126 08:32:49.694" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160126 08:32:49.697" level="INFO">${date} = Tue Jan 26 08:32:49 CET 2016</msg>
<status status="PASS" endtime="20160126 08:32:49.696" starttime="20160126 08:32:49.682"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:32:49.702" level="INFO">Date and time: Tue Jan 26 08:32:49 CET 2016</msg>
<status status="PASS" endtime="20160126 08:32:49.703" starttime="20160126 08:32:49.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:32:49.707" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160126 08:32:49.708" starttime="20160126 08:32:49.705"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:49.786" starttime="20160126 08:32:49.784"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:49.976" starttime="20160126 08:32:49.801"></status>
</kw>
<msg timestamp="20160126 08:32:49.978" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160126 08:32:49.977" starttime="20160126 08:32:49.788"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:32:49.989" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:32:50.554" level="INFO">Read output: Last login: Tue Jan 26 07:29:07 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:32:50.557" starttime="20160126 08:32:49.987"></status>
</kw>
<status status="PASS" endtime="20160126 08:32:50.559" starttime="20160126 08:32:49.980"></status>
</kw>
<msg timestamp="20160126 08:32:50.564" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160126 08:32:50.563" starttime="20160126 08:32:49.769"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:32:50.575" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:32:50.574" starttime="20160126 08:32:50.566"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:32:50.580" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160126 08:32:51.348" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:32:51.354" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160126 08:32:51.351" starttime="20160126 08:32:50.577"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:51.369" starttime="20160126 08:32:51.363"></status>
</kw>
<msg timestamp="20160126 08:32:51.373" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:32:51.374" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:32:51.372" starttime="20160126 08:32:51.357"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:51.393" starttime="20160126 08:32:51.389"></status>
</kw>
<msg timestamp="20160126 08:32:51.397" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:32:51.395" starttime="20160126 08:32:51.377"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160126 08:32:51.406" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160126 08:32:51.404" starttime="20160126 08:32:51.400"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:32:51.416" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:32:51.414" starttime="20160126 08:32:51.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:51.425" starttime="20160126 08:32:51.422"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:51.453" starttime="20160126 08:32:51.448"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:32:51.465" starttime="20160126 08:32:51.456"></status>
</kw>
<status status="PASS" endtime="20160126 08:32:51.468" starttime="20160126 08:32:51.429"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:51.484" starttime="20160126 08:32:51.479"></status>
</kw>
<msg timestamp="20160126 08:32:51.487" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:32:51.485" starttime="20160126 08:32:51.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:51.493" starttime="20160126 08:32:51.489"></status>
</kw>
<msg timestamp="20160126 08:32:51.499" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160126 08:32:51.500" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:32:51.497" starttime="20160126 08:32:49.731"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:51.612" starttime="20160126 08:32:51.608"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:51.682" starttime="20160126 08:32:51.626"></status>
</kw>
<msg timestamp="20160126 08:32:51.686" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160126 08:32:51.684" starttime="20160126 08:32:51.614"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:32:51.705" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:32:52.226" level="INFO">Read output: Last login: Tue Jan 26 07:29:09 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:32:52.227" starttime="20160126 08:32:51.700"></status>
</kw>
<status status="PASS" endtime="20160126 08:32:52.229" starttime="20160126 08:32:51.688"></status>
</kw>
<msg timestamp="20160126 08:32:52.233" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160126 08:32:52.231" starttime="20160126 08:32:51.586"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:32:52.239" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:32:52.239" starttime="20160126 08:32:52.234"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:32:52.242" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160126 08:32:52.745" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:32:52.749" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160126 08:32:52.747" starttime="20160126 08:32:52.241"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:52.762" starttime="20160126 08:32:52.757"></status>
</kw>
<msg timestamp="20160126 08:32:52.766" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:32:52.767" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:32:52.764" starttime="20160126 08:32:52.752"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:52.783" starttime="20160126 08:32:52.780"></status>
</kw>
<msg timestamp="20160126 08:32:52.787" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:32:52.786" starttime="20160126 08:32:52.770"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160126 08:32:52.795" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160126 08:32:52.794" starttime="20160126 08:32:52.790"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:32:52.803" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:32:52.802" starttime="20160126 08:32:52.798"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:52.809" starttime="20160126 08:32:52.806"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:52.833" starttime="20160126 08:32:52.828"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:32:52.839" starttime="20160126 08:32:52.835"></status>
</kw>
<status status="PASS" endtime="20160126 08:32:52.843" starttime="20160126 08:32:52.811"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:52.859" starttime="20160126 08:32:52.855"></status>
</kw>
<msg timestamp="20160126 08:32:52.862" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:32:52.861" starttime="20160126 08:32:52.846"></status>
</kw>
<msg timestamp="20160126 08:32:52.868" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160126 08:32:52.869" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:32:52.866" starttime="20160126 08:32:51.533"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:52.975" starttime="20160126 08:32:52.971"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:53.038" starttime="20160126 08:32:52.988"></status>
</kw>
<msg timestamp="20160126 08:32:53.041" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160126 08:32:53.040" starttime="20160126 08:32:52.977"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:32:53.049" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:32:53.620" level="INFO">Read output: Last login: Tue Jan 26 07:29:10 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:32:53.622" starttime="20160126 08:32:53.047"></status>
</kw>
<status status="PASS" endtime="20160126 08:32:53.623" starttime="20160126 08:32:53.042"></status>
</kw>
<msg timestamp="20160126 08:32:53.626" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160126 08:32:53.624" starttime="20160126 08:32:52.950"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:32:53.632" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:32:53.631" starttime="20160126 08:32:53.627"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:32:53.635" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160126 08:32:53.875" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:32:53.876" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.24.31533
Negret Rating &amp; Charging Engine 6.1.24.31533 is running (PID:3332, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160126 08:32:53.876" starttime="20160126 08:32:53.633"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:53.883" starttime="20160126 08:32:53.880"></status>
</kw>
<msg timestamp="20160126 08:32:53.884" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:32:53.885" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:32:53.883" starttime="20160126 08:32:53.878"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:53.892" starttime="20160126 08:32:53.891"></status>
</kw>
<msg timestamp="20160126 08:32:53.894" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:32:53.893" starttime="20160126 08:32:53.886"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160126 08:32:53.897" level="INFO">${version_r} =  6.1.24.31533 is running (PID:3332, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160126 08:32:53.897" starttime="20160126 08:32:53.895"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:32:53.901" level="INFO">${version} =  6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:32:53.900" starttime="20160126 08:32:53.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:53.903" starttime="20160126 08:32:53.902"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:53.914" starttime="20160126 08:32:53.912"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:32:53.918" starttime="20160126 08:32:53.915"></status>
</kw>
<status status="PASS" endtime="20160126 08:32:53.919" starttime="20160126 08:32:53.905"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:53.925" starttime="20160126 08:32:53.924"></status>
</kw>
<msg timestamp="20160126 08:32:53.927" level="INFO">${ver} =  6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:32:53.926" starttime="20160126 08:32:53.920"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:53.930" starttime="20160126 08:32:53.928"></status>
</kw>
<msg timestamp="20160126 08:32:53.932" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160126 08:32:53.933" level="INFO">${crce_version} =  6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:32:53.931" starttime="20160126 08:32:52.901"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:53.978" starttime="20160126 08:32:53.976"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.031" starttime="20160126 08:32:53.984"></status>
</kw>
<msg timestamp="20160126 08:32:54.037" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160126 08:32:54.035" starttime="20160126 08:32:53.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.056" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:32:54.451" level="INFO">Read output: Last login: Tue Jan 26 07:29:11 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:32:54.453" starttime="20160126 08:32:54.051"></status>
</kw>
<status status="PASS" endtime="20160126 08:32:54.455" starttime="20160126 08:32:54.040"></status>
</kw>
<msg timestamp="20160126 08:32:54.460" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160126 08:32:54.458" starttime="20160126 08:32:53.967"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:32:54.473" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:32:54.472" starttime="20160126 08:32:54.463"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:32:54.479" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160126 08:32:54.540" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:32:54.543" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160126 08:32:54.542" starttime="20160126 08:32:54.475"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.556" starttime="20160126 08:32:54.550"></status>
</kw>
<msg timestamp="20160126 08:32:54.559" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:32:54.560" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:32:54.558" starttime="20160126 08:32:54.545"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.576" starttime="20160126 08:32:54.573"></status>
</kw>
<msg timestamp="20160126 08:32:54.579" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:32:54.578" starttime="20160126 08:32:54.563"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160126 08:32:54.587" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160126 08:32:54.586" starttime="20160126 08:32:54.582"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:32:54.595" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:32:54.593" starttime="20160126 08:32:54.589"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.600" starttime="20160126 08:32:54.597"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.623" starttime="20160126 08:32:54.619"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.631" starttime="20160126 08:32:54.626"></status>
</kw>
<status status="PASS" endtime="20160126 08:32:54.633" starttime="20160126 08:32:54.603"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.669" starttime="20160126 08:32:54.663"></status>
</kw>
<msg timestamp="20160126 08:32:54.672" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:32:54.671" starttime="20160126 08:32:54.636"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.678" starttime="20160126 08:32:54.674"></status>
</kw>
<msg timestamp="20160126 08:32:54.684" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160126 08:32:54.685" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:32:54.681" starttime="20160126 08:32:53.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:32:54.692" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:32:54.694" starttime="20160126 08:32:54.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:32:54.701" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:32:54.702" starttime="20160126 08:32:54.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:32:54.709" level="INFO">CRCE state= OK version= 6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:32:54.711" starttime="20160126 08:32:54.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:32:54.718" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:32:54.720" starttime="20160126 08:32:54.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160126 08:32:54.727" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:32:54.728" starttime="20160126 08:32:54.722"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160126 08:32:54.735" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:32:54.736" starttime="20160126 08:32:54.730"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160126 08:32:54.743" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:32:54.744" starttime="20160126 08:32:54.738"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160126 08:32:54.750" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:32:54.752" starttime="20160126 08:32:54.746"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.773" starttime="20160126 08:32:54.764"></status>
</kw>
<msg timestamp="20160126 08:32:54.776" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160126 08:32:54.775" starttime="20160126 08:32:54.754"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.783" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160126 08:32:54.785" starttime="20160126 08:32:54.778"></status>
</kw>
<status status="PASS" endtime="20160126 08:32:54.787" starttime="20160126 08:32:49.670"></status>
</kw>
<test id="s1-s1-s1-t1" name="Run MTC Abandon Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.812" starttime="20160126 08:32:54.809"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160126 08:32:54.819" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160126 08:32:54.818" starttime="20160126 08:32:54.815"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.856" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160126 08:32:54.857" starttime="20160126 08:32:54.849"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.863" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160126 08:32:54.864" starttime="20160126 08:32:54.859"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.870" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160126 08:32:54.872" starttime="20160126 08:32:54.866"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.878" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160126 08:32:54.879" starttime="20160126 08:32:54.874"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.885" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160126 08:32:54.886" starttime="20160126 08:32:54.881"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.891" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160126 08:32:54.891" starttime="20160126 08:32:54.889"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.894" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160126 08:32:54.894" starttime="20160126 08:32:54.892"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.897" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160126 08:32:54.897" starttime="20160126 08:32:54.895"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.900" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160126 08:32:54.901" starttime="20160126 08:32:54.898"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.903" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160126 08:32:54.904" starttime="20160126 08:32:54.902"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.917" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:32:54.917" starttime="20160126 08:32:54.914"></status>
</kw>
<status status="PASS" endtime="20160126 08:32:54.918" starttime="20160126 08:32:54.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.923" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:32:54.924" starttime="20160126 08:32:54.921"></status>
</kw>
<status status="PASS" endtime="20160126 08:32:54.925" starttime="20160126 08:32:54.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.930" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:32:54.930" starttime="20160126 08:32:54.927"></status>
</kw>
<status status="PASS" endtime="20160126 08:32:54.931" starttime="20160126 08:32:54.926"></status>
</kw>
<status status="PASS" endtime="20160126 08:32:54.932" starttime="20160126 08:32:54.906"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160126 08:32:54.936" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160126 08:32:54.937" starttime="20160126 08:32:54.933"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.939" starttime="20160126 08:32:54.938"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.942" starttime="20160126 08:32:54.940"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.945" starttime="20160126 08:32:54.943"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.947" starttime="20160126 08:32:54.946"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.950" starttime="20160126 08:32:54.948"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.952" starttime="20160126 08:32:54.951"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.955" starttime="20160126 08:32:54.953"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.958" starttime="20160126 08:32:54.956"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.961" starttime="20160126 08:32:54.959"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.963" starttime="20160126 08:32:54.962"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.967" starttime="20160126 08:32:54.964"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:32:54.973" starttime="20160126 08:32:54.969"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160126 08:32:54.981" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160126 08:32:59.884" level="INFO">08:32:55,200 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/ext] for external libraries
08:32:55,200 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
08:32:56,929 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
08:32:56,944 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.119.125]
08:32:56,944 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
08:32:56,944 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
08:32:56,944 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [2]
08:32:56,944 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [334030880001000]
08:32:56,944 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [525516001000]
08:32:56,944 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
08:32:56,945 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [3]
08:32:56,945 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
08:32:56,945 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
08:32:56,945 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
08:32:56,945 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
08:32:56,954 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
08:32:56,960 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
08:32:57,392 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
08:32:57,453 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
08:32:57,604 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
08:32:57,604 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
08:32:57,739 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
08:32:57,743 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
08:32:57,946 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
08:32:57,946 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
08:32:57,946 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
08:32:57,947 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
08:32:58,050 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
08:32:58,327 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
08:32:58,353 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
08:32:58,355 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
08:32:58,357 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
08:32:58,357 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
08:32:58,510 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
08:32:58,511 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
08:32:58,516 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
08:32:58,516 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
08:32:58,516 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
08:32:58,516 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
08:32:58,587 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
08:32:58,593 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
08:32:58,640 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
08:32:58,642 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
08:32:58,644 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
08:32:58,644 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
08:32:58,669 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
08:32:58,669 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
08:32:58,672 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
08:32:58,672 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
08:32:58,672 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
08:32:58,672 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
08:32:58,704 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
08:32:58,709 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
08:32:58,729 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
08:32:58,730 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
08:32:58,732 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
08:32:58,732 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
08:32:58,789 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
08:32:58,789 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
08:32:58,794 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
08:32:58,794 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
08:32:58,794 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
08:32:58,795 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
08:32:58,849 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
08:32:58,853 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
08:32:58,888 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
08:32:58,890 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
08:32:58,891 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
08:32:58,891 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
08:32:58,914 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
08:32:58,914 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
08:32:58,926 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
08:32:58,926 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
08:32:58,926 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
08:32:58,927 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
08:32:58,986 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
08:32:59,004 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
08:32:59,048 INFO  [SoapUITestCaseRunner] running step [setBalance]
08:32:59,051 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
08:32:59,053 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
08:32:59,053 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
08:32:59,101 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
08:32:59,101 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
08:32:59,113 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
08:32:59,113 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
08:32:59,113 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
08:32:59,114 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
08:32:59,181 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
08:32:59,191 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
08:32:59,234 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
08:32:59,279 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
08:32:59,281 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
08:32:59,282 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
08:32:59,284 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
08:32:59,284 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
08:32:59,307 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
08:32:59,307 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
08:32:59,315 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
08:32:59,315 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
08:32:59,315 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
08:32:59,315 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
08:32:59,315 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
08:32:59,327 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
08:32:59,327 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
08:32:59,328 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
08:32:59,330 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
08:32:59,330 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
08:32:59,483 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
08:32:59,483 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
08:32:59,489 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
08:32:59,489 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
08:32:59,489 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
08:32:59,489 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
08:32:59,490 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
08:32:59,495 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
08:32:59,497 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
08:32:59,499 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
08:32:59,501 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
08:32:59,501 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
08:32:59,532 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
08:32:59,532 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
08:32:59,538 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
08:32:59,538 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
08:32:59,538 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
08:32:59,538 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
08:32:59,539 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
08:32:59,549 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
08:32:59,550 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
08:32:59,552 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
08:32:59,554 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
08:32:59,554 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
08:32:59,624 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
08:32:59,625 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
08:32:59,630 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
08:32:59,631 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
08:32:59,631 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
08:32:59,631 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
08:32:59,631 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
08:32:59,637 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
08:32:59,638 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
08:32:59,640 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
08:32:59,642 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
08:32:59,642 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
08:32:59,677 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
08:32:59,678 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
08:32:59,689 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
08:32:59,690 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
08:32:59,690 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
08:32:59,690 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
08:32:59,690 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
08:32:59,711 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
08:32:59,712 INFO  [SoapUITestCaseRunner] running step [setBalance]
08:32:59,714 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
08:32:59,716 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
08:32:59,716 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
08:32:59,778 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
08:32:59,779 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
08:32:59,790 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
08:32:59,790 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
08:32:59,790 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
08:32:59,790 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
08:32:59,791 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
08:32:59,799 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
08:32:59,800 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
08:32:59,802 INFO  [SoapUITestCaseRunner] running step [finish_successful]
08:32:59,873 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
08:32:59,874 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 2866ms, status: FINISHED
08:32:59,874 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 2866ms</msg>
<status status="PASS" endtime="20160126 08:32:59.895" starttime="20160126 08:32:54.978"></status>
</kw>
<msg timestamp="20160126 08:32:59.902" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160126 08:32:59.903" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160126 08:32:59.899" starttime="20160126 08:32:54.975"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160126 08:32:59.935" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160126 08:32:59.933" starttime="20160126 08:32:59.928"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160126 08:32:59.943" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160126 08:32:59.942" starttime="20160126 08:32:59.938"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160126 08:32:59.951" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160126 08:32:59.950" starttime="20160126 08:32:59.945"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160126 08:32:59.964" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160126 08:32:59.975" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160126 08:32:59.976" starttime="20160126 08:32:59.959"></status>
</kw>
<msg timestamp="20160126 08:32:59.980" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160126 08:32:59.981" level="INFO">${return_log_entry} = 2016-01-26 08:32:59,873 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 08:32:59.979" starttime="20160126 08:32:59.954"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:00.000" starttime="20160126 08:32:59.996"></status>
</kw>
<msg timestamp="20160126 08:33:00.005" level="INFO">${return_log_entry} = 2016-01-26 08:32:59,873 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 08:33:00.003" starttime="20160126 08:32:59.984"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:00.018" starttime="20160126 08:33:00.016"></status>
</kw>
<msg timestamp="20160126 08:33:00.020" level="INFO">${return_log_entry} = 2016-01-26 08:32:59,873 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 08:33:00.019" starttime="20160126 08:33:00.008"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:00.028" starttime="20160126 08:33:00.026"></status>
</kw>
<msg timestamp="20160126 08:33:00.030" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:00.029" starttime="20160126 08:33:00.021"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:00.040" starttime="20160126 08:33:00.038"></status>
</kw>
<msg timestamp="20160126 08:33:00.041" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:00.040" starttime="20160126 08:33:00.031"></status>
</kw>
<msg timestamp="20160126 08:33:00.043" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:00.042" starttime="20160126 08:32:59.908"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:00.054" starttime="20160126 08:33:00.052"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:00.056" starttime="20160126 08:33:00.054"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:00.059" starttime="20160126 08:33:00.057"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160126 08:33:00.071" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160126 08:33:00.072" starttime="20160126 08:33:00.066"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:00.073" starttime="20160126 08:33:00.064"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:00.074" starttime="20160126 08:33:00.060"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:00.075" starttime="20160126 08:33:00.045"></status>
</kw>
<msg timestamp="20160126 08:33:00.077" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160126 08:33:00.076" starttime="20160126 08:32:54.825"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160126 08:33:00.083" level="INFO">${calling_party_msisdn} = 525516001001</msg>
<status status="PASS" endtime="20160126 08:33:00.082" starttime="20160126 08:33:00.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160126 08:33:00.086" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:00.086" starttime="20160126 08:33:00.084"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:00.089" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160126 08:33:00.090" starttime="20160126 08:33:00.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC abandon *******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:00.092" starttime="20160126 08:33:00.091"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MTC abandon call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:00.095" level="INFO">Running the MTC abandon call...</msg>
<status status="PASS" endtime="20160126 08:33:00.096" starttime="20160126 08:33:00.093"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Abandon">
<doc>Runs an abandoned non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-abandon</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160126 08:33:00.127" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv</msg>
<status status="PASS" endtime="20160126 08:33:00.127" starttime="20160126 08:33:00.125"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160126 08:33:00.131" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv</msg>
<status status="PASS" endtime="20160126 08:33:00.130" starttime="20160126 08:33:00.129"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160126 08:33:00.134" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini</msg>
<status status="PASS" endtime="20160126 08:33:00.133" starttime="20160126 08:33:00.132"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160126 08:33:00.137" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs</msg>
<status status="PASS" endtime="20160126 08:33:00.137" starttime="20160126 08:33:00.135"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:00.140" starttime="20160126 08:33:00.138"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160126 08:33:00.144" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:00.145" starttime="20160126 08:33:00.141"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:00.147" starttime="20160126 08:33:00.146"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160126 08:33:00.150" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:00.151" starttime="20160126 08:33:00.148"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160126 08:33:00.155" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:00.156" starttime="20160126 08:33:00.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:00.158" starttime="20160126 08:33:00.157"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160126 08:33:00.161" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:00.162" starttime="20160126 08:33:00.159"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160126 08:33:00.167" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:00.167" starttime="20160126 08:33:00.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:00.170" starttime="20160126 08:33:00.168"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160126 08:33:00.180" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160126 08:33:13.437" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 08:33:13.432" starttime="20160126 08:33:00.170"></status>
</kw>
<msg timestamp="20160126 08:33:13.441" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 08:33:13.440" starttime="20160126 08:33:00.112"></status>
</kw>
<msg timestamp="20160126 08:33:13.443" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 08:33:13.442" starttime="20160126 08:33:00.098"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:13.446" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160126 08:33:13.447" starttime="20160126 08:33:13.445"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160126 08:33:13.450" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:13.451" starttime="20160126 08:33:13.448"></status>
</kw>
<doc>Test will make an abandoned MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160126 08:33:13.452" starttime="20160126 08:32:54.791"></status>
</test>
<doc>Testing the abandoned MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160126 08:33:13.457" starttime="20160126 08:32:48.193"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160126 08:33:13.465" starttime="20160126 08:32:48.162"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-Busy" id="s1-s2" name="MTC PREPAID-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-Busy/MTC_PREPAID-Busy-robot-suite.txt" id="s1-s2-s1" name="MTC PREPAID-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160126 08:33:13.707" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160126 08:33:13.708" level="INFO">${date} = Tue Jan 26 08:33:13 CET 2016</msg>
<status status="PASS" endtime="20160126 08:33:13.708" starttime="20160126 08:33:13.700"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:13.711" level="INFO">Date and time: Tue Jan 26 08:33:13 CET 2016</msg>
<status status="PASS" endtime="20160126 08:33:13.712" starttime="20160126 08:33:13.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:13.714" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160126 08:33:13.715" starttime="20160126 08:33:13.713"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:13.754" starttime="20160126 08:33:13.752"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:13.817" starttime="20160126 08:33:13.760"></status>
</kw>
<msg timestamp="20160126 08:33:13.820" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160126 08:33:13.819" starttime="20160126 08:33:13.755"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:33:13.829" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:33:14.490" level="INFO">Read output: Last login: Tue Jan 26 07:32:50 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:33:14.493" starttime="20160126 08:33:13.827"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:14.496" starttime="20160126 08:33:13.821"></status>
</kw>
<msg timestamp="20160126 08:33:14.503" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160126 08:33:14.501" starttime="20160126 08:33:13.745"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:33:14.515" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:33:14.514" starttime="20160126 08:33:14.505"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:33:14.521" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160126 08:33:15.307" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:33:15.311" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160126 08:33:15.309" starttime="20160126 08:33:14.517"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:15.323" starttime="20160126 08:33:15.318"></status>
</kw>
<msg timestamp="20160126 08:33:15.325" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:33:15.326" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:33:15.324" starttime="20160126 08:33:15.313"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:15.341" starttime="20160126 08:33:15.338"></status>
</kw>
<msg timestamp="20160126 08:33:15.344" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:15.343" starttime="20160126 08:33:15.329"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160126 08:33:15.350" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160126 08:33:15.349" starttime="20160126 08:33:15.346"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:33:15.357" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:33:15.356" starttime="20160126 08:33:15.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:15.362" starttime="20160126 08:33:15.359"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:15.379" starttime="20160126 08:33:15.376"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:33:15.388" starttime="20160126 08:33:15.381"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:15.390" starttime="20160126 08:33:15.365"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:15.404" starttime="20160126 08:33:15.401"></status>
</kw>
<msg timestamp="20160126 08:33:15.407" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:33:15.406" starttime="20160126 08:33:15.392"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:15.412" starttime="20160126 08:33:15.409"></status>
</kw>
<msg timestamp="20160126 08:33:15.417" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160126 08:33:15.418" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:33:15.415" starttime="20160126 08:33:13.726"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:15.496" starttime="20160126 08:33:15.492"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:15.570" starttime="20160126 08:33:15.508"></status>
</kw>
<msg timestamp="20160126 08:33:15.573" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160126 08:33:15.572" starttime="20160126 08:33:15.498"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:33:15.589" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:33:16.089" level="INFO">Read output: Last login: Tue Jan 26 07:32:51 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:33:16.092" starttime="20160126 08:33:15.585"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:16.095" starttime="20160126 08:33:15.575"></status>
</kw>
<msg timestamp="20160126 08:33:16.100" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160126 08:33:16.098" starttime="20160126 08:33:15.478"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:33:16.112" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:33:16.111" starttime="20160126 08:33:16.102"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:33:16.118" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160126 08:33:16.625" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:33:16.626" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160126 08:33:16.626" starttime="20160126 08:33:16.114"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:16.632" starttime="20160126 08:33:16.629"></status>
</kw>
<msg timestamp="20160126 08:33:16.633" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:33:16.633" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:33:16.632" starttime="20160126 08:33:16.627"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:16.640" starttime="20160126 08:33:16.639"></status>
</kw>
<msg timestamp="20160126 08:33:16.641" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:16.641" starttime="20160126 08:33:16.634"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160126 08:33:16.644" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160126 08:33:16.644" starttime="20160126 08:33:16.642"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:33:16.647" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:33:16.647" starttime="20160126 08:33:16.645"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:16.650" starttime="20160126 08:33:16.648"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:16.657" starttime="20160126 08:33:16.656"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:33:16.660" starttime="20160126 08:33:16.658"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:16.664" starttime="20160126 08:33:16.651"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:16.680" starttime="20160126 08:33:16.676"></status>
</kw>
<msg timestamp="20160126 08:33:16.682" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:33:16.681" starttime="20160126 08:33:16.667"></status>
</kw>
<msg timestamp="20160126 08:33:16.687" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160126 08:33:16.688" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:33:16.685" starttime="20160126 08:33:15.442"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:16.784" starttime="20160126 08:33:16.782"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:16.835" starttime="20160126 08:33:16.790"></status>
</kw>
<msg timestamp="20160126 08:33:16.836" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160126 08:33:16.836" starttime="20160126 08:33:16.785"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:33:16.844" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:33:17.392" level="INFO">Read output: Last login: Tue Jan 26 07:32:53 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:33:17.393" starttime="20160126 08:33:16.842"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:17.394" starttime="20160126 08:33:16.837"></status>
</kw>
<msg timestamp="20160126 08:33:17.398" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160126 08:33:17.397" starttime="20160126 08:33:16.750"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:33:17.404" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:33:17.403" starttime="20160126 08:33:17.399"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:33:17.406" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160126 08:33:17.654" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:33:17.656" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.24.31533
Negret Rating &amp; Charging Engine 6.1.24.31533 is running (PID:3332, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160126 08:33:17.655" starttime="20160126 08:33:17.405"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:17.668" starttime="20160126 08:33:17.663"></status>
</kw>
<msg timestamp="20160126 08:33:17.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:33:17.671" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:33:17.669" starttime="20160126 08:33:17.659"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:17.685" starttime="20160126 08:33:17.682"></status>
</kw>
<msg timestamp="20160126 08:33:17.688" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:17.687" starttime="20160126 08:33:17.673"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160126 08:33:17.695" level="INFO">${version_r} =  6.1.24.31533 is running (PID:3332, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160126 08:33:17.694" starttime="20160126 08:33:17.690"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:33:17.702" level="INFO">${version} =  6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:33:17.701" starttime="20160126 08:33:17.697"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:17.706" starttime="20160126 08:33:17.704"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:17.731" starttime="20160126 08:33:17.727"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:33:17.736" starttime="20160126 08:33:17.733"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:17.739" starttime="20160126 08:33:17.709"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:17.753" starttime="20160126 08:33:17.749"></status>
</kw>
<msg timestamp="20160126 08:33:17.755" level="INFO">${ver} =  6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:33:17.754" starttime="20160126 08:33:17.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:17.761" starttime="20160126 08:33:17.757"></status>
</kw>
<msg timestamp="20160126 08:33:17.766" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160126 08:33:17.767" level="INFO">${crce_version} =  6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:33:17.764" starttime="20160126 08:33:16.712"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:17.842" starttime="20160126 08:33:17.839"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:17.887" starttime="20160126 08:33:17.854"></status>
</kw>
<msg timestamp="20160126 08:33:17.889" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160126 08:33:17.888" starttime="20160126 08:33:17.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:33:17.897" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:33:18.273" level="INFO">Read output: Last login: Tue Jan 26 07:32:54 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:33:18.276" starttime="20160126 08:33:17.895"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:18.279" starttime="20160126 08:33:17.890"></status>
</kw>
<msg timestamp="20160126 08:33:18.286" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160126 08:33:18.284" starttime="20160126 08:33:17.826"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:33:18.298" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:33:18.297" starttime="20160126 08:33:18.288"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:33:18.303" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160126 08:33:18.357" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:33:18.360" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160126 08:33:18.359" starttime="20160126 08:33:18.300"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.371" starttime="20160126 08:33:18.366"></status>
</kw>
<msg timestamp="20160126 08:33:18.373" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:33:18.374" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:33:18.372" starttime="20160126 08:33:18.362"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.387" starttime="20160126 08:33:18.385"></status>
</kw>
<msg timestamp="20160126 08:33:18.390" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:18.389" starttime="20160126 08:33:18.376"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160126 08:33:18.396" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160126 08:33:18.395" starttime="20160126 08:33:18.392"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:33:18.402" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:33:18.401" starttime="20160126 08:33:18.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.406" starttime="20160126 08:33:18.404"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.422" starttime="20160126 08:33:18.419"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.430" starttime="20160126 08:33:18.424"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:18.432" starttime="20160126 08:33:18.409"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.444" starttime="20160126 08:33:18.440"></status>
</kw>
<msg timestamp="20160126 08:33:18.446" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:33:18.445" starttime="20160126 08:33:18.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.451" starttime="20160126 08:33:18.447"></status>
</kw>
<msg timestamp="20160126 08:33:18.455" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160126 08:33:18.456" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:33:18.453" starttime="20160126 08:33:17.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:18.461" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:33:18.463" starttime="20160126 08:33:18.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:18.468" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:33:18.470" starttime="20160126 08:33:18.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:18.475" level="INFO">CRCE state= OK version= 6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:33:18.476" starttime="20160126 08:33:18.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:18.482" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:33:18.483" starttime="20160126 08:33:18.478"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160126 08:33:18.488" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:18.489" starttime="20160126 08:33:18.485"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160126 08:33:18.494" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:18.495" starttime="20160126 08:33:18.491"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160126 08:33:18.500" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:18.501" starttime="20160126 08:33:18.497"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160126 08:33:18.506" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:18.507" starttime="20160126 08:33:18.503"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.519" starttime="20160126 08:33:18.516"></status>
</kw>
<msg timestamp="20160126 08:33:18.520" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160126 08:33:18.520" starttime="20160126 08:33:18.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160126 08:33:18.523" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160126 08:33:18.523" starttime="20160126 08:33:18.521"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:18.524" starttime="20160126 08:33:13.695"></status>
</kw>
<test id="s1-s2-s1-t1" name="Run MTC Busy Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.533" starttime="20160126 08:33:18.531"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160126 08:33:18.535" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160126 08:33:18.535" starttime="20160126 08:33:18.533"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160126 08:33:18.547" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160126 08:33:18.547" starttime="20160126 08:33:18.545"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160126 08:33:18.549" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160126 08:33:18.550" starttime="20160126 08:33:18.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160126 08:33:18.552" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160126 08:33:18.553" starttime="20160126 08:33:18.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160126 08:33:18.555" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160126 08:33:18.555" starttime="20160126 08:33:18.553"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160126 08:33:18.558" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160126 08:33:18.558" starttime="20160126 08:33:18.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160126 08:33:18.560" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160126 08:33:18.561" starttime="20160126 08:33:18.559"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160126 08:33:18.563" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160126 08:33:18.564" starttime="20160126 08:33:18.562"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160126 08:33:18.566" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160126 08:33:18.566" starttime="20160126 08:33:18.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160126 08:33:18.568" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160126 08:33:18.569" starttime="20160126 08:33:18.567"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160126 08:33:18.571" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160126 08:33:18.572" starttime="20160126 08:33:18.570"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160126 08:33:18.581" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:18.582" starttime="20160126 08:33:18.579"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:18.583" starttime="20160126 08:33:18.577"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160126 08:33:18.587" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:18.587" starttime="20160126 08:33:18.585"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:18.588" starttime="20160126 08:33:18.583"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160126 08:33:18.592" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:18.593" starttime="20160126 08:33:18.590"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:18.593" starttime="20160126 08:33:18.589"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:18.594" starttime="20160126 08:33:18.573"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160126 08:33:18.597" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160126 08:33:18.598" starttime="20160126 08:33:18.595"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.600" starttime="20160126 08:33:18.599"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.603" starttime="20160126 08:33:18.601"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.605" starttime="20160126 08:33:18.603"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.607" starttime="20160126 08:33:18.606"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.609" starttime="20160126 08:33:18.608"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.611" starttime="20160126 08:33:18.610"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.614" starttime="20160126 08:33:18.612"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.617" starttime="20160126 08:33:18.615"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.619" starttime="20160126 08:33:18.618"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.622" starttime="20160126 08:33:18.620"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.624" starttime="20160126 08:33:18.622"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:18.626" starttime="20160126 08:33:18.625"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160126 08:33:18.630" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160126 08:33:20.994" level="INFO">08:33:20,991 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 08:33:20.997" starttime="20160126 08:33:18.629"></status>
</kw>
<msg timestamp="20160126 08:33:21.003" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160126 08:33:21.004" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160126 08:33:21.001" starttime="20160126 08:33:18.627"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160126 08:33:21.023" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160126 08:33:21.022" starttime="20160126 08:33:21.017"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160126 08:33:21.029" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160126 08:33:21.028" starttime="20160126 08:33:21.025"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160126 08:33:21.035" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160126 08:33:21.034" starttime="20160126 08:33:21.031"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160126 08:33:21.045" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160126 08:33:21.046" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160126 08:33:21.048" starttime="20160126 08:33:21.040"></status>
</kw>
<msg timestamp="20160126 08:33:21.050" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160126 08:33:21.051" level="INFO">${return_log_entry} = 2016-01-26 08:33:20,991 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 08:33:21.049" starttime="20160126 08:33:21.037"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:21.065" starttime="20160126 08:33:21.062"></status>
</kw>
<msg timestamp="20160126 08:33:21.068" level="INFO">${return_log_entry} = 2016-01-26 08:33:20,991 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 08:33:21.067" starttime="20160126 08:33:21.053"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:21.083" starttime="20160126 08:33:21.079"></status>
</kw>
<msg timestamp="20160126 08:33:21.085" level="INFO">${return_log_entry} = 2016-01-26 08:33:20,991 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 08:33:21.084" starttime="20160126 08:33:21.070"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:21.100" starttime="20160126 08:33:21.096"></status>
</kw>
<msg timestamp="20160126 08:33:21.103" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:21.102" starttime="20160126 08:33:21.087"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:21.122" starttime="20160126 08:33:21.119"></status>
</kw>
<msg timestamp="20160126 08:33:21.124" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:21.123" starttime="20160126 08:33:21.105"></status>
</kw>
<msg timestamp="20160126 08:33:21.128" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:21.127" starttime="20160126 08:33:21.007"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:21.141" starttime="20160126 08:33:21.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:21.143" starttime="20160126 08:33:21.142"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:21.146" starttime="20160126 08:33:21.144"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160126 08:33:21.155" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160126 08:33:21.156" starttime="20160126 08:33:21.153"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:21.156" starttime="20160126 08:33:21.152"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:21.157" starttime="20160126 08:33:21.147"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:21.158" starttime="20160126 08:33:21.130"></status>
</kw>
<msg timestamp="20160126 08:33:21.160" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160126 08:33:21.159" starttime="20160126 08:33:18.537"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160126 08:33:21.164" level="INFO">${calling_party_msisdn} = 525516001001</msg>
<status status="PASS" endtime="20160126 08:33:21.164" starttime="20160126 08:33:21.161"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160126 08:33:21.167" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:21.167" starttime="20160126 08:33:21.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:21.170" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160126 08:33:21.170" starttime="20160126 08:33:21.168"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run busy MTC *******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:21.172" starttime="20160126 08:33:21.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:21.174" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160126 08:33:21.175" starttime="20160126 08:33:21.173"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Busy">
<doc>Runs a busy non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-busy</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160126 08:33:21.197" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv</msg>
<status status="PASS" endtime="20160126 08:33:21.197" starttime="20160126 08:33:21.195"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160126 08:33:21.200" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv</msg>
<status status="PASS" endtime="20160126 08:33:21.200" starttime="20160126 08:33:21.198"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160126 08:33:21.203" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini</msg>
<status status="PASS" endtime="20160126 08:33:21.203" starttime="20160126 08:33:21.201"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160126 08:33:21.206" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs</msg>
<status status="PASS" endtime="20160126 08:33:21.205" starttime="20160126 08:33:21.204"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:21.208" starttime="20160126 08:33:21.207"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160126 08:33:21.212" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:21.212" starttime="20160126 08:33:21.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:21.214" starttime="20160126 08:33:21.213"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160126 08:33:21.217" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:21.218" starttime="20160126 08:33:21.215"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160126 08:33:21.222" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:21.222" starttime="20160126 08:33:21.219"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:21.224" starttime="20160126 08:33:21.223"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160126 08:33:21.228" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:21.228" starttime="20160126 08:33:21.225"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160126 08:33:21.232" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:21.233" starttime="20160126 08:33:21.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:21.235" starttime="20160126 08:33:21.234"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160126 08:33:21.244" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160126 08:33:29.675" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 08:33:29.673" starttime="20160126 08:33:21.236"></status>
</kw>
<msg timestamp="20160126 08:33:29.677" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 08:33:29.676" starttime="20160126 08:33:21.187"></status>
</kw>
<msg timestamp="20160126 08:33:29.679" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 08:33:29.678" starttime="20160126 08:33:21.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:29.681" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160126 08:33:29.682" starttime="20160126 08:33:29.680"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160126 08:33:29.685" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:29.685" starttime="20160126 08:33:29.683"></status>
</kw>
<doc>Test will make a busy MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160126 08:33:29.686" starttime="20160126 08:33:18.526"></status>
</test>
<doc>Testing the prepaid busy MTC call (called party is busy)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160126 08:33:29.716" starttime="20160126 08:33:13.518"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160126 08:33:29.725" starttime="20160126 08:33:13.471"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer" id="s1-s3" name="MTC PREPAID-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer/MTC_PREPAID-NoAnswer-robot-suite.txt" id="s1-s3-s1" name="MTC PREPAID-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160126 08:33:29.910" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160126 08:33:29.912" level="INFO">${date} = Tue Jan 26 08:33:29 CET 2016</msg>
<status status="PASS" endtime="20160126 08:33:29.911" starttime="20160126 08:33:29.905"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:29.914" level="INFO">Date and time: Tue Jan 26 08:33:29 CET 2016</msg>
<status status="PASS" endtime="20160126 08:33:29.915" starttime="20160126 08:33:29.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:29.917" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160126 08:33:29.918" starttime="20160126 08:33:29.915"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:29.950" starttime="20160126 08:33:29.949"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:30.004" starttime="20160126 08:33:29.956"></status>
</kw>
<msg timestamp="20160126 08:33:30.006" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160126 08:33:30.006" starttime="20160126 08:33:29.951"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:33:30.013" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:33:30.460" level="INFO">Read output: Last login: Tue Jan 26 07:33:14 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:33:30.461" starttime="20160126 08:33:30.011"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:30.462" starttime="20160126 08:33:30.007"></status>
</kw>
<msg timestamp="20160126 08:33:30.465" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160126 08:33:30.464" starttime="20160126 08:33:29.943"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:33:30.471" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:33:30.470" starttime="20160126 08:33:30.466"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:33:30.473" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160126 08:33:31.061" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:33:31.063" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160126 08:33:31.062" starttime="20160126 08:33:30.471"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:31.068" starttime="20160126 08:33:31.066"></status>
</kw>
<msg timestamp="20160126 08:33:31.069" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:33:31.069" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:33:31.068" starttime="20160126 08:33:31.064"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:31.076" starttime="20160126 08:33:31.074"></status>
</kw>
<msg timestamp="20160126 08:33:31.077" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:31.076" starttime="20160126 08:33:31.070"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160126 08:33:31.080" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160126 08:33:31.079" starttime="20160126 08:33:31.077"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:33:31.082" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:33:31.082" starttime="20160126 08:33:31.080"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:31.084" starttime="20160126 08:33:31.083"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:31.091" starttime="20160126 08:33:31.090"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:33:31.095" starttime="20160126 08:33:31.092"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:31.096" starttime="20160126 08:33:31.085"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:31.101" starttime="20160126 08:33:31.100"></status>
</kw>
<msg timestamp="20160126 08:33:31.102" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:33:31.102" starttime="20160126 08:33:31.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:31.105" starttime="20160126 08:33:31.103"></status>
</kw>
<msg timestamp="20160126 08:33:31.107" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160126 08:33:31.107" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:33:31.106" starttime="20160126 08:33:29.928"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:31.139" starttime="20160126 08:33:31.138"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:31.199" starttime="20160126 08:33:31.144"></status>
</kw>
<msg timestamp="20160126 08:33:31.202" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160126 08:33:31.200" starttime="20160126 08:33:31.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:33:31.216" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:33:31.681" level="INFO">Read output: Last login: Tue Jan 26 07:33:15 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:33:31.683" starttime="20160126 08:33:31.212"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:31.683" starttime="20160126 08:33:31.204"></status>
</kw>
<msg timestamp="20160126 08:33:31.685" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160126 08:33:31.685" starttime="20160126 08:33:31.132"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:33:31.691" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:33:31.690" starttime="20160126 08:33:31.686"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:33:31.693" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160126 08:33:32.167" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:33:32.169" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160126 08:33:32.168" starttime="20160126 08:33:31.692"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:32.174" starttime="20160126 08:33:32.172"></status>
</kw>
<msg timestamp="20160126 08:33:32.175" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:33:32.175" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:33:32.174" starttime="20160126 08:33:32.170"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:32.181" starttime="20160126 08:33:32.180"></status>
</kw>
<msg timestamp="20160126 08:33:32.182" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:32.182" starttime="20160126 08:33:32.176"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160126 08:33:32.185" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160126 08:33:32.184" starttime="20160126 08:33:32.183"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:33:32.187" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:33:32.187" starttime="20160126 08:33:32.185"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:32.189" starttime="20160126 08:33:32.188"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:32.196" starttime="20160126 08:33:32.195"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:33:32.198" starttime="20160126 08:33:32.197"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:32.200" starttime="20160126 08:33:32.190"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:32.205" starttime="20160126 08:33:32.204"></status>
</kw>
<msg timestamp="20160126 08:33:32.207" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:33:32.206" starttime="20160126 08:33:32.201"></status>
</kw>
<msg timestamp="20160126 08:33:32.208" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160126 08:33:32.209" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:33:32.208" starttime="20160126 08:33:31.117"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:32.240" starttime="20160126 08:33:32.239"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:32.301" starttime="20160126 08:33:32.245"></status>
</kw>
<msg timestamp="20160126 08:33:32.304" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160126 08:33:32.303" starttime="20160126 08:33:32.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:33:32.319" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:33:32.772" level="INFO">Read output: Last login: Tue Jan 26 07:33:17 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:33:32.775" starttime="20160126 08:33:32.315"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:32.777" starttime="20160126 08:33:32.306"></status>
</kw>
<msg timestamp="20160126 08:33:32.781" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160126 08:33:32.780" starttime="20160126 08:33:32.233"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:33:32.792" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:33:32.791" starttime="20160126 08:33:32.783"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:33:32.797" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160126 08:33:33.017" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:33:33.021" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.24.31533
Negret Rating &amp; Charging Engine 6.1.24.31533 is running (PID:3332, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160126 08:33:33.019" starttime="20160126 08:33:32.794"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.031" starttime="20160126 08:33:33.027"></status>
</kw>
<msg timestamp="20160126 08:33:33.034" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:33:33.035" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:33:33.033" starttime="20160126 08:33:33.023"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.047" starttime="20160126 08:33:33.045"></status>
</kw>
<msg timestamp="20160126 08:33:33.050" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:33.049" starttime="20160126 08:33:33.036"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160126 08:33:33.056" level="INFO">${version_r} =  6.1.24.31533 is running (PID:3332, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160126 08:33:33.055" starttime="20160126 08:33:33.052"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:33:33.064" level="INFO">${version} =  6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:33:33.063" starttime="20160126 08:33:33.058"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.068" starttime="20160126 08:33:33.066"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.084" starttime="20160126 08:33:33.080"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.090" starttime="20160126 08:33:33.085"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:33.092" starttime="20160126 08:33:33.071"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.104" starttime="20160126 08:33:33.101"></status>
</kw>
<msg timestamp="20160126 08:33:33.106" level="INFO">${ver} =  6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:33:33.105" starttime="20160126 08:33:33.093"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.111" starttime="20160126 08:33:33.108"></status>
</kw>
<msg timestamp="20160126 08:33:33.115" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160126 08:33:33.116" level="INFO">${crce_version} =  6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:33:33.113" starttime="20160126 08:33:32.219"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.160" starttime="20160126 08:33:33.159"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.214" starttime="20160126 08:33:33.165"></status>
</kw>
<msg timestamp="20160126 08:33:33.216" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160126 08:33:33.215" starttime="20160126 08:33:33.161"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.223" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:33:33.554" level="INFO">Read output: Last login: Tue Jan 26 07:33:18 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:33:33.555" starttime="20160126 08:33:33.222"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:33.556" starttime="20160126 08:33:33.217"></status>
</kw>
<msg timestamp="20160126 08:33:33.559" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160126 08:33:33.558" starttime="20160126 08:33:33.154"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:33:33.566" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:33:33.566" starttime="20160126 08:33:33.561"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:33:33.569" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160126 08:33:33.631" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:33:33.633" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160126 08:33:33.632" starttime="20160126 08:33:33.567"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.640" starttime="20160126 08:33:33.636"></status>
</kw>
<msg timestamp="20160126 08:33:33.642" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:33:33.643" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:33:33.641" starttime="20160126 08:33:33.634"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.656" starttime="20160126 08:33:33.653"></status>
</kw>
<msg timestamp="20160126 08:33:33.658" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:33.657" starttime="20160126 08:33:33.645"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160126 08:33:33.664" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160126 08:33:33.663" starttime="20160126 08:33:33.660"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:33:33.669" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:33:33.668" starttime="20160126 08:33:33.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.673" starttime="20160126 08:33:33.671"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.688" starttime="20160126 08:33:33.685"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.693" starttime="20160126 08:33:33.690"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:33.696" starttime="20160126 08:33:33.675"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.709" starttime="20160126 08:33:33.706"></status>
</kw>
<msg timestamp="20160126 08:33:33.711" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:33:33.710" starttime="20160126 08:33:33.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.715" starttime="20160126 08:33:33.713"></status>
</kw>
<msg timestamp="20160126 08:33:33.719" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160126 08:33:33.720" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:33:33.718" starttime="20160126 08:33:33.137"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:33.725" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:33:33.727" starttime="20160126 08:33:33.721"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:33.732" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:33:33.733" starttime="20160126 08:33:33.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:33.738" level="INFO">CRCE state= OK version= 6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:33:33.740" starttime="20160126 08:33:33.735"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:33.745" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:33:33.747" starttime="20160126 08:33:33.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160126 08:33:33.751" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:33.753" starttime="20160126 08:33:33.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160126 08:33:33.757" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:33.758" starttime="20160126 08:33:33.754"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160126 08:33:33.763" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:33.764" starttime="20160126 08:33:33.760"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160126 08:33:33.766" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:33.767" starttime="20160126 08:33:33.765"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.775" starttime="20160126 08:33:33.772"></status>
</kw>
<msg timestamp="20160126 08:33:33.776" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160126 08:33:33.776" starttime="20160126 08:33:33.768"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.779" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160126 08:33:33.779" starttime="20160126 08:33:33.777"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:33.780" starttime="20160126 08:33:29.901"></status>
</kw>
<test id="s1-s3-s1-t1" name="Run MTC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.788" starttime="20160126 08:33:33.787"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160126 08:33:33.790" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160126 08:33:33.790" starttime="20160126 08:33:33.788"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.801" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160126 08:33:33.801" starttime="20160126 08:33:33.800"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.803" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160126 08:33:33.804" starttime="20160126 08:33:33.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.806" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160126 08:33:33.806" starttime="20160126 08:33:33.805"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.808" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160126 08:33:33.809" starttime="20160126 08:33:33.807"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.811" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160126 08:33:33.811" starttime="20160126 08:33:33.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.813" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160126 08:33:33.814" starttime="20160126 08:33:33.812"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.816" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160126 08:33:33.816" starttime="20160126 08:33:33.814"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.818" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160126 08:33:33.819" starttime="20160126 08:33:33.817"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.820" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160126 08:33:33.821" starttime="20160126 08:33:33.819"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.823" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160126 08:33:33.823" starttime="20160126 08:33:33.822"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.832" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:33.833" starttime="20160126 08:33:33.830"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:33.833" starttime="20160126 08:33:33.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.837" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:33.838" starttime="20160126 08:33:33.835"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:33.839" starttime="20160126 08:33:33.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.842" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:33.843" starttime="20160126 08:33:33.841"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:33.844" starttime="20160126 08:33:33.839"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:33.844" starttime="20160126 08:33:33.825"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160126 08:33:33.876" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160126 08:33:33.877" starttime="20160126 08:33:33.845"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.879" starttime="20160126 08:33:33.878"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.882" starttime="20160126 08:33:33.880"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.884" starttime="20160126 08:33:33.883"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.886" starttime="20160126 08:33:33.885"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.888" starttime="20160126 08:33:33.887"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.890" starttime="20160126 08:33:33.888"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.893" starttime="20160126 08:33:33.891"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.895" starttime="20160126 08:33:33.894"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.898" starttime="20160126 08:33:33.896"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.900" starttime="20160126 08:33:33.899"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.903" starttime="20160126 08:33:33.901"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:33.906" starttime="20160126 08:33:33.904"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160126 08:33:33.909" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160126 08:33:35.779" level="INFO">08:33:35,776 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 08:33:35.781" starttime="20160126 08:33:33.908"></status>
</kw>
<msg timestamp="20160126 08:33:35.785" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160126 08:33:35.786" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160126 08:33:35.783" starttime="20160126 08:33:33.906"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160126 08:33:35.804" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160126 08:33:35.803" starttime="20160126 08:33:35.799"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160126 08:33:35.809" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160126 08:33:35.808" starttime="20160126 08:33:35.805"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160126 08:33:35.815" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160126 08:33:35.814" starttime="20160126 08:33:35.811"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160126 08:33:35.823" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160126 08:33:35.825" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160126 08:33:35.826" starttime="20160126 08:33:35.820"></status>
</kw>
<msg timestamp="20160126 08:33:35.828" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160126 08:33:35.829" level="INFO">${return_log_entry} = 2016-01-26 08:33:35,776 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 08:33:35.827" starttime="20160126 08:33:35.817"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:35.843" starttime="20160126 08:33:35.840"></status>
</kw>
<msg timestamp="20160126 08:33:35.845" level="INFO">${return_log_entry} = 2016-01-26 08:33:35,776 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 08:33:35.845" starttime="20160126 08:33:35.831"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:35.858" starttime="20160126 08:33:35.855"></status>
</kw>
<msg timestamp="20160126 08:33:35.860" level="INFO">${return_log_entry} = 2016-01-26 08:33:35,776 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 08:33:35.859" starttime="20160126 08:33:35.847"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:35.874" starttime="20160126 08:33:35.870"></status>
</kw>
<msg timestamp="20160126 08:33:35.876" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:35.875" starttime="20160126 08:33:35.862"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:35.892" starttime="20160126 08:33:35.891"></status>
</kw>
<msg timestamp="20160126 08:33:35.893" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:35.893" starttime="20160126 08:33:35.878"></status>
</kw>
<msg timestamp="20160126 08:33:35.894" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:35.894" starttime="20160126 08:33:35.790"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:35.901" starttime="20160126 08:33:35.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:35.903" starttime="20160126 08:33:35.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:35.905" starttime="20160126 08:33:35.903"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160126 08:33:35.913" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160126 08:33:35.913" starttime="20160126 08:33:35.911"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:35.914" starttime="20160126 08:33:35.909"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:35.915" starttime="20160126 08:33:35.905"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:35.915" starttime="20160126 08:33:35.895"></status>
</kw>
<msg timestamp="20160126 08:33:35.917" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160126 08:33:35.916" starttime="20160126 08:33:33.792"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160126 08:33:35.921" level="INFO">${calling_party_msisdn} = 525516001001</msg>
<status status="PASS" endtime="20160126 08:33:35.921" starttime="20160126 08:33:35.918"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160126 08:33:35.924" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:35.924" starttime="20160126 08:33:35.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:35.926" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160126 08:33:35.927" starttime="20160126 08:33:35.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:35.929" starttime="20160126 08:33:35.928"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:35.931" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160126 08:33:35.931" starttime="20160126 08:33:35.930"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC NoAnswer">
<doc>Runs a noAnswer non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-noanswer</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160126 08:33:35.949" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20160126 08:33:35.949" starttime="20160126 08:33:35.947"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160126 08:33:35.952" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20160126 08:33:35.951" starttime="20160126 08:33:35.950"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160126 08:33:35.954" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20160126 08:33:35.954" starttime="20160126 08:33:35.952"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160126 08:33:35.957" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs</msg>
<status status="PASS" endtime="20160126 08:33:35.956" starttime="20160126 08:33:35.955"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:35.958" starttime="20160126 08:33:35.957"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160126 08:33:35.962" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:35.962" starttime="20160126 08:33:35.959"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:35.964" starttime="20160126 08:33:35.963"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160126 08:33:35.967" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:35.967" starttime="20160126 08:33:35.965"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160126 08:33:35.970" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:35.971" starttime="20160126 08:33:35.968"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:35.972" starttime="20160126 08:33:35.971"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160126 08:33:35.975" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:35.976" starttime="20160126 08:33:35.973"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160126 08:33:35.979" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:35.980" starttime="20160126 08:33:35.976"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:35.981" starttime="20160126 08:33:35.980"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160126 08:33:35.992" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160126 08:33:40.372" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 08:33:40.368" starttime="20160126 08:33:35.982"></status>
</kw>
<msg timestamp="20160126 08:33:40.376" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 08:33:40.374" starttime="20160126 08:33:35.941"></status>
</kw>
<msg timestamp="20160126 08:33:40.380" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 08:33:40.378" starttime="20160126 08:33:35.933"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:40.386" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160126 08:33:40.387" starttime="20160126 08:33:40.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160126 08:33:40.391" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:40.391" starttime="20160126 08:33:40.389"></status>
</kw>
<doc>Test will make the no answer MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160126 08:33:40.392" starttime="20160126 08:33:33.781"></status>
</test>
<doc>Testing the prepaid the no answer MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160126 08:33:40.395" starttime="20160126 08:33:29.749"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160126 08:33:40.403" starttime="20160126 08:33:29.731"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration" id="s1-s4" name="MTC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration/MTC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s4-s1" name="MTC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160126 08:33:40.580" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160126 08:33:40.588" level="INFO">${date} = Tue Jan 26 08:33:40 CET 2016</msg>
<status status="PASS" endtime="20160126 08:33:40.586" starttime="20160126 08:33:40.576"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:40.593" level="INFO">Date and time: Tue Jan 26 08:33:40 CET 2016</msg>
<status status="PASS" endtime="20160126 08:33:40.594" starttime="20160126 08:33:40.589"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:40.598" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160126 08:33:40.600" starttime="20160126 08:33:40.596"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:40.663" starttime="20160126 08:33:40.660"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:40.767" starttime="20160126 08:33:40.673"></status>
</kw>
<msg timestamp="20160126 08:33:40.772" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160126 08:33:40.770" starttime="20160126 08:33:40.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:33:40.788" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:33:41.409" level="INFO">Read output: Last login: Tue Jan 26 07:33:30 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:33:41.411" starttime="20160126 08:33:40.785"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:41.412" starttime="20160126 08:33:40.774"></status>
</kw>
<msg timestamp="20160126 08:33:41.415" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160126 08:33:41.414" starttime="20160126 08:33:40.650"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:33:41.420" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:33:41.420" starttime="20160126 08:33:41.416"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:33:41.423" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160126 08:33:42.569" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:33:42.571" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160126 08:33:42.570" starttime="20160126 08:33:41.421"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:42.576" starttime="20160126 08:33:42.574"></status>
</kw>
<msg timestamp="20160126 08:33:42.577" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:33:42.577" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:33:42.577" starttime="20160126 08:33:42.573"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:42.583" starttime="20160126 08:33:42.582"></status>
</kw>
<msg timestamp="20160126 08:33:42.584" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:42.583" starttime="20160126 08:33:42.578"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160126 08:33:42.586" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160126 08:33:42.586" starttime="20160126 08:33:42.584"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:33:42.588" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:33:42.588" starttime="20160126 08:33:42.587"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:42.590" starttime="20160126 08:33:42.589"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:42.596" starttime="20160126 08:33:42.595"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:33:42.598" starttime="20160126 08:33:42.597"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:42.602" starttime="20160126 08:33:42.591"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:42.607" starttime="20160126 08:33:42.605"></status>
</kw>
<msg timestamp="20160126 08:33:42.608" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:33:42.607" starttime="20160126 08:33:42.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:42.609" starttime="20160126 08:33:42.608"></status>
</kw>
<msg timestamp="20160126 08:33:42.611" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160126 08:33:42.612" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:33:42.610" starttime="20160126 08:33:40.620"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:42.640" starttime="20160126 08:33:42.638"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:42.710" starttime="20160126 08:33:42.644"></status>
</kw>
<msg timestamp="20160126 08:33:42.713" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160126 08:33:42.712" starttime="20160126 08:33:42.641"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:33:42.731" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:33:43.203" level="INFO">Read output: Last login: Tue Jan 26 07:33:31 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:33:43.205" starttime="20160126 08:33:42.728"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:43.208" starttime="20160126 08:33:42.715"></status>
</kw>
<msg timestamp="20160126 08:33:43.212" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160126 08:33:43.211" starttime="20160126 08:33:42.634"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:33:43.222" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:33:43.221" starttime="20160126 08:33:43.214"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:33:43.226" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160126 08:33:43.710" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:33:43.712" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160126 08:33:43.711" starttime="20160126 08:33:43.224"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:43.721" starttime="20160126 08:33:43.717"></status>
</kw>
<msg timestamp="20160126 08:33:43.723" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:33:43.724" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:33:43.722" starttime="20160126 08:33:43.714"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:43.735" starttime="20160126 08:33:43.733"></status>
</kw>
<msg timestamp="20160126 08:33:43.737" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:43.737" starttime="20160126 08:33:43.726"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160126 08:33:43.743" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160126 08:33:43.742" starttime="20160126 08:33:43.739"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:33:43.748" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:33:43.747" starttime="20160126 08:33:43.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:43.751" starttime="20160126 08:33:43.749"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:43.765" starttime="20160126 08:33:43.762"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:33:43.771" starttime="20160126 08:33:43.767"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:43.773" starttime="20160126 08:33:43.753"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:43.785" starttime="20160126 08:33:43.782"></status>
</kw>
<msg timestamp="20160126 08:33:43.787" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:33:43.786" starttime="20160126 08:33:43.775"></status>
</kw>
<msg timestamp="20160126 08:33:43.791" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160126 08:33:43.792" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:33:43.789" starttime="20160126 08:33:42.620"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:43.854" starttime="20160126 08:33:43.852"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:43.919" starttime="20160126 08:33:43.864"></status>
</kw>
<msg timestamp="20160126 08:33:43.922" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160126 08:33:43.921" starttime="20160126 08:33:43.856"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:33:43.954" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:33:44.403" level="INFO">Read output: Last login: Tue Jan 26 07:33:32 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:33:44.404" starttime="20160126 08:33:43.950"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:44.406" starttime="20160126 08:33:43.924"></status>
</kw>
<msg timestamp="20160126 08:33:44.408" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160126 08:33:44.407" starttime="20160126 08:33:43.841"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:33:44.420" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:33:44.420" starttime="20160126 08:33:44.408"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:33:44.424" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160126 08:33:44.660" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:33:44.664" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.24.31533
Negret Rating &amp; Charging Engine 6.1.24.31533 is running (PID:3332, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160126 08:33:44.663" starttime="20160126 08:33:44.423"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:44.674" starttime="20160126 08:33:44.670"></status>
</kw>
<msg timestamp="20160126 08:33:44.676" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:33:44.676" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:33:44.675" starttime="20160126 08:33:44.666"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:44.688" starttime="20160126 08:33:44.685"></status>
</kw>
<msg timestamp="20160126 08:33:44.690" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:44.689" starttime="20160126 08:33:44.678"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160126 08:33:44.695" level="INFO">${version_r} =  6.1.24.31533 is running (PID:3332, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160126 08:33:44.694" starttime="20160126 08:33:44.691"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:33:44.700" level="INFO">${version} =  6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:33:44.699" starttime="20160126 08:33:44.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:44.703" starttime="20160126 08:33:44.701"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:44.717" starttime="20160126 08:33:44.714"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:33:44.723" starttime="20160126 08:33:44.718"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:44.724" starttime="20160126 08:33:44.706"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:44.735" starttime="20160126 08:33:44.732"></status>
</kw>
<msg timestamp="20160126 08:33:44.737" level="INFO">${ver} =  6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:33:44.736" starttime="20160126 08:33:44.726"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:44.741" starttime="20160126 08:33:44.738"></status>
</kw>
<msg timestamp="20160126 08:33:44.745" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160126 08:33:44.746" level="INFO">${crce_version} =  6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:33:44.743" starttime="20160126 08:33:43.811"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:44.807" starttime="20160126 08:33:44.805"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:44.868" starttime="20160126 08:33:44.817"></status>
</kw>
<msg timestamp="20160126 08:33:44.870" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160126 08:33:44.869" starttime="20160126 08:33:44.809"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160126 08:33:44.876" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160126 08:33:45.230" level="INFO">Read output: Last login: Tue Jan 26 07:33:33 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160126 08:33:45.232" starttime="20160126 08:33:44.874"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:45.233" starttime="20160126 08:33:44.870"></status>
</kw>
<msg timestamp="20160126 08:33:45.235" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160126 08:33:45.235" starttime="20160126 08:33:44.794"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160126 08:33:45.240" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160126 08:33:45.240" starttime="20160126 08:33:45.236"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160126 08:33:45.242" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160126 08:33:45.302" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160126 08:33:45.303" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160126 08:33:45.303" starttime="20160126 08:33:45.241"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.307" starttime="20160126 08:33:45.305"></status>
</kw>
<msg timestamp="20160126 08:33:45.308" level="INFO">${status} = PASS</msg>
<msg timestamp="20160126 08:33:45.308" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160126 08:33:45.307" starttime="20160126 08:33:45.304"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.313" starttime="20160126 08:33:45.312"></status>
</kw>
<msg timestamp="20160126 08:33:45.314" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:45.313" starttime="20160126 08:33:45.309"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160126 08:33:45.316" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160126 08:33:45.316" starttime="20160126 08:33:45.314"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160126 08:33:45.318" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:33:45.318" starttime="20160126 08:33:45.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.320" starttime="20160126 08:33:45.319"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.326" starttime="20160126 08:33:45.325"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.330" starttime="20160126 08:33:45.327"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:45.331" starttime="20160126 08:33:45.321"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.337" starttime="20160126 08:33:45.336"></status>
</kw>
<msg timestamp="20160126 08:33:45.338" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:33:45.338" starttime="20160126 08:33:45.333"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.340" starttime="20160126 08:33:45.339"></status>
</kw>
<msg timestamp="20160126 08:33:45.342" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160126 08:33:45.342" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:33:45.341" starttime="20160126 08:33:44.765"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:45.346" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160126 08:33:45.346" starttime="20160126 08:33:45.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:45.348" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160126 08:33:45.349" starttime="20160126 08:33:45.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:45.351" level="INFO">CRCE state= OK version= 6.1.24.31533 </msg>
<status status="PASS" endtime="20160126 08:33:45.352" starttime="20160126 08:33:45.350"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:45.354" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160126 08:33:45.354" starttime="20160126 08:33:45.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160126 08:33:45.356" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:45.357" starttime="20160126 08:33:45.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160126 08:33:45.358" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:45.359" starttime="20160126 08:33:45.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160126 08:33:45.361" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:45.361" starttime="20160126 08:33:45.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160126 08:33:45.363" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:45.363" starttime="20160126 08:33:45.362"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.370" starttime="20160126 08:33:45.367"></status>
</kw>
<msg timestamp="20160126 08:33:45.371" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160126 08:33:45.371" starttime="20160126 08:33:45.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160126 08:33:45.373" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160126 08:33:45.374" starttime="20160126 08:33:45.372"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:45.374" starttime="20160126 08:33:40.572"></status>
</kw>
<test id="s1-s4-s1-t1" name="Run MTC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.381" starttime="20160126 08:33:45.380"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160126 08:33:45.383" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160126 08:33:45.383" starttime="20160126 08:33:45.382"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160126 08:33:45.392" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160126 08:33:45.392" starttime="20160126 08:33:45.391"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160126 08:33:45.394" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160126 08:33:45.395" starttime="20160126 08:33:45.393"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160126 08:33:45.397" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160126 08:33:45.397" starttime="20160126 08:33:45.395"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160126 08:33:45.399" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160126 08:33:45.399" starttime="20160126 08:33:45.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160126 08:33:45.401" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160126 08:33:45.401" starttime="20160126 08:33:45.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160126 08:33:45.403" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160126 08:33:45.404" starttime="20160126 08:33:45.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160126 08:33:45.405" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160126 08:33:45.406" starttime="20160126 08:33:45.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160126 08:33:45.408" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160126 08:33:45.408" starttime="20160126 08:33:45.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160126 08:33:45.410" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160126 08:33:45.410" starttime="20160126 08:33:45.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160126 08:33:45.412" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160126 08:33:45.413" starttime="20160126 08:33:45.411"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160126 08:33:45.421" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:45.421" starttime="20160126 08:33:45.419"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:45.422" starttime="20160126 08:33:45.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160126 08:33:45.425" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:45.425" starttime="20160126 08:33:45.423"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:45.426" starttime="20160126 08:33:45.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160126 08:33:45.429" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:45.430" starttime="20160126 08:33:45.428"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:45.430" starttime="20160126 08:33:45.427"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:45.431" starttime="20160126 08:33:45.414"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160126 08:33:45.433" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160126 08:33:45.434" starttime="20160126 08:33:45.432"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.436" starttime="20160126 08:33:45.434"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.438" starttime="20160126 08:33:45.436"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.440" starttime="20160126 08:33:45.438"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.441" starttime="20160126 08:33:45.440"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.443" starttime="20160126 08:33:45.442"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.445" starttime="20160126 08:33:45.444"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.447" starttime="20160126 08:33:45.445"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.449" starttime="20160126 08:33:45.448"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.451" starttime="20160126 08:33:45.449"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.453" starttime="20160126 08:33:45.451"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.455" starttime="20160126 08:33:45.453"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:45.456" starttime="20160126 08:33:45.455"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160126 08:33:45.459" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160126 08:33:47.286" level="INFO">08:33:47,283 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 08:33:47.288" starttime="20160126 08:33:45.458"></status>
</kw>
<msg timestamp="20160126 08:33:47.292" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160126 08:33:47.293" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160126 08:33:47.290" starttime="20160126 08:33:45.457"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160126 08:33:47.309" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160126 08:33:47.308" starttime="20160126 08:33:47.303"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160126 08:33:47.314" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160126 08:33:47.313" starttime="20160126 08:33:47.310"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160126 08:33:47.318" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160126 08:33:47.317" starttime="20160126 08:33:47.315"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160126 08:33:47.326" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160126 08:33:47.327" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160126 08:33:47.328" starttime="20160126 08:33:47.323"></status>
</kw>
<msg timestamp="20160126 08:33:47.330" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160126 08:33:47.332" level="INFO">${return_log_entry} = 2016-01-26 08:33:47,283 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 08:33:47.329" starttime="20160126 08:33:47.320"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:47.344" starttime="20160126 08:33:47.341"></status>
</kw>
<msg timestamp="20160126 08:33:47.346" level="INFO">${return_log_entry} = 2016-01-26 08:33:47,283 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 08:33:47.345" starttime="20160126 08:33:47.334"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:47.357" starttime="20160126 08:33:47.355"></status>
</kw>
<msg timestamp="20160126 08:33:47.359" level="INFO">${return_log_entry} = 2016-01-26 08:33:47,283 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160126 08:33:47.358" starttime="20160126 08:33:47.348"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:47.371" starttime="20160126 08:33:47.368"></status>
</kw>
<msg timestamp="20160126 08:33:47.373" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:47.372" starttime="20160126 08:33:47.361"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:47.389" starttime="20160126 08:33:47.386"></status>
</kw>
<msg timestamp="20160126 08:33:47.390" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:47.390" starttime="20160126 08:33:47.375"></status>
</kw>
<msg timestamp="20160126 08:33:47.391" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160126 08:33:47.391" starttime="20160126 08:33:47.295"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:47.397" starttime="20160126 08:33:47.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:47.398" starttime="20160126 08:33:47.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:47.400" starttime="20160126 08:33:47.399"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160126 08:33:47.407" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160126 08:33:47.407" starttime="20160126 08:33:47.405"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:47.408" starttime="20160126 08:33:47.404"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:47.409" starttime="20160126 08:33:47.401"></status>
</kw>
<status status="PASS" endtime="20160126 08:33:47.409" starttime="20160126 08:33:47.392"></status>
</kw>
<msg timestamp="20160126 08:33:47.411" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160126 08:33:47.410" starttime="20160126 08:33:45.385"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160126 08:33:47.415" level="INFO">${calling_party_msisdn} = 525516001001</msg>
<status status="PASS" endtime="20160126 08:33:47.414" starttime="20160126 08:33:47.412"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160126 08:33:47.416" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:47.417" starttime="20160126 08:33:47.415"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:47.419" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160126 08:33:47.419" starttime="20160126 08:33:47.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:47.421" starttime="20160126 08:33:47.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:47.423" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160126 08:33:47.423" starttime="20160126 08:33:47.422"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC 1s">
<doc>Runs a standard (i.e. non-roaming) MTC 1s session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160126 08:33:47.482" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160126 08:33:47.481" starttime="20160126 08:33:47.480"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160126 08:33:47.484" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160126 08:33:47.484" starttime="20160126 08:33:47.483"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160126 08:33:47.489" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini</msg>
<status status="PASS" endtime="20160126 08:33:47.488" starttime="20160126 08:33:47.485"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160126 08:33:47.494" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs</msg>
<status status="PASS" endtime="20160126 08:33:47.493" starttime="20160126 08:33:47.490"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:47.497" starttime="20160126 08:33:47.495"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160126 08:33:47.505" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:47.506" starttime="20160126 08:33:47.499"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:47.509" starttime="20160126 08:33:47.507"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160126 08:33:47.515" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:47.516" starttime="20160126 08:33:47.511"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160126 08:33:47.523" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:47.524" starttime="20160126 08:33:47.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:47.528" starttime="20160126 08:33:47.526"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160126 08:33:47.533" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:47.534" starttime="20160126 08:33:47.529"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160126 08:33:47.542" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160126 08:33:47.543" starttime="20160126 08:33:47.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160126 08:33:47.546" starttime="20160126 08:33:47.544"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160126 08:33:47.562" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160126 08:33:52.941" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 08:33:52.939" starttime="20160126 08:33:47.547"></status>
</kw>
<msg timestamp="20160126 08:33:52.942" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 08:33:52.942" starttime="20160126 08:33:47.432"></status>
</kw>
<msg timestamp="20160126 08:33:52.944" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160126 08:33:52.943" starttime="20160126 08:33:47.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160126 08:33:52.946" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160126 08:33:52.947" starttime="20160126 08:33:52.945"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160126 08:33:52.949" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160126 08:33:52.949" starttime="20160126 08:33:52.947"></status>
</kw>
<doc>Test will make a short MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160126 08:33:52.950" starttime="20160126 08:33:45.376"></status>
</test>
<doc>Testing the prepaid MTC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160126 08:33:52.953" starttime="20160126 08:33:40.425"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160126 08:33:52.961" starttime="20160126 08:33:40.408"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160126 08:33:52.972" starttime="20160126 08:32:47.835"></status>
</suite>
<statistics>
<total>
<stat pass="4" fail="0">Critical Tests</stat>
<stat pass="4" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="4" info="" doc="" combined="" fail="0" links="">matko.sanseovic</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">MTC_only</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">TNZ_supported</stat>
</tag>
<suite>
<stat pass="4" id="s1" fail="0" name="MTC">MTC</stat>
<stat pass="1" id="s1-s1" fail="0" name="MTC PREPAID-Abandon">MTC.MTC PREPAID-Abandon</stat>
<stat pass="1" id="s1-s1-s1" fail="0" name="MTC PREPAID-Abandon-robot-suite">MTC.MTC PREPAID-Abandon.MTC PREPAID-Abandon-robot-suite</stat>
<stat pass="1" id="s1-s2" fail="0" name="MTC PREPAID-Busy">MTC.MTC PREPAID-Busy</stat>
<stat pass="1" id="s1-s2-s1" fail="0" name="MTC PREPAID-Busy-robot-suite">MTC.MTC PREPAID-Busy.MTC PREPAID-Busy-robot-suite</stat>
<stat pass="1" id="s1-s3" fail="0" name="MTC PREPAID-NoAnswer">MTC.MTC PREPAID-NoAnswer</stat>
<stat pass="1" id="s1-s3-s1" fail="0" name="MTC PREPAID-NoAnswer-robot-suite">MTC.MTC PREPAID-NoAnswer.MTC PREPAID-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s4" fail="0" name="MTC PREPAID-ShortDuration">MTC.MTC PREPAID-ShortDuration</stat>
<stat pass="1" id="s1-s4-s1" fail="0" name="MTC PREPAID-ShortDuration-robot-suite">MTC.MTC PREPAID-ShortDuration.MTC PREPAID-ShortDuration-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
