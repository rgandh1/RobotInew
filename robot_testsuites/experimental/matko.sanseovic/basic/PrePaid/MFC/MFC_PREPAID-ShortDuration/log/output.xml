<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20160119 14:26:30.560">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/MFC_PREPAID-ShortDuration-robot-suite.txt" id="s1" name="MFC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160119 14:26:32.654" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160119 14:26:32.657" level="INFO">${date} = Tue Jan 19 14:26:32 CET 2016</msg>
<status status="PASS" endtime="20160119 14:26:32.656" starttime="20160119 14:26:32.641"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160119 14:26:32.663" level="INFO">Date and time: Tue Jan 19 14:26:32 CET 2016</msg>
<status status="PASS" endtime="20160119 14:26:32.664" starttime="20160119 14:26:32.660"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160119 14:26:32.669" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160119 14:26:32.670" starttime="20160119 14:26:32.666"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:32.760" starttime="20160119 14:26:32.757"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:32.902" starttime="20160119 14:26:32.774"></status>
</kw>
<msg timestamp="20160119 14:26:32.905" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160119 14:26:32.904" starttime="20160119 14:26:32.761"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160119 14:26:32.918" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160119 14:26:33.445" level="INFO">Read output: Last login: Tue Jan 19 13:17:47 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160119 14:26:33.447" starttime="20160119 14:26:32.915"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:33.449" starttime="20160119 14:26:32.907"></status>
</kw>
<msg timestamp="20160119 14:26:33.452" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160119 14:26:33.451" starttime="20160119 14:26:32.739"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160119 14:26:33.459" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160119 14:26:33.458" starttime="20160119 14:26:33.453"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160119 14:26:33.463" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160119 14:26:34.104" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160119 14:26:34.109" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160119 14:26:34.106" starttime="20160119 14:26:33.460"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:34.125" starttime="20160119 14:26:34.118"></status>
</kw>
<msg timestamp="20160119 14:26:34.129" level="INFO">${status} = PASS</msg>
<msg timestamp="20160119 14:26:34.131" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160119 14:26:34.127" starttime="20160119 14:26:34.112"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:34.149" starttime="20160119 14:26:34.145"></status>
</kw>
<msg timestamp="20160119 14:26:34.152" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160119 14:26:34.151" starttime="20160119 14:26:34.134"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160119 14:26:34.161" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160119 14:26:34.160" starttime="20160119 14:26:34.155"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160119 14:26:34.170" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160119 14:26:34.169" starttime="20160119 14:26:34.164"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:34.178" starttime="20160119 14:26:34.174"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:34.207" starttime="20160119 14:26:34.202"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160119 14:26:34.216" starttime="20160119 14:26:34.210"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:34.220" starttime="20160119 14:26:34.181"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:34.236" starttime="20160119 14:26:34.232"></status>
</kw>
<msg timestamp="20160119 14:26:34.240" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160119 14:26:34.239" starttime="20160119 14:26:34.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:34.247" starttime="20160119 14:26:34.243"></status>
</kw>
<msg timestamp="20160119 14:26:34.253" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160119 14:26:34.254" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160119 14:26:34.250" starttime="20160119 14:26:32.696"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:34.379" starttime="20160119 14:26:34.374"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:34.437" starttime="20160119 14:26:34.385"></status>
</kw>
<msg timestamp="20160119 14:26:34.439" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160119 14:26:34.438" starttime="20160119 14:26:34.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160119 14:26:34.466" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160119 14:26:34.966" level="INFO">Read output: Last login: Tue Jan 19 13:21:16 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160119 14:26:34.968" starttime="20160119 14:26:34.446"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:34.969" starttime="20160119 14:26:34.440"></status>
</kw>
<msg timestamp="20160119 14:26:34.971" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160119 14:26:34.971" starttime="20160119 14:26:34.350"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160119 14:26:34.978" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160119 14:26:34.977" starttime="20160119 14:26:34.973"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160119 14:26:34.981" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160119 14:26:35.435" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160119 14:26:35.437" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160119 14:26:35.436" starttime="20160119 14:26:34.979"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:35.444" starttime="20160119 14:26:35.441"></status>
</kw>
<msg timestamp="20160119 14:26:35.446" level="INFO">${status} = PASS</msg>
<msg timestamp="20160119 14:26:35.446" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160119 14:26:35.445" starttime="20160119 14:26:35.439"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:35.455" starttime="20160119 14:26:35.454"></status>
</kw>
<msg timestamp="20160119 14:26:35.457" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160119 14:26:35.456" starttime="20160119 14:26:35.449"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160119 14:26:35.461" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160119 14:26:35.460" starttime="20160119 14:26:35.458"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160119 14:26:35.464" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160119 14:26:35.464" starttime="20160119 14:26:35.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:35.467" starttime="20160119 14:26:35.466"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:35.479" starttime="20160119 14:26:35.477"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160119 14:26:35.483" starttime="20160119 14:26:35.480"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:35.484" starttime="20160119 14:26:35.469"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:35.492" starttime="20160119 14:26:35.490"></status>
</kw>
<msg timestamp="20160119 14:26:35.493" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160119 14:26:35.493" starttime="20160119 14:26:35.485"></status>
</kw>
<msg timestamp="20160119 14:26:35.496" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160119 14:26:35.496" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160119 14:26:35.495" starttime="20160119 14:26:34.291"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:35.549" starttime="20160119 14:26:35.548"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:35.614" starttime="20160119 14:26:35.555"></status>
</kw>
<msg timestamp="20160119 14:26:35.617" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160119 14:26:35.616" starttime="20160119 14:26:35.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160119 14:26:35.637" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160119 14:26:36.143" level="INFO">Read output: Last login: Tue Jan 19 13:17:50 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160119 14:26:36.145" starttime="20160119 14:26:35.632"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:36.147" starttime="20160119 14:26:35.620"></status>
</kw>
<msg timestamp="20160119 14:26:36.149" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160119 14:26:36.148" starttime="20160119 14:26:35.538"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160119 14:26:36.155" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160119 14:26:36.155" starttime="20160119 14:26:36.151"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160119 14:26:36.159" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160119 14:26:36.378" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160119 14:26:36.380" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1781, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160119 14:26:36.379" starttime="20160119 14:26:36.157"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:36.386" starttime="20160119 14:26:36.384"></status>
</kw>
<msg timestamp="20160119 14:26:36.388" level="INFO">${status} = PASS</msg>
<msg timestamp="20160119 14:26:36.388" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160119 14:26:36.387" starttime="20160119 14:26:36.381"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:36.396" starttime="20160119 14:26:36.394"></status>
</kw>
<msg timestamp="20160119 14:26:36.397" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160119 14:26:36.397" starttime="20160119 14:26:36.389"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160119 14:26:36.401" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1781, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160119 14:26:36.400" starttime="20160119 14:26:36.398"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160119 14:26:36.404" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160119 14:26:36.404" starttime="20160119 14:26:36.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:36.407" starttime="20160119 14:26:36.405"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:36.418" starttime="20160119 14:26:36.416"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160119 14:26:36.421" starttime="20160119 14:26:36.419"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:36.423" starttime="20160119 14:26:36.408"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:36.430" starttime="20160119 14:26:36.428"></status>
</kw>
<msg timestamp="20160119 14:26:36.431" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160119 14:26:36.430" starttime="20160119 14:26:36.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:36.434" starttime="20160119 14:26:36.432"></status>
</kw>
<msg timestamp="20160119 14:26:36.437" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160119 14:26:36.437" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160119 14:26:36.436" starttime="20160119 14:26:35.512"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:36.503" starttime="20160119 14:26:36.500"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:36.571" starttime="20160119 14:26:36.510"></status>
</kw>
<msg timestamp="20160119 14:26:36.576" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160119 14:26:36.574" starttime="20160119 14:26:36.505"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160119 14:26:36.596" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160119 14:26:36.963" level="INFO">Read output: Last login: Tue Jan 19 13:17:51 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160119 14:26:36.965" starttime="20160119 14:26:36.591"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:36.967" starttime="20160119 14:26:36.579"></status>
</kw>
<msg timestamp="20160119 14:26:36.971" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160119 14:26:36.970" starttime="20160119 14:26:36.480"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160119 14:26:36.984" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160119 14:26:36.983" starttime="20160119 14:26:36.974"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160119 14:26:36.990" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160119 14:26:37.052" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160119 14:26:37.054" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 21314)</msg>
<status status="PASS" endtime="20160119 14:26:37.053" starttime="20160119 14:26:36.987"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.061" starttime="20160119 14:26:37.058"></status>
</kw>
<msg timestamp="20160119 14:26:37.062" level="INFO">${status} = PASS</msg>
<msg timestamp="20160119 14:26:37.063" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160119 14:26:37.061" starttime="20160119 14:26:37.056"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.070" starttime="20160119 14:26:37.068"></status>
</kw>
<msg timestamp="20160119 14:26:37.071" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160119 14:26:37.071" starttime="20160119 14:26:37.064"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160119 14:26:37.075" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 21314)</msg>
<status status="PASS" endtime="20160119 14:26:37.074" starttime="20160119 14:26:37.072"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160119 14:26:37.078" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160119 14:26:37.078" starttime="20160119 14:26:37.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.081" starttime="20160119 14:26:37.079"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.092" starttime="20160119 14:26:37.090"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.096" starttime="20160119 14:26:37.093"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:37.097" starttime="20160119 14:26:37.082"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.104" starttime="20160119 14:26:37.102"></status>
</kw>
<msg timestamp="20160119 14:26:37.105" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160119 14:26:37.105" starttime="20160119 14:26:37.098"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.108" starttime="20160119 14:26:37.106"></status>
</kw>
<msg timestamp="20160119 14:26:37.111" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160119 14:26:37.111" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160119 14:26:37.110" starttime="20160119 14:26:36.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160119 14:26:37.114" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160119 14:26:37.115" starttime="20160119 14:26:37.112"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160119 14:26:37.118" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160119 14:26:37.119" starttime="20160119 14:26:37.116"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160119 14:26:37.122" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160119 14:26:37.123" starttime="20160119 14:26:37.120"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160119 14:26:37.126" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160119 14:26:37.127" starttime="20160119 14:26:37.124"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160119 14:26:37.131" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160119 14:26:37.133" starttime="20160119 14:26:37.128"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160119 14:26:37.137" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160119 14:26:37.138" starttime="20160119 14:26:37.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160119 14:26:37.143" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160119 14:26:37.144" starttime="20160119 14:26:37.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160119 14:26:37.148" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160119 14:26:37.149" starttime="20160119 14:26:37.145"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.163" starttime="20160119 14:26:37.157"></status>
</kw>
<msg timestamp="20160119 14:26:37.165" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160119 14:26:37.165" starttime="20160119 14:26:37.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160119 14:26:37.170" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160119 14:26:37.171" starttime="20160119 14:26:37.167"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:37.173" starttime="20160119 14:26:32.628"></status>
</kw>
<test id="s1-t1" name="Run MFC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.190" starttime="20160119 14:26:37.188"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160119 14:26:37.195" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160119 14:26:37.194" starttime="20160119 14:26:37.192"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>3</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160119 14:26:37.219" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160119 14:26:37.219" starttime="20160119 14:26:37.216"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160119 14:26:37.224" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160119 14:26:37.224" starttime="20160119 14:26:37.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160119 14:26:37.229" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160119 14:26:37.230" starttime="20160119 14:26:37.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160119 14:26:37.233" level="INFO">msg=amount=3</msg>
<status status="PASS" endtime="20160119 14:26:37.234" starttime="20160119 14:26:37.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160119 14:26:37.238" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160119 14:26:37.239" starttime="20160119 14:26:37.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160119 14:26:37.243" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160119 14:26:37.244" starttime="20160119 14:26:37.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160119 14:26:37.248" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160119 14:26:37.249" starttime="20160119 14:26:37.246"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160119 14:26:37.253" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160119 14:26:37.254" starttime="20160119 14:26:37.251"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160119 14:26:37.257" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160119 14:26:37.257" starttime="20160119 14:26:37.255"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160119 14:26:37.260" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160119 14:26:37.260" starttime="20160119 14:26:37.258"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160119 14:26:37.283" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160119 14:26:37.284" starttime="20160119 14:26:37.270"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:37.285" starttime="20160119 14:26:37.269"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160119 14:26:37.289" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160119 14:26:37.290" starttime="20160119 14:26:37.287"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:37.291" starttime="20160119 14:26:37.286"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160119 14:26:37.296" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160119 14:26:37.297" starttime="20160119 14:26:37.294"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:37.297" starttime="20160119 14:26:37.292"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:37.298" starttime="20160119 14:26:37.262"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160119 14:26:37.302" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160119 14:26:37.303" starttime="20160119 14:26:37.299"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.306" starttime="20160119 14:26:37.304"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.308" starttime="20160119 14:26:37.307"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.311" starttime="20160119 14:26:37.309"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.314" starttime="20160119 14:26:37.312"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.316" starttime="20160119 14:26:37.314"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.319" starttime="20160119 14:26:37.317"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.321" starttime="20160119 14:26:37.319"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.324" starttime="20160119 14:26:37.322"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.327" starttime="20160119 14:26:37.325"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.329" starttime="20160119 14:26:37.328"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.332" starttime="20160119 14:26:37.330"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:37.335" starttime="20160119 14:26:37.333"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160119 14:26:37.339" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160119 14:26:42.776" level="INFO">14:26:37,511 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/ext] for external libraries
14:26:37,511 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
14:26:39,207 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
14:26:39,220 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.119.125]
14:26:39,221 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
14:26:39,221 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
14:26:39,221 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [3]
14:26:39,221 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [334030880001000]
14:26:39,221 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [525516001000]
14:26:39,221 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
14:26:39,221 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [3]
14:26:39,222 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
14:26:39,222 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
14:26:39,222 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
14:26:39,222 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
14:26:39,232 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
14:26:39,238 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
14:26:40,150 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
14:26:40,253 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
14:26:40,403 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:40,403 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
14:26:40,447 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:40,450 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:40,531 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:40,531 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:40,531 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:40,532 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
14:26:40,591 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
14:26:40,850 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
14:26:40,876 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
14:26:40,878 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:40,879 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:40,880 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
14:26:41,036 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:41,037 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:41,040 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:41,040 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:41,040 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:41,040 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
14:26:41,072 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
14:26:41,075 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
14:26:41,097 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
14:26:41,099 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:41,100 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:41,100 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
14:26:41,163 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:41,163 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:41,166 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:41,166 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:41,166 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:41,166 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
14:26:41,197 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
14:26:41,202 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
14:26:41,221 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
14:26:41,223 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:41,224 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:41,224 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
14:26:41,303 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:41,303 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:41,306 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:41,307 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:41,307 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:41,307 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
14:26:41,336 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
14:26:41,339 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
14:26:41,358 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
14:26:41,360 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:41,361 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:41,361 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
14:26:41,395 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:41,395 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:41,401 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:41,401 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:41,401 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:41,401 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
14:26:41,429 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
14:26:41,439 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
14:26:41,458 INFO  [SoapUITestCaseRunner] running step [setBalance]
14:26:41,460 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:41,461 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:41,462 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
14:26:41,546 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:41,546 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:41,551 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:41,551 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:41,551 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:41,551 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
14:26:41,580 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
14:26:41,584 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
14:26:41,603 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
14:26:41,631 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
14:26:41,634 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
14:26:41,635 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:41,636 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:41,636 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
14:26:41,660 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:41,660 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:41,667 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:41,667 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:41,668 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:41,668 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
14:26:41,668 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
14:26:41,680 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
14:26:41,680 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
14:26:41,681 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:41,683 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:41,683 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
14:26:42,097 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:42,098 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:42,101 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:42,101 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:42,101 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:42,101 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
14:26:42,101 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
14:26:42,104 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
14:26:42,105 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
14:26:42,106 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:42,108 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:42,108 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
14:26:42,138 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:42,138 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:42,140 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:42,140 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:42,140 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:42,141 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
14:26:42,141 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
14:26:42,145 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
14:26:42,146 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
14:26:42,147 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:42,148 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:42,148 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
14:26:42,214 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:42,214 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:42,217 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:42,217 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:42,217 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:42,217 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
14:26:42,218 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
14:26:42,220 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
14:26:42,221 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
14:26:42,222 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:42,223 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:42,223 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
14:26:42,258 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:42,258 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:42,264 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:42,264 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:42,264 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:42,264 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
14:26:42,264 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
14:26:42,274 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
14:26:42,274 INFO  [SoapUITestCaseRunner] running step [setBalance]
14:26:42,276 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:42,278 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:42,278 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
14:26:42,362 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:42,362 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:42,372 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:42,372 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:42,373 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:42,373 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
14:26:42,373 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
14:26:42,382 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
14:26:42,383 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
14:26:42,385 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
14:26:42,388 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
14:26:42,390 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:42,392 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:42,392 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
14:26:42,414 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:42,415 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:42,430 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:42,430 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:42,430 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:42,430 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
14:26:42,431 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
14:26:42,451 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
14:26:42,452 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
14:26:42,455 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:42,457 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:42,457 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
14:26:42,496 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:42,497 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:42,502 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:42,502 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:42,502 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:42,503 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
14:26:42,503 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
14:26:42,508 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
14:26:42,508 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
14:26:42,509 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:42,510 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:42,510 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
14:26:42,582 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:42,582 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:42,584 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:42,584 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:42,584 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:42,584 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
14:26:42,584 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
14:26:42,587 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
14:26:42,587 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
14:26:42,588 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:42,589 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:42,589 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
14:26:42,623 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:42,623 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:42,629 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:42,629 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:42,630 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:42,630 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
14:26:42,630 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
14:26:42,638 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
14:26:42,638 INFO  [SoapUITestCaseRunner] running step [setBalance]
14:26:42,639 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
14:26:42,640 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
14:26:42,641 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
14:26:42,708 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
14:26:42,708 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
14:26:42,713 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
14:26:42,713 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
14:26:42,713 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
14:26:42,713 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
14:26:42,713 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
14:26:42,717 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
14:26:42,717 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
14:26:42,718 INFO  [SoapUITestCaseRunner] running step [finish_successful]
14:26:42,768 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
14:26:42,769 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 3479ms, status: FINISHED
14:26:42,769 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 3479ms</msg>
<status status="PASS" endtime="20160119 14:26:42.783" starttime="20160119 14:26:37.337"></status>
</kw>
<msg timestamp="20160119 14:26:42.787" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:42.787" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160119 14:26:42.785" starttime="20160119 14:26:37.336"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160119 14:26:42.806" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160119 14:26:42.805" starttime="20160119 14:26:42.802"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:42.810" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160119 14:26:42.809" starttime="20160119 14:26:42.807"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:42.815" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160119 14:26:42.814" starttime="20160119 14:26:42.812"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160119 14:26:42.822" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160119 14:26:42.829" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160119 14:26:42.830" starttime="20160119 14:26:42.819"></status>
</kw>
<msg timestamp="20160119 14:26:42.832" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:42.832" level="INFO">${return_log_entry} = 2016-01-19 14:26:42,768 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160119 14:26:42.831" starttime="20160119 14:26:42.816"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:42.843" starttime="20160119 14:26:42.841"></status>
</kw>
<msg timestamp="20160119 14:26:42.845" level="INFO">${return_log_entry} = 2016-01-19 14:26:42,768 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160119 14:26:42.844" starttime="20160119 14:26:42.834"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:42.856" starttime="20160119 14:26:42.853"></status>
</kw>
<msg timestamp="20160119 14:26:42.858" level="INFO">${return_log_entry} = 2016-01-19 14:26:42,768 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160119 14:26:42.857" starttime="20160119 14:26:42.847"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:42.868" starttime="20160119 14:26:42.865"></status>
</kw>
<msg timestamp="20160119 14:26:42.870" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160119 14:26:42.870" starttime="20160119 14:26:42.859"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:42.882" starttime="20160119 14:26:42.880"></status>
</kw>
<msg timestamp="20160119 14:26:42.883" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160119 14:26:42.883" starttime="20160119 14:26:42.872"></status>
</kw>
<msg timestamp="20160119 14:26:42.885" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160119 14:26:42.885" starttime="20160119 14:26:42.790"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:42.897" starttime="20160119 14:26:42.895"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:42.899" starttime="20160119 14:26:42.898"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:42.902" starttime="20160119 14:26:42.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160119 14:26:42.915" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160119 14:26:42.916" starttime="20160119 14:26:42.910"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:42.917" starttime="20160119 14:26:42.908"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:42.918" starttime="20160119 14:26:42.903"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:42.919" starttime="20160119 14:26:42.887"></status>
</kw>
<msg timestamp="20160119 14:26:42.921" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160119 14:26:42.920" starttime="20160119 14:26:37.199"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160119 14:26:42.924" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160119 14:26:42.925" starttime="20160119 14:26:42.922"></status>
</kw>
<kw type="kw" name="${b_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160119 14:26:42.931" level="INFO">${b_party_msisdn} = 525516001001</msg>
<status status="PASS" endtime="20160119 14:26:42.930" starttime="20160119 14:26:42.926"></status>
</kw>
<kw type="kw" name="${b_party_imsi} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}+1</arg>
</arguments>
<msg timestamp="20160119 14:26:42.936" level="INFO">${b_party_imsi} = 334030880001001</msg>
<status status="PASS" endtime="20160119 14:26:42.935" starttime="20160119 14:26:42.932"></status>
</kw>
<kw type="kw" name="${c_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+2</arg>
</arguments>
<msg timestamp="20160119 14:26:42.941" level="INFO">${c_party_msisdn} = 525516001002</msg>
<status status="PASS" endtime="20160119 14:26:42.940" starttime="20160119 14:26:42.937"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160119 14:26:42.944" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160119 14:26:42.944" starttime="20160119 14:26:42.942"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MFC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:42.947" starttime="20160119 14:26:42.945"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MFC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160119 14:26:42.950" level="INFO">Running the short MFC call...</msg>
<status status="PASS" endtime="20160119 14:26:42.951" starttime="20160119 14:26:42.948"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MFC 1s">
<doc>Runs a standard MFC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${b_party_imsi}</arg>
<arg>${b_party_msisdn}</arg>
<arg>${c_party_msisdn}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MFC CGS">
<doc>Runs a standard MFC session (meaning a session that needs only mscAddress, mfcAPartyMsisdn and mfcCPartyMsisdn paramters) for the passed cgs file</doc>
<arguments>
<arg>mfc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${rd_imsi}</arg>
<arg>${rd_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mfc_req}</arg>
<arg>${queue_mfc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160119 14:26:42.986" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160119 14:26:42.986" starttime="20160119 14:26:42.984"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160119 14:26:43.022" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160119 14:26:43.022" starttime="20160119 14:26:43.018"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160119 14:26:43.026" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini</msg>
<status status="PASS" endtime="20160119 14:26:43.025" starttime="20160119 14:26:43.023"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160119 14:26:43.029" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs</msg>
<status status="PASS" endtime="20160119 14:26:43.029" starttime="20160119 14:26:43.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:43.032" starttime="20160119 14:26:43.030"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${rd_imsi};${rd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160119 14:26:43.086" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160119 14:26:43.087" starttime="20160119 14:26:43.033"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:43.090" starttime="20160119 14:26:43.088"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;gmscAddress;mfcAPartyMsisdn;mfcCPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160119 14:26:43.095" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160119 14:26:43.096" starttime="20160119 14:26:43.091"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${msc_address};${cg_msisdn};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160119 14:26:43.101" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160119 14:26:43.102" starttime="20160119 14:26:43.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:43.104" starttime="20160119 14:26:43.103"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160119 14:26:43.121" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160119 14:26:43.121" starttime="20160119 14:26:43.105"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MFC;${queue_mfc_req};${queue_mfc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160119 14:26:43.126" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160119 14:26:43.127" starttime="20160119 14:26:43.122"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:43.129" starttime="20160119 14:26:43.128"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160119 14:26:43.139" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160119 14:26:49.627" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160119 14:26:49.623" starttime="20160119 14:26:43.130"></status>
</kw>
<msg timestamp="20160119 14:26:49.632" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160119 14:26:49.630" starttime="20160119 14:26:42.970"></status>
</kw>
<msg timestamp="20160119 14:26:49.636" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160119 14:26:49.634" starttime="20160119 14:26:42.953"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160119 14:26:49.642" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160119 14:26:49.644" starttime="20160119 14:26:49.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160119 14:26:49.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160119 14:26:49.653" starttime="20160119 14:26:49.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:49.658" starttime="20160119 14:26:49.655"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160119 14:26:49.705" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160119 14:26:49.706" starttime="20160119 14:26:49.700"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:49.708" starttime="20160119 14:26:49.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160119 14:26:49.719" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160119 14:26:49.720" starttime="20160119 14:26:49.714"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:49.722" starttime="20160119 14:26:49.711"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160119 14:26:49.733" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160119 14:26:49.734" starttime="20160119 14:26:49.728"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:49.736" starttime="20160119 14:26:49.724"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:49.737" starttime="20160119 14:26:49.684"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160119 14:26:49.745" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160119 14:26:49.746" starttime="20160119 14:26:49.739"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:49.752" starttime="20160119 14:26:49.748"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:49.756" starttime="20160119 14:26:49.754"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:49.758" starttime="20160119 14:26:49.756"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:49.761" starttime="20160119 14:26:49.759"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:49.763" starttime="20160119 14:26:49.762"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:49.766" starttime="20160119 14:26:49.764"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160119 14:26:49.769" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000']</msg>
<msg timestamp="20160119 14:26:50.071" level="INFO">14:26:50,067 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
14:26:50,067 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
14:26:50,068 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=34668
14:26:50,068 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000
14:26:50,068 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
14:26:50,069 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
14:26:50,069 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
14:26:50,070 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=3</msg>
<status status="PASS" endtime="20160119 14:26:50.072" starttime="20160119 14:26:49.768"></status>
</kw>
<msg timestamp="20160119 14:26:50.074" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:50.075" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160119 14:26:50.073" starttime="20160119 14:26:49.767"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160119 14:26:50.086" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160119 14:26:50.086" starttime="20160119 14:26:50.083"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.089" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160119 14:26:50.089" starttime="20160119 14:26:50.087"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.092" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160119 14:26:50.092" starttime="20160119 14:26:50.090"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.097" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160119 14:26:50.101" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160119 14:26:50.102" starttime="20160119 14:26:50.095"></status>
</kw>
<msg timestamp="20160119 14:26:50.103" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:50.104" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,067 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160119 14:26:50.103" starttime="20160119 14:26:50.093"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.112" starttime="20160119 14:26:50.110"></status>
</kw>
<msg timestamp="20160119 14:26:50.113" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,067 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160119 14:26:50.113" starttime="20160119 14:26:50.105"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.120" starttime="20160119 14:26:50.119"></status>
</kw>
<msg timestamp="20160119 14:26:50.122" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,067 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160119 14:26:50.121" starttime="20160119 14:26:50.114"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.130" starttime="20160119 14:26:50.127"></status>
</kw>
<msg timestamp="20160119 14:26:50.131" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160119 14:26:50.130" starttime="20160119 14:26:50.123"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.141" starttime="20160119 14:26:50.139"></status>
</kw>
<msg timestamp="20160119 14:26:50.142" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160119 14:26:50.142" starttime="20160119 14:26:50.132"></status>
</kw>
<msg timestamp="20160119 14:26:50.144" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160119 14:26:50.143" starttime="20160119 14:26:50.076"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160119 14:26:50.154" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160119 14:26:50.154" starttime="20160119 14:26:50.152"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.157" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160119 14:26:50.157" starttime="20160119 14:26:50.155"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.160" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160119 14:26:50.160" starttime="20160119 14:26:50.158"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.165" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160119 14:26:50.169" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160119 14:26:50.170" starttime="20160119 14:26:50.163"></status>
</kw>
<msg timestamp="20160119 14:26:50.171" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:50.172" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,067 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160119 14:26:50.171" starttime="20160119 14:26:50.161"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.179" starttime="20160119 14:26:50.177"></status>
</kw>
<msg timestamp="20160119 14:26:50.180" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,067 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160119 14:26:50.180" starttime="20160119 14:26:50.173"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.187" starttime="20160119 14:26:50.186"></status>
</kw>
<msg timestamp="20160119 14:26:50.189" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,067 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160119 14:26:50.188" starttime="20160119 14:26:50.181"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.196" starttime="20160119 14:26:50.194"></status>
</kw>
<msg timestamp="20160119 14:26:50.198" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160119 14:26:50.197" starttime="20160119 14:26:50.190"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.208" starttime="20160119 14:26:50.206"></status>
</kw>
<msg timestamp="20160119 14:26:50.209" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160119 14:26:50.208" starttime="20160119 14:26:50.199"></status>
</kw>
<msg timestamp="20160119 14:26:50.211" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160119 14:26:50.210" starttime="20160119 14:26:50.145"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160119 14:26:50.221" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160119 14:26:50.221" starttime="20160119 14:26:50.218"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.224" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160119 14:26:50.224" starttime="20160119 14:26:50.222"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.227" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160119 14:26:50.227" starttime="20160119 14:26:50.225"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.232" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160119 14:26:50.236" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160119 14:26:50.237" starttime="20160119 14:26:50.230"></status>
</kw>
<msg timestamp="20160119 14:26:50.238" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:50.238" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,068 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160119 14:26:50.237" starttime="20160119 14:26:50.228"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.246" starttime="20160119 14:26:50.244"></status>
</kw>
<msg timestamp="20160119 14:26:50.247" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,068 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160119 14:26:50.246" starttime="20160119 14:26:50.239"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.254" starttime="20160119 14:26:50.252"></status>
</kw>
<msg timestamp="20160119 14:26:50.256" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,068 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160119 14:26:50.255" starttime="20160119 14:26:50.248"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.264" starttime="20160119 14:26:50.261"></status>
</kw>
<msg timestamp="20160119 14:26:50.265" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160119 14:26:50.264" starttime="20160119 14:26:50.257"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.275" starttime="20160119 14:26:50.273"></status>
</kw>
<msg timestamp="20160119 14:26:50.276" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160119 14:26:50.276" starttime="20160119 14:26:50.266"></status>
</kw>
<msg timestamp="20160119 14:26:50.278" level="INFO">${imsi} = 334030880001000</msg>
<status status="PASS" endtime="20160119 14:26:50.277" starttime="20160119 14:26:50.212"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160119 14:26:50.289" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160119 14:26:50.288" starttime="20160119 14:26:50.286"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.292" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160119 14:26:50.291" starttime="20160119 14:26:50.290"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.295" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160119 14:26:50.294" starttime="20160119 14:26:50.293"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.300" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160119 14:26:50.304" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160119 14:26:50.304" starttime="20160119 14:26:50.297"></status>
</kw>
<msg timestamp="20160119 14:26:50.306" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:50.306" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,068 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=34668</msg>
<status status="PASS" endtime="20160119 14:26:50.305" starttime="20160119 14:26:50.296"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.313" starttime="20160119 14:26:50.312"></status>
</kw>
<msg timestamp="20160119 14:26:50.315" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,068 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=34668</msg>
<status status="PASS" endtime="20160119 14:26:50.314" starttime="20160119 14:26:50.307"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.322" starttime="20160119 14:26:50.320"></status>
</kw>
<msg timestamp="20160119 14:26:50.323" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,068 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=34668</msg>
<status status="PASS" endtime="20160119 14:26:50.323" starttime="20160119 14:26:50.316"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.331" starttime="20160119 14:26:50.329"></status>
</kw>
<msg timestamp="20160119 14:26:50.332" level="INFO">${resultCode} = 34668</msg>
<status status="PASS" endtime="20160119 14:26:50.332" starttime="20160119 14:26:50.324"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.342" starttime="20160119 14:26:50.340"></status>
</kw>
<msg timestamp="20160119 14:26:50.344" level="INFO">${resultCode} = 34668</msg>
<status status="PASS" endtime="20160119 14:26:50.343" starttime="20160119 14:26:50.333"></status>
</kw>
<msg timestamp="20160119 14:26:50.345" level="INFO">${id} = 34668</msg>
<status status="PASS" endtime="20160119 14:26:50.345" starttime="20160119 14:26:50.280"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160119 14:26:50.356" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160119 14:26:50.356" starttime="20160119 14:26:50.353"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.359" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160119 14:26:50.359" starttime="20160119 14:26:50.357"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.362" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160119 14:26:50.362" starttime="20160119 14:26:50.360"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.367" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160119 14:26:50.371" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160119 14:26:50.371" starttime="20160119 14:26:50.365"></status>
</kw>
<msg timestamp="20160119 14:26:50.373" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:50.373" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,068 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160119 14:26:50.372" starttime="20160119 14:26:50.363"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.381" starttime="20160119 14:26:50.379"></status>
</kw>
<msg timestamp="20160119 14:26:50.382" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,068 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160119 14:26:50.382" starttime="20160119 14:26:50.374"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.390" starttime="20160119 14:26:50.388"></status>
</kw>
<msg timestamp="20160119 14:26:50.391" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,068 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160119 14:26:50.390" starttime="20160119 14:26:50.383"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.401" starttime="20160119 14:26:50.398"></status>
</kw>
<msg timestamp="20160119 14:26:50.403" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160119 14:26:50.402" starttime="20160119 14:26:50.392"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.412" starttime="20160119 14:26:50.411"></status>
</kw>
<msg timestamp="20160119 14:26:50.414" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160119 14:26:50.413" starttime="20160119 14:26:50.404"></status>
</kw>
<msg timestamp="20160119 14:26:50.415" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160119 14:26:50.415" starttime="20160119 14:26:50.347"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160119 14:26:50.426" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160119 14:26:50.425" starttime="20160119 14:26:50.423"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.429" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160119 14:26:50.428" starttime="20160119 14:26:50.427"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.432" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160119 14:26:50.431" starttime="20160119 14:26:50.430"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.437" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160119 14:26:50.441" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160119 14:26:50.441" starttime="20160119 14:26:50.435"></status>
</kw>
<msg timestamp="20160119 14:26:50.443" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:50.443" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,069 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160119 14:26:50.442" starttime="20160119 14:26:50.433"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.450" starttime="20160119 14:26:50.449"></status>
</kw>
<msg timestamp="20160119 14:26:50.452" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,069 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160119 14:26:50.451" starttime="20160119 14:26:50.444"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.459" starttime="20160119 14:26:50.457"></status>
</kw>
<msg timestamp="20160119 14:26:50.461" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,069 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160119 14:26:50.460" starttime="20160119 14:26:50.453"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.468" starttime="20160119 14:26:50.466"></status>
</kw>
<msg timestamp="20160119 14:26:50.470" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160119 14:26:50.469" starttime="20160119 14:26:50.462"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.479" starttime="20160119 14:26:50.477"></status>
</kw>
<msg timestamp="20160119 14:26:50.480" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160119 14:26:50.480" starttime="20160119 14:26:50.470"></status>
</kw>
<msg timestamp="20160119 14:26:50.482" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160119 14:26:50.481" starttime="20160119 14:26:50.417"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160119 14:26:50.492" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160119 14:26:50.492" starttime="20160119 14:26:50.490"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.495" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160119 14:26:50.495" starttime="20160119 14:26:50.493"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.498" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160119 14:26:50.498" starttime="20160119 14:26:50.496"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.503" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160119 14:26:50.507" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160119 14:26:50.508" starttime="20160119 14:26:50.501"></status>
</kw>
<msg timestamp="20160119 14:26:50.509" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:50.510" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,069 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160119 14:26:50.509" starttime="20160119 14:26:50.499"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.516" starttime="20160119 14:26:50.515"></status>
</kw>
<msg timestamp="20160119 14:26:50.518" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,069 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160119 14:26:50.517" starttime="20160119 14:26:50.510"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.525" starttime="20160119 14:26:50.523"></status>
</kw>
<msg timestamp="20160119 14:26:50.527" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,069 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160119 14:26:50.526" starttime="20160119 14:26:50.519"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.534" starttime="20160119 14:26:50.532"></status>
</kw>
<msg timestamp="20160119 14:26:50.535" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160119 14:26:50.535" starttime="20160119 14:26:50.528"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.544" starttime="20160119 14:26:50.543"></status>
</kw>
<msg timestamp="20160119 14:26:50.546" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160119 14:26:50.545" starttime="20160119 14:26:50.536"></status>
</kw>
<msg timestamp="20160119 14:26:50.547" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160119 14:26:50.547" starttime="20160119 14:26:50.483"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.556" starttime="20160119 14:26:50.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.558" starttime="20160119 14:26:50.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.560" starttime="20160119 14:26:50.559"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160119 14:26:50.573" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160119 14:26:50.573" starttime="20160119 14:26:50.568"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:50.574" starttime="20160119 14:26:50.567"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:50.575" starttime="20160119 14:26:50.561"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:50.576" starttime="20160119 14:26:50.549"></status>
</kw>
<msg timestamp="20160119 14:26:50.579" level="INFO">${rc} = OK</msg>
<msg timestamp="20160119 14:26:50.580" level="INFO">${provId} = 1</msg>
<msg timestamp="20160119 14:26:50.580" level="INFO">${imsi} = 334030880001000</msg>
<msg timestamp="20160119 14:26:50.580" level="INFO">${id} = 34668</msg>
<msg timestamp="20160119 14:26:50.581" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160119 14:26:50.581" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160119 14:26:50.582" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160119 14:26:50.578" starttime="20160119 14:26:49.664"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.600" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160119 14:26:50.601" starttime="20160119 14:26:50.598"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:50.601" starttime="20160119 14:26:50.596"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.606" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160119 14:26:50.606" starttime="20160119 14:26:50.604"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:50.607" starttime="20160119 14:26:50.602"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.611" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160119 14:26:50.612" starttime="20160119 14:26:50.609"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:50.613" starttime="20160119 14:26:50.608"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:50.613" starttime="20160119 14:26:50.592"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.616" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160119 14:26:50.617" starttime="20160119 14:26:50.614"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.619" starttime="20160119 14:26:50.618"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.623" starttime="20160119 14:26:50.620"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.625" starttime="20160119 14:26:50.623"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.627" starttime="20160119 14:26:50.626"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.630" starttime="20160119 14:26:50.628"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.632" starttime="20160119 14:26:50.630"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160119 14:26:50.636" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=34668']</msg>
<msg timestamp="20160119 14:26:50.831" level="INFO">14:26:50,828 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
14:26:50,828 INFO  [log] LowLevelOps.getMainAccount.output.accountId=34669
14:26:50,828 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000
14:26:50,829 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
14:26:50,830 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160119 14:26:50.831" starttime="20160119 14:26:50.634"></status>
</kw>
<msg timestamp="20160119 14:26:50.833" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:50.833" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160119 14:26:50.832" starttime="20160119 14:26:50.633"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160119 14:26:50.843" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160119 14:26:50.842" starttime="20160119 14:26:50.840"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.869" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160119 14:26:50.868" starttime="20160119 14:26:50.844"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.873" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160119 14:26:50.872" starttime="20160119 14:26:50.870"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.878" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160119 14:26:50.881" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160119 14:26:50.882" starttime="20160119 14:26:50.876"></status>
</kw>
<msg timestamp="20160119 14:26:50.883" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:50.884" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,828 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160119 14:26:50.883" starttime="20160119 14:26:50.874"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.891" starttime="20160119 14:26:50.889"></status>
</kw>
<msg timestamp="20160119 14:26:50.892" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,828 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160119 14:26:50.891" starttime="20160119 14:26:50.885"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.898" starttime="20160119 14:26:50.897"></status>
</kw>
<msg timestamp="20160119 14:26:50.899" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,828 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160119 14:26:50.899" starttime="20160119 14:26:50.893"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.906" starttime="20160119 14:26:50.904"></status>
</kw>
<msg timestamp="20160119 14:26:50.907" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160119 14:26:50.907" starttime="20160119 14:26:50.900"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.916" starttime="20160119 14:26:50.914"></status>
</kw>
<msg timestamp="20160119 14:26:50.917" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160119 14:26:50.917" starttime="20160119 14:26:50.908"></status>
</kw>
<msg timestamp="20160119 14:26:50.919" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160119 14:26:50.918" starttime="20160119 14:26:50.835"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160119 14:26:50.928" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160119 14:26:50.927" starttime="20160119 14:26:50.926"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.931" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160119 14:26:50.930" starttime="20160119 14:26:50.929"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.933" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160119 14:26:50.933" starttime="20160119 14:26:50.931"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.938" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160119 14:26:50.941" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160119 14:26:50.941" starttime="20160119 14:26:50.936"></status>
</kw>
<msg timestamp="20160119 14:26:50.942" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:50.943" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,828 INFO  [log] LowLevelOps.getMainAccount.output.accountId=34669</msg>
<status status="PASS" endtime="20160119 14:26:50.942" starttime="20160119 14:26:50.934"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.949" starttime="20160119 14:26:50.948"></status>
</kw>
<msg timestamp="20160119 14:26:50.950" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,828 INFO  [log] LowLevelOps.getMainAccount.output.accountId=34669</msg>
<status status="PASS" endtime="20160119 14:26:50.950" starttime="20160119 14:26:50.944"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.957" starttime="20160119 14:26:50.955"></status>
</kw>
<msg timestamp="20160119 14:26:50.958" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,828 INFO  [log] LowLevelOps.getMainAccount.output.accountId=34669</msg>
<status status="PASS" endtime="20160119 14:26:50.957" starttime="20160119 14:26:50.951"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.964" starttime="20160119 14:26:50.963"></status>
</kw>
<msg timestamp="20160119 14:26:50.966" level="INFO">${resultCode} = 34669</msg>
<status status="PASS" endtime="20160119 14:26:50.965" starttime="20160119 14:26:50.959"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:50.974" starttime="20160119 14:26:50.973"></status>
</kw>
<msg timestamp="20160119 14:26:50.975" level="INFO">${resultCode} = 34669</msg>
<status status="PASS" endtime="20160119 14:26:50.975" starttime="20160119 14:26:50.966"></status>
</kw>
<msg timestamp="20160119 14:26:50.977" level="INFO">${accountId} = 34669</msg>
<status status="PASS" endtime="20160119 14:26:50.976" starttime="20160119 14:26:50.920"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160119 14:26:50.987" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160119 14:26:50.986" starttime="20160119 14:26:50.984"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.989" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160119 14:26:50.989" starttime="20160119 14:26:50.987"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.992" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160119 14:26:50.992" starttime="20160119 14:26:50.990"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160119 14:26:50.996" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160119 14:26:50.999" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160119 14:26:51.000" starttime="20160119 14:26:50.994"></status>
</kw>
<msg timestamp="20160119 14:26:51.002" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:51.003" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,828 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000</msg>
<status status="PASS" endtime="20160119 14:26:51.001" starttime="20160119 14:26:50.993"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.009" starttime="20160119 14:26:51.008"></status>
</kw>
<msg timestamp="20160119 14:26:51.010" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,828 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000</msg>
<status status="PASS" endtime="20160119 14:26:51.010" starttime="20160119 14:26:51.004"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.016" starttime="20160119 14:26:51.015"></status>
</kw>
<msg timestamp="20160119 14:26:51.017" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,828 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000</msg>
<status status="PASS" endtime="20160119 14:26:51.017" starttime="20160119 14:26:51.011"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.024" starttime="20160119 14:26:51.022"></status>
</kw>
<msg timestamp="20160119 14:26:51.025" level="INFO">${resultCode} = 8000000</msg>
<status status="PASS" endtime="20160119 14:26:51.024" starttime="20160119 14:26:51.018"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.033" starttime="20160119 14:26:51.031"></status>
</kw>
<msg timestamp="20160119 14:26:51.034" level="INFO">${resultCode} = 8000000</msg>
<status status="PASS" endtime="20160119 14:26:51.034" starttime="20160119 14:26:51.026"></status>
</kw>
<msg timestamp="20160119 14:26:51.036" level="INFO">${balance} = 8000000</msg>
<status status="PASS" endtime="20160119 14:26:51.035" starttime="20160119 14:26:50.979"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160119 14:26:51.045" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160119 14:26:51.044" starttime="20160119 14:26:51.043"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:51.048" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160119 14:26:51.047" starttime="20160119 14:26:51.046"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:51.050" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160119 14:26:51.050" starttime="20160119 14:26:51.048"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160119 14:26:51.054" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160119 14:26:51.057" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160119 14:26:51.058" starttime="20160119 14:26:51.053"></status>
</kw>
<msg timestamp="20160119 14:26:51.059" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:51.059" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,829 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160119 14:26:51.059" starttime="20160119 14:26:51.051"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.066" starttime="20160119 14:26:51.064"></status>
</kw>
<msg timestamp="20160119 14:26:51.067" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,829 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160119 14:26:51.066" starttime="20160119 14:26:51.060"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.073" starttime="20160119 14:26:51.071"></status>
</kw>
<msg timestamp="20160119 14:26:51.074" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,829 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160119 14:26:51.073" starttime="20160119 14:26:51.068"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.080" starttime="20160119 14:26:51.079"></status>
</kw>
<msg timestamp="20160119 14:26:51.081" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160119 14:26:51.081" starttime="20160119 14:26:51.075"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.090" starttime="20160119 14:26:51.088"></status>
</kw>
<msg timestamp="20160119 14:26:51.091" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160119 14:26:51.090" starttime="20160119 14:26:51.082"></status>
</kw>
<msg timestamp="20160119 14:26:51.092" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160119 14:26:51.092" starttime="20160119 14:26:51.037"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160119 14:26:51.101" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160119 14:26:51.101" starttime="20160119 14:26:51.099"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:51.104" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160119 14:26:51.103" starttime="20160119 14:26:51.102"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160119 14:26:51.106" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160119 14:26:51.106" starttime="20160119 14:26:51.105"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160119 14:26:51.110" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160119 14:26:51.113" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160119 14:26:51.114" starttime="20160119 14:26:51.109"></status>
</kw>
<msg timestamp="20160119 14:26:51.115" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160119 14:26:51.115" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,830 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160119 14:26:51.115" starttime="20160119 14:26:51.107"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.123" starttime="20160119 14:26:51.122"></status>
</kw>
<msg timestamp="20160119 14:26:51.125" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,830 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160119 14:26:51.124" starttime="20160119 14:26:51.116"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.131" starttime="20160119 14:26:51.129"></status>
</kw>
<msg timestamp="20160119 14:26:51.132" level="INFO">${return_log_entry} = 2016-01-19 14:26:50,830 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160119 14:26:51.131" starttime="20160119 14:26:51.125"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.138" starttime="20160119 14:26:51.136"></status>
</kw>
<msg timestamp="20160119 14:26:51.139" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160119 14:26:51.139" starttime="20160119 14:26:51.133"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.147" starttime="20160119 14:26:51.146"></status>
</kw>
<msg timestamp="20160119 14:26:51.148" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160119 14:26:51.148" starttime="20160119 14:26:51.140"></status>
</kw>
<msg timestamp="20160119 14:26:51.150" level="INFO">${currencyId} = 101000</msg>
<status status="PASS" endtime="20160119 14:26:51.149" starttime="20160119 14:26:51.094"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.156" starttime="20160119 14:26:51.155"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.158" starttime="20160119 14:26:51.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.160" starttime="20160119 14:26:51.159"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160119 14:26:51.170" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160119 14:26:51.171" starttime="20160119 14:26:51.166"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:51.171" starttime="20160119 14:26:51.165"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:51.172" starttime="20160119 14:26:51.161"></status>
</kw>
<status status="PASS" endtime="20160119 14:26:51.173" starttime="20160119 14:26:51.151"></status>
</kw>
<msg timestamp="20160119 14:26:51.175" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160119 14:26:51.176" level="INFO">${accId} = 34669</msg>
<msg timestamp="20160119 14:26:51.176" level="INFO">${bal} = 8000000</msg>
<msg timestamp="20160119 14:26:51.176" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160119 14:26:51.177" level="INFO">${curr} = 101000</msg>
<status status="PASS" endtime="20160119 14:26:51.174" starttime="20160119 14:26:50.584"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.179" starttime="20160119 14:26:51.178"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160119 14:26:51.182" starttime="20160119 14:26:51.180"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160119 14:26:51.184" level="INFO">Account balance check: 8000000</msg>
<status status="PASS" endtime="20160119 14:26:51.185" starttime="20160119 14:26:51.183"></status>
</kw>
<doc>Test will make a short MFC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MFC_only</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160119 14:26:51.186" starttime="20160119 14:26:37.175"></status>
</test>
<doc>Testing the prepaid MFC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160119 14:26:51.190" starttime="20160119 14:26:30.567"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" info="" doc="" combined="" fail="0" links="">matko.sanseovic</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">MFC_only</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">TNZ_supported</stat>
</tag>
<suite>
<stat pass="1" id="s1" fail="0" name="MFC PREPAID-ShortDuration-robot-suite">MFC PREPAID-ShortDuration-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
