<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20160203 10:09:49.747">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/MOC_PREPAID_ONNET-ShortDuration-robot-suite.txt" id="s1" name="MOC PREPAID ONNET-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160203 10:09:52.017" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160203 10:09:52.020" level="INFO">${date} = Wed Feb  3 10:09:52 CET 2016</msg>
<status status="PASS" endtime="20160203 10:09:52.019" starttime="20160203 10:09:52.006"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:09:52.024" level="INFO">Date and time: Wed Feb  3 10:09:52 CET 2016</msg>
<status status="PASS" endtime="20160203 10:09:52.025" starttime="20160203 10:09:52.022"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:09:52.029" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20160203 10:09:52.030" starttime="20160203 10:09:52.027"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:52.103" starttime="20160203 10:09:52.101"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:52.258" starttime="20160203 10:09:52.116"></status>
</kw>
<msg timestamp="20160203 10:09:52.260" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160203 10:09:52.260" starttime="20160203 10:09:52.105"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 10:09:52.271" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 10:09:52.742" level="INFO">Read output: Last login: Wed Feb  3 07:55:14 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20160203 10:09:52.743" starttime="20160203 10:09:52.268"></status>
</kw>
<status status="PASS" endtime="20160203 10:09:52.744" starttime="20160203 10:09:52.262"></status>
</kw>
<msg timestamp="20160203 10:09:52.746" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160203 10:09:52.746" starttime="20160203 10:09:52.088"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 10:09:52.753" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 10:09:52.752" starttime="20160203 10:09:52.748"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 10:09:52.756" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20160203 10:09:53.120" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 10:09:53.123" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160203 10:09:53.122" starttime="20160203 10:09:52.754"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:53.130" starttime="20160203 10:09:53.127"></status>
</kw>
<msg timestamp="20160203 10:09:53.131" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 10:09:53.132" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 10:09:53.131" starttime="20160203 10:09:53.124"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:53.139" starttime="20160203 10:09:53.138"></status>
</kw>
<msg timestamp="20160203 10:09:53.141" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:09:53.140" starttime="20160203 10:09:53.133"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160203 10:09:53.144" level="INFO">${version_r} =  2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160203 10:09:53.144" starttime="20160203 10:09:53.142"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 10:09:53.148" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20160203 10:09:53.148" starttime="20160203 10:09:53.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:53.151" starttime="20160203 10:09:53.150"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:53.163" starttime="20160203 10:09:53.161"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 10:09:53.168" starttime="20160203 10:09:53.164"></status>
</kw>
<status status="PASS" endtime="20160203 10:09:53.170" starttime="20160203 10:09:53.153"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:53.177" starttime="20160203 10:09:53.175"></status>
</kw>
<msg timestamp="20160203 10:09:53.178" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20160203 10:09:53.178" starttime="20160203 10:09:53.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:53.181" starttime="20160203 10:09:53.180"></status>
</kw>
<msg timestamp="20160203 10:09:53.184" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160203 10:09:53.184" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20160203 10:09:53.183" starttime="20160203 10:09:52.051"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:53.287" starttime="20160203 10:09:53.285"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:53.339" starttime="20160203 10:09:53.294"></status>
</kw>
<msg timestamp="20160203 10:09:53.341" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160203 10:09:53.341" starttime="20160203 10:09:53.288"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 10:09:53.350" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 10:09:53.822" level="INFO">Read output: Last login: Wed Feb  3 07:57:18 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160203 10:09:53.823" starttime="20160203 10:09:53.348"></status>
</kw>
<status status="PASS" endtime="20160203 10:09:53.824" starttime="20160203 10:09:53.342"></status>
</kw>
<msg timestamp="20160203 10:09:53.826" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160203 10:09:53.825" starttime="20160203 10:09:53.273"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 10:09:53.832" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 10:09:53.832" starttime="20160203 10:09:53.827"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 10:09:53.836" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160203 10:09:54.189" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 10:09:54.194" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160203 10:09:54.192" starttime="20160203 10:09:53.834"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:54.208" starttime="20160203 10:09:54.202"></status>
</kw>
<msg timestamp="20160203 10:09:54.211" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 10:09:54.212" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 10:09:54.210" starttime="20160203 10:09:54.197"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:54.228" starttime="20160203 10:09:54.225"></status>
</kw>
<msg timestamp="20160203 10:09:54.231" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:09:54.230" starttime="20160203 10:09:54.215"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160203 10:09:54.239" level="INFO">${version_r} =  5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160203 10:09:54.238" starttime="20160203 10:09:54.234"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 10:09:54.247" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160203 10:09:54.246" starttime="20160203 10:09:54.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:54.253" starttime="20160203 10:09:54.250"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:54.279" starttime="20160203 10:09:54.275"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 10:09:54.285" starttime="20160203 10:09:54.282"></status>
</kw>
<status status="PASS" endtime="20160203 10:09:54.289" starttime="20160203 10:09:54.256"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:54.305" starttime="20160203 10:09:54.301"></status>
</kw>
<msg timestamp="20160203 10:09:54.306" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160203 10:09:54.306" starttime="20160203 10:09:54.292"></status>
</kw>
<msg timestamp="20160203 10:09:54.309" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160203 10:09:54.310" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160203 10:09:54.308" starttime="20160203 10:09:53.198"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:54.364" starttime="20160203 10:09:54.362"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:54.413" starttime="20160203 10:09:54.371"></status>
</kw>
<msg timestamp="20160203 10:09:54.415" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160203 10:09:54.414" starttime="20160203 10:09:54.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 10:09:54.424" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 10:09:54.923" level="INFO">Read output: Last login: Wed Feb  3 07:55:16 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20160203 10:09:54.927" starttime="20160203 10:09:54.421"></status>
</kw>
<status status="PASS" endtime="20160203 10:09:54.929" starttime="20160203 10:09:54.416"></status>
</kw>
<msg timestamp="20160203 10:09:54.932" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160203 10:09:54.931" starttime="20160203 10:09:54.352"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 10:09:54.941" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 10:09:54.940" starttime="20160203 10:09:54.934"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 10:09:54.946" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160203 10:09:55.117" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 10:09:55.122" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 10:09:55.119" starttime="20160203 10:09:54.943"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.136" starttime="20160203 10:09:55.130"></status>
</kw>
<msg timestamp="20160203 10:09:55.139" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 10:09:55.140" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 10:09:55.138" starttime="20160203 10:09:55.125"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.157" starttime="20160203 10:09:55.153"></status>
</kw>
<msg timestamp="20160203 10:09:55.160" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:09:55.159" starttime="20160203 10:09:55.143"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 10:09:55.168" level="INFO">${version_r} =  5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 10:09:55.167" starttime="20160203 10:09:55.162"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 10:09:55.176" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160203 10:09:55.175" starttime="20160203 10:09:55.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.181" starttime="20160203 10:09:55.179"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.192" starttime="20160203 10:09:55.190"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.195" starttime="20160203 10:09:55.193"></status>
</kw>
<status status="PASS" endtime="20160203 10:09:55.198" starttime="20160203 10:09:55.182"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.205" starttime="20160203 10:09:55.203"></status>
</kw>
<msg timestamp="20160203 10:09:55.206" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160203 10:09:55.206" starttime="20160203 10:09:55.199"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.210" starttime="20160203 10:09:55.208"></status>
</kw>
<msg timestamp="20160203 10:09:55.212" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160203 10:09:55.213" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160203 10:09:55.211" starttime="20160203 10:09:54.326"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.259" starttime="20160203 10:09:55.258"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.318" starttime="20160203 10:09:55.265"></status>
</kw>
<msg timestamp="20160203 10:09:55.321" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160203 10:09:55.320" starttime="20160203 10:09:55.261"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 10:09:55.341" level="INFO">Logging into '10.105.170.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 10:09:55.814" level="INFO">Read output: Last login: Wed Feb  3 07:55:17 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb07 ~]$</msg>
<status status="PASS" endtime="20160203 10:09:55.817" starttime="20160203 10:09:55.336"></status>
</kw>
<status status="PASS" endtime="20160203 10:09:55.819" starttime="20160203 10:09:55.324"></status>
</kw>
<msg timestamp="20160203 10:09:55.823" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160203 10:09:55.822" starttime="20160203 10:09:55.248"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 10:09:55.837" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 10:09:55.836" starttime="20160203 10:09:55.826"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 10:09:55.844" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160203 10:09:55.924" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 10:09:55.925" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160203 10:09:55.925" starttime="20160203 10:09:55.840"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.932" starttime="20160203 10:09:55.930"></status>
</kw>
<msg timestamp="20160203 10:09:55.934" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 10:09:55.934" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 10:09:55.933" starttime="20160203 10:09:55.927"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.942" starttime="20160203 10:09:55.940"></status>
</kw>
<msg timestamp="20160203 10:09:55.943" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:09:55.943" starttime="20160203 10:09:55.935"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 10:09:55.947" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160203 10:09:55.946" starttime="20160203 10:09:55.944"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 10:09:55.951" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160203 10:09:55.950" starttime="20160203 10:09:55.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.953" starttime="20160203 10:09:55.952"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.964" starttime="20160203 10:09:55.962"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.967" starttime="20160203 10:09:55.966"></status>
</kw>
<status status="PASS" endtime="20160203 10:09:55.970" starttime="20160203 10:09:55.955"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.976" starttime="20160203 10:09:55.974"></status>
</kw>
<msg timestamp="20160203 10:09:55.978" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160203 10:09:55.977" starttime="20160203 10:09:55.971"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:55.981" starttime="20160203 10:09:55.979"></status>
</kw>
<msg timestamp="20160203 10:09:55.983" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160203 10:09:55.983" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160203 10:09:55.982" starttime="20160203 10:09:55.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:09:55.987" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20160203 10:09:55.988" starttime="20160203 10:09:55.985"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:09:55.991" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20160203 10:09:55.992" starttime="20160203 10:09:55.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:09:55.995" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20160203 10:09:55.996" starttime="20160203 10:09:55.993"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:09:55.999" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160203 10:09:56.000" starttime="20160203 10:09:55.997"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160203 10:09:56.004" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 10:09:56.004" starttime="20160203 10:09:56.002"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160203 10:09:56.008" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 10:09:56.008" starttime="20160203 10:09:56.006"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160203 10:09:56.011" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 10:09:56.012" starttime="20160203 10:09:56.009"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160203 10:09:56.015" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 10:09:56.016" starttime="20160203 10:09:56.013"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:56.026" starttime="20160203 10:09:56.022"></status>
</kw>
<msg timestamp="20160203 10:09:56.027" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 10:09:56.027" starttime="20160203 10:09:56.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160203 10:09:56.031" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 10:09:56.031" starttime="20160203 10:09:56.028"></status>
</kw>
<status status="PASS" endtime="20160203 10:09:56.032" starttime="20160203 10:09:51.995"></status>
</kw>
<test id="s1-t1" name="Run MOC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:56.046" starttime="20160203 10:09:56.044"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160203 10:09:56.049" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160203 10:09:56.048" starttime="20160203 10:09:56.047"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160203 10:09:56.065" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20160203 10:09:56.066" starttime="20160203 10:09:56.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160203 10:09:56.069" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160203 10:09:56.069" starttime="20160203 10:09:56.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160203 10:09:56.072" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160203 10:09:56.073" starttime="20160203 10:09:56.070"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160203 10:09:56.076" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160203 10:09:56.076" starttime="20160203 10:09:56.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160203 10:09:56.079" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20160203 10:09:56.080" starttime="20160203 10:09:56.077"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160203 10:09:56.083" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20160203 10:09:56.083" starttime="20160203 10:09:56.081"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160203 10:09:56.086" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160203 10:09:56.087" starttime="20160203 10:09:56.084"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160203 10:09:56.089" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160203 10:09:56.090" starttime="20160203 10:09:56.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160203 10:09:56.093" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20160203 10:09:56.093" starttime="20160203 10:09:56.091"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160203 10:09:56.096" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160203 10:09:56.097" starttime="20160203 10:09:56.095"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 10:09:56.111" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:09:56.112" starttime="20160203 10:09:56.108"></status>
</kw>
<status status="PASS" endtime="20160203 10:09:56.112" starttime="20160203 10:09:56.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 10:09:56.117" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:09:56.118" starttime="20160203 10:09:56.115"></status>
</kw>
<status status="PASS" endtime="20160203 10:09:56.119" starttime="20160203 10:09:56.113"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 10:09:56.124" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:09:56.125" starttime="20160203 10:09:56.122"></status>
</kw>
<status status="PASS" endtime="20160203 10:09:56.126" starttime="20160203 10:09:56.120"></status>
</kw>
<status status="PASS" endtime="20160203 10:09:56.127" starttime="20160203 10:09:56.099"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 10:09:56.131" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 10:09:56.132" starttime="20160203 10:09:56.128"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:56.135" starttime="20160203 10:09:56.133"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:56.137" starttime="20160203 10:09:56.136"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:56.140" starttime="20160203 10:09:56.138"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:56.143" starttime="20160203 10:09:56.141"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:56.145" starttime="20160203 10:09:56.144"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:56.148" starttime="20160203 10:09:56.146"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:56.151" starttime="20160203 10:09:56.149"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:56.154" starttime="20160203 10:09:56.152"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:56.157" starttime="20160203 10:09:56.155"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:56.160" starttime="20160203 10:09:56.158"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:56.163" starttime="20160203 10:09:56.161"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:09:56.166" starttime="20160203 10:09:56.164"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 10:09:56.170" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160203 10:10:04.104" level="INFO">10:09:56,348 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/ext] for external libraries
10:09:56,349 INFO  [DefaultSoapUICore] Creating new settings at [/home/vtiwari/soapui-settings.xml]
10:09:58,372 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
10:09:58,386 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.170.125]
10:09:58,386 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
10:09:58,387 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
10:09:58,387 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [2]
10:09:58,387 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [732123710001000]
10:09:58,387 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [573190001000]
10:09:58,387 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
10:09:58,387 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
10:09:58,387 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101002]
10:09:58,388 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
10:09:58,388 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
10:09:58,388 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
10:09:58,397 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
10:09:58,403 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
10:09:58,820 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
10:09:58,880 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
10:09:59,029 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:09:59,029 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:09:59,056 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:09:59,059 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:09:59,144 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:09:59,144 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:09:59,144 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:09:59,144 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
10:09:59,207 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
10:09:59,506 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
10:09:59,532 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
10:09:59,534 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:09:59,535 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:09:59,535 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:10:00,511 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:10:00,511 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:10:00,515 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:10:00,515 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:10:00,516 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:10:00,516 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
10:10:00,549 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
10:10:00,552 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
10:10:00,575 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
10:10:00,577 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:10:00,579 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:10:00,579 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:10:00,589 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:10:00,589 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:10:00,592 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:10:00,592 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:10:00,592 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:10:00,592 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
10:10:00,624 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
10:10:00,629 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
10:10:00,650 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
10:10:00,652 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:10:00,653 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:10:00,653 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:10:01,044 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:10:01,044 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:10:01,048 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:10:01,048 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:10:01,048 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:10:01,048 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
10:10:01,079 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
10:10:01,082 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
10:10:01,101 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
10:10:01,102 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:10:01,104 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:10:01,104 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
10:10:01,525 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:10:01,525 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:10:01,532 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:10:01,532 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:10:01,532 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:10:01,532 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
10:10:01,563 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
10:10:01,573 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
10:10:01,593 INFO  [SoapUITestCaseRunner] running step [setBalance]
10:10:01,595 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:10:01,596 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:10:01,596 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
10:10:02,011 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:10:02,011 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:10:02,017 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:10:02,017 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:10:02,017 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:10:02,018 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
10:10:02,048 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
10:10:02,052 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
10:10:02,072 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
10:10:02,129 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
10:10:02,134 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
10:10:02,136 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:10:02,138 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:10:02,138 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:10:02,146 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:10:02,146 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:10:02,154 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:10:02,154 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:10:02,154 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:10:02,154 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
10:10:02,154 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
10:10:02,165 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
10:10:02,166 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
10:10:02,167 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:10:02,169 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:10:02,169 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:10:02,902 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:10:02,903 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:10:02,906 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:10:02,906 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:10:02,906 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:10:02,906 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
10:10:02,907 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
10:10:02,909 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
10:10:02,910 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
10:10:02,911 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:10:02,913 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:10:02,913 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:10:02,927 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:10:02,927 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:10:02,929 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:10:02,929 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:10:02,930 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:10:02,930 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
10:10:02,930 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
10:10:02,934 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
10:10:02,935 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
10:10:02,936 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:10:02,937 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:10:02,937 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:10:03,410 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:10:03,410 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:10:03,413 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:10:03,413 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:10:03,413 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:10:03,414 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
10:10:03,414 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
10:10:03,416 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
10:10:03,417 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
10:10:03,418 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:10:03,419 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:10:03,419 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
10:10:03,785 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:10:03,785 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:10:03,791 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:10:03,791 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:10:03,791 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:10:03,791 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
10:10:03,792 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
10:10:03,801 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
10:10:03,802 INFO  [SoapUITestCaseRunner] running step [setBalance]
10:10:03,803 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:10:03,805 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:10:03,805 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
10:10:04,054 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:10:04,055 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:10:04,060 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:10:04,060 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:10:04,060 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:10:04,060 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
10:10:04,061 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
10:10:04,065 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
10:10:04,065 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
10:10:04,066 INFO  [SoapUITestCaseRunner] running step [finish_successful]
10:10:04,098 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
10:10:04,099 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 5654ms, status: FINISHED
10:10:04,099 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 5654ms</msg>
<status status="PASS" endtime="20160203 10:10:04.109" starttime="20160203 10:09:56.168"></status>
</kw>
<msg timestamp="20160203 10:10:04.112" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:10:04.113" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 10:10:04.110" starttime="20160203 10:09:56.167"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 10:10:04.128" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160203 10:10:04.128" starttime="20160203 10:10:04.125"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:10:04.132" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 10:10:04.131" starttime="20160203 10:10:04.129"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:10:04.136" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 10:10:04.135" starttime="20160203 10:10:04.133"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 10:10:04.142" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 10:10:04.147" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160203 10:10:04.148" starttime="20160203 10:10:04.139"></status>
</kw>
<msg timestamp="20160203 10:10:04.149" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:10:04.150" level="INFO">${return_log_entry} = 2016-02-03 10:10:04,098 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 10:10:04.149" starttime="20160203 10:10:04.137"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:10:04.159" starttime="20160203 10:10:04.157"></status>
</kw>
<msg timestamp="20160203 10:10:04.161" level="INFO">${return_log_entry} = 2016-02-03 10:10:04,098 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 10:10:04.160" starttime="20160203 10:10:04.151"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:10:04.170" starttime="20160203 10:10:04.167"></status>
</kw>
<msg timestamp="20160203 10:10:04.171" level="INFO">${return_log_entry} = 2016-02-03 10:10:04,098 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 10:10:04.170" starttime="20160203 10:10:04.162"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:10:04.181" starttime="20160203 10:10:04.178"></status>
</kw>
<msg timestamp="20160203 10:10:04.182" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:10:04.181" starttime="20160203 10:10:04.172"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:10:04.193" starttime="20160203 10:10:04.191"></status>
</kw>
<msg timestamp="20160203 10:10:04.195" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:10:04.194" starttime="20160203 10:10:04.183"></status>
</kw>
<msg timestamp="20160203 10:10:04.197" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:10:04.196" starttime="20160203 10:10:04.116"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:10:04.207" starttime="20160203 10:10:04.205"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:10:04.210" starttime="20160203 10:10:04.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:10:04.213" starttime="20160203 10:10:04.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 10:10:04.225" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 10:10:04.226" starttime="20160203 10:10:04.220"></status>
</kw>
<status status="PASS" endtime="20160203 10:10:04.227" starttime="20160203 10:10:04.218"></status>
</kw>
<status status="PASS" endtime="20160203 10:10:04.228" starttime="20160203 10:10:04.214"></status>
</kw>
<status status="PASS" endtime="20160203 10:10:04.229" starttime="20160203 10:10:04.198"></status>
</kw>
<msg timestamp="20160203 10:10:04.231" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160203 10:10:04.230" starttime="20160203 10:09:56.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160203 10:10:04.237" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 10:10:04.238" starttime="20160203 10:10:04.232"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:10:04.240" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160203 10:10:04.241" starttime="20160203 10:10:04.239"></status>
</kw>
<kw type="kw" name="${calling_int} = BuiltIn.Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<msg timestamp="20160203 10:10:04.244" level="INFO">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160203 10:10:04.246" level="INFO">${calling_int} = 573190001000</msg>
<status status="PASS" endtime="20160203 10:10:04.245" starttime="20160203 10:10:04.242"></status>
</kw>
<kw type="kw" name="${called_party} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${calling_int}+1</arg>
</arguments>
<msg timestamp="20160203 10:10:04.251" level="INFO">${called_party} = 573190001001</msg>
<status status="PASS" endtime="20160203 10:10:04.251" starttime="20160203 10:10:04.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:10:04.254" starttime="20160203 10:10:04.252"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${called_party}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160203 10:10:04.285" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160203 10:10:04.285" starttime="20160203 10:10:04.283"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160203 10:10:04.289" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160203 10:10:04.288" starttime="20160203 10:10:04.286"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160203 10:10:04.292" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20160203 10:10:04.292" starttime="20160203 10:10:04.290"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160203 10:10:04.296" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20160203 10:10:04.295" starttime="20160203 10:10:04.293"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:10:04.298" starttime="20160203 10:10:04.297"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 10:10:04.303" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:10:04.303" starttime="20160203 10:10:04.299"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:10:04.306" starttime="20160203 10:10:04.305"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160203 10:10:04.310" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:10:04.311" starttime="20160203 10:10:04.307"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 10:10:04.315" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:10:04.316" starttime="20160203 10:10:04.312"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:10:04.318" starttime="20160203 10:10:04.317"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160203 10:10:04.322" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:10:04.323" starttime="20160203 10:10:04.319"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160203 10:10:04.328" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:10:04.328" starttime="20160203 10:10:04.324"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:10:04.331" starttime="20160203 10:10:04.329"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160203 10:10:04.342" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160203 10:10:16.461" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 10:10:16.456" starttime="20160203 10:10:04.332"></status>
</kw>
<msg timestamp="20160203 10:10:16.468" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 10:10:16.465" starttime="20160203 10:10:04.270"></status>
</kw>
<msg timestamp="20160203 10:10:16.473" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20160203 10:10:16.471" starttime="20160203 10:10:04.256"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:10:16.479" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160203 10:10:16.481" starttime="20160203 10:10:16.476"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160203 10:10:16.488" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160203 10:10:16.525" level="FAIL">CG Session ended with rc 1: 1.0 != 0.0</msg>
<status status="FAIL" endtime="20160203 10:10:16.527" starttime="20160203 10:10:16.483"></status>
</kw>
<doc>Test will make a MOC call, duration 1s.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160203 10:10:16.530" starttime="20160203 10:09:56.035">CG Session ended with rc 1: 1.0 != 0.0</status>
</test>
<doc>Testing the prepaid MOC call, duration is 1s - shorter than one slice (less than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160203 10:10:16.543" starttime="20160203 10:09:49.754"></status>
</suite>
<statistics>
<total>
<stat pass="0" fail="1">Critical Tests</stat>
<stat pass="0" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" info="" doc="" combined="" fail="1" links="">matko.sanseovic</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">MOC_only</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">MTEL_supported</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">MVNA_MEX_supported</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">SMARTSPACE_supported</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">TNZ_supported</stat>
<stat pass="0" info="" doc="" combined="" fail="1" links="">VIRGIN_COLUMBIA_supported</stat>
</tag>
<suite>
<stat pass="0" id="s1" fail="1" name="MOC PREPAID ONNET-ShortDuration-robot-suite">MOC PREPAID ONNET-ShortDuration-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
