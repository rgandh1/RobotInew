*** Settings ***
Documentation     Testing the prepaid calls
...
...               ============================================================
Suite Setup       Setup Suite
Force Tags        matko.sanseovic
Resource          ${ROBOT_WORKSPACE_RESOURCE}  #Be aware that variables imported with a resource file are NOT visible in the local Variables table (but in all other local tables)
Resource          ${SUT_RESOURCE}
Resource          ${ROBOT WORKSPACE PATH}/libs/global-keyword-resources/crce-subscriberadmin/subscriber-admin-support-resource.txt
Resource          ${ROBOT WORKSPACE PATH}/libs/global-keyword-resources/cg-support/cg_support-resource.txt
Resource          ${ROBOT WORKSPACE PATH}/libs/global-keyword-resources/ssh-support/ssh-support-resource.txt
Resource          ${ROBOT WORKSPACE PATH}/libs/global-keyword-resources/db-support/dblib_support-resource.txt
Resource		  ../suite-global-keyword-resource.txt
Library           String
Library           SSHLibrary
Library           OperatingSystem
Library           org.robot.database.keywords.DatabaseLibrary

*** Variables ***

*** Keywords ***
	
*** Test Cases ***

Start logging
    [Documentation]    	Test case starts the logging on IN and CRCE
	...
    ...    		Arguments:
	...	
    ...         =================================================================================
	${ssh_connection_crce}= 	SSH Login And Start File Monitor    ${CRCE USER}    ${CRCE PWD}    ${EMPTY}    ${CRCE LOG FILE PATH}    host=${CRCE HOST}
	${ssh_connection_in}=	    SSH Login And Start File Monitor    ${IN-APP USER}    ${IN-APP PWD}    ${EMPTY}    ${IN-APP MOC LOG FILE PATH}    host=${IN-APP HOST}
	Set Suite Variable   ${ssh_connection_crce}
	Set Suite Variable   ${ssh_connection_in}
	
Run MOC Short Call
    [Documentation]    	Test will make a MOC call, duration 1s. 
	...
    ...    		Arguments:
	...				none
	...         Returns:
	...				none
	...         Fails: in case CG session fails or account balance evaluation fails
	...	
    ...         =================================================================================
	[Tags]					MOC_only
	Comment					******* Create test subscribers *******
	${INITIAL_BALANCE}=    	Set Variable    10000000    #10 million units should be enough for some calls even if it's in millicent units
    ${return_code}=        	CRCE Create Test Subscribers    ${CRCE01 HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    1    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    PREPAID    ${TESTSUBCRIBERS DEFAULT LANGUAGEID}    ${TESTSUBCRIBERS DEFAULT TARIFFID}    ${INITIAL_BALANCE}
    Should Be Equal As Strings      ${return_code}    OK
	Log  				   	Test Subscribers Created!    console=yes	
    Comment                 ******* Run MOC 1s *******
    Log					    Running the MOC call...  console=yes
    ${rc}=                 	CG Run MOC 1s    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${MSC ADDRESS}    ${CALLSGEN HOME}    ${CALLSGEN JAR NAME}    ${CG UNIFIED WS PATH}    ${AMQ-SIG HOST}   ${AMQ-SIG PORT}    ${AMQ-SIG MOC REQ QUEUE}    ${AMQ-SIG MOC RES QUEUE}                      
	Log					   	...do the checks...   console=yes
	Should Be Equal As Numbers 	${rc}  0   msg=CG Session ended with rc ${rc}
	Comment				   	******* Checking Subscriber's Account Balance *******
	# first we should get subscriber id
	${rc}    ${provId}    ${imsi}    ${id}   ${state}    ${tariffId}    ${type}  CRCE Get Subscriber Profile    ${CRCE01 HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    ${TESTSUBCRIBERS MSISDN RANGE START}
	${resultCode}    ${accId}   ${bal}    ${cat}    ${curr}=   	CRCE Get Main Account	${CRCE HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    ${id}
	# calculating the target balance that should match the balance set after the call
	${target_bal}=  Evaluate  ${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}
	Should Be Equal As Numbers  ${target_bal}  ${bal}  msg=Expected balance and retrieved balance mismatch!
	Log						Account balance check OK!   console=yes
	
Run MOC Long Call
    [Documentation]    	Test will make a MOC call, duration 136s. 
	...
    ...    		Arguments:
	...				none
	...         Returns:
	...				none
	...         Fails: in case CG session fails or account balance evaluation fails
	...	
    ...         =================================================================================
	[Tags]					MOC_only
	Comment					******* Create test subscribers *******
	${INITIAL_BALANCE}=    	Set Variable    10000000    #10 million units should be enough for some calls even if it's in millicent units
    ${return_code}=        	CRCE Create Test Subscribers    ${CRCE01 HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    1    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    PREPAID    ${TESTSUBCRIBERS DEFAULT LANGUAGEID}    ${TESTSUBCRIBERS DEFAULT TARIFFID}    ${INITIAL_BALANCE}
    Should Be Equal As Strings      ${return_code}    OK
	Log  				   	Test Subscribers Created!    console=yes	
    Comment                 ******* Run MOC 1s *******
    Log					    Running the MOC call...  console=yes
    ${rc}=                 	CG Run MOC 136s    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${MSC ADDRESS}    ${CALLSGEN HOME}    ${CALLSGEN JAR NAME}    ${CG UNIFIED WS PATH}    ${AMQ-SIG HOST}   ${AMQ-SIG PORT}    ${AMQ-SIG MOC REQ QUEUE}    ${AMQ-SIG MOC RES QUEUE}                      
	Log					   	...do the checks...   console=yes
	Should Be Equal As Numbers 	${rc}  0   msg=CG Session ended with rc ${rc}	
	Comment				   	******* Checking Subscriber's Account Balance *******
	# first we should get subscriber id
	${rc}    ${provId}    ${imsi}    ${id}   ${state}    ${tariffId}    ${type}  CRCE Get Subscriber Profile    ${CRCE01 HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    ${TESTSUBCRIBERS MSISDN RANGE START}
	${resultCode}    ${accId}   ${bal}    ${cat}    ${curr}=   	CRCE Get Main Account	${CRCE HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    ${id}
	# calculating the target balance that should match the balance set after the call (3 slices should be charged)
	${target_bal}=  Evaluate  ${INITIAL_BALANCE}-3*${TESTSUBCRIBERS DEFAULT SLICE COSTS}
	Run Keyword If			'${SUT PROJECT TAG PREFIX}'=='VIRGIN_COLUMBIA'   Should Be Equal As Numbers   ${bal}   9920080  msg=Call should be free!
	...						ELSE	Should Be Equal As Numbers  ${target_bal}  ${bal}  msg=Expected balance and retrieved balance mismatch!
	Log						Account balance check OK!   console=yes

Run MOC Busy Call
    [Documentation]    	Test will make a MOC call to the busy B party. 
	...
    ...    		Arguments:
	...				none
	...         Returns:
	...				none
	...         Fails: in case CG session fails or account balance evaluation fails
	...	
    ...         =================================================================================
	[Tags]					MOC_only
	Comment					******* Create test subscribers *******
	${INITIAL_BALANCE}=    	Set Variable    10000000    #10 million units should be enough for some calls even if it's in millicent units
    ${return_code}=        	CRCE Create Test Subscribers    ${CRCE01 HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    1    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    PREPAID    ${TESTSUBCRIBERS DEFAULT LANGUAGEID}    ${TESTSUBCRIBERS DEFAULT TARIFFID}    ${INITIAL_BALANCE}
    Should Be Equal As Strings      ${return_code}    OK
	Log  				   	Test Subscribers Created!    console=yes	
    Comment                 ******* Run MOC Busy *******
    Log					    Running the MOC busy call...  console=yes
    ${rc}=                 	CG Run MOC Busy    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${MSC ADDRESS}    ${CALLSGEN HOME}    ${CALLSGEN JAR NAME}    ${CG UNIFIED WS PATH}    ${AMQ-SIG HOST}   ${AMQ-SIG PORT}    ${AMQ-SIG MOC REQ QUEUE}    ${AMQ-SIG MOC RES QUEUE}                      
	Log					   	...do the checks...   console=yes
	Should Be Equal As Numbers 	${rc}  0   msg=CG Session ended with rc ${rc}

Run MOC Abandon Call
    [Documentation]    	Test will make an abandoned MOC call 
	...
    ...    		Arguments:
	...				none
	...         Returns:
	...				none
	...         Fails: in case CG session fails or account balance evaluation fails
	...	
    ...         =================================================================================
	[Tags]					MOC_only
	Comment					******* Create test subscribers *******
	${INITIAL_BALANCE}=    	Set Variable    10000000    #10 million units should be enough for some calls even if it's in millicent units
    ${return_code}=        	CRCE Create Test Subscribers    ${CRCE01 HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    1    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    PREPAID    ${TESTSUBCRIBERS DEFAULT LANGUAGEID}    ${TESTSUBCRIBERS DEFAULT TARIFFID}    ${INITIAL_BALANCE}
    Should Be Equal As Strings      ${return_code}    OK
	Log  				   	Test Subscribers Created!    console=yes	
    Comment                 ******* Run MOC Abandon *******
    Log					    Running the MOC abandon call...  console=yes
    ${rc}=                 	CG Run MOC Abandon    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${MSC ADDRESS}    ${CALLSGEN HOME}    ${CALLSGEN JAR NAME}    ${CG UNIFIED WS PATH}    ${AMQ-SIG HOST}   ${AMQ-SIG PORT}    ${AMQ-SIG MOC REQ QUEUE}    ${AMQ-SIG MOC RES QUEUE}                      
	Log					   	...do the checks...   console=yes
	Should Be Equal As Numbers 	${rc}  0   msg=CG Session ended with rc ${rc}


Run MOC NoAnswer Call
    [Documentation]    	Test will make a MOC call in NoAnswer case
	...
    ...    		Arguments:
	...				none
	...         Returns:
	...				none
	...         Fails: in case CG session fails or account balance evaluation fails
	...	
    ...         =================================================================================
	[Tags]					MOC_only
	Comment					******* Create test subscribers *******
	${INITIAL_BALANCE}=    	Set Variable    10000000    #10 million units should be enough for some calls even if it's in millicent units
    ${return_code}=        	CRCE Create Test Subscribers    ${CRCE01 HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    1    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    PREPAID    ${TESTSUBCRIBERS DEFAULT LANGUAGEID}    ${TESTSUBCRIBERS DEFAULT TARIFFID}    ${INITIAL_BALANCE}
    Should Be Equal As Strings      ${return_code}    OK
	Log  				   	Test Subscribers Created!    console=yes	
    Comment                 ******* Run MOC NoAnswer *******
    Log					    Running the MOC NoAnswer call...  console=yes
    ${rc}=                 	CG Run MOC NoAnswer    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${MSC ADDRESS}    ${CALLSGEN HOME}    ${CALLSGEN JAR NAME}    ${CG UNIFIED WS PATH}    ${AMQ-SIG HOST}   ${AMQ-SIG PORT}    ${AMQ-SIG MOC REQ QUEUE}    ${AMQ-SIG MOC RES QUEUE}                      
	Log					   	...do the checks...   console=yes
	Should Be Equal As Numbers 	${rc}  0   msg=CG Session ended with rc ${rc}
	
Run MOC NoCredit Call
    [Documentation]    	Insufficient funds MOC call
	...
    ...    		Arguments:
	...				none
	...         Returns:
	...				none
	...         Fails: in case CG session fails
	...	
    ...         =================================================================================
	[Tags]					MOC_only
	Comment					******* Create test subscribers *******
	${INITIAL_BALANCE}=    	Set Variable    0    #empty pocket -> no call allowed
    ${return_code}=        	CRCE Create Test Subscribers    ${CRCE01 HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    1    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    PREPAID    ${TESTSUBCRIBERS DEFAULT LANGUAGEID}    ${TESTSUBCRIBERS DEFAULT TARIFFID}    ${INITIAL_BALANCE}
    Should Be Equal As Strings      ${return_code}    OK
	Log  				   	Test Subscribers Created!    console=yes	
    Comment                 ******* Run MOC *******
    Log					    Running the MOC call...  console=yes
    ${rc}=                 	CG Run MOC Final Rerouting    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${MSC ADDRESS}    ${CALLSGEN HOME}    ${CALLSGEN JAR NAME}    ${CG UNIFIED WS PATH}    ${AMQ-SIG HOST}   ${AMQ-SIG PORT}    ${AMQ-SIG MOC REQ QUEUE}    ${AMQ-SIG MOC RES QUEUE}                      
	Log					   	...do the checks...   console=yes
	Should Be Equal As Numbers 	${rc}  0   msg=CG Session ended with rc ${rc}
	
Run MTC Short Call
    [Documentation]    	Test will make a short MTC call
	...
    ...    		Arguments:
	...				none
	...         Returns:
	...				none
	...         Fails: in case CG session fails or account balance evaluation fails
	...	
    ...         =================================================================================
	[Tags]					MTC_only
	Comment					******* Create test subscribers *******
	${INITIAL_BALANCE}=    	Set Variable    10000000    #10 million units should be enough for some calls even if it's in millicent units
    ${return_code}=        	CRCE Create Test Subscribers    ${CRCE01 HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    2    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    PREPAID    ${TESTSUBCRIBERS DEFAULT LANGUAGEID}    ${TESTSUBCRIBERS DEFAULT TARIFFID}    ${INITIAL_BALANCE}
	${calling_party_msisdn}=  Evaluate  ${TESTSUBCRIBERS MSISDN RANGE START}+1
    Should Be Equal As Strings      ${return_code}    OK
	Log  				   	Test Subscribers Created!    console=yes	
    Comment                 ******* Run MTC 1s *******
    Log					    Running the short MTC call...  console=yes
    ${rc}=                 	CG Run MTC 1s    ${calling_party_msisdn}    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${MSC ADDRESS}    ${CALLSGEN HOME}    ${CALLSGEN JAR NAME}    ${CG UNIFIED WS PATH}    ${AMQ-SIG HOST}   ${AMQ-SIG PORT}    ${AMQ-SIG MOC REQ QUEUE}    ${AMQ-SIG MOC RES QUEUE}                      
	Log					   	...do the checks...   console=yes
	Should Be Equal As Numbers 	${rc}  0   msg=CG Session ended with rc ${rc}
	
Run MTC NoAnswer Call
    [Documentation]    	Test will make the no answer MTC call
	...
    ...    		Arguments:
	...				none
	...         Returns:
	...				none
	...         Fails: in case CG session fails or account balance evaluation fails
	...	
    ...         =================================================================================
	[Tags]					MTC_only
	Comment					******* Create test subscribers *******
	${INITIAL_BALANCE}=    	Set Variable    10000000    #10 million units should be enough for some calls even if it's in millicent units
    ${return_code}=        	CRCE Create Test Subscribers    ${CRCE01 HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    2    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    PREPAID    ${TESTSUBCRIBERS DEFAULT LANGUAGEID}    ${TESTSUBCRIBERS DEFAULT TARIFFID}    ${INITIAL_BALANCE}
	${calling_party_msisdn}=  Evaluate  ${TESTSUBCRIBERS MSISDN RANGE START}+1
    Should Be Equal As Strings      ${return_code}    OK
	Log  				   	Test Subscribers Created!    console=yes	
    Comment                 ******* Run MTC 1s *******
    Log					    Running the short MTC call...  console=yes
    ${rc}=                 	CG Run MTC NoAnswer    ${calling_party_msisdn}    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${MSC ADDRESS}    ${CALLSGEN HOME}    ${CALLSGEN JAR NAME}    ${CG UNIFIED WS PATH}    ${AMQ-SIG HOST}   ${AMQ-SIG PORT}    ${AMQ-SIG MOC REQ QUEUE}    ${AMQ-SIG MOC RES QUEUE}                      
	Log					   	...do the checks...   console=yes
	Should Be Equal As Numbers 	${rc}  0   msg=CG Session ended with rc ${rc}
	
Run MTC Busy Call
    [Documentation]    	Test will make a busy MTC call
	...
    ...    		Arguments:
	...				none
	...         Returns:
	...				none
	...         Fails: in case CG session fails or account balance evaluation fails
	...	
    ...         =================================================================================
	[Tags]					MTC_only
	Comment					******* Create test subscribers *******
	${INITIAL_BALANCE}=    	Set Variable    10000000    #10 million units should be enough for some calls even if it's in millicent units
    ${return_code}=        	CRCE Create Test Subscribers    ${CRCE01 HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    2    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    PREPAID    ${TESTSUBCRIBERS DEFAULT LANGUAGEID}    ${TESTSUBCRIBERS DEFAULT TARIFFID}    ${INITIAL_BALANCE}
	${calling_party_msisdn}=  Evaluate  ${TESTSUBCRIBERS MSISDN RANGE START}+1
    Should Be Equal As Strings      ${return_code}    OK
	Log  				   	Test Subscribers Created!    console=yes	
    Comment                 ******* Run busy MTC *******
    Log					    Running the short MTC call...  console=yes
    ${rc}=                 	CG Run MTC Busy    ${calling_party_msisdn}    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${MSC ADDRESS}    ${CALLSGEN HOME}    ${CALLSGEN JAR NAME}    ${CG UNIFIED WS PATH}    ${AMQ-SIG HOST}   ${AMQ-SIG PORT}    ${AMQ-SIG MOC REQ QUEUE}    ${AMQ-SIG MOC RES QUEUE}                      
	Log					   	...do the checks...   console=yes
	Should Be Equal As Numbers 	${rc}  0   msg=CG Session ended with rc ${rc}	
	
Run MTC Abandon Call
    [Documentation]    	Test will make an abandoned MTC call
	...
    ...    		Arguments:
	...				none
	...         Returns:
	...				none
	...         Fails: in case CG session fails or account balance evaluation fails
	...	
    ...         =================================================================================
	[Tags]					MTC_only	
	Comment					******* Create test subscribers *******
	${INITIAL_BALANCE}=    	Set Variable    10000000    #10 million units should be enough for some calls even if it's in millicent units
    ${return_code}=        	CRCE Create Test Subscribers    ${CRCE01 HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    2    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    PREPAID    ${TESTSUBCRIBERS DEFAULT LANGUAGEID}    ${TESTSUBCRIBERS DEFAULT TARIFFID}    ${INITIAL_BALANCE}
	${calling_party_msisdn}=  Evaluate  ${TESTSUBCRIBERS MSISDN RANGE START}+1
    Should Be Equal As Strings      ${return_code}    OK
	Log  				   	Test Subscribers Created!    console=yes	
    Comment                 ******* Run MTC abandon *******
    Log					    Running the MTC abandon call...  console=yes
    ${rc}=                 	CG Run MTC Abandon    ${calling_party_msisdn}    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    ${MSC ADDRESS}    ${CALLSGEN HOME}    ${CALLSGEN JAR NAME}    ${CG UNIFIED WS PATH}    ${AMQ-SIG HOST}   ${AMQ-SIG PORT}    ${AMQ-SIG MOC REQ QUEUE}    ${AMQ-SIG MOC RES QUEUE}                      
	Log					   	...do the checks...   console=yes
	Should Be Equal As Numbers 	${rc}  0   msg=CG Session ended with rc ${rc}	
	
Run MFC Short Call
    [Documentation]    	Test will make a short MFC call
	...
    ...    		Arguments:
	...				none
	...         Returns:
	...				none
	...         Fails: in case CG session fails or account balance evaluation fails
	...	
    ...         =================================================================================
	[Tags]					MFC_only	
	Comment					******* Create test subscribers *******
	${INITIAL_BALANCE}=    	Set Variable    10000000    #10 million units should be enough for some calls even if it's in millicent units
    ${return_code}=        	CRCE Create Test Subscribers    ${CRCE01 HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    3    ${TESTSUBCRIBERS IMSI RANGE START}    ${TESTSUBCRIBERS MSISDN RANGE START}    PREPAID    ${TESTSUBCRIBERS DEFAULT LANGUAGEID}    ${TESTSUBCRIBERS DEFAULT TARIFFID}    ${INITIAL_BALANCE}
    Should Be Equal As Strings      ${return_code}    OK
	${b_party_msisdn}=  	Evaluate  ${TESTSUBCRIBERS MSISDN RANGE START}+1
	${b_party_imsi}=		Evaluate  ${TESTSUBCRIBERS IMSI RANGE START}+1	
	${c_party_msisdn}=  	Evaluate  ${TESTSUBCRIBERS MSISDN RANGE START}+2
	Log  				   	Test Subscribers Created!    console=yes	
    Comment                 ******* Run MFC 1s *******
    Log					    Running the short MFC call...  console=yes
    ${rc}=                 	CG Run MFC 1s    ${TESTSUBCRIBERS MSISDN RANGE START}  ${b_party_imsi}    ${b_party_msisdn}   ${c_party_msisdn}    ${MSC ADDRESS}    ${CALLSGEN HOME}    ${CALLSGEN JAR NAME}    ${CG UNIFIED WS PATH}    ${AMQ-SIG HOST}   ${AMQ-SIG PORT}    ${AMQ-SIG MOC REQ QUEUE}    ${AMQ-SIG MOC RES QUEUE}                      
	Log					   	...do the checks...   console=yes
	Should Be Equal As Numbers 	${rc}  0   msg=CG Session ended with rc ${rc}
	Comment				   	******* Checking Subscriber's Account Balance *******
	# first we should get subscriber id
	${rc}    ${provId}    ${imsi}    ${id}   ${state}    ${tariffId}    ${type}  CRCE Get Subscriber Profile    ${CRCE01 HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    ${TESTSUBCRIBERS MSISDN RANGE START}
	${resultCode}    ${accId}   ${bal}    ${cat}    ${curr}=   	CRCE Get Main Account	${CRCE HOST}    ${CRCE01 WEBSERVICES PORT}    ${CRCE01 WEBSERVICES BASE PATH}    ${id}
	Log						Account balance check: ${bal}   console=yes	

	
Stop logging
    [Documentation]    	Test case stops the logging on IN and CRCE and copies the log files
	...
    ...    		Arguments:
	...	
    ...         =================================================================================
	Comment					******* Create test subscribers *******
	SSH Close File Monitor and Logout    ${ssh_connection_crce} 	./log/CRCE_ssh_tailed.log
	SSH Close File Monitor and Logout    ${ssh_connection_in} 		./log/IN_ssh_tailed.log	