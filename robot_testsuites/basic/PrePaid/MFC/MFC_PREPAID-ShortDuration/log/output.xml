<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20160203 10:15:22.872">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/MFC_PREPAID-ShortDuration-robot-suite.txt" id="s1" name="MFC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160203 10:15:24.906" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160203 10:15:24.913" level="INFO">${date} = Wed Feb  3 10:15:24 CET 2016</msg>
<status status="PASS" endtime="20160203 10:15:24.911" starttime="20160203 10:15:24.894"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:15:24.928" level="INFO">Date and time: Wed Feb  3 10:15:24 CET 2016</msg>
<status status="PASS" endtime="20160203 10:15:24.932" starttime="20160203 10:15:24.920"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:15:24.945" level="INFO">Target IN machine: 10.105.119.135</msg>
<status status="PASS" endtime="20160203 10:15:24.948" starttime="20160203 10:15:24.937"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:25.091" starttime="20160203 10:15:25.088"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:25.352" starttime="20160203 10:15:25.105"></status>
</kw>
<msg timestamp="20160203 10:15:25.357" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160203 10:15:25.355" starttime="20160203 10:15:25.093"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 10:15:25.381" level="INFO">Logging into '10.105.119.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 10:15:27.572" level="INFO">Read output: Last login: Wed Feb  3 07:38:18 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 10:15:27.574" starttime="20160203 10:15:25.375"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:27.576" starttime="20160203 10:15:25.361"></status>
</kw>
<msg timestamp="20160203 10:15:27.580" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160203 10:15:27.579" starttime="20160203 10:15:25.073"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 10:15:27.588" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 10:15:27.587" starttime="20160203 10:15:27.582"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 10:15:27.592" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160203 10:15:28.658" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 10:15:28.663" level="INFO">${output} = I-New MVNA TEMM - Core - Service 1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 10:15:28.660" starttime="20160203 10:15:27.589"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:28.678" starttime="20160203 10:15:28.672"></status>
</kw>
<msg timestamp="20160203 10:15:28.682" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 10:15:28.683" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 10:15:28.680" starttime="20160203 10:15:28.666"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:28.700" starttime="20160203 10:15:28.696"></status>
</kw>
<msg timestamp="20160203 10:15:28.703" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:15:28.702" starttime="20160203 10:15:28.686"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160203 10:15:28.712" level="INFO">${version_r} =  1.0.0 2015.09.28-13:45:14 is running PID: 11380 </msg>
<status status="PASS" endtime="20160203 10:15:28.710" starttime="20160203 10:15:28.706"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 10:15:28.720" level="INFO">${version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 10:15:28.719" starttime="20160203 10:15:28.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:28.728" starttime="20160203 10:15:28.724"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:28.757" starttime="20160203 10:15:28.752"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 10:15:28.766" starttime="20160203 10:15:28.760"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:28.770" starttime="20160203 10:15:28.732"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:28.786" starttime="20160203 10:15:28.782"></status>
</kw>
<msg timestamp="20160203 10:15:28.789" level="INFO">${ver} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 10:15:28.788" starttime="20160203 10:15:28.773"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:28.796" starttime="20160203 10:15:28.792"></status>
</kw>
<msg timestamp="20160203 10:15:28.802" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160203 10:15:28.804" level="INFO">${in_version} =  1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 10:15:28.800" starttime="20160203 10:15:25.006"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:28.858" starttime="20160203 10:15:28.857"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:28.971" starttime="20160203 10:15:28.865"></status>
</kw>
<msg timestamp="20160203 10:15:28.973" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160203 10:15:28.972" starttime="20160203 10:15:28.860"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 10:15:28.982" level="INFO">Logging into '10.105.119.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 10:15:30.754" level="INFO">Read output: Last login: Wed Feb  3 07:41:25 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 10:15:30.755" starttime="20160203 10:15:28.980"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:30.757" starttime="20160203 10:15:28.974"></status>
</kw>
<msg timestamp="20160203 10:15:30.760" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160203 10:15:30.759" starttime="20160203 10:15:28.845"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 10:15:30.767" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 10:15:30.766" starttime="20160203 10:15:30.762"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 10:15:30.770" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160203 10:15:32.237" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 10:15:32.240" level="INFO">${output} = I-New UMS MVNO - XDR - Server 6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 10:15:32.239" starttime="20160203 10:15:30.768"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:32.247" starttime="20160203 10:15:32.244"></status>
</kw>
<msg timestamp="20160203 10:15:32.248" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 10:15:32.249" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 10:15:32.247" starttime="20160203 10:15:32.241"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:32.256" starttime="20160203 10:15:32.255"></status>
</kw>
<msg timestamp="20160203 10:15:32.258" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:15:32.257" starttime="20160203 10:15:32.250"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160203 10:15:32.262" level="INFO">${version_r} =  6.1.5.27971 is running PID: 29486 </msg>
<status status="PASS" endtime="20160203 10:15:32.261" starttime="20160203 10:15:32.259"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 10:15:32.266" level="INFO">${version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 10:15:32.265" starttime="20160203 10:15:32.263"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:32.268" starttime="20160203 10:15:32.267"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:32.280" starttime="20160203 10:15:32.278"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 10:15:32.285" starttime="20160203 10:15:32.281"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:32.286" starttime="20160203 10:15:32.270"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:32.294" starttime="20160203 10:15:32.292"></status>
</kw>
<msg timestamp="20160203 10:15:32.295" level="INFO">${ver} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 10:15:32.295" starttime="20160203 10:15:32.287"></status>
</kw>
<msg timestamp="20160203 10:15:32.298" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160203 10:15:32.299" level="INFO">${xdr_version} =  6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 10:15:32.297" starttime="20160203 10:15:28.820"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:32.351" starttime="20160203 10:15:32.349"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:32.443" starttime="20160203 10:15:32.357"></status>
</kw>
<msg timestamp="20160203 10:15:32.447" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160203 10:15:32.446" starttime="20160203 10:15:32.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 10:15:32.459" level="INFO">Logging into '10.105.119.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 10:15:33.703" level="INFO">Read output: Last login: Wed Feb  3 07:38:20 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 10:15:33.705" starttime="20160203 10:15:32.456"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:33.707" starttime="20160203 10:15:32.450"></status>
</kw>
<msg timestamp="20160203 10:15:33.710" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160203 10:15:33.709" starttime="20160203 10:15:32.339"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 10:15:33.716" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 10:15:33.715" starttime="20160203 10:15:33.711"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 10:15:33.720" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160203 10:15:34.523" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 10:15:34.526" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.1.23.31100
Negret Rating &amp; Charging Engine 6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 10:15:34.525" starttime="20160203 10:15:33.717"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:34.532" starttime="20160203 10:15:34.530"></status>
</kw>
<msg timestamp="20160203 10:15:34.534" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 10:15:34.535" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 10:15:34.533" starttime="20160203 10:15:34.527"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:34.542" starttime="20160203 10:15:34.541"></status>
</kw>
<msg timestamp="20160203 10:15:34.544" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:15:34.543" starttime="20160203 10:15:34.536"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 10:15:34.548" level="INFO">${version_r} =  6.1.23.31100 is running (PID:1733, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160203 10:15:34.547" starttime="20160203 10:15:34.545"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 10:15:34.551" level="INFO">${version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 10:15:34.551" starttime="20160203 10:15:34.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:34.554" starttime="20160203 10:15:34.552"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:34.566" starttime="20160203 10:15:34.564"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 10:15:34.569" starttime="20160203 10:15:34.567"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:34.571" starttime="20160203 10:15:34.556"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:34.578" starttime="20160203 10:15:34.576"></status>
</kw>
<msg timestamp="20160203 10:15:34.580" level="INFO">${ver} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 10:15:34.579" starttime="20160203 10:15:34.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:34.583" starttime="20160203 10:15:34.581"></status>
</kw>
<msg timestamp="20160203 10:15:34.586" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160203 10:15:34.586" level="INFO">${crce_version} =  6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 10:15:34.584" starttime="20160203 10:15:32.315"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:34.637" starttime="20160203 10:15:34.635"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:34.687" starttime="20160203 10:15:34.643"></status>
</kw>
<msg timestamp="20160203 10:15:34.688" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160203 10:15:34.688" starttime="20160203 10:15:34.638"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160203 10:15:34.699" level="INFO">Logging into '10.105.119.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160203 10:15:35.332" level="INFO">Read output: Last login: Wed Feb  3 07:38:21 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb19 ~]$</msg>
<status status="PASS" endtime="20160203 10:15:35.333" starttime="20160203 10:15:34.696"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:35.335" starttime="20160203 10:15:34.690"></status>
</kw>
<msg timestamp="20160203 10:15:35.338" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160203 10:15:35.337" starttime="20160203 10:15:34.625"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160203 10:15:35.345" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160203 10:15:35.344" starttime="20160203 10:15:35.339"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160203 10:15:35.348" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160203 10:15:35.685" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160203 10:15:35.687" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 10:15:35.686" starttime="20160203 10:15:35.346"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.694" starttime="20160203 10:15:35.691"></status>
</kw>
<msg timestamp="20160203 10:15:35.695" level="INFO">${status} = PASS</msg>
<msg timestamp="20160203 10:15:35.696" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160203 10:15:35.694" starttime="20160203 10:15:35.688"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.703" starttime="20160203 10:15:35.701"></status>
</kw>
<msg timestamp="20160203 10:15:35.704" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:15:35.704" starttime="20160203 10:15:35.697"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160203 10:15:35.708" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp is running (PID: 32521)</msg>
<status status="PASS" endtime="20160203 10:15:35.707" starttime="20160203 10:15:35.706"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160203 10:15:35.712" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 10:15:35.711" starttime="20160203 10:15:35.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.714" starttime="20160203 10:15:35.713"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.726" starttime="20160203 10:15:35.724"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.730" starttime="20160203 10:15:35.727"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:35.731" starttime="20160203 10:15:35.716"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.738" starttime="20160203 10:15:35.736"></status>
</kw>
<msg timestamp="20160203 10:15:35.739" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 10:15:35.739" starttime="20160203 10:15:35.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.742" starttime="20160203 10:15:35.741"></status>
</kw>
<msg timestamp="20160203 10:15:35.745" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160203 10:15:35.746" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 10:15:35.744" starttime="20160203 10:15:34.601"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:15:35.749" level="INFO">IN state= OK version= 1.0.0 2015.09.28-13:45:14 </msg>
<status status="PASS" endtime="20160203 10:15:35.750" starttime="20160203 10:15:35.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:15:35.753" level="INFO">XDR state= OK version= 6.1.5.27971 </msg>
<status status="PASS" endtime="20160203 10:15:35.754" starttime="20160203 10:15:35.751"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:15:35.757" level="INFO">CRCE state= OK version= 6.1.23.31100 </msg>
<status status="PASS" endtime="20160203 10:15:35.758" starttime="20160203 10:15:35.755"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:15:35.761" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2044
GyApp </msg>
<status status="PASS" endtime="20160203 10:15:35.762" starttime="20160203 10:15:35.759"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160203 10:15:35.765" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 10:15:35.766" starttime="20160203 10:15:35.763"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160203 10:15:35.769" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 10:15:35.770" starttime="20160203 10:15:35.767"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160203 10:15:35.773" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 10:15:35.773" starttime="20160203 10:15:35.771"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160203 10:15:35.776" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 10:15:35.777" starttime="20160203 10:15:35.774"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.787" starttime="20160203 10:15:35.783"></status>
</kw>
<msg timestamp="20160203 10:15:35.788" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 10:15:35.788" starttime="20160203 10:15:35.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160203 10:15:35.792" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160203 10:15:35.792" starttime="20160203 10:15:35.789"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:35.793" starttime="20160203 10:15:24.882"></status>
</kw>
<test id="s1-t1" name="Run MFC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.806" starttime="20160203 10:15:35.805"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160203 10:15:35.810" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160203 10:15:35.809" starttime="20160203 10:15:35.808"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>3</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160203 10:15:35.826" level="INFO">msg=crce_host=10.105.119.125</msg>
<status status="PASS" endtime="20160203 10:15:35.827" starttime="20160203 10:15:35.825"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160203 10:15:35.830" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160203 10:15:35.830" starttime="20160203 10:15:35.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160203 10:15:35.833" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160203 10:15:35.834" starttime="20160203 10:15:35.831"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160203 10:15:35.837" level="INFO">msg=amount=3</msg>
<status status="PASS" endtime="20160203 10:15:35.837" starttime="20160203 10:15:35.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160203 10:15:35.840" level="INFO">msg=imsiRangeStart=334030880001000</msg>
<status status="PASS" endtime="20160203 10:15:35.841" starttime="20160203 10:15:35.838"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160203 10:15:35.843" level="INFO">msg=msisdnRangeStart=525516001000</msg>
<status status="PASS" endtime="20160203 10:15:35.844" starttime="20160203 10:15:35.842"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160203 10:15:35.847" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160203 10:15:35.847" starttime="20160203 10:15:35.845"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160203 10:15:35.850" level="INFO">msg=languageid=3</msg>
<status status="PASS" endtime="20160203 10:15:35.851" starttime="20160203 10:15:35.848"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160203 10:15:35.854" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160203 10:15:35.854" starttime="20160203 10:15:35.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160203 10:15:35.857" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160203 10:15:35.857" starttime="20160203 10:15:35.855"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 10:15:35.872" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:15:35.873" starttime="20160203 10:15:35.869"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:35.873" starttime="20160203 10:15:35.867"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 10:15:35.879" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:15:35.879" starttime="20160203 10:15:35.876"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:35.880" starttime="20160203 10:15:35.874"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 10:15:35.885" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:15:35.886" starttime="20160203 10:15:35.883"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:35.887" starttime="20160203 10:15:35.881"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:35.888" starttime="20160203 10:15:35.860"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 10:15:35.892" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 10:15:35.893" starttime="20160203 10:15:35.889"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.896" starttime="20160203 10:15:35.894"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.899" starttime="20160203 10:15:35.897"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.902" starttime="20160203 10:15:35.900"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.904" starttime="20160203 10:15:35.903"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.907" starttime="20160203 10:15:35.905"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.910" starttime="20160203 10:15:35.908"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.913" starttime="20160203 10:15:35.911"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.916" starttime="20160203 10:15:35.914"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.918" starttime="20160203 10:15:35.917"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.921" starttime="20160203 10:15:35.920"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.924" starttime="20160203 10:15:35.922"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:35.927" starttime="20160203 10:15:35.925"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 10:15:35.932" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160203 10:15:46.406" level="INFO">10:15:36,100 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/ext] for external libraries
10:15:36,100 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
10:15:37,605 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
10:15:37,614 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.119.125]
10:15:37,614 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
10:15:37,614 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
10:15:37,614 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [3]
10:15:37,614 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [334030880001000]
10:15:37,614 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [525516001000]
10:15:37,615 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
10:15:37,615 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [3]
10:15:37,615 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
10:15:37,615 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
10:15:37,615 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
10:15:37,616 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
10:15:37,624 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
10:15:37,630 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
10:15:38,074 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
10:15:38,134 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
10:15:38,278 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:38,278 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:15:39,135 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:39,139 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:39,223 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:39,223 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:39,223 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:39,223 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
10:15:39,283 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
10:15:39,547 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
10:15:39,573 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
10:15:39,575 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:39,577 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:39,577 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:15:40,148 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:40,148 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:40,152 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:40,152 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:40,152 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:40,152 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
10:15:40,186 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
10:15:40,189 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
10:15:40,211 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
10:15:40,213 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:40,214 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:40,214 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:15:40,259 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:40,259 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:40,263 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:40,263 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:40,263 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:40,263 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
10:15:40,294 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
10:15:40,299 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
10:15:40,318 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
10:15:40,320 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:40,321 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:40,321 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:15:40,516 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:40,516 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:40,519 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:40,519 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:40,520 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:40,520 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
10:15:40,550 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
10:15:40,552 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
10:15:40,571 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
10:15:40,573 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:40,574 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:40,574 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
10:15:40,624 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:40,624 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:40,630 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:40,630 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:40,630 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:40,630 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
10:15:40,659 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
10:15:40,669 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
10:15:40,689 INFO  [SoapUITestCaseRunner] running step [setBalance]
10:15:40,690 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:40,692 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:40,692 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
10:15:40,840 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:40,840 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:40,846 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:40,846 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:40,846 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:40,846 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
10:15:40,875 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
10:15:40,879 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
10:15:40,898 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
10:15:40,926 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
10:15:40,928 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
10:15:40,930 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:40,931 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:40,931 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:15:40,960 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:40,960 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:40,968 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:40,968 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:40,968 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:40,968 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
10:15:40,969 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
10:15:40,980 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
10:15:40,981 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
10:15:40,982 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:40,983 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:40,983 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:15:41,429 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:41,430 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:41,433 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:41,433 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:41,433 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:41,433 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
10:15:41,433 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
10:15:41,436 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
10:15:41,437 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
10:15:41,438 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:41,440 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:41,440 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:15:41,527 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:41,527 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:41,530 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:41,530 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:41,530 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:41,530 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
10:15:41,530 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
10:15:41,535 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
10:15:41,535 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
10:15:41,536 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:41,538 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:41,538 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:15:41,731 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:41,731 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:41,734 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:41,734 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:41,734 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:41,735 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
10:15:41,735 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
10:15:41,737 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
10:15:41,738 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
10:15:41,739 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:41,740 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:41,740 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
10:15:41,795 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:41,795 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:41,801 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:41,801 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:41,801 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:41,801 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
10:15:41,801 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
10:15:41,811 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
10:15:41,811 INFO  [SoapUITestCaseRunner] running step [setBalance]
10:15:41,812 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:41,813 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:41,813 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
10:15:42,077 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:42,077 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:42,082 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:42,082 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:42,083 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:42,083 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
10:15:42,083 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
10:15:42,087 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
10:15:42,087 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
10:15:42,088 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
10:15:42,090 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
10:15:42,090 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:42,092 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:42,092 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:15:42,118 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:42,119 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:42,126 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:42,126 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:42,126 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:42,126 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
10:15:42,126 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
10:15:42,140 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
10:15:42,140 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
10:15:42,141 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:42,142 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:42,143 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:15:42,401 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:42,401 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:42,404 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:42,404 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:42,404 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:42,404 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
10:15:42,405 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
10:15:42,407 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
10:15:42,407 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
10:15:42,408 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:42,410 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:42,410 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
10:15:42,446 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:42,446 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:42,449 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:42,449 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:42,449 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:42,449 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
10:15:42,449 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
10:15:42,453 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
10:15:42,453 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
10:15:42,454 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:42,456 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:42,456 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
10:15:42,696 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:42,696 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:42,700 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:42,700 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:42,700 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:42,700 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
10:15:42,701 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
10:15:42,703 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
10:15:42,703 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
10:15:42,704 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:42,706 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:42,706 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
10:15:46,238 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:46,238 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:46,244 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:46,244 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:46,244 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:46,244 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
10:15:46,244 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
10:15:46,253 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
10:15:46,253 INFO  [SoapUITestCaseRunner] running step [setBalance]
10:15:46,254 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
10:15:46,256 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
10:15:46,256 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
10:15:46,357 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
10:15:46,357 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
10:15:46,362 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
10:15:46,362 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
10:15:46,362 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
10:15:46,362 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
10:15:46,362 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
10:15:46,366 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
10:15:46,366 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
10:15:46,367 INFO  [SoapUITestCaseRunner] running step [finish_successful]
10:15:46,399 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
10:15:46,399 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 8719ms, status: FINISHED
10:15:46,400 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 8719ms</msg>
<status status="PASS" endtime="20160203 10:15:46.413" starttime="20160203 10:15:35.930"></status>
</kw>
<msg timestamp="20160203 10:15:46.417" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:46.418" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 10:15:46.415" starttime="20160203 10:15:35.928"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 10:15:46.434" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160203 10:15:46.433" starttime="20160203 10:15:46.430"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:46.438" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 10:15:46.437" starttime="20160203 10:15:46.435"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:46.441" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 10:15:46.441" starttime="20160203 10:15:46.439"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 10:15:46.448" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 10:15:46.453" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160203 10:15:46.454" starttime="20160203 10:15:46.445"></status>
</kw>
<msg timestamp="20160203 10:15:46.456" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:46.456" level="INFO">${return_log_entry} = 2016-02-03 10:15:46,399 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 10:15:46.455" starttime="20160203 10:15:46.443"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:46.465" starttime="20160203 10:15:46.463"></status>
</kw>
<msg timestamp="20160203 10:15:46.467" level="INFO">${return_log_entry} = 2016-02-03 10:15:46,399 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 10:15:46.466" starttime="20160203 10:15:46.457"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:46.474" starttime="20160203 10:15:46.472"></status>
</kw>
<msg timestamp="20160203 10:15:46.476" level="INFO">${return_log_entry} = 2016-02-03 10:15:46,399 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 10:15:46.475" starttime="20160203 10:15:46.468"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:46.484" starttime="20160203 10:15:46.482"></status>
</kw>
<msg timestamp="20160203 10:15:46.486" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:15:46.485" starttime="20160203 10:15:46.477"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:46.496" starttime="20160203 10:15:46.494"></status>
</kw>
<msg timestamp="20160203 10:15:46.498" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:15:46.497" starttime="20160203 10:15:46.487"></status>
</kw>
<msg timestamp="20160203 10:15:46.499" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:15:46.499" starttime="20160203 10:15:46.420"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:46.516" starttime="20160203 10:15:46.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:46.521" starttime="20160203 10:15:46.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:46.525" starttime="20160203 10:15:46.522"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 10:15:46.548" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 10:15:46.549" starttime="20160203 10:15:46.538"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:46.550" starttime="20160203 10:15:46.535"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:46.552" starttime="20160203 10:15:46.527"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:46.553" starttime="20160203 10:15:46.501"></status>
</kw>
<msg timestamp="20160203 10:15:46.556" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160203 10:15:46.555" starttime="20160203 10:15:35.812"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160203 10:15:46.560" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 10:15:46.561" starttime="20160203 10:15:46.558"></status>
</kw>
<kw type="kw" name="${b_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160203 10:15:46.567" level="INFO">${b_party_msisdn} = 525516001001</msg>
<status status="PASS" endtime="20160203 10:15:46.566" starttime="20160203 10:15:46.562"></status>
</kw>
<kw type="kw" name="${b_party_imsi} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}+1</arg>
</arguments>
<msg timestamp="20160203 10:15:46.572" level="INFO">${b_party_imsi} = 334030880001001</msg>
<status status="PASS" endtime="20160203 10:15:46.572" starttime="20160203 10:15:46.568"></status>
</kw>
<kw type="kw" name="${c_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+2</arg>
</arguments>
<msg timestamp="20160203 10:15:46.578" level="INFO">${c_party_msisdn} = 525516001002</msg>
<status status="PASS" endtime="20160203 10:15:46.577" starttime="20160203 10:15:46.574"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:15:46.581" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160203 10:15:46.582" starttime="20160203 10:15:46.579"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MFC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:46.584" starttime="20160203 10:15:46.583"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MFC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:15:46.587" level="INFO">Running the short MFC call...</msg>
<status status="PASS" endtime="20160203 10:15:46.588" starttime="20160203 10:15:46.586"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MFC 1s">
<doc>Runs a standard MFC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${b_party_imsi}</arg>
<arg>${b_party_msisdn}</arg>
<arg>${c_party_msisdn}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MFC CGS">
<doc>Runs a standard MFC session (meaning a session that needs only mscAddress, mfcAPartyMsisdn and mfcCPartyMsisdn paramters) for the passed cgs file</doc>
<arguments>
<arg>mfc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${rd_imsi}</arg>
<arg>${rd_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mfc_req}</arg>
<arg>${queue_mfc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160203 10:15:46.626" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160203 10:15:46.625" starttime="20160203 10:15:46.623"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160203 10:15:46.630" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160203 10:15:46.629" starttime="20160203 10:15:46.627"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160203 10:15:46.633" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini</msg>
<status status="PASS" endtime="20160203 10:15:46.633" starttime="20160203 10:15:46.631"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160203 10:15:46.637" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs</msg>
<status status="PASS" endtime="20160203 10:15:46.636" starttime="20160203 10:15:46.634"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:46.639" starttime="20160203 10:15:46.638"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${rd_imsi};${rd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 10:15:46.644" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:15:46.645" starttime="20160203 10:15:46.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:46.648" starttime="20160203 10:15:46.646"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;gmscAddress;mfcAPartyMsisdn;mfcCPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160203 10:15:46.652" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:15:46.652" starttime="20160203 10:15:46.649"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${msc_address};${cg_msisdn};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160203 10:15:46.658" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:15:46.659" starttime="20160203 10:15:46.653"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:46.661" starttime="20160203 10:15:46.660"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160203 10:15:46.666" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:15:46.666" starttime="20160203 10:15:46.662"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MFC;${queue_mfc_req};${queue_mfc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160203 10:15:46.672" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:15:46.673" starttime="20160203 10:15:46.667"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:46.675" starttime="20160203 10:15:46.674"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160203 10:15:46.694" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160203 10:15:55.800" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 10:15:55.796" starttime="20160203 10:15:46.676"></status>
</kw>
<msg timestamp="20160203 10:15:55.809" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 10:15:55.807" starttime="20160203 10:15:46.608"></status>
</kw>
<msg timestamp="20160203 10:15:55.814" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160203 10:15:55.811" starttime="20160203 10:15:46.591"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:15:55.819" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160203 10:15:55.821" starttime="20160203 10:15:55.816"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160203 10:15:55.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160203 10:15:55.829" starttime="20160203 10:15:55.823"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:55.834" starttime="20160203 10:15:55.831"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 10:15:55.885" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:15:55.886" starttime="20160203 10:15:55.880"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:55.888" starttime="20160203 10:15:55.876"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 10:15:55.898" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:15:55.899" starttime="20160203 10:15:55.893"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:55.901" starttime="20160203 10:15:55.890"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 10:15:55.911" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:15:55.913" starttime="20160203 10:15:55.907"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:55.914" starttime="20160203 10:15:55.903"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:55.916" starttime="20160203 10:15:55.862"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 10:15:55.923" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 10:15:55.924" starttime="20160203 10:15:55.918"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:55.930" starttime="20160203 10:15:55.926"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:55.933" starttime="20160203 10:15:55.931"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:55.935" starttime="20160203 10:15:55.934"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:55.938" starttime="20160203 10:15:55.936"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:55.940" starttime="20160203 10:15:55.939"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:55.942" starttime="20160203 10:15:55.941"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 10:15:55.946" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000']</msg>
<msg timestamp="20160203 10:15:56.803" level="INFO">10:15:56,765 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
10:15:56,792 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
10:15:56,795 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37090
10:15:56,796 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000
10:15:56,797 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
10:15:56,798 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
10:15:56,800 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
10:15:56,800 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=3</msg>
<status status="PASS" endtime="20160203 10:15:56.808" starttime="20160203 10:15:55.945"></status>
</kw>
<msg timestamp="20160203 10:15:56.812" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:56.813" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 10:15:56.810" starttime="20160203 10:15:55.943"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 10:15:56.835" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160203 10:15:56.834" starttime="20160203 10:15:56.830"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:56.840" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 10:15:56.839" starttime="20160203 10:15:56.837"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:56.845" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 10:15:56.844" starttime="20160203 10:15:56.842"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 10:15:56.853" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 10:15:56.860" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 10:15:56.861" starttime="20160203 10:15:56.850"></status>
</kw>
<msg timestamp="20160203 10:15:56.864" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:56.864" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,765 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 10:15:56.863" starttime="20160203 10:15:56.847"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:56.877" starttime="20160203 10:15:56.874"></status>
</kw>
<msg timestamp="20160203 10:15:56.879" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,765 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 10:15:56.878" starttime="20160203 10:15:56.866"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:56.891" starttime="20160203 10:15:56.888"></status>
</kw>
<msg timestamp="20160203 10:15:56.893" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,765 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 10:15:56.892" starttime="20160203 10:15:56.881"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:56.906" starttime="20160203 10:15:56.902"></status>
</kw>
<msg timestamp="20160203 10:15:56.908" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:15:56.907" starttime="20160203 10:15:56.895"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:56.924" starttime="20160203 10:15:56.921"></status>
</kw>
<msg timestamp="20160203 10:15:56.926" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:15:56.925" starttime="20160203 10:15:56.909"></status>
</kw>
<msg timestamp="20160203 10:15:56.930" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:15:56.928" starttime="20160203 10:15:56.817"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 10:15:56.942" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160203 10:15:56.941" starttime="20160203 10:15:56.939"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:56.945" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 10:15:56.944" starttime="20160203 10:15:56.942"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:56.948" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 10:15:56.947" starttime="20160203 10:15:56.946"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 10:15:56.953" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 10:15:56.957" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 10:15:56.958" starttime="20160203 10:15:56.950"></status>
</kw>
<msg timestamp="20160203 10:15:56.959" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:56.959" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,792 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 10:15:56.958" starttime="20160203 10:15:56.949"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:56.967" starttime="20160203 10:15:56.965"></status>
</kw>
<msg timestamp="20160203 10:15:56.968" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,792 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 10:15:56.967" starttime="20160203 10:15:56.960"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:56.975" starttime="20160203 10:15:56.973"></status>
</kw>
<msg timestamp="20160203 10:15:56.976" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,792 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160203 10:15:56.976" starttime="20160203 10:15:56.969"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:56.984" starttime="20160203 10:15:56.982"></status>
</kw>
<msg timestamp="20160203 10:15:56.986" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160203 10:15:56.985" starttime="20160203 10:15:56.977"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:56.996" starttime="20160203 10:15:56.994"></status>
</kw>
<msg timestamp="20160203 10:15:56.997" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160203 10:15:56.996" starttime="20160203 10:15:56.987"></status>
</kw>
<msg timestamp="20160203 10:15:56.999" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160203 10:15:56.998" starttime="20160203 10:15:56.931"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 10:15:57.010" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160203 10:15:57.010" starttime="20160203 10:15:57.008"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.013" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 10:15:57.013" starttime="20160203 10:15:57.011"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.017" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 10:15:57.016" starttime="20160203 10:15:57.014"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.022" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 10:15:57.026" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 10:15:57.026" starttime="20160203 10:15:57.019"></status>
</kw>
<msg timestamp="20160203 10:15:57.028" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:57.028" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,796 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 10:15:57.027" starttime="20160203 10:15:57.018"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.035" starttime="20160203 10:15:57.034"></status>
</kw>
<msg timestamp="20160203 10:15:57.037" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,796 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 10:15:57.036" starttime="20160203 10:15:57.029"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.044" starttime="20160203 10:15:57.042"></status>
</kw>
<msg timestamp="20160203 10:15:57.045" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,796 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=334030880001000</msg>
<status status="PASS" endtime="20160203 10:15:57.044" starttime="20160203 10:15:57.038"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.053" starttime="20160203 10:15:57.050"></status>
</kw>
<msg timestamp="20160203 10:15:57.054" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160203 10:15:57.053" starttime="20160203 10:15:57.046"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.065" starttime="20160203 10:15:57.064"></status>
</kw>
<msg timestamp="20160203 10:15:57.067" level="INFO">${resultCode} = 334030880001000</msg>
<status status="PASS" endtime="20160203 10:15:57.066" starttime="20160203 10:15:57.055"></status>
</kw>
<msg timestamp="20160203 10:15:57.068" level="INFO">${imsi} = 334030880001000</msg>
<status status="PASS" endtime="20160203 10:15:57.068" starttime="20160203 10:15:57.000"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 10:15:57.081" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160203 10:15:57.080" starttime="20160203 10:15:57.078"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.084" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 10:15:57.083" starttime="20160203 10:15:57.081"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.087" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 10:15:57.086" starttime="20160203 10:15:57.085"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.093" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 10:15:57.096" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 10:15:57.097" starttime="20160203 10:15:57.090"></status>
</kw>
<msg timestamp="20160203 10:15:57.098" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:57.099" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,795 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37090</msg>
<status status="PASS" endtime="20160203 10:15:57.098" starttime="20160203 10:15:57.088"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.107" starttime="20160203 10:15:57.105"></status>
</kw>
<msg timestamp="20160203 10:15:57.108" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,795 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37090</msg>
<status status="PASS" endtime="20160203 10:15:57.108" starttime="20160203 10:15:57.100"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.115" starttime="20160203 10:15:57.114"></status>
</kw>
<msg timestamp="20160203 10:15:57.117" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,795 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=37090</msg>
<status status="PASS" endtime="20160203 10:15:57.116" starttime="20160203 10:15:57.109"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.125" starttime="20160203 10:15:57.122"></status>
</kw>
<msg timestamp="20160203 10:15:57.126" level="INFO">${resultCode} = 37090</msg>
<status status="PASS" endtime="20160203 10:15:57.126" starttime="20160203 10:15:57.118"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.136" starttime="20160203 10:15:57.135"></status>
</kw>
<msg timestamp="20160203 10:15:57.138" level="INFO">${resultCode} = 37090</msg>
<status status="PASS" endtime="20160203 10:15:57.137" starttime="20160203 10:15:57.127"></status>
</kw>
<msg timestamp="20160203 10:15:57.140" level="INFO">${id} = 37090</msg>
<status status="PASS" endtime="20160203 10:15:57.139" starttime="20160203 10:15:57.071"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 10:15:57.151" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160203 10:15:57.150" starttime="20160203 10:15:57.148"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.154" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 10:15:57.153" starttime="20160203 10:15:57.152"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.157" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 10:15:57.156" starttime="20160203 10:15:57.155"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.162" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 10:15:57.166" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 10:15:57.167" starttime="20160203 10:15:57.159"></status>
</kw>
<msg timestamp="20160203 10:15:57.168" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:57.168" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,797 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 10:15:57.167" starttime="20160203 10:15:57.158"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.176" starttime="20160203 10:15:57.174"></status>
</kw>
<msg timestamp="20160203 10:15:57.177" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,797 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 10:15:57.177" starttime="20160203 10:15:57.169"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.184" starttime="20160203 10:15:57.183"></status>
</kw>
<msg timestamp="20160203 10:15:57.186" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,797 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160203 10:15:57.185" starttime="20160203 10:15:57.178"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.193" starttime="20160203 10:15:57.191"></status>
</kw>
<msg timestamp="20160203 10:15:57.195" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160203 10:15:57.194" starttime="20160203 10:15:57.187"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.206" starttime="20160203 10:15:57.204"></status>
</kw>
<msg timestamp="20160203 10:15:57.207" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160203 10:15:57.207" starttime="20160203 10:15:57.196"></status>
</kw>
<msg timestamp="20160203 10:15:57.209" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160203 10:15:57.208" starttime="20160203 10:15:57.141"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 10:15:57.220" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160203 10:15:57.219" starttime="20160203 10:15:57.217"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.223" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 10:15:57.222" starttime="20160203 10:15:57.221"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.226" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 10:15:57.225" starttime="20160203 10:15:57.223"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.230" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 10:15:57.234" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 10:15:57.235" starttime="20160203 10:15:57.228"></status>
</kw>
<msg timestamp="20160203 10:15:57.236" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:57.237" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,798 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 10:15:57.236" starttime="20160203 10:15:57.226"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.244" starttime="20160203 10:15:57.242"></status>
</kw>
<msg timestamp="20160203 10:15:57.245" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,798 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 10:15:57.244" starttime="20160203 10:15:57.238"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.252" starttime="20160203 10:15:57.250"></status>
</kw>
<msg timestamp="20160203 10:15:57.253" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,798 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160203 10:15:57.252" starttime="20160203 10:15:57.246"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.261" starttime="20160203 10:15:57.258"></status>
</kw>
<msg timestamp="20160203 10:15:57.262" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160203 10:15:57.261" starttime="20160203 10:15:57.254"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.271" starttime="20160203 10:15:57.269"></status>
</kw>
<msg timestamp="20160203 10:15:57.272" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160203 10:15:57.272" starttime="20160203 10:15:57.263"></status>
</kw>
<msg timestamp="20160203 10:15:57.274" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160203 10:15:57.273" starttime="20160203 10:15:57.210"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 10:15:57.284" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160203 10:15:57.284" starttime="20160203 10:15:57.282"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.287" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 10:15:57.287" starttime="20160203 10:15:57.285"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.290" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 10:15:57.290" starttime="20160203 10:15:57.288"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.295" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 10:15:57.298" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160203 10:15:57.299" starttime="20160203 10:15:57.293"></status>
</kw>
<msg timestamp="20160203 10:15:57.300" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:57.300" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,800 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 10:15:57.299" starttime="20160203 10:15:57.291"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.307" starttime="20160203 10:15:57.306"></status>
</kw>
<msg timestamp="20160203 10:15:57.309" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,800 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 10:15:57.308" starttime="20160203 10:15:57.301"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.316" starttime="20160203 10:15:57.315"></status>
</kw>
<msg timestamp="20160203 10:15:57.318" level="INFO">${return_log_entry} = 2016-02-03 10:15:56,800 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160203 10:15:57.317" starttime="20160203 10:15:57.310"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.325" starttime="20160203 10:15:57.323"></status>
</kw>
<msg timestamp="20160203 10:15:57.326" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160203 10:15:57.326" starttime="20160203 10:15:57.319"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.335" starttime="20160203 10:15:57.334"></status>
</kw>
<msg timestamp="20160203 10:15:57.336" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160203 10:15:57.336" starttime="20160203 10:15:57.327"></status>
</kw>
<msg timestamp="20160203 10:15:57.338" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160203 10:15:57.338" starttime="20160203 10:15:57.276"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.347" starttime="20160203 10:15:57.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.349" starttime="20160203 10:15:57.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.351" starttime="20160203 10:15:57.350"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 10:15:57.362" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 10:15:57.363" starttime="20160203 10:15:57.358"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:57.364" starttime="20160203 10:15:57.356"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:57.364" starttime="20160203 10:15:57.352"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:57.365" starttime="20160203 10:15:57.339"></status>
</kw>
<msg timestamp="20160203 10:15:57.369" level="INFO">${rc} = OK</msg>
<msg timestamp="20160203 10:15:57.369" level="INFO">${provId} = 1</msg>
<msg timestamp="20160203 10:15:57.369" level="INFO">${imsi} = 334030880001000</msg>
<msg timestamp="20160203 10:15:57.370" level="INFO">${id} = 37090</msg>
<msg timestamp="20160203 10:15:57.370" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160203 10:15:57.371" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160203 10:15:57.371" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160203 10:15:57.367" starttime="20160203 10:15:55.841"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.393" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:15:57.393" starttime="20160203 10:15:57.390"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:57.394" starttime="20160203 10:15:57.389"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.399" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:15:57.399" starttime="20160203 10:15:57.397"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:57.400" starttime="20160203 10:15:57.395"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.404" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160203 10:15:57.405" starttime="20160203 10:15:57.402"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:57.405" starttime="20160203 10:15:57.401"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:57.406" starttime="20160203 10:15:57.383"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.409" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160203 10:15:57.410" starttime="20160203 10:15:57.407"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.412" starttime="20160203 10:15:57.411"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.415" starttime="20160203 10:15:57.413"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.418" starttime="20160203 10:15:57.416"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.420" starttime="20160203 10:15:57.419"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.422" starttime="20160203 10:15:57.421"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.425" starttime="20160203 10:15:57.423"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160203 10:15:57.428" level="INFO">Running with the following project properties set: [u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=334030880001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=525516001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=3', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=525516001000', u'crceHost=10.105.119.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=37090']</msg>
<msg timestamp="20160203 10:15:57.746" level="INFO">10:15:57,743 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
10:15:57,744 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37091
10:15:57,744 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000
10:15:57,745 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
10:15:57,745 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 10:15:57.747" starttime="20160203 10:15:57.427"></status>
</kw>
<msg timestamp="20160203 10:15:57.748" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:57.749" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160203 10:15:57.748" starttime="20160203 10:15:57.426"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 10:15:57.759" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160203 10:15:57.758" starttime="20160203 10:15:57.756"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.762" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 10:15:57.761" starttime="20160203 10:15:57.760"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.764" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 10:15:57.764" starttime="20160203 10:15:57.763"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.769" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 10:15:57.772" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 10:15:57.773" starttime="20160203 10:15:57.767"></status>
</kw>
<msg timestamp="20160203 10:15:57.774" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:57.774" level="INFO">${return_log_entry} = 2016-02-03 10:15:57,743 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 10:15:57.774" starttime="20160203 10:15:57.765"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.781" starttime="20160203 10:15:57.780"></status>
</kw>
<msg timestamp="20160203 10:15:57.782" level="INFO">${return_log_entry} = 2016-02-03 10:15:57,743 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 10:15:57.782" starttime="20160203 10:15:57.775"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.789" starttime="20160203 10:15:57.788"></status>
</kw>
<msg timestamp="20160203 10:15:57.790" level="INFO">${return_log_entry} = 2016-02-03 10:15:57,743 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160203 10:15:57.790" starttime="20160203 10:15:57.783"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.797" starttime="20160203 10:15:57.796"></status>
</kw>
<msg timestamp="20160203 10:15:57.799" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:15:57.798" starttime="20160203 10:15:57.791"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.807" starttime="20160203 10:15:57.806"></status>
</kw>
<msg timestamp="20160203 10:15:57.809" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:15:57.808" starttime="20160203 10:15:57.799"></status>
</kw>
<msg timestamp="20160203 10:15:57.810" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160203 10:15:57.810" starttime="20160203 10:15:57.751"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 10:15:57.820" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160203 10:15:57.820" starttime="20160203 10:15:57.818"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.823" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 10:15:57.822" starttime="20160203 10:15:57.821"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.826" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 10:15:57.825" starttime="20160203 10:15:57.824"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.830" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 10:15:57.833" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 10:15:57.834" starttime="20160203 10:15:57.828"></status>
</kw>
<msg timestamp="20160203 10:15:57.835" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:57.836" level="INFO">${return_log_entry} = 2016-02-03 10:15:57,744 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37091</msg>
<status status="PASS" endtime="20160203 10:15:57.835" starttime="20160203 10:15:57.827"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.842" starttime="20160203 10:15:57.841"></status>
</kw>
<msg timestamp="20160203 10:15:57.843" level="INFO">${return_log_entry} = 2016-02-03 10:15:57,744 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37091</msg>
<status status="PASS" endtime="20160203 10:15:57.843" starttime="20160203 10:15:57.837"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.850" starttime="20160203 10:15:57.848"></status>
</kw>
<msg timestamp="20160203 10:15:57.851" level="INFO">${return_log_entry} = 2016-02-03 10:15:57,744 INFO  [log] LowLevelOps.getMainAccount.output.accountId=37091</msg>
<status status="PASS" endtime="20160203 10:15:57.850" starttime="20160203 10:15:57.844"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.858" starttime="20160203 10:15:57.856"></status>
</kw>
<msg timestamp="20160203 10:15:57.859" level="INFO">${resultCode} = 37091</msg>
<status status="PASS" endtime="20160203 10:15:57.859" starttime="20160203 10:15:57.852"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.868" starttime="20160203 10:15:57.866"></status>
</kw>
<msg timestamp="20160203 10:15:57.869" level="INFO">${resultCode} = 37091</msg>
<status status="PASS" endtime="20160203 10:15:57.868" starttime="20160203 10:15:57.860"></status>
</kw>
<msg timestamp="20160203 10:15:57.870" level="INFO">${accountId} = 37091</msg>
<status status="PASS" endtime="20160203 10:15:57.870" starttime="20160203 10:15:57.812"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 10:15:57.880" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160203 10:15:57.880" starttime="20160203 10:15:57.878"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.883" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 10:15:57.883" starttime="20160203 10:15:57.881"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.886" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 10:15:57.885" starttime="20160203 10:15:57.884"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.890" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 10:15:57.893" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 10:15:57.894" starttime="20160203 10:15:57.888"></status>
</kw>
<msg timestamp="20160203 10:15:57.895" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:57.898" level="INFO">${return_log_entry} = 2016-02-03 10:15:57,744 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000</msg>
<status status="PASS" endtime="20160203 10:15:57.895" starttime="20160203 10:15:57.887"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.905" starttime="20160203 10:15:57.904"></status>
</kw>
<msg timestamp="20160203 10:15:57.906" level="INFO">${return_log_entry} = 2016-02-03 10:15:57,744 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000</msg>
<status status="PASS" endtime="20160203 10:15:57.906" starttime="20160203 10:15:57.899"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.912" starttime="20160203 10:15:57.911"></status>
</kw>
<msg timestamp="20160203 10:15:57.914" level="INFO">${return_log_entry} = 2016-02-03 10:15:57,744 INFO  [log] LowLevelOps.getMainAccount.output.balance=8000000</msg>
<status status="PASS" endtime="20160203 10:15:57.913" starttime="20160203 10:15:57.907"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.920" starttime="20160203 10:15:57.918"></status>
</kw>
<msg timestamp="20160203 10:15:57.921" level="INFO">${resultCode} = 8000000</msg>
<status status="PASS" endtime="20160203 10:15:57.921" starttime="20160203 10:15:57.914"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.930" starttime="20160203 10:15:57.928"></status>
</kw>
<msg timestamp="20160203 10:15:57.931" level="INFO">${resultCode} = 8000000</msg>
<status status="PASS" endtime="20160203 10:15:57.931" starttime="20160203 10:15:57.922"></status>
</kw>
<msg timestamp="20160203 10:15:57.933" level="INFO">${balance} = 8000000</msg>
<status status="PASS" endtime="20160203 10:15:57.933" starttime="20160203 10:15:57.872"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 10:15:57.942" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160203 10:15:57.941" starttime="20160203 10:15:57.939"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.944" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 10:15:57.944" starttime="20160203 10:15:57.942"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.947" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 10:15:57.946" starttime="20160203 10:15:57.945"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 10:15:57.951" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 10:15:57.954" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 10:15:57.955" starttime="20160203 10:15:57.949"></status>
</kw>
<msg timestamp="20160203 10:15:57.956" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:57.956" level="INFO">${return_log_entry} = 2016-02-03 10:15:57,745 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 10:15:57.955" starttime="20160203 10:15:57.948"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.963" starttime="20160203 10:15:57.961"></status>
</kw>
<msg timestamp="20160203 10:15:57.964" level="INFO">${return_log_entry} = 2016-02-03 10:15:57,745 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 10:15:57.963" starttime="20160203 10:15:57.957"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.970" starttime="20160203 10:15:57.968"></status>
</kw>
<msg timestamp="20160203 10:15:57.971" level="INFO">${return_log_entry} = 2016-02-03 10:15:57,745 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160203 10:15:57.970" starttime="20160203 10:15:57.964"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.977" starttime="20160203 10:15:57.975"></status>
</kw>
<msg timestamp="20160203 10:15:57.978" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160203 10:15:57.978" starttime="20160203 10:15:57.972"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:57.987" starttime="20160203 10:15:57.985"></status>
</kw>
<msg timestamp="20160203 10:15:57.988" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160203 10:15:57.987" starttime="20160203 10:15:57.979"></status>
</kw>
<msg timestamp="20160203 10:15:57.989" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160203 10:15:57.989" starttime="20160203 10:15:57.935"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160203 10:15:57.997" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160203 10:15:57.997" starttime="20160203 10:15:57.995"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:58.000" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160203 10:15:57.999" starttime="20160203 10:15:57.998"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160203 10:15:58.003" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160203 10:15:58.002" starttime="20160203 10:15:58.001"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160203 10:15:58.007" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160203 10:15:58.010" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160203 10:15:58.010" starttime="20160203 10:15:58.005"></status>
</kw>
<msg timestamp="20160203 10:15:58.012" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160203 10:15:58.012" level="INFO">${return_log_entry} = 2016-02-03 10:15:57,745 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 10:15:58.011" starttime="20160203 10:15:58.003"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:58.018" starttime="20160203 10:15:58.017"></status>
</kw>
<msg timestamp="20160203 10:15:58.019" level="INFO">${return_log_entry} = 2016-02-03 10:15:57,745 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 10:15:58.019" starttime="20160203 10:15:58.013"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:58.025" starttime="20160203 10:15:58.024"></status>
</kw>
<msg timestamp="20160203 10:15:58.026" level="INFO">${return_log_entry} = 2016-02-03 10:15:57,745 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=101000</msg>
<status status="PASS" endtime="20160203 10:15:58.026" starttime="20160203 10:15:58.020"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:58.033" starttime="20160203 10:15:58.031"></status>
</kw>
<msg timestamp="20160203 10:15:58.034" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160203 10:15:58.034" starttime="20160203 10:15:58.027"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:58.042" starttime="20160203 10:15:58.041"></status>
</kw>
<msg timestamp="20160203 10:15:58.043" level="INFO">${resultCode} = 101000</msg>
<status status="PASS" endtime="20160203 10:15:58.043" starttime="20160203 10:15:58.035"></status>
</kw>
<msg timestamp="20160203 10:15:58.045" level="INFO">${currencyId} = 101000</msg>
<status status="PASS" endtime="20160203 10:15:58.044" starttime="20160203 10:15:57.991"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:58.052" starttime="20160203 10:15:58.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:58.055" starttime="20160203 10:15:58.053"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:58.057" starttime="20160203 10:15:58.055"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160203 10:15:58.067" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160203 10:15:58.068" starttime="20160203 10:15:58.063"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:58.068" starttime="20160203 10:15:58.062"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:58.069" starttime="20160203 10:15:58.057"></status>
</kw>
<status status="PASS" endtime="20160203 10:15:58.070" starttime="20160203 10:15:58.047"></status>
</kw>
<msg timestamp="20160203 10:15:58.072" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160203 10:15:58.073" level="INFO">${accId} = 37091</msg>
<msg timestamp="20160203 10:15:58.073" level="INFO">${bal} = 8000000</msg>
<msg timestamp="20160203 10:15:58.073" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160203 10:15:58.074" level="INFO">${curr} = 101000</msg>
<status status="PASS" endtime="20160203 10:15:58.071" starttime="20160203 10:15:57.374"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:58.076" starttime="20160203 10:15:58.075"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160203 10:15:58.079" starttime="20160203 10:15:58.077"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160203 10:15:58.081" level="INFO">Account balance check: 8000000</msg>
<status status="PASS" endtime="20160203 10:15:58.082" starttime="20160203 10:15:58.080"></status>
</kw>
<doc>Test will make a short MFC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MFC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160203 10:15:58.083" starttime="20160203 10:15:35.795"></status>
</test>
<doc>Testing the prepaid MFC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160203 10:15:58.087" starttime="20160203 10:15:22.880"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" info="" doc="" combined="" fail="0" links="">matko.sanseovic</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">MFC_only</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">MTEL_supported</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">MVNA_MEX_supported</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">SMARTSPACE_supported</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">TNZ_supported</stat>
</tag>
<suite>
<stat pass="1" id="s1" fail="0" name="MFC PREPAID-ShortDuration-robot-suite">MFC PREPAID-ShortDuration-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
