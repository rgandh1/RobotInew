<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20151201 12:17:51.250">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC" id="s1" name="MTC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon" id="s1-s1" name="MTC PREPAID-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon/MTC_PREPAID-Abandon-robot-suite.txt" id="s1-s1-s1" name="MTC PREPAID-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20151201 12:17:52.944" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20151201 12:17:52.948" level="INFO">${date} = Tue Dec  1 12:17:52 CET 2015</msg>
<status status="PASS" endtime="20151201 12:17:52.947" starttime="20151201 12:17:52.931"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:17:52.953" level="INFO">Date and time: Tue Dec  1 12:17:52 CET 2015</msg>
<status status="PASS" endtime="20151201 12:17:52.954" starttime="20151201 12:17:52.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:17:52.958" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20151201 12:17:52.959" starttime="20151201 12:17:52.956"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:53.036" starttime="20151201 12:17:53.033"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:53.243" starttime="20151201 12:17:53.049"></status>
</kw>
<msg timestamp="20151201 12:17:53.248" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20151201 12:17:53.246" starttime="20151201 12:17:53.037"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:17:53.272" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:17:53.786" level="INFO">Read output: Last login: Tue Dec  1 09:33:06 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:17:53.790" starttime="20151201 12:17:53.266"></status>
</kw>
<status status="PASS" endtime="20151201 12:17:53.792" starttime="20151201 12:17:53.251"></status>
</kw>
<msg timestamp="20151201 12:17:53.798" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20151201 12:17:53.797" starttime="20151201 12:17:53.018"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:17:53.813" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:17:53.812" starttime="20151201 12:17:53.801"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:17:53.821" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20151201 12:17:54.199" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:17:54.204" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 32150 </msg>
<status status="PASS" endtime="20151201 12:17:54.201" starttime="20151201 12:17:53.816"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:54.220" starttime="20151201 12:17:54.213"></status>
</kw>
<msg timestamp="20151201 12:17:54.223" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:17:54.225" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:17:54.222" starttime="20151201 12:17:54.208"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:54.242" starttime="20151201 12:17:54.238"></status>
</kw>
<msg timestamp="20151201 12:17:54.245" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:17:54.244" starttime="20151201 12:17:54.228"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20151201 12:17:54.254" level="INFO">${version_r} =  2.1.1 is running PID: 32150 </msg>
<status status="PASS" endtime="20151201 12:17:54.253" starttime="20151201 12:17:54.249"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:17:54.264" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20151201 12:17:54.263" starttime="20151201 12:17:54.257"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:54.271" starttime="20151201 12:17:54.267"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:54.299" starttime="20151201 12:17:54.294"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:17:54.307" starttime="20151201 12:17:54.302"></status>
</kw>
<status status="PASS" endtime="20151201 12:17:54.312" starttime="20151201 12:17:54.275"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:54.327" starttime="20151201 12:17:54.323"></status>
</kw>
<msg timestamp="20151201 12:17:54.331" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20151201 12:17:54.329" starttime="20151201 12:17:54.314"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:54.337" starttime="20151201 12:17:54.333"></status>
</kw>
<msg timestamp="20151201 12:17:54.343" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20151201 12:17:54.344" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20151201 12:17:54.341" starttime="20151201 12:17:52.982"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:54.423" starttime="20151201 12:17:54.422"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:54.486" starttime="20151201 12:17:54.430"></status>
</kw>
<msg timestamp="20151201 12:17:54.490" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20151201 12:17:54.489" starttime="20151201 12:17:54.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:17:54.510" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:17:54.906" level="INFO">Read output: Last login: Tue Dec  1 09:33:08 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:17:54.908" starttime="20151201 12:17:54.505"></status>
</kw>
<status status="PASS" endtime="20151201 12:17:54.910" starttime="20151201 12:17:54.493"></status>
</kw>
<msg timestamp="20151201 12:17:54.914" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20151201 12:17:54.913" starttime="20151201 12:17:54.412"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:17:54.927" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:17:54.926" starttime="20151201 12:17:54.917"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:17:54.934" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20151201 12:17:55.252" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:17:55.257" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20151201 12:17:55.254" starttime="20151201 12:17:54.930"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:55.271" starttime="20151201 12:17:55.265"></status>
</kw>
<msg timestamp="20151201 12:17:55.274" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:17:55.276" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:17:55.273" starttime="20151201 12:17:55.259"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:55.292" starttime="20151201 12:17:55.289"></status>
</kw>
<msg timestamp="20151201 12:17:55.295" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:17:55.294" starttime="20151201 12:17:55.278"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20151201 12:17:55.304" level="INFO">${version_r} =  5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20151201 12:17:55.303" starttime="20151201 12:17:55.298"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:17:55.312" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:17:55.311" starttime="20151201 12:17:55.307"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:55.318" starttime="20151201 12:17:55.315"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:55.344" starttime="20151201 12:17:55.340"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:17:55.350" starttime="20151201 12:17:55.347"></status>
</kw>
<status status="PASS" endtime="20151201 12:17:55.358" starttime="20151201 12:17:55.321"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:55.376" starttime="20151201 12:17:55.372"></status>
</kw>
<msg timestamp="20151201 12:17:55.379" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:17:55.378" starttime="20151201 12:17:55.361"></status>
</kw>
<msg timestamp="20151201 12:17:55.385" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20151201 12:17:55.387" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:17:55.383" starttime="20151201 12:17:54.377"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:55.503" starttime="20151201 12:17:55.499"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:55.576" starttime="20151201 12:17:55.516"></status>
</kw>
<msg timestamp="20151201 12:17:55.579" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20151201 12:17:55.578" starttime="20151201 12:17:55.506"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:17:55.598" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:17:56.084" level="INFO">Read output: Last login: Tue Dec  1 09:33:09 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:17:56.085" starttime="20151201 12:17:55.594"></status>
</kw>
<status status="PASS" endtime="20151201 12:17:56.087" starttime="20151201 12:17:55.582"></status>
</kw>
<msg timestamp="20151201 12:17:56.089" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20151201 12:17:56.088" starttime="20151201 12:17:55.476"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:17:56.096" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:17:56.095" starttime="20151201 12:17:56.091"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:17:56.099" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20151201 12:17:56.279" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:17:56.283" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:24582, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151201 12:17:56.281" starttime="20151201 12:17:56.097"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:56.296" starttime="20151201 12:17:56.291"></status>
</kw>
<msg timestamp="20151201 12:17:56.299" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:17:56.301" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:17:56.298" starttime="20151201 12:17:56.286"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:56.322" starttime="20151201 12:17:56.319"></status>
</kw>
<msg timestamp="20151201 12:17:56.326" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:17:56.325" starttime="20151201 12:17:56.304"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151201 12:17:56.334" level="INFO">${version_r} =  5.1.14.25039 is running (PID:24582, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151201 12:17:56.333" starttime="20151201 12:17:56.329"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:17:56.343" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:17:56.341" starttime="20151201 12:17:56.337"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:56.349" starttime="20151201 12:17:56.345"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:56.374" starttime="20151201 12:17:56.370"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:17:56.381" starttime="20151201 12:17:56.377"></status>
</kw>
<status status="PASS" endtime="20151201 12:17:56.385" starttime="20151201 12:17:56.352"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:56.401" starttime="20151201 12:17:56.397"></status>
</kw>
<msg timestamp="20151201 12:17:56.404" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:17:56.403" starttime="20151201 12:17:56.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:56.411" starttime="20151201 12:17:56.407"></status>
</kw>
<msg timestamp="20151201 12:17:56.417" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20151201 12:17:56.419" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:17:56.414" starttime="20151201 12:17:55.421"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:56.523" starttime="20151201 12:17:56.521"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:56.583" starttime="20151201 12:17:56.529"></status>
</kw>
<msg timestamp="20151201 12:17:56.587" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20151201 12:17:56.586" starttime="20151201 12:17:56.524"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:17:56.606" level="INFO">Logging into '10.105.170.159:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:17:57.009" level="INFO">Read output: Last login: Tue Dec  1 09:33:10 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:17:57.011" starttime="20151201 12:17:56.602"></status>
</kw>
<status status="PASS" endtime="20151201 12:17:57.014" starttime="20151201 12:17:56.590"></status>
</kw>
<msg timestamp="20151201 12:17:57.020" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20151201 12:17:57.018" starttime="20151201 12:17:56.501"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:17:57.026" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:17:57.026" starttime="20151201 12:17:57.021"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:17:57.029" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20151201 12:17:57.104" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:17:57.107" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20151201 12:17:57.106" starttime="20151201 12:17:57.027"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.121" starttime="20151201 12:17:57.115"></status>
</kw>
<msg timestamp="20151201 12:17:57.124" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:17:57.125" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:17:57.123" starttime="20151201 12:17:57.110"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.141" starttime="20151201 12:17:57.138"></status>
</kw>
<msg timestamp="20151201 12:17:57.145" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:17:57.143" starttime="20151201 12:17:57.128"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151201 12:17:57.153" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20151201 12:17:57.151" starttime="20151201 12:17:57.147"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:17:57.206" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:17:57.205" starttime="20151201 12:17:57.155"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.212" starttime="20151201 12:17:57.209"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.237" starttime="20151201 12:17:57.233"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.245" starttime="20151201 12:17:57.240"></status>
</kw>
<status status="PASS" endtime="20151201 12:17:57.247" starttime="20151201 12:17:57.216"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.264" starttime="20151201 12:17:57.260"></status>
</kw>
<msg timestamp="20151201 12:17:57.267" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:17:57.265" starttime="20151201 12:17:57.250"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.274" starttime="20151201 12:17:57.269"></status>
</kw>
<msg timestamp="20151201 12:17:57.279" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20151201 12:17:57.280" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:17:57.277" starttime="20151201 12:17:56.450"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:17:57.288" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20151201 12:17:57.290" starttime="20151201 12:17:57.283"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:17:57.297" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:17:57.299" starttime="20151201 12:17:57.292"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:17:57.306" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:17:57.307" starttime="20151201 12:17:57.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:17:57.315" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:17:57.317" starttime="20151201 12:17:57.310"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20151201 12:17:57.324" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:17:57.325" starttime="20151201 12:17:57.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20151201 12:17:57.332" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:17:57.333" starttime="20151201 12:17:57.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20151201 12:17:57.340" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:17:57.342" starttime="20151201 12:17:57.336"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20151201 12:17:57.348" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:17:57.350" starttime="20151201 12:17:57.344"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.370" starttime="20151201 12:17:57.362"></status>
</kw>
<msg timestamp="20151201 12:17:57.373" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151201 12:17:57.372" starttime="20151201 12:17:57.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20151201 12:17:57.381" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151201 12:17:57.383" starttime="20151201 12:17:57.376"></status>
</kw>
<status status="PASS" endtime="20151201 12:17:57.384" starttime="20151201 12:17:52.920"></status>
</kw>
<test id="s1-s1-s1-t1" name="Run MTC Abandon Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.403" starttime="20151201 12:17:57.401"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20151201 12:17:57.406" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20151201 12:17:57.405" starttime="20151201 12:17:57.404"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20151201 12:17:57.422" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20151201 12:17:57.423" starttime="20151201 12:17:57.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20151201 12:17:57.425" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20151201 12:17:57.426" starttime="20151201 12:17:57.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20151201 12:17:57.429" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20151201 12:17:57.429" starttime="20151201 12:17:57.427"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20151201 12:17:57.432" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20151201 12:17:57.433" starttime="20151201 12:17:57.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20151201 12:17:57.435" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20151201 12:17:57.436" starttime="20151201 12:17:57.434"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20151201 12:17:57.439" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20151201 12:17:57.439" starttime="20151201 12:17:57.437"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20151201 12:17:57.442" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20151201 12:17:57.443" starttime="20151201 12:17:57.440"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20151201 12:17:57.445" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20151201 12:17:57.446" starttime="20151201 12:17:57.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20151201 12:17:57.449" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20151201 12:17:57.449" starttime="20151201 12:17:57.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20151201 12:17:57.452" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20151201 12:17:57.453" starttime="20151201 12:17:57.450"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20151201 12:17:57.467" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:17:57.467" starttime="20151201 12:17:57.464"></status>
</kw>
<status status="PASS" endtime="20151201 12:17:57.468" starttime="20151201 12:17:57.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20151201 12:17:57.473" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:17:57.474" starttime="20151201 12:17:57.471"></status>
</kw>
<status status="PASS" endtime="20151201 12:17:57.475" starttime="20151201 12:17:57.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20151201 12:17:57.480" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:17:57.481" starttime="20151201 12:17:57.478"></status>
</kw>
<status status="PASS" endtime="20151201 12:17:57.482" starttime="20151201 12:17:57.476"></status>
</kw>
<status status="PASS" endtime="20151201 12:17:57.482" starttime="20151201 12:17:57.455"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20151201 12:17:57.487" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20151201 12:17:57.487" starttime="20151201 12:17:57.483"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.490" starttime="20151201 12:17:57.488"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.493" starttime="20151201 12:17:57.491"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.496" starttime="20151201 12:17:57.494"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.499" starttime="20151201 12:17:57.497"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.501" starttime="20151201 12:17:57.500"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.504" starttime="20151201 12:17:57.502"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.507" starttime="20151201 12:17:57.505"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.510" starttime="20151201 12:17:57.508"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.513" starttime="20151201 12:17:57.511"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.516" starttime="20151201 12:17:57.514"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.519" starttime="20151201 12:17:57.517"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:17:57.522" starttime="20151201 12:17:57.520"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20151201 12:17:57.526" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20151201 12:18:05.324" level="INFO">12:17:57,696 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/ext] for external libraries
12:17:57,696 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
12:17:59,491 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
12:17:59,511 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.170.125]
12:17:59,511 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
12:17:59,511 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
12:17:59,511 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [2]
12:17:59,511 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [732123710001000]
12:17:59,511 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [573190001000]
12:17:59,512 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
12:17:59,512 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
12:17:59,512 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101002]
12:17:59,512 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
12:17:59,512 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
12:17:59,513 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
12:17:59,523 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
12:17:59,530 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
12:17:59,970 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
12:18:00,031 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
12:18:00,217 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
12:18:00,217 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
12:18:00,247 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
12:18:00,254 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
12:18:00,434 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
12:18:00,435 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
12:18:00,435 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
12:18:00,435 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
12:18:00,568 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
12:18:00,969 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
12:18:00,995 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
12:18:00,997 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
12:18:00,998 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
12:18:00,998 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
12:18:01,723 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
12:18:01,724 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
12:18:01,732 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
12:18:01,732 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
12:18:01,732 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
12:18:01,732 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
12:18:01,805 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
12:18:01,810 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
12:18:01,859 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
12:18:01,863 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
12:18:01,865 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
12:18:01,865 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
12:18:01,883 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
12:18:01,883 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
12:18:01,889 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
12:18:01,889 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
12:18:01,890 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
12:18:01,890 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
12:18:01,957 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
12:18:01,968 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
12:18:02,011 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
12:18:02,014 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
12:18:02,016 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
12:18:02,016 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
12:18:02,450 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
12:18:02,450 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
12:18:02,457 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
12:18:02,457 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
12:18:02,457 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
12:18:02,458 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
12:18:02,524 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
12:18:02,530 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
12:18:02,572 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
12:18:02,575 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
12:18:02,577 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
12:18:02,577 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
12:18:02,860 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
12:18:02,860 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
12:18:02,874 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
12:18:02,874 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
12:18:02,874 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
12:18:02,875 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
12:18:02,940 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
12:18:02,960 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
12:18:03,005 INFO  [SoapUITestCaseRunner] running step [setBalance]
12:18:03,009 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
12:18:03,010 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
12:18:03,011 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
12:18:03,323 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
12:18:03,323 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
12:18:03,336 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
12:18:03,336 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
12:18:03,336 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
12:18:03,336 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
12:18:03,402 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
12:18:03,412 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
12:18:03,454 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
12:18:03,516 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
12:18:03,520 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
12:18:03,521 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
12:18:03,523 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
12:18:03,523 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
12:18:03,535 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
12:18:03,536 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
12:18:03,543 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
12:18:03,543 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
12:18:03,543 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
12:18:03,543 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
12:18:03,543 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
12:18:03,554 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
12:18:03,555 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
12:18:03,556 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
12:18:03,557 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
12:18:03,557 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
12:18:04,116 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
12:18:04,117 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
12:18:04,123 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
12:18:04,123 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
12:18:04,123 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
12:18:04,123 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
12:18:04,124 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
12:18:04,129 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
12:18:04,131 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
12:18:04,133 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
12:18:04,135 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
12:18:04,135 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
12:18:04,150 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
12:18:04,150 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
12:18:04,156 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
12:18:04,156 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
12:18:04,156 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
12:18:04,156 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
12:18:04,156 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
12:18:04,166 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
12:18:04,167 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
12:18:04,169 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
12:18:04,171 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
12:18:04,171 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
12:18:04,545 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
12:18:04,546 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
12:18:04,551 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
12:18:04,552 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
12:18:04,552 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
12:18:04,552 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
12:18:04,552 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
12:18:04,558 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
12:18:04,558 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
12:18:04,560 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
12:18:04,562 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
12:18:04,562 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
12:18:04,930 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
12:18:04,930 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
12:18:04,942 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
12:18:04,942 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
12:18:04,942 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
12:18:04,942 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
12:18:04,943 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
12:18:04,963 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
12:18:04,964 INFO  [SoapUITestCaseRunner] running step [setBalance]
12:18:04,966 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
12:18:04,968 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
12:18:04,968 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
12:18:05,215 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
12:18:05,215 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
12:18:05,227 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
12:18:05,227 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
12:18:05,227 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
12:18:05,227 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
12:18:05,228 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
12:18:05,237 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
12:18:05,238 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
12:18:05,239 INFO  [SoapUITestCaseRunner] running step [finish_successful]
12:18:05,313 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
12:18:05,314 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 5733ms, status: FINISHED
12:18:05,315 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 5733ms</msg>
<status status="PASS" endtime="20151201 12:18:05.335" starttime="20151201 12:17:57.525"></status>
</kw>
<msg timestamp="20151201 12:18:05.342" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151201 12:18:05.343" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20151201 12:18:05.338" starttime="20151201 12:17:57.523"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20151201 12:18:05.380" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20151201 12:18:05.379" starttime="20151201 12:18:05.373"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151201 12:18:05.389" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20151201 12:18:05.387" starttime="20151201 12:18:05.383"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151201 12:18:05.396" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20151201 12:18:05.395" starttime="20151201 12:18:05.392"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20151201 12:18:05.402" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20151201 12:18:05.408" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20151201 12:18:05.409" starttime="20151201 12:18:05.400"></status>
</kw>
<msg timestamp="20151201 12:18:05.410" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151201 12:18:05.411" level="INFO">${return_log_entry} = 2015-12-01 12:18:05,313 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151201 12:18:05.410" starttime="20151201 12:18:05.397"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:05.421" starttime="20151201 12:18:05.419"></status>
</kw>
<msg timestamp="20151201 12:18:05.422" level="INFO">${return_log_entry} = 2015-12-01 12:18:05,313 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151201 12:18:05.422" starttime="20151201 12:18:05.412"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:05.431" starttime="20151201 12:18:05.429"></status>
</kw>
<msg timestamp="20151201 12:18:05.433" level="INFO">${return_log_entry} = 2015-12-01 12:18:05,313 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151201 12:18:05.432" starttime="20151201 12:18:05.424"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:05.442" starttime="20151201 12:18:05.440"></status>
</kw>
<msg timestamp="20151201 12:18:05.444" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:05.443" starttime="20151201 12:18:05.434"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:05.455" starttime="20151201 12:18:05.453"></status>
</kw>
<msg timestamp="20151201 12:18:05.456" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:05.456" starttime="20151201 12:18:05.445"></status>
</kw>
<msg timestamp="20151201 12:18:05.458" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:05.458" starttime="20151201 12:18:05.349"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:05.471" starttime="20151201 12:18:05.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:05.473" starttime="20151201 12:18:05.472"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:05.476" starttime="20151201 12:18:05.474"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20151201 12:18:05.490" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20151201 12:18:05.491" starttime="20151201 12:18:05.484"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:05.492" starttime="20151201 12:18:05.482"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:05.492" starttime="20151201 12:18:05.477"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:05.493" starttime="20151201 12:18:05.460"></status>
</kw>
<msg timestamp="20151201 12:18:05.496" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20151201 12:18:05.495" starttime="20151201 12:17:57.409"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20151201 12:18:05.502" level="INFO">${calling_party_msisdn} = 573190001001</msg>
<status status="PASS" endtime="20151201 12:18:05.501" starttime="20151201 12:18:05.497"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20151201 12:18:05.505" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:05.506" starttime="20151201 12:18:05.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:05.509" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20151201 12:18:05.509" starttime="20151201 12:18:05.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC abandon *******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:05.513" starttime="20151201 12:18:05.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MTC abandon call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:05.516" level="INFO">Running the MTC abandon call...</msg>
<status status="PASS" endtime="20151201 12:18:05.517" starttime="20151201 12:18:05.515"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Abandon">
<doc>Runs an abandoned non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-abandon</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20151201 12:18:05.555" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv</msg>
<status status="PASS" endtime="20151201 12:18:05.555" starttime="20151201 12:18:05.552"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20151201 12:18:05.559" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv</msg>
<status status="PASS" endtime="20151201 12:18:05.558" starttime="20151201 12:18:05.556"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20151201 12:18:05.563" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini</msg>
<status status="PASS" endtime="20151201 12:18:05.562" starttime="20151201 12:18:05.560"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20151201 12:18:05.566" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs</msg>
<status status="PASS" endtime="20151201 12:18:05.566" starttime="20151201 12:18:05.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:05.569" starttime="20151201 12:18:05.567"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20151201 12:18:05.573" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:05.574" starttime="20151201 12:18:05.570"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:05.576" starttime="20151201 12:18:05.575"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20151201 12:18:05.580" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:05.581" starttime="20151201 12:18:05.577"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20151201 12:18:05.585" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:05.586" starttime="20151201 12:18:05.582"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:05.588" starttime="20151201 12:18:05.587"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20151201 12:18:05.592" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:05.593" starttime="20151201 12:18:05.589"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20151201 12:18:05.598" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:05.599" starttime="20151201 12:18:05.594"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:05.601" starttime="20151201 12:18:05.600"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20151201 12:18:05.614" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20151201 12:18:18.682" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151201 12:18:18.678" starttime="20151201 12:18:05.602"></status>
</kw>
<msg timestamp="20151201 12:18:18.688" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151201 12:18:18.685" starttime="20151201 12:18:05.537"></status>
</kw>
<msg timestamp="20151201 12:18:18.692" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151201 12:18:18.690" starttime="20151201 12:18:05.520"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:18.699" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20151201 12:18:18.701" starttime="20151201 12:18:18.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20151201 12:18:18.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:18.709" starttime="20151201 12:18:18.703"></status>
</kw>
<doc>Test will make an abandoned MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>mTel_PPLIGHT_TB25_supported</tag>
<tag>mTel_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151201 12:18:18.713" starttime="20151201 12:17:57.389"></status>
</test>
<doc>Testing the abandoned MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151201 12:18:18.724" starttime="20151201 12:17:51.633"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151201 12:18:18.746" starttime="20151201 12:17:51.602"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy" id="s1-s2" name="MTC PREPAID-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy/MTC_PREPAID-Busy-robot-suite.txt" id="s1-s2-s1" name="MTC PREPAID-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20151201 12:18:19.060" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20151201 12:18:19.104" level="INFO">${date} = Tue Dec  1 12:18:19 CET 2015</msg>
<status status="PASS" endtime="20151201 12:18:19.103" starttime="20151201 12:18:19.055"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:19.108" level="INFO">Date and time: Tue Dec  1 12:18:19 CET 2015</msg>
<status status="PASS" endtime="20151201 12:18:19.109" starttime="20151201 12:18:19.105"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:19.112" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20151201 12:18:19.113" starttime="20151201 12:18:19.110"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:19.157" starttime="20151201 12:18:19.156"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:19.207" starttime="20151201 12:18:19.164"></status>
</kw>
<msg timestamp="20151201 12:18:19.209" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20151201 12:18:19.208" starttime="20151201 12:18:19.158"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:18:19.216" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:18:19.727" level="INFO">Read output: Last login: Tue Dec  1 11:17:53 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:18:19.728" starttime="20151201 12:18:19.215"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:19.729" starttime="20151201 12:18:19.210"></status>
</kw>
<msg timestamp="20151201 12:18:19.731" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20151201 12:18:19.731" starttime="20151201 12:18:19.148"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:18:19.737" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:18:19.736" starttime="20151201 12:18:19.732"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:18:19.740" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20151201 12:18:20.115" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:18:20.119" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 32150 </msg>
<status status="PASS" endtime="20151201 12:18:20.117" starttime="20151201 12:18:19.738"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:20.130" starttime="20151201 12:18:20.125"></status>
</kw>
<msg timestamp="20151201 12:18:20.133" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:18:20.134" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:18:20.132" starttime="20151201 12:18:20.121"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:20.148" starttime="20151201 12:18:20.145"></status>
</kw>
<msg timestamp="20151201 12:18:20.151" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:20.150" starttime="20151201 12:18:20.136"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20151201 12:18:20.157" level="INFO">${version_r} =  2.1.1 is running PID: 32150 </msg>
<status status="PASS" endtime="20151201 12:18:20.156" starttime="20151201 12:18:20.153"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:18:20.164" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20151201 12:18:20.163" starttime="20151201 12:18:20.159"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:20.168" starttime="20151201 12:18:20.166"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:20.186" starttime="20151201 12:18:20.182"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:18:20.194" starttime="20151201 12:18:20.188"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:20.196" starttime="20151201 12:18:20.171"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:20.209" starttime="20151201 12:18:20.206"></status>
</kw>
<msg timestamp="20151201 12:18:20.211" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20151201 12:18:20.210" starttime="20151201 12:18:20.198"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:20.217" starttime="20151201 12:18:20.213"></status>
</kw>
<msg timestamp="20151201 12:18:20.221" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20151201 12:18:20.222" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20151201 12:18:20.219" starttime="20151201 12:18:19.127"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:20.283" starttime="20151201 12:18:20.282"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:20.320" starttime="20151201 12:18:20.289"></status>
</kw>
<msg timestamp="20151201 12:18:20.322" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20151201 12:18:20.322" starttime="20151201 12:18:20.284"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:18:20.329" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:18:20.770" level="INFO">Read output: Last login: Tue Dec  1 11:17:54 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:18:20.773" starttime="20151201 12:18:20.328"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:20.775" starttime="20151201 12:18:20.323"></status>
</kw>
<msg timestamp="20151201 12:18:20.780" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20151201 12:18:20.779" starttime="20151201 12:18:20.276"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:18:20.793" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:18:20.792" starttime="20151201 12:18:20.782"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:18:20.799" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20151201 12:18:21.154" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:18:21.160" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20151201 12:18:21.157" starttime="20151201 12:18:20.795"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:21.171" starttime="20151201 12:18:21.166"></status>
</kw>
<msg timestamp="20151201 12:18:21.174" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:18:21.175" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:18:21.173" starttime="20151201 12:18:21.162"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:21.188" starttime="20151201 12:18:21.186"></status>
</kw>
<msg timestamp="20151201 12:18:21.191" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:21.190" starttime="20151201 12:18:21.177"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20151201 12:18:21.197" level="INFO">${version_r} =  5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20151201 12:18:21.196" starttime="20151201 12:18:21.193"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:18:21.204" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:18:21.203" starttime="20151201 12:18:21.199"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:21.209" starttime="20151201 12:18:21.206"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:21.226" starttime="20151201 12:18:21.222"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:18:21.231" starttime="20151201 12:18:21.228"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:21.236" starttime="20151201 12:18:21.212"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:21.251" starttime="20151201 12:18:21.248"></status>
</kw>
<msg timestamp="20151201 12:18:21.254" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:18:21.253" starttime="20151201 12:18:21.238"></status>
</kw>
<msg timestamp="20151201 12:18:21.259" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20151201 12:18:21.260" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:18:21.257" starttime="20151201 12:18:20.247"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:21.338" starttime="20151201 12:18:21.335"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:21.406" starttime="20151201 12:18:21.350"></status>
</kw>
<msg timestamp="20151201 12:18:21.409" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20151201 12:18:21.408" starttime="20151201 12:18:21.340"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:18:21.429" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:18:21.914" level="INFO">Read output: Last login: Tue Dec  1 11:17:55 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:18:21.915" starttime="20151201 12:18:21.426"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:21.916" starttime="20151201 12:18:21.412"></status>
</kw>
<msg timestamp="20151201 12:18:21.919" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20151201 12:18:21.919" starttime="20151201 12:18:21.322"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:18:21.925" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:18:21.924" starttime="20151201 12:18:21.920"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:18:21.927" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20151201 12:18:22.106" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:18:22.110" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:24582, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151201 12:18:22.108" starttime="20151201 12:18:21.926"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.120" starttime="20151201 12:18:22.116"></status>
</kw>
<msg timestamp="20151201 12:18:22.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:18:22.124" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:18:22.122" starttime="20151201 12:18:22.112"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.138" starttime="20151201 12:18:22.135"></status>
</kw>
<msg timestamp="20151201 12:18:22.141" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:22.140" starttime="20151201 12:18:22.126"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151201 12:18:22.147" level="INFO">${version_r} =  5.1.14.25039 is running (PID:24582, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151201 12:18:22.146" starttime="20151201 12:18:22.143"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:18:22.155" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:18:22.154" starttime="20151201 12:18:22.149"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.159" starttime="20151201 12:18:22.157"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.178" starttime="20151201 12:18:22.175"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.184" starttime="20151201 12:18:22.180"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:22.187" starttime="20151201 12:18:22.162"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.201" starttime="20151201 12:18:22.197"></status>
</kw>
<msg timestamp="20151201 12:18:22.203" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:18:22.202" starttime="20151201 12:18:22.189"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.208" starttime="20151201 12:18:22.205"></status>
</kw>
<msg timestamp="20151201 12:18:22.213" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20151201 12:18:22.214" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:18:22.211" starttime="20151201 12:18:21.284"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.280" starttime="20151201 12:18:22.279"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.338" starttime="20151201 12:18:22.286"></status>
</kw>
<msg timestamp="20151201 12:18:22.341" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20151201 12:18:22.340" starttime="20151201 12:18:22.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:18:22.358" level="INFO">Logging into '10.105.170.159:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:18:22.757" level="INFO">Read output: Last login: Tue Dec  1 11:17:56 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:18:22.760" starttime="20151201 12:18:22.354"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:22.762" starttime="20151201 12:18:22.344"></status>
</kw>
<msg timestamp="20151201 12:18:22.767" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20151201 12:18:22.765" starttime="20151201 12:18:22.272"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:18:22.780" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:18:22.779" starttime="20151201 12:18:22.769"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:18:22.785" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20151201 12:18:22.864" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:18:22.866" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20151201 12:18:22.865" starttime="20151201 12:18:22.782"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.877" starttime="20151201 12:18:22.872"></status>
</kw>
<msg timestamp="20151201 12:18:22.880" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:18:22.881" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:18:22.879" starttime="20151201 12:18:22.869"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.898" starttime="20151201 12:18:22.891"></status>
</kw>
<msg timestamp="20151201 12:18:22.900" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:22.899" starttime="20151201 12:18:22.883"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151201 12:18:22.907" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20151201 12:18:22.906" starttime="20151201 12:18:22.902"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:18:22.913" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:18:22.913" starttime="20151201 12:18:22.909"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.918" starttime="20151201 12:18:22.915"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.935" starttime="20151201 12:18:22.931"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.942" starttime="20151201 12:18:22.937"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:22.944" starttime="20151201 12:18:22.921"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.957" starttime="20151201 12:18:22.954"></status>
</kw>
<msg timestamp="20151201 12:18:22.959" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:18:22.958" starttime="20151201 12:18:22.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:22.965" starttime="20151201 12:18:22.961"></status>
</kw>
<msg timestamp="20151201 12:18:22.969" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20151201 12:18:22.970" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:18:22.968" starttime="20151201 12:18:22.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:22.975" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20151201 12:18:22.977" starttime="20151201 12:18:22.971"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:22.983" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:18:22.984" starttime="20151201 12:18:22.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:22.990" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:18:22.992" starttime="20151201 12:18:22.986"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:22.997" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:18:22.999" starttime="20151201 12:18:22.993"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20151201 12:18:23.005" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:23.006" starttime="20151201 12:18:23.001"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20151201 12:18:23.011" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:23.013" starttime="20151201 12:18:23.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20151201 12:18:23.018" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:23.019" starttime="20151201 12:18:23.014"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20151201 12:18:23.022" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:23.022" starttime="20151201 12:18:23.020"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:23.031" starttime="20151201 12:18:23.027"></status>
</kw>
<msg timestamp="20151201 12:18:23.032" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151201 12:18:23.031" starttime="20151201 12:18:23.023"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20151201 12:18:23.034" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151201 12:18:23.035" starttime="20151201 12:18:23.033"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:23.036" starttime="20151201 12:18:19.049"></status>
</kw>
<test id="s1-s2-s1-t1" name="Run MTC Busy Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:23.045" starttime="20151201 12:18:23.043"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20151201 12:18:23.047" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20151201 12:18:23.047" starttime="20151201 12:18:23.046"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20151201 12:18:23.059" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20151201 12:18:23.059" starttime="20151201 12:18:23.057"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20151201 12:18:23.061" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20151201 12:18:23.062" starttime="20151201 12:18:23.060"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20151201 12:18:23.064" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20151201 12:18:23.065" starttime="20151201 12:18:23.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20151201 12:18:23.067" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20151201 12:18:23.067" starttime="20151201 12:18:23.065"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20151201 12:18:23.070" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20151201 12:18:23.070" starttime="20151201 12:18:23.068"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20151201 12:18:23.072" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20151201 12:18:23.073" starttime="20151201 12:18:23.071"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20151201 12:18:23.075" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20151201 12:18:23.076" starttime="20151201 12:18:23.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20151201 12:18:23.078" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20151201 12:18:23.078" starttime="20151201 12:18:23.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20151201 12:18:23.080" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20151201 12:18:23.081" starttime="20151201 12:18:23.079"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20151201 12:18:23.083" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20151201 12:18:23.084" starttime="20151201 12:18:23.082"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20151201 12:18:23.093" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:23.094" starttime="20151201 12:18:23.091"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:23.095" starttime="20151201 12:18:23.090"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20151201 12:18:23.099" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:23.099" starttime="20151201 12:18:23.097"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:23.100" starttime="20151201 12:18:23.095"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20151201 12:18:23.104" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:23.105" starttime="20151201 12:18:23.102"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:23.105" starttime="20151201 12:18:23.101"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:23.106" starttime="20151201 12:18:23.085"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20151201 12:18:23.109" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20151201 12:18:23.110" starttime="20151201 12:18:23.107"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:23.112" starttime="20151201 12:18:23.111"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:23.114" starttime="20151201 12:18:23.113"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:23.117" starttime="20151201 12:18:23.115"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:23.119" starttime="20151201 12:18:23.118"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:23.121" starttime="20151201 12:18:23.120"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:23.123" starttime="20151201 12:18:23.122"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:23.125" starttime="20151201 12:18:23.124"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:23.128" starttime="20151201 12:18:23.126"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:23.131" starttime="20151201 12:18:23.129"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:23.133" starttime="20151201 12:18:23.131"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:23.135" starttime="20151201 12:18:23.134"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:23.138" starttime="20151201 12:18:23.136"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20151201 12:18:23.141" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20151201 12:18:27.560" level="INFO">12:18:27,557 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151201 12:18:27.563" starttime="20151201 12:18:23.140"></status>
</kw>
<msg timestamp="20151201 12:18:27.567" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151201 12:18:27.568" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20151201 12:18:27.566" starttime="20151201 12:18:23.139"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20151201 12:18:27.586" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20151201 12:18:27.585" starttime="20151201 12:18:27.581"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151201 12:18:27.592" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20151201 12:18:27.591" starttime="20151201 12:18:27.588"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151201 12:18:27.598" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20151201 12:18:27.597" starttime="20151201 12:18:27.594"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20151201 12:18:27.607" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20151201 12:18:27.609" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20151201 12:18:27.610" starttime="20151201 12:18:27.603"></status>
</kw>
<msg timestamp="20151201 12:18:27.612" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151201 12:18:27.613" level="INFO">${return_log_entry} = 2015-12-01 12:18:27,557 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151201 12:18:27.611" starttime="20151201 12:18:27.600"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:27.627" starttime="20151201 12:18:27.624"></status>
</kw>
<msg timestamp="20151201 12:18:27.630" level="INFO">${return_log_entry} = 2015-12-01 12:18:27,557 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151201 12:18:27.629" starttime="20151201 12:18:27.615"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:27.644" starttime="20151201 12:18:27.640"></status>
</kw>
<msg timestamp="20151201 12:18:27.645" level="INFO">${return_log_entry} = 2015-12-01 12:18:27,557 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151201 12:18:27.645" starttime="20151201 12:18:27.632"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:27.652" starttime="20151201 12:18:27.650"></status>
</kw>
<msg timestamp="20151201 12:18:27.653" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:27.652" starttime="20151201 12:18:27.646"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:27.662" starttime="20151201 12:18:27.660"></status>
</kw>
<msg timestamp="20151201 12:18:27.663" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:27.662" starttime="20151201 12:18:27.654"></status>
</kw>
<msg timestamp="20151201 12:18:27.664" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:27.664" starttime="20151201 12:18:27.571"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:27.671" starttime="20151201 12:18:27.670"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:27.673" starttime="20151201 12:18:27.672"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:27.675" starttime="20151201 12:18:27.674"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20151201 12:18:27.683" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20151201 12:18:27.684" starttime="20151201 12:18:27.681"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:27.684" starttime="20151201 12:18:27.680"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:27.685" starttime="20151201 12:18:27.676"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:27.686" starttime="20151201 12:18:27.665"></status>
</kw>
<msg timestamp="20151201 12:18:27.688" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20151201 12:18:27.687" starttime="20151201 12:18:23.049"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20151201 12:18:27.692" level="INFO">${calling_party_msisdn} = 573190001001</msg>
<status status="PASS" endtime="20151201 12:18:27.692" starttime="20151201 12:18:27.689"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20151201 12:18:27.695" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:27.695" starttime="20151201 12:18:27.693"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:27.697" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20151201 12:18:27.698" starttime="20151201 12:18:27.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run busy MTC *******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:27.700" starttime="20151201 12:18:27.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:27.702" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20151201 12:18:27.703" starttime="20151201 12:18:27.701"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Busy">
<doc>Runs a busy non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-busy</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20151201 12:18:27.725" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv</msg>
<status status="PASS" endtime="20151201 12:18:27.725" starttime="20151201 12:18:27.723"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20151201 12:18:27.728" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv</msg>
<status status="PASS" endtime="20151201 12:18:27.728" starttime="20151201 12:18:27.726"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20151201 12:18:27.731" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini</msg>
<status status="PASS" endtime="20151201 12:18:27.730" starttime="20151201 12:18:27.729"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20151201 12:18:27.734" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs</msg>
<status status="PASS" endtime="20151201 12:18:27.733" starttime="20151201 12:18:27.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:27.736" starttime="20151201 12:18:27.735"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20151201 12:18:27.740" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:27.740" starttime="20151201 12:18:27.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:27.742" starttime="20151201 12:18:27.741"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20151201 12:18:27.745" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:27.746" starttime="20151201 12:18:27.743"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20151201 12:18:27.750" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:27.750" starttime="20151201 12:18:27.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:27.752" starttime="20151201 12:18:27.751"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20151201 12:18:27.755" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:27.756" starttime="20151201 12:18:27.753"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20151201 12:18:27.760" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:27.760" starttime="20151201 12:18:27.756"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:27.762" starttime="20151201 12:18:27.761"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20151201 12:18:27.811" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20151201 12:18:36.316" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151201 12:18:36.310" starttime="20151201 12:18:27.763"></status>
</kw>
<msg timestamp="20151201 12:18:36.321" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151201 12:18:36.319" starttime="20151201 12:18:27.714"></status>
</kw>
<msg timestamp="20151201 12:18:36.325" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151201 12:18:36.323" starttime="20151201 12:18:27.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:36.332" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20151201 12:18:36.333" starttime="20151201 12:18:36.328"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20151201 12:18:36.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:36.341" starttime="20151201 12:18:36.335"></status>
</kw>
<doc>Test will make a busy MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>mTel_PPLIGHT_TB25_supported</tag>
<tag>mTel_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151201 12:18:36.343" starttime="20151201 12:18:23.037"></status>
</test>
<doc>Testing the prepaid busy MTC call (called party is busy)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151201 12:18:36.351" starttime="20151201 12:18:18.805"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151201 12:18:36.373" starttime="20151201 12:18:18.760"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer" id="s1-s3" name="MTC PREPAID-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer/MTC_PREPAID-NoAnswer-robot-suite.txt" id="s1-s3-s1" name="MTC PREPAID-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20151201 12:18:36.709" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20151201 12:18:36.715" level="INFO">${date} = Tue Dec  1 12:18:36 CET 2015</msg>
<status status="PASS" endtime="20151201 12:18:36.714" starttime="20151201 12:18:36.702"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:36.721" level="INFO">Date and time: Tue Dec  1 12:18:36 CET 2015</msg>
<status status="PASS" endtime="20151201 12:18:36.722" starttime="20151201 12:18:36.717"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:36.727" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20151201 12:18:36.728" starttime="20151201 12:18:36.724"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:36.801" starttime="20151201 12:18:36.798"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:36.911" starttime="20151201 12:18:36.814"></status>
</kw>
<msg timestamp="20151201 12:18:36.914" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20151201 12:18:36.913" starttime="20151201 12:18:36.803"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:18:36.929" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:18:37.366" level="INFO">Read output: Last login: Tue Dec  1 11:18:19 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:18:37.368" starttime="20151201 12:18:36.925"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:37.371" starttime="20151201 12:18:36.916"></status>
</kw>
<msg timestamp="20151201 12:18:37.376" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20151201 12:18:37.374" starttime="20151201 12:18:36.786"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:18:37.386" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:18:37.385" starttime="20151201 12:18:37.378"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:18:37.391" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20151201 12:18:37.765" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:18:37.768" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 32150 </msg>
<status status="PASS" endtime="20151201 12:18:37.767" starttime="20151201 12:18:37.388"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:37.778" starttime="20151201 12:18:37.774"></status>
</kw>
<msg timestamp="20151201 12:18:37.781" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:18:37.782" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:18:37.780" starttime="20151201 12:18:37.770"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:37.794" starttime="20151201 12:18:37.792"></status>
</kw>
<msg timestamp="20151201 12:18:37.797" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:37.796" starttime="20151201 12:18:37.783"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20151201 12:18:37.803" level="INFO">${version_r} =  2.1.1 is running PID: 32150 </msg>
<status status="PASS" endtime="20151201 12:18:37.802" starttime="20151201 12:18:37.799"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:18:37.808" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20151201 12:18:37.808" starttime="20151201 12:18:37.804"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:37.813" starttime="20151201 12:18:37.810"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:37.827" starttime="20151201 12:18:37.824"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:18:37.832" starttime="20151201 12:18:37.829"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:37.836" starttime="20151201 12:18:37.815"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:37.848" starttime="20151201 12:18:37.845"></status>
</kw>
<msg timestamp="20151201 12:18:37.850" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20151201 12:18:37.849" starttime="20151201 12:18:37.838"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:37.855" starttime="20151201 12:18:37.852"></status>
</kw>
<msg timestamp="20151201 12:18:37.859" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20151201 12:18:37.860" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20151201 12:18:37.857" starttime="20151201 12:18:36.751"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:37.911" starttime="20151201 12:18:37.910"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:38.009" starttime="20151201 12:18:37.916"></status>
</kw>
<msg timestamp="20151201 12:18:38.016" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20151201 12:18:38.013" starttime="20151201 12:18:37.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:18:38.035" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:18:38.382" level="INFO">Read output: Last login: Tue Dec  1 11:18:20 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:18:38.384" starttime="20151201 12:18:38.031"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:38.386" starttime="20151201 12:18:38.018"></status>
</kw>
<msg timestamp="20151201 12:18:38.390" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20151201 12:18:38.388" starttime="20151201 12:18:37.904"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:18:38.398" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:18:38.397" starttime="20151201 12:18:38.392"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:18:38.400" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20151201 12:18:38.734" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:18:38.736" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20151201 12:18:38.735" starttime="20151201 12:18:38.399"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:38.746" starttime="20151201 12:18:38.742"></status>
</kw>
<msg timestamp="20151201 12:18:38.748" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:18:38.749" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:18:38.748" starttime="20151201 12:18:38.738"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:38.762" starttime="20151201 12:18:38.760"></status>
</kw>
<msg timestamp="20151201 12:18:38.764" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:38.763" starttime="20151201 12:18:38.751"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20151201 12:18:38.770" level="INFO">${version_r} =  5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20151201 12:18:38.770" starttime="20151201 12:18:38.766"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:18:38.777" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:18:38.776" starttime="20151201 12:18:38.773"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:38.781" starttime="20151201 12:18:38.778"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:38.796" starttime="20151201 12:18:38.793"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:18:38.801" starttime="20151201 12:18:38.798"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:38.804" starttime="20151201 12:18:38.784"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:38.817" starttime="20151201 12:18:38.814"></status>
</kw>
<msg timestamp="20151201 12:18:38.819" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:18:38.818" starttime="20151201 12:18:38.806"></status>
</kw>
<msg timestamp="20151201 12:18:38.823" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20151201 12:18:38.824" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:18:38.821" starttime="20151201 12:18:37.882"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:38.895" starttime="20151201 12:18:38.893"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:38.955" starttime="20151201 12:18:38.900"></status>
</kw>
<msg timestamp="20151201 12:18:38.957" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20151201 12:18:38.956" starttime="20151201 12:18:38.896"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:18:38.971" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:18:39.485" level="INFO">Read output: Last login: Tue Dec  1 11:18:21 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:18:39.488" starttime="20151201 12:18:38.968"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:39.490" starttime="20151201 12:18:38.959"></status>
</kw>
<msg timestamp="20151201 12:18:39.496" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20151201 12:18:39.495" starttime="20151201 12:18:38.881"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:18:39.507" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:18:39.507" starttime="20151201 12:18:39.498"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:18:39.512" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20151201 12:18:39.682" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:18:39.685" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:24582, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151201 12:18:39.684" starttime="20151201 12:18:39.509"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:39.695" starttime="20151201 12:18:39.690"></status>
</kw>
<msg timestamp="20151201 12:18:39.697" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:18:39.698" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:18:39.696" starttime="20151201 12:18:39.687"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:39.713" starttime="20151201 12:18:39.708"></status>
</kw>
<msg timestamp="20151201 12:18:39.715" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:39.714" starttime="20151201 12:18:39.700"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151201 12:18:39.721" level="INFO">${version_r} =  5.1.14.25039 is running (PID:24582, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151201 12:18:39.720" starttime="20151201 12:18:39.717"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:18:39.727" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:18:39.726" starttime="20151201 12:18:39.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:39.731" starttime="20151201 12:18:39.728"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:39.746" starttime="20151201 12:18:39.743"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:18:39.750" starttime="20151201 12:18:39.748"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:39.754" starttime="20151201 12:18:39.733"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:39.766" starttime="20151201 12:18:39.763"></status>
</kw>
<msg timestamp="20151201 12:18:39.768" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:18:39.767" starttime="20151201 12:18:39.756"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:39.773" starttime="20151201 12:18:39.770"></status>
</kw>
<msg timestamp="20151201 12:18:39.777" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20151201 12:18:39.778" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:18:39.776" starttime="20151201 12:18:38.847"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:39.848" starttime="20151201 12:18:39.845"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:39.909" starttime="20151201 12:18:39.858"></status>
</kw>
<msg timestamp="20151201 12:18:39.912" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20151201 12:18:39.911" starttime="20151201 12:18:39.850"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:18:39.927" level="INFO">Logging into '10.105.170.159:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:18:40.395" level="INFO">Read output: Last login: Tue Dec  1 11:18:22 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:18:40.396" starttime="20151201 12:18:39.923"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:40.397" starttime="20151201 12:18:39.914"></status>
</kw>
<msg timestamp="20151201 12:18:40.399" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20151201 12:18:40.399" starttime="20151201 12:18:39.833"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:18:40.405" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:18:40.404" starttime="20151201 12:18:40.400"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:18:40.407" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20151201 12:18:40.484" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:18:40.485" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20151201 12:18:40.484" starttime="20151201 12:18:40.405"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.489" starttime="20151201 12:18:40.487"></status>
</kw>
<msg timestamp="20151201 12:18:40.491" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:18:40.491" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:18:40.490" starttime="20151201 12:18:40.486"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.497" starttime="20151201 12:18:40.496"></status>
</kw>
<msg timestamp="20151201 12:18:40.498" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:40.497" starttime="20151201 12:18:40.492"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151201 12:18:40.501" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20151201 12:18:40.500" starttime="20151201 12:18:40.499"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:18:40.503" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:18:40.503" starttime="20151201 12:18:40.501"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.505" starttime="20151201 12:18:40.504"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.512" starttime="20151201 12:18:40.510"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.516" starttime="20151201 12:18:40.513"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:40.517" starttime="20151201 12:18:40.506"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.527" starttime="20151201 12:18:40.524"></status>
</kw>
<msg timestamp="20151201 12:18:40.529" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:18:40.528" starttime="20151201 12:18:40.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.534" starttime="20151201 12:18:40.531"></status>
</kw>
<msg timestamp="20151201 12:18:40.538" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20151201 12:18:40.539" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:18:40.536" starttime="20151201 12:18:39.801"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:40.544" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20151201 12:18:40.545" starttime="20151201 12:18:40.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:40.550" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:18:40.552" starttime="20151201 12:18:40.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:40.557" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:18:40.558" starttime="20151201 12:18:40.553"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:40.563" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:18:40.565" starttime="20151201 12:18:40.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20151201 12:18:40.570" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:40.571" starttime="20151201 12:18:40.567"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20151201 12:18:40.576" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:40.577" starttime="20151201 12:18:40.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20151201 12:18:40.581" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:40.582" starttime="20151201 12:18:40.578"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20151201 12:18:40.587" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:40.588" starttime="20151201 12:18:40.584"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.605" starttime="20151201 12:18:40.598"></status>
</kw>
<msg timestamp="20151201 12:18:40.607" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151201 12:18:40.606" starttime="20151201 12:18:40.590"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20151201 12:18:40.613" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151201 12:18:40.614" starttime="20151201 12:18:40.609"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:40.615" starttime="20151201 12:18:36.698"></status>
</kw>
<test id="s1-s3-s1-t1" name="Run MTC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.633" starttime="20151201 12:18:40.631"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20151201 12:18:40.638" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20151201 12:18:40.637" starttime="20151201 12:18:40.635"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20151201 12:18:40.652" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20151201 12:18:40.652" starttime="20151201 12:18:40.650"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20151201 12:18:40.654" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20151201 12:18:40.655" starttime="20151201 12:18:40.653"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20151201 12:18:40.657" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20151201 12:18:40.657" starttime="20151201 12:18:40.655"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20151201 12:18:40.659" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20151201 12:18:40.660" starttime="20151201 12:18:40.658"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20151201 12:18:40.662" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20151201 12:18:40.662" starttime="20151201 12:18:40.660"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20151201 12:18:40.664" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20151201 12:18:40.664" starttime="20151201 12:18:40.663"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20151201 12:18:40.666" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20151201 12:18:40.667" starttime="20151201 12:18:40.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20151201 12:18:40.669" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20151201 12:18:40.669" starttime="20151201 12:18:40.668"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20151201 12:18:40.671" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20151201 12:18:40.672" starttime="20151201 12:18:40.670"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20151201 12:18:40.674" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20151201 12:18:40.675" starttime="20151201 12:18:40.672"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20151201 12:18:40.683" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:40.684" starttime="20151201 12:18:40.681"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:40.684" starttime="20151201 12:18:40.680"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20151201 12:18:40.689" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:40.689" starttime="20151201 12:18:40.687"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:40.690" starttime="20151201 12:18:40.685"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20151201 12:18:40.693" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:40.694" starttime="20151201 12:18:40.692"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:40.695" starttime="20151201 12:18:40.691"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:40.695" starttime="20151201 12:18:40.676"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20151201 12:18:40.698" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20151201 12:18:40.698" starttime="20151201 12:18:40.696"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.701" starttime="20151201 12:18:40.699"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.703" starttime="20151201 12:18:40.701"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.705" starttime="20151201 12:18:40.703"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.707" starttime="20151201 12:18:40.706"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.708" starttime="20151201 12:18:40.707"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.715" starttime="20151201 12:18:40.713"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.717" starttime="20151201 12:18:40.716"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.719" starttime="20151201 12:18:40.718"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.721" starttime="20151201 12:18:40.720"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.723" starttime="20151201 12:18:40.722"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.725" starttime="20151201 12:18:40.724"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:40.727" starttime="20151201 12:18:40.726"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20151201 12:18:40.774" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20151201 12:18:45.558" level="INFO">12:18:45,555 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151201 12:18:45.559" starttime="20151201 12:18:40.772"></status>
</kw>
<msg timestamp="20151201 12:18:45.564" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151201 12:18:45.565" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20151201 12:18:45.562" starttime="20151201 12:18:40.769"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20151201 12:18:45.586" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20151201 12:18:45.585" starttime="20151201 12:18:45.578"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151201 12:18:45.591" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20151201 12:18:45.591" starttime="20151201 12:18:45.588"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151201 12:18:45.597" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20151201 12:18:45.596" starttime="20151201 12:18:45.593"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20151201 12:18:45.605" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20151201 12:18:45.607" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20151201 12:18:45.608" starttime="20151201 12:18:45.601"></status>
</kw>
<msg timestamp="20151201 12:18:45.610" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151201 12:18:45.611" level="INFO">${return_log_entry} = 2015-12-01 12:18:45,555 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151201 12:18:45.609" starttime="20151201 12:18:45.598"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:45.624" starttime="20151201 12:18:45.621"></status>
</kw>
<msg timestamp="20151201 12:18:45.626" level="INFO">${return_log_entry} = 2015-12-01 12:18:45,555 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151201 12:18:45.626" starttime="20151201 12:18:45.613"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:45.639" starttime="20151201 12:18:45.636"></status>
</kw>
<msg timestamp="20151201 12:18:45.641" level="INFO">${return_log_entry} = 2015-12-01 12:18:45,555 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151201 12:18:45.640" starttime="20151201 12:18:45.628"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:45.654" starttime="20151201 12:18:45.651"></status>
</kw>
<msg timestamp="20151201 12:18:45.657" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:45.656" starttime="20151201 12:18:45.643"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:45.674" starttime="20151201 12:18:45.671"></status>
</kw>
<msg timestamp="20151201 12:18:45.676" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:45.675" starttime="20151201 12:18:45.658"></status>
</kw>
<msg timestamp="20151201 12:18:45.679" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:45.678" starttime="20151201 12:18:45.569"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:45.692" starttime="20151201 12:18:45.690"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:45.697" starttime="20151201 12:18:45.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:45.701" starttime="20151201 12:18:45.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20151201 12:18:45.717" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20151201 12:18:45.719" starttime="20151201 12:18:45.713"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:45.722" starttime="20151201 12:18:45.710"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:45.723" starttime="20151201 12:18:45.703"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:45.724" starttime="20151201 12:18:45.681"></status>
</kw>
<msg timestamp="20151201 12:18:45.728" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20151201 12:18:45.726" starttime="20151201 12:18:40.643"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20151201 12:18:45.737" level="INFO">${calling_party_msisdn} = 573190001001</msg>
<status status="PASS" endtime="20151201 12:18:45.736" starttime="20151201 12:18:45.730"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20151201 12:18:45.742" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:45.743" starttime="20151201 12:18:45.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:45.747" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20151201 12:18:45.753" starttime="20151201 12:18:45.745"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:45.757" starttime="20151201 12:18:45.755"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:45.761" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20151201 12:18:45.763" starttime="20151201 12:18:45.759"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC NoAnswer">
<doc>Runs a noAnswer non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-noanswer</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20151201 12:18:45.785" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20151201 12:18:45.784" starttime="20151201 12:18:45.783"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20151201 12:18:45.787" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20151201 12:18:45.787" starttime="20151201 12:18:45.785"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20151201 12:18:45.789" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20151201 12:18:45.789" starttime="20151201 12:18:45.788"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20151201 12:18:45.792" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs</msg>
<status status="PASS" endtime="20151201 12:18:45.792" starttime="20151201 12:18:45.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:45.794" starttime="20151201 12:18:45.793"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20151201 12:18:45.797" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:45.798" starttime="20151201 12:18:45.794"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:45.799" starttime="20151201 12:18:45.798"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20151201 12:18:45.802" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:45.802" starttime="20151201 12:18:45.800"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20151201 12:18:45.812" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:45.812" starttime="20151201 12:18:45.803"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:45.814" starttime="20151201 12:18:45.813"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20151201 12:18:45.816" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:45.817" starttime="20151201 12:18:45.814"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20151201 12:18:45.820" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:45.821" starttime="20151201 12:18:45.817"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:45.822" starttime="20151201 12:18:45.821"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20151201 12:18:45.831" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20151201 12:18:49.999" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151201 12:18:49.997" starttime="20151201 12:18:45.823"></status>
</kw>
<msg timestamp="20151201 12:18:50.004" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151201 12:18:50.002" starttime="20151201 12:18:45.776"></status>
</kw>
<msg timestamp="20151201 12:18:50.007" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151201 12:18:50.006" starttime="20151201 12:18:45.767"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:50.012" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20151201 12:18:50.013" starttime="20151201 12:18:50.010"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20151201 12:18:50.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:50.020" starttime="20151201 12:18:50.015"></status>
</kw>
<doc>Test will make the no answer MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>mTel_PPLIGHT_TB25_supported</tag>
<tag>mTel_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151201 12:18:50.022" starttime="20151201 12:18:40.618"></status>
</test>
<doc>Testing the prepaid the no answer MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151201 12:18:50.029" starttime="20151201 12:18:36.424"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151201 12:18:50.048" starttime="20151201 12:18:36.385"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration" id="s1-s4" name="MTC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration/MTC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s4-s1" name="MTC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20151201 12:18:50.274" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20151201 12:18:50.280" level="INFO">${date} = Tue Dec  1 12:18:50 CET 2015</msg>
<status status="PASS" endtime="20151201 12:18:50.279" starttime="20151201 12:18:50.269"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:50.284" level="INFO">Date and time: Tue Dec  1 12:18:50 CET 2015</msg>
<status status="PASS" endtime="20151201 12:18:50.285" starttime="20151201 12:18:50.282"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:50.289" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20151201 12:18:50.290" starttime="20151201 12:18:50.287"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:50.406" starttime="20151201 12:18:50.403"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:50.475" starttime="20151201 12:18:50.416"></status>
</kw>
<msg timestamp="20151201 12:18:50.477" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20151201 12:18:50.476" starttime="20151201 12:18:50.408"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:18:50.490" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:18:50.943" level="INFO">Read output: Last login: Tue Dec  1 11:18:37 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:18:50.943" starttime="20151201 12:18:50.487"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:50.944" starttime="20151201 12:18:50.479"></status>
</kw>
<msg timestamp="20151201 12:18:50.946" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20151201 12:18:50.945" starttime="20151201 12:18:50.391"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:18:50.950" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:18:50.950" starttime="20151201 12:18:50.946"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:18:50.952" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20151201 12:18:51.322" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:18:51.326" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 32150 </msg>
<status status="PASS" endtime="20151201 12:18:51.324" starttime="20151201 12:18:50.951"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:51.334" starttime="20151201 12:18:51.330"></status>
</kw>
<msg timestamp="20151201 12:18:51.336" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:18:51.337" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:18:51.335" starttime="20151201 12:18:51.327"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:51.348" starttime="20151201 12:18:51.345"></status>
</kw>
<msg timestamp="20151201 12:18:51.350" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:51.349" starttime="20151201 12:18:51.338"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20151201 12:18:51.355" level="INFO">${version_r} =  2.1.1 is running PID: 32150 </msg>
<status status="PASS" endtime="20151201 12:18:51.354" starttime="20151201 12:18:51.351"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:18:51.360" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20151201 12:18:51.359" starttime="20151201 12:18:51.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:51.363" starttime="20151201 12:18:51.361"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:51.376" starttime="20151201 12:18:51.374"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:18:51.383" starttime="20151201 12:18:51.378"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:51.385" starttime="20151201 12:18:51.365"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:51.397" starttime="20151201 12:18:51.395"></status>
</kw>
<msg timestamp="20151201 12:18:51.399" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20151201 12:18:51.399" starttime="20151201 12:18:51.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:51.403" starttime="20151201 12:18:51.401"></status>
</kw>
<msg timestamp="20151201 12:18:51.407" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20151201 12:18:51.408" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20151201 12:18:51.405" starttime="20151201 12:18:50.309"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:51.471" starttime="20151201 12:18:51.468"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:51.532" starttime="20151201 12:18:51.480"></status>
</kw>
<msg timestamp="20151201 12:18:51.535" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20151201 12:18:51.534" starttime="20151201 12:18:51.472"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:18:51.548" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:18:51.899" level="INFO">Read output: Last login: Tue Dec  1 11:18:38 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:18:51.901" starttime="20151201 12:18:51.545"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:51.903" starttime="20151201 12:18:51.536"></status>
</kw>
<msg timestamp="20151201 12:18:51.906" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20151201 12:18:51.905" starttime="20151201 12:18:51.458"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:18:51.917" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:18:51.916" starttime="20151201 12:18:51.908"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:18:51.921" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20151201 12:18:52.172" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:18:52.176" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20151201 12:18:52.174" starttime="20151201 12:18:51.918"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:52.184" starttime="20151201 12:18:52.180"></status>
</kw>
<msg timestamp="20151201 12:18:52.186" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:18:52.187" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:18:52.185" starttime="20151201 12:18:52.178"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:52.198" starttime="20151201 12:18:52.196"></status>
</kw>
<msg timestamp="20151201 12:18:52.200" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:52.199" starttime="20151201 12:18:52.188"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20151201 12:18:52.205" level="INFO">${version_r} =  5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20151201 12:18:52.204" starttime="20151201 12:18:52.201"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:18:52.209" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:18:52.209" starttime="20151201 12:18:52.206"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:52.213" starttime="20151201 12:18:52.211"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:52.226" starttime="20151201 12:18:52.223"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:18:52.230" starttime="20151201 12:18:52.227"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:52.235" starttime="20151201 12:18:52.215"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:52.246" starttime="20151201 12:18:52.243"></status>
</kw>
<msg timestamp="20151201 12:18:52.248" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:18:52.247" starttime="20151201 12:18:52.236"></status>
</kw>
<msg timestamp="20151201 12:18:52.252" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20151201 12:18:52.252" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:18:52.250" starttime="20151201 12:18:51.428"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:52.314" starttime="20151201 12:18:52.311"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:52.378" starttime="20151201 12:18:52.323"></status>
</kw>
<msg timestamp="20151201 12:18:52.381" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20151201 12:18:52.380" starttime="20151201 12:18:52.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:18:52.393" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:18:52.847" level="INFO">Read output: Last login: Tue Dec  1 11:18:39 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:18:52.849" starttime="20151201 12:18:52.391"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:52.851" starttime="20151201 12:18:52.382"></status>
</kw>
<msg timestamp="20151201 12:18:52.854" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20151201 12:18:52.853" starttime="20151201 12:18:52.301"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:18:52.864" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:18:52.864" starttime="20151201 12:18:52.856"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:18:52.869" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20151201 12:18:53.030" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:18:53.033" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:24582, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151201 12:18:53.031" starttime="20151201 12:18:52.866"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.041" starttime="20151201 12:18:53.038"></status>
</kw>
<msg timestamp="20151201 12:18:53.043" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:18:53.044" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:18:53.042" starttime="20151201 12:18:53.035"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.054" starttime="20151201 12:18:53.052"></status>
</kw>
<msg timestamp="20151201 12:18:53.056" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:53.055" starttime="20151201 12:18:53.045"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151201 12:18:53.060" level="INFO">${version_r} =  5.1.14.25039 is running (PID:24582, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20151201 12:18:53.059" starttime="20151201 12:18:53.057"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:18:53.065" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:18:53.064" starttime="20151201 12:18:53.062"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.068" starttime="20151201 12:18:53.066"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.080" starttime="20151201 12:18:53.077"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.087" starttime="20151201 12:18:53.081"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:53.088" starttime="20151201 12:18:53.070"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.099" starttime="20151201 12:18:53.096"></status>
</kw>
<msg timestamp="20151201 12:18:53.101" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:18:53.100" starttime="20151201 12:18:53.090"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.104" starttime="20151201 12:18:53.102"></status>
</kw>
<msg timestamp="20151201 12:18:53.108" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20151201 12:18:53.108" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:18:53.106" starttime="20151201 12:18:52.272"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.154" starttime="20151201 12:18:53.153"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.210" starttime="20151201 12:18:53.159"></status>
</kw>
<msg timestamp="20151201 12:18:53.212" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20151201 12:18:53.212" starttime="20151201 12:18:53.155"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.227" level="INFO">Logging into '10.105.170.159:22' as 'qa_automation'.</msg>
<msg timestamp="20151201 12:18:53.602" level="INFO">Read output: Last login: Tue Dec  1 11:18:40 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb07 ~]$</msg>
<status status="PASS" endtime="20151201 12:18:53.603" starttime="20151201 12:18:53.224"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:53.605" starttime="20151201 12:18:53.214"></status>
</kw>
<msg timestamp="20151201 12:18:53.607" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20151201 12:18:53.606" starttime="20151201 12:18:53.149"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20151201 12:18:53.617" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20151201 12:18:53.616" starttime="20151201 12:18:53.609"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20151201 12:18:53.620" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20151201 12:18:53.708" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151201 12:18:53.710" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20151201 12:18:53.709" starttime="20151201 12:18:53.618"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.718" starttime="20151201 12:18:53.714"></status>
</kw>
<msg timestamp="20151201 12:18:53.720" level="INFO">${status} = PASS</msg>
<msg timestamp="20151201 12:18:53.721" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20151201 12:18:53.719" starttime="20151201 12:18:53.712"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.731" starttime="20151201 12:18:53.729"></status>
</kw>
<msg timestamp="20151201 12:18:53.733" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:53.733" starttime="20151201 12:18:53.722"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20151201 12:18:53.739" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20151201 12:18:53.738" starttime="20151201 12:18:53.735"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20151201 12:18:53.743" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:18:53.743" starttime="20151201 12:18:53.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.747" starttime="20151201 12:18:53.745"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.759" starttime="20151201 12:18:53.756"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.763" starttime="20151201 12:18:53.760"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:53.768" starttime="20151201 12:18:53.749"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.779" starttime="20151201 12:18:53.777"></status>
</kw>
<msg timestamp="20151201 12:18:53.781" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:18:53.780" starttime="20151201 12:18:53.770"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.785" starttime="20151201 12:18:53.783"></status>
</kw>
<msg timestamp="20151201 12:18:53.788" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20151201 12:18:53.789" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:18:53.787" starttime="20151201 12:18:53.127"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:53.793" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20151201 12:18:53.795" starttime="20151201 12:18:53.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:53.799" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20151201 12:18:53.800" starttime="20151201 12:18:53.796"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:53.805" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20151201 12:18:53.806" starttime="20151201 12:18:53.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:53.810" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20151201 12:18:53.812" starttime="20151201 12:18:53.807"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20151201 12:18:53.816" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:53.816" starttime="20151201 12:18:53.813"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20151201 12:18:53.820" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:53.821" starttime="20151201 12:18:53.818"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20151201 12:18:53.825" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:53.826" starttime="20151201 12:18:53.823"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20151201 12:18:53.830" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:53.831" starttime="20151201 12:18:53.828"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.846" starttime="20151201 12:18:53.840"></status>
</kw>
<msg timestamp="20151201 12:18:53.848" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151201 12:18:53.847" starttime="20151201 12:18:53.833"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.853" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20151201 12:18:53.853" starttime="20151201 12:18:53.849"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:53.855" starttime="20151201 12:18:50.266"></status>
</kw>
<test id="s1-s4-s1-t1" name="Run MTC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.870" starttime="20151201 12:18:53.868"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20151201 12:18:53.875" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20151201 12:18:53.874" starttime="20151201 12:18:53.872"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.892" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20151201 12:18:53.893" starttime="20151201 12:18:53.890"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.895" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20151201 12:18:53.896" starttime="20151201 12:18:53.894"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.898" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20151201 12:18:53.898" starttime="20151201 12:18:53.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.900" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20151201 12:18:53.900" starttime="20151201 12:18:53.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.902" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20151201 12:18:53.902" starttime="20151201 12:18:53.901"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.904" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20151201 12:18:53.904" starttime="20151201 12:18:53.903"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.906" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20151201 12:18:53.906" starttime="20151201 12:18:53.905"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.908" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20151201 12:18:53.908" starttime="20151201 12:18:53.907"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.910" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20151201 12:18:53.911" starttime="20151201 12:18:53.909"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.912" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20151201 12:18:53.913" starttime="20151201 12:18:53.911"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.921" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:53.921" starttime="20151201 12:18:53.919"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:53.922" starttime="20151201 12:18:53.918"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.925" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:53.925" starttime="20151201 12:18:53.923"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:53.926" starttime="20151201 12:18:53.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.929" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:53.929" starttime="20151201 12:18:53.928"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:53.930" starttime="20151201 12:18:53.927"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:53.931" starttime="20151201 12:18:53.914"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20151201 12:18:53.933" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20151201 12:18:53.934" starttime="20151201 12:18:53.931"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.936" starttime="20151201 12:18:53.934"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.938" starttime="20151201 12:18:53.936"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.940" starttime="20151201 12:18:53.938"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.941" starttime="20151201 12:18:53.940"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.943" starttime="20151201 12:18:53.942"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.944" starttime="20151201 12:18:53.943"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.946" starttime="20151201 12:18:53.945"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.948" starttime="20151201 12:18:53.947"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.950" starttime="20151201 12:18:53.949"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.952" starttime="20151201 12:18:53.951"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.954" starttime="20151201 12:18:53.952"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:53.956" starttime="20151201 12:18:53.954"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20151201 12:18:53.958" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20151201 12:18:58.296" level="INFO">12:18:58,293 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151201 12:18:58.298" starttime="20151201 12:18:53.957"></status>
</kw>
<msg timestamp="20151201 12:18:58.303" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151201 12:18:58.304" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20151201 12:18:58.300" starttime="20151201 12:18:53.956"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20151201 12:18:58.319" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20151201 12:18:58.318" starttime="20151201 12:18:58.315"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151201 12:18:58.323" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20151201 12:18:58.323" starttime="20151201 12:18:58.320"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151201 12:18:58.328" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20151201 12:18:58.327" starttime="20151201 12:18:58.325"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20151201 12:18:58.335" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20151201 12:18:58.337" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20151201 12:18:58.338" starttime="20151201 12:18:58.332"></status>
</kw>
<msg timestamp="20151201 12:18:58.340" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151201 12:18:58.340" level="INFO">${return_log_entry} = 2015-12-01 12:18:58,293 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151201 12:18:58.339" starttime="20151201 12:18:58.330"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:58.353" starttime="20151201 12:18:58.350"></status>
</kw>
<msg timestamp="20151201 12:18:58.355" level="INFO">${return_log_entry} = 2015-12-01 12:18:58,293 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151201 12:18:58.354" starttime="20151201 12:18:58.342"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:58.366" starttime="20151201 12:18:58.363"></status>
</kw>
<msg timestamp="20151201 12:18:58.368" level="INFO">${return_log_entry} = 2015-12-01 12:18:58,293 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151201 12:18:58.367" starttime="20151201 12:18:58.356"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:58.379" starttime="20151201 12:18:58.376"></status>
</kw>
<msg timestamp="20151201 12:18:58.381" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:58.380" starttime="20151201 12:18:58.369"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:58.395" starttime="20151201 12:18:58.394"></status>
</kw>
<msg timestamp="20151201 12:18:58.396" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:58.396" starttime="20151201 12:18:58.383"></status>
</kw>
<msg timestamp="20151201 12:18:58.398" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151201 12:18:58.397" starttime="20151201 12:18:58.307"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:58.403" starttime="20151201 12:18:58.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:58.404" starttime="20151201 12:18:58.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:58.406" starttime="20151201 12:18:58.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20151201 12:18:58.413" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20151201 12:18:58.413" starttime="20151201 12:18:58.411"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:58.414" starttime="20151201 12:18:58.410"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:58.414" starttime="20151201 12:18:58.407"></status>
</kw>
<status status="PASS" endtime="20151201 12:18:58.415" starttime="20151201 12:18:58.399"></status>
</kw>
<msg timestamp="20151201 12:18:58.416" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20151201 12:18:58.416" starttime="20151201 12:18:53.879"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20151201 12:18:58.420" level="INFO">${calling_party_msisdn} = 573190001001</msg>
<status status="PASS" endtime="20151201 12:18:58.420" starttime="20151201 12:18:58.417"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20151201 12:18:58.422" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:18:58.423" starttime="20151201 12:18:58.421"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:58.424" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20151201 12:18:58.425" starttime="20151201 12:18:58.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:58.426" starttime="20151201 12:18:58.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:18:58.428" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20151201 12:18:58.428" starttime="20151201 12:18:58.427"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC 1s">
<doc>Runs a standard (i.e. non-roaming) MTC 1s session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20151201 12:18:58.444" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv</msg>
<status status="PASS" endtime="20151201 12:18:58.443" starttime="20151201 12:18:58.442"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20151201 12:18:58.446" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv</msg>
<status status="PASS" endtime="20151201 12:18:58.446" starttime="20151201 12:18:58.444"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20151201 12:18:58.448" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini</msg>
<status status="PASS" endtime="20151201 12:18:58.448" starttime="20151201 12:18:58.447"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20151201 12:18:58.450" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs</msg>
<status status="PASS" endtime="20151201 12:18:58.450" starttime="20151201 12:18:58.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:58.452" starttime="20151201 12:18:58.451"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20151201 12:18:58.455" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:58.455" starttime="20151201 12:18:58.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:58.457" starttime="20151201 12:18:58.456"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20151201 12:18:58.459" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:58.460" starttime="20151201 12:18:58.458"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20151201 12:18:58.463" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:58.463" starttime="20151201 12:18:58.460"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:59.008" starttime="20151201 12:18:58.464"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20151201 12:18:59.017" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:59.018" starttime="20151201 12:18:59.011"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20151201 12:18:59.026" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151201 12:18:59.027" starttime="20151201 12:18:59.020"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20151201 12:18:59.031" starttime="20151201 12:18:59.029"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20151201 12:18:59.048" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20151201 12:19:04.267" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151201 12:19:04.264" starttime="20151201 12:18:59.032"></status>
</kw>
<msg timestamp="20151201 12:19:04.271" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151201 12:19:04.269" starttime="20151201 12:18:58.437"></status>
</kw>
<msg timestamp="20151201 12:19:04.275" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151201 12:19:04.273" starttime="20151201 12:18:58.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151201 12:19:04.279" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20151201 12:19:04.280" starttime="20151201 12:19:04.277"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20151201 12:19:04.285" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151201 12:19:04.286" starttime="20151201 12:19:04.282"></status>
</kw>
<doc>Test will make a short MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151201 12:19:04.288" starttime="20151201 12:18:53.858"></status>
</test>
<doc>Testing the prepaid MTC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151201 12:19:04.295" starttime="20151201 12:18:50.096"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151201 12:19:04.315" starttime="20151201 12:18:50.060"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151201 12:19:04.342" starttime="20151201 12:17:51.259"></status>
</suite>
<statistics>
<total>
<stat pass="4" fail="0">Critical Tests</stat>
<stat pass="4" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="4" info="" doc="" combined="" fail="0" links="">matko.sanseovic</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">MTC_only</stat>
<stat pass="3" info="" doc="" combined="" fail="0" links="">mTel_PPLIGHT_TB25_supported</stat>
<stat pass="3" info="" doc="" combined="" fail="0" links="">mTel_supported</stat>
<stat pass="3" info="" doc="" combined="" fail="0" links="">SMARTSPACE_supported</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">TNZ_supported</stat>
<stat pass="3" info="" doc="" combined="" fail="0" links="">VIRGIN_COLUMBIA_supported</stat>
</tag>
<suite>
<stat pass="4" id="s1" fail="0" name="MTC">MTC</stat>
<stat pass="1" id="s1-s1" fail="0" name="MTC PREPAID-Abandon">MTC.MTC PREPAID-Abandon</stat>
<stat pass="1" id="s1-s1-s1" fail="0" name="MTC PREPAID-Abandon-robot-suite">MTC.MTC PREPAID-Abandon.MTC PREPAID-Abandon-robot-suite</stat>
<stat pass="1" id="s1-s2" fail="0" name="MTC PREPAID-Busy">MTC.MTC PREPAID-Busy</stat>
<stat pass="1" id="s1-s2-s1" fail="0" name="MTC PREPAID-Busy-robot-suite">MTC.MTC PREPAID-Busy.MTC PREPAID-Busy-robot-suite</stat>
<stat pass="1" id="s1-s3" fail="0" name="MTC PREPAID-NoAnswer">MTC.MTC PREPAID-NoAnswer</stat>
<stat pass="1" id="s1-s3-s1" fail="0" name="MTC PREPAID-NoAnswer-robot-suite">MTC.MTC PREPAID-NoAnswer.MTC PREPAID-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s4" fail="0" name="MTC PREPAID-ShortDuration">MTC.MTC PREPAID-ShortDuration</stat>
<stat pass="1" id="s1-s4-s1" fail="0" name="MTC PREPAID-ShortDuration-robot-suite">MTC.MTC PREPAID-ShortDuration.MTC PREPAID-ShortDuration-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
