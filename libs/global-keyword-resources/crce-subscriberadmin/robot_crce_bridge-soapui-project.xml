<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="Robotframework_CRCE-Bridge" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" id="0ddb6042-fcd4-4dc1-a07c-35f2cabc2f36" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:description>This SoapUI project is a generalized basis (layer) for accessing CRCE's subcriber related webservices to be integrated into RobotFramework test suites.
 
It defines 2 SoapUI test suites only for grouping purposes - but the contained TCs are intended to be executed separately (i.e. it makes no sense to execute a whole suite in one run) 

1) The suite HighLevelOps provides a small set of independant high level TCs that cover generalized szenarios and should help to easily create general purpose Robot suites with reduced control (i.e. low granularity of CRCE webservice operations)

2) The suite LowLevelOps exposes single subscriber related CRCE webservice operations in a separate fully parametrized TC to provide the Robot testsuite with detailed control (i.e. high granularity of CRCE operations) over all aspects of the CRCE webservices.

To parametrize the project's webservice endpoints it owns "Custom Properties" (crceHost, crcePort and crceWebservicesBasePath) that have to be configured before any TC can succesfully be run.

Simmilarly each of the TCs owns a set of properties that have to be configured before execution. Unfortunately Robotframework can access only properties on project level, not on TC level. 
Therefore all TC properties are exposed as project properties. The property names are prefixed by the name of the TC it belongs to.

All TCs in this project have disabled the OPTION "Fail TestCase if it has failed TestSteps" so that each test step can be verified with a Groovy script (cancel_on_failed_step_...)..
This Groovy script sets the TCs output.result property and programatically cancel the TC in case of an test step error.
Unfortunately Robotframework can only set but NOT retrieve properties and thus the output.result property is invisibile for Robot.  

After a TC's execution the Robot test suite can query that output.result property:
XxxLevelOps.xxx.output.resultCode=OK indicates successfull execution and any other value describes a failure.
</con:description><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="SubscriberPeerSoapBinding" type="wsdl" bindingName="{http://services.profiler.negret.tryge.com/}SubscriberPeerSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://10.105.140.125:8080/profiler/subscriber?wsdl" id="42a5b091-6353-4f1a-9f08-17f0268ca602" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://10.105.140.125:8080/profiler/subscriber?wsdl"><con:part><con:url>http://10.105.140.125:8080/profiler/subscriber?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="SubscriberPeer" targetNamespace="http://services.profiler.negret.tryge.com/" xmlns:ns1="http://schemas.xmlsoap.org/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://services.profiler.negret.tryge.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://services.profiler.negret.tryge.com/" xmlns:ns0="http://commons.api.plugins.profiler.inewcs.com" xmlns:ns1="http://services.profiler.negret.tryge.com">
      <xsd:import namespace="http://commons.api.plugins.profiler.inewcs.com"/>
      <xsd:import namespace="http://services.profiler.negret.tryge.com"/>
      <xsd:complexType name="string2SubscriberHeaderMap">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="entry">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="key" type="xsd:string"/>
                <xsd:element minOccurs="0" name="value" type="ns0:SubscriberHeader"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfString">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="string" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setExternalProperty" type="tns:setExternalProperty"/>
      <xsd:complexType name="setExternalProperty">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:SubscriberPropertyChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setExternalPropertyResponse" type="tns:setExternalPropertyResponse"/>
      <xsd:complexType name="setExternalPropertyResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setExpiryDate" type="tns:setExpiryDate"/>
      <xsd:complexType name="setExpiryDate">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:ExpiryDateChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setExpiryDateResponse" type="tns:setExpiryDateResponse"/>
      <xsd:complexType name="setExpiryDateResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setBillingDate" type="tns:setBillingDate"/>
      <xsd:complexType name="setBillingDate">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:BillingDateChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setBillingDateResponse" type="tns:setBillingDateResponse"/>
      <xsd:complexType name="setBillingDateResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeLanguageRequest" type="tns:changeLanguageRequest"/>
      <xsd:complexType name="changeLanguageRequest">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element name="arg1" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg2" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeLanguageRequestResponse" type="tns:changeLanguageRequestResponse"/>
      <xsd:complexType name="changeLanguageRequestResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfileByExternalId" type="tns:getSubscriberProfileByExternalId"/>
      <xsd:complexType name="getSubscriberProfileByExternalId">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfileByExternalIdResponse" type="tns:getSubscriberProfileByExternalIdResponse"/>
      <xsd:complexType name="getSubscriberProfileByExternalIdResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:SubscriberProfileType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfileByImsi" type="tns:getSubscriberProfileByImsi"/>
      <xsd:complexType name="getSubscriberProfileByImsi">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfileByImsiResponse" type="tns:getSubscriberProfileByImsiResponse"/>
      <xsd:complexType name="getSubscriberProfileByImsiResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:SubscriberProfileType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="addFlag" type="tns:addFlag"/>
      <xsd:complexType name="addFlag">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="addFlagResponse" type="tns:addFlagResponse"/>
      <xsd:complexType name="addFlagResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfile" type="tns:getSubscriberProfile"/>
      <xsd:complexType name="getSubscriberProfile">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfileResponse" type="tns:getSubscriberProfileResponse"/>
      <xsd:complexType name="getSubscriberProfileResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:SubscriberProfileType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeExternalId" type="tns:changeExternalId"/>
      <xsd:complexType name="changeExternalId">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeExternalIdResponse" type="tns:changeExternalIdResponse"/>
      <xsd:complexType name="changeExternalIdResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setBillingId" type="tns:setBillingId"/>
      <xsd:complexType name="setBillingId">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:BillingIdChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setBillingIdResponse" type="tns:setBillingIdResponse"/>
      <xsd:complexType name="setBillingIdResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeNotification" type="tns:changeNotification"/>
      <xsd:complexType name="changeNotification">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:NotificationChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeNotificationResponse" type="tns:changeNotificationResponse"/>
      <xsd:complexType name="changeNotificationResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="unblockSubscriber" type="tns:unblockSubscriber"/>
      <xsd:complexType name="unblockSubscriber">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="arg2" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="arg3" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="unblockSubscriberResponse" type="tns:unblockSubscriberResponse"/>
      <xsd:complexType name="unblockSubscriberResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="removeExternalProperty" type="tns:removeExternalProperty"/>
      <xsd:complexType name="removeExternalProperty">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:SubscriberPropertyRemovalRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="removeExternalPropertyResponse" type="tns:removeExternalPropertyResponse"/>
      <xsd:complexType name="removeExternalPropertyResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="removeFlag" type="tns:removeFlag"/>
      <xsd:complexType name="removeFlag">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="removeFlagResponse" type="tns:removeFlagResponse"/>
      <xsd:complexType name="removeFlagResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeAdditionalStateInfo" type="tns:changeAdditionalStateInfo"/>
      <xsd:complexType name="changeAdditionalStateInfo">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="arg2" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeAdditionalStateInfoResponse" type="tns:changeAdditionalStateInfoResponse"/>
      <xsd:complexType name="changeAdditionalStateInfoResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfileById" type="tns:getSubscriberProfileById"/>
      <xsd:complexType name="getSubscriberProfileById">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfileByIdResponse" type="tns:getSubscriberProfileByIdResponse"/>
      <xsd:complexType name="getSubscriberProfileByIdResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:SubscriberProfileType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="activateSubscriber" type="tns:activateSubscriber"/>
      <xsd:complexType name="activateSubscriber">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="activateSubscriberResponse" type="tns:activateSubscriberResponse"/>
      <xsd:complexType name="activateSubscriberResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeChargingMode" type="tns:changeChargingMode"/>
      <xsd:complexType name="changeChargingMode">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="arg2" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeChargingModeResponse" type="tns:changeChargingModeResponse"/>
      <xsd:complexType name="changeChargingModeResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="blockSubscriber" type="tns:blockSubscriber"/>
      <xsd:complexType name="blockSubscriber">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="arg2" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="arg3" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="blockSubscriberResponse" type="tns:blockSubscriberResponse"/>
      <xsd:complexType name="blockSubscriberResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfiles" type="tns:getSubscriberProfiles"/>
      <xsd:complexType name="getSubscriberProfiles">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:SubscriberBulkLookupRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfilesResponse" type="tns:getSubscriberProfilesResponse"/>
      <xsd:complexType name="getSubscriberProfilesResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:SubscriberBulkLookupResponse"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setAccountLimit" type="tns:setAccountLimit"/>
      <xsd:complexType name="setAccountLimit">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:AccountLimitChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setAccountLimitResponse" type="tns:setAccountLimitResponse"/>
      <xsd:complexType name="setAccountLimitResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://util.java" xmlns:tns="http://util.java">
      <xsd:complexType abstract="true" name="TimeZone">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="DSTSavings" type="xsd:int"/>
          <xsd:element minOccurs="0" name="ID" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="displayName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="rawOffset" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://services.profiler.negret.tryge.com" xmlns:ns0="http://commons.api.plugins.profiler.inewcs.com" xmlns:ns1="http://services.profiler.negret.tryge.com/" xmlns:tns="http://services.profiler.negret.tryge.com">
      <xsd:import namespace="http://commons.api.plugins.profiler.inewcs.com"/>
      <xsd:import namespace="http://services.profiler.negret.tryge.com/"/>
      <xsd:complexType abstract="true" name="TariffType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="category" nillable="true" type="tns:TariffCategory"/>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="default" type="xsd:boolean"/>
          <xsd:element minOccurs="0" name="id" type="xsd:long"/>
          <xsd:element minOccurs="0" name="includedQuota" nillable="true" type="tns:ArrayOfQuotaType"/>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="providerId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="NotificationCategory">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="CallChargeNotification"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="QuotaType">
        <xsd:complexContent>
          <xsd:extension base="tns:BaseQuotaType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="rolloverEnabled" type="xsd:boolean"/>
              <xsd:element minOccurs="0" name="unitId" type="xsd:long"/>
              <xsd:element minOccurs="0" name="unitName" nillable="true" type="xsd:string"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:simpleType name="TariffCycle">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="WEEKLY"/>
          <xsd:enumeration value="MONTHLY"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ArrayOfFeatureActivationType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="FeatureActivationType" nillable="true" type="tns:FeatureActivationType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SubscriberBulkLookupRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="subscribers" nillable="true" type="ns0:ArrayOfSubscriberMatcher"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="InvalidArguments"/>
          <xsd:enumeration value="InvalidPlanDefinition"/>
          <xsd:enumeration value="InvalidState"/>
          <xsd:enumeration value="InsufficientFunds"/>
          <xsd:enumeration value="PlanAlreadyActivated"/>
          <xsd:enumeration value="UnknownSubscriber"/>
          <xsd:enumeration value="UnknownCounter"/>
          <xsd:enumeration value="UnknownTariff"/>
          <xsd:enumeration value="UnknownProvider"/>
          <xsd:enumeration value="UnknownLocation"/>
          <xsd:enumeration value="DbError"/>
          <xsd:enumeration value="UnknownError"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="SubscriberProfileType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="accountLimit" type="xsd:long"/>
          <xsd:element minOccurs="0" name="activationDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="additionalStateInfo" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="billingId" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="callChargeNotification" nillable="true" type="tns:SubscriberNotificationType"/>
          <xsd:element minOccurs="0" name="chargingMode" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="expiryDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="externalId" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="externalProperties" nillable="true" type="tns:ArrayOfSubscriberPropertyType"/>
          <xsd:element minOccurs="0" name="featureActivations" nillable="true" type="tns:ArrayOfFeatureActivationType"/>
          <xsd:element minOccurs="0" name="flags" nillable="true" type="ns1:ArrayOfString"/>
          <xsd:element minOccurs="0" name="groupActivationDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="groupExpiryDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="groupId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="groupMembershipFee" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="id" type="xsd:long"/>
          <xsd:element minOccurs="0" name="imei" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="imsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="installationDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="language" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="languageId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="msisdn" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="nextGroupId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="nextTariffId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="nextTariffName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="nextTariffSwitch" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="prepaidMinimumRevenue" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="previousGroupId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="previousType" nillable="true" type="tns:SubscriberType"/>
          <xsd:element minOccurs="0" name="previousTypeSwitch" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="providerId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="simType" nillable="true" type="ns0:SimType"/>
          <xsd:element minOccurs="0" name="state" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="tariffId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="tariffName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="type" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffIntervalPeriod">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPeriod">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="interval" type="xsd:int"/>
              <xsd:element minOccurs="0" name="intervalUnit" nillable="true" type="tns:TariffTimeInterval"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="Charge">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="amount" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="currencyUnitId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyUnitName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="relation" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="SubscriberNotificationType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="NONE"/>
          <xsd:enumeration value="USSD"/>
          <xsd:enumeration value="SMS"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="NotificationChangeRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="category" nillable="true" type="tns:NotificationCategory"/>
          <xsd:element minOccurs="0" name="serviceType" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="type" nillable="true" type="tns:NotificationType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SelectableQuotaType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="bonusMessage" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="bonusThresholdAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="increment" nillable="true" type="xsd:int"/>
          <xsd:element minOccurs="0" name="maxAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="minAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="rangeMaxAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="rangeMinAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unitRelation" nillable="true" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffPlanType">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="charges" nillable="true" type="tns:ArrayOfChargeExt"/>
              <xsd:element minOccurs="0" name="lastRenewalDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="nextRenewalDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="periodicCharge" nillable="true" type="tns:Charge"/>
              <xsd:element minOccurs="0" name="periodicCycle" nillable="true" type="tns:TariffCycle"/>
              <xsd:element minOccurs="0" name="renewalPeriod" nillable="true" type="tns:TariffPeriod"/>
              <xsd:element minOccurs="0" name="status" nillable="true" type="tns:TariffPlanStatus"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="FeatureActivationType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="end" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="featureId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="start" type="xsd:dateTime"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SubscriberBulkLookupResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="subscribers" nillable="true" type="ns1:string2SubscriberHeaderMap"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="TariffPeriodType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="INTERVAL"/>
          <xsd:enumeration value="CALENDAR"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="TariffPlanStatus">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="ACTIVE"/>
          <xsd:enumeration value="ON_HOLD"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="TariffTimeInterval">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DAYS"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="BaseQuotaType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="amount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unitRelation" nillable="true" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AccountLimitChangeRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="accountLimit" type="xsd:long"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfSelectableQuotaType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="SelectableQuotaType" nillable="true" type="tns:SelectableQuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfSubscriberPropertyType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="SubscriberPropertyType" nillable="true" type="tns:SubscriberPropertyType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="LanguageType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="code" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="id" type="xsd:long"/>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfQuotaType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="QuotaType" nillable="true" type="tns:QuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffCalendarPeriod">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPeriod">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="dayOf" type="xsd:int"/>
              <xsd:element minOccurs="0" name="periodicity" nillable="true" type="tns:TariffCycle"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="SubscriberPropertyRemovalRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="propertyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BillingIdChangeRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="billingId" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SubscriberPropertyChangeRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="propertyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="propertyValue" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="NotificationType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="USSD"/>
          <xsd:enumeration value="SMS"/>
          <xsd:enumeration value="EMAIL"/>
          <xsd:enumeration value="NONE"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ExpiryDateChangeRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="expiryDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="serviceType" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType abstract="true" name="TariffPeriod">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="periodType" nillable="true" type="tns:TariffPeriodType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfChargeExt">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="ChargeExt" nillable="true" type="tns:ChargeExt"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="SubscriberType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="PREPAID"/>
          <xsd:enumeration value="POSTPAID"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ActionResultType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ChargeExt">
        <xsd:complexContent>
          <xsd:extension base="tns:Charge">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="preferred" type="xsd:boolean"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="BillingDateChangeRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="billingDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SubscriberPropertyType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="value" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="UserDefinablePlanType">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPlanType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="minimumCharge" nillable="true" type="tns:Charge"/>
              <xsd:element minOccurs="0" name="selectableQuotas" nillable="true" type="tns:ArrayOfSelectableQuotaType"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:simpleType name="TariffCategory">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DEFAULT_TARIFF"/>
          <xsd:enumeration value="TARIFF_PLAN"/>
          <xsd:enumeration value="DEFINABLE_TARIFF_PLAN"/>
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://commons.api.plugins.profiler.inewcs.com" xmlns:ns0="http://services.profiler.negret.tryge.com" xmlns:ns1="http://util.java" xmlns:tns="http://commons.api.plugins.profiler.inewcs.com">
      <xsd:import namespace="http://services.profiler.negret.tryge.com"/>
      <xsd:import namespace="http://util.java"/>
      <xsd:complexType name="SubscriberHeader">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="imsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="msisdn" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="preferredLanguage" nillable="true" type="ns0:LanguageType"/>
          <xsd:element minOccurs="0" name="providerId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="simType" nillable="true" type="tns:SimType"/>
          <xsd:element minOccurs="0" name="subscriberId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="subscriberState" nillable="true" type="tns:SubscriberState"/>
          <xsd:element minOccurs="0" name="subscriberType" nillable="true" type="tns:SubscriberType"/>
          <xsd:element minOccurs="0" name="timeZone" nillable="true" type="ns1:TimeZone"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SubscriberMatcher">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="imsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="msisdn" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" nillable="true" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="SubscriberState">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="INSTALLED"/>
          <xsd:enumeration value="ACTIVE"/>
          <xsd:enumeration value="BLOCKED"/>
          <xsd:enumeration value="INACTIVE"/>
          <xsd:enumeration value="EXPIRED"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ArrayOfSubscriberMatcher">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="SubscriberMatcher" nillable="true" type="tns:SubscriberMatcher"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="SimType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="STANDARD"/>
          <xsd:enumeration value="DATAONLY"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="SubscriberType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="PREPAID"/>
          <xsd:enumeration value="POSTPAID"/>
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="setBillingDateResponse">
    <wsdl:part element="tns:setBillingDateResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setExpiryDate">
    <wsdl:part element="tns:setExpiryDate" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSubscriber">
    <wsdl:part element="tns:activateSubscriber" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="unblockSubscriberResponse">
    <wsdl:part element="tns:unblockSubscriberResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="blockSubscriberResponse">
    <wsdl:part element="tns:blockSubscriberResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeExternalPropertyResponse">
    <wsdl:part element="tns:removeExternalPropertyResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfile">
    <wsdl:part element="tns:getSubscriberProfile" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfileByImsi">
    <wsdl:part element="tns:getSubscriberProfileByImsi" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="addFlagResponse">
    <wsdl:part element="tns:addFlagResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeExternalIdResponse">
    <wsdl:part element="tns:changeExternalIdResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeAdditionalStateInfoResponse">
    <wsdl:part element="tns:changeAdditionalStateInfoResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setExternalPropertyResponse">
    <wsdl:part element="tns:setExternalPropertyResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeLanguageRequestResponse">
    <wsdl:part element="tns:changeLanguageRequestResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfilesResponse">
    <wsdl:part element="tns:getSubscriberProfilesResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfileByExternalIdResponse">
    <wsdl:part element="tns:getSubscriberProfileByExternalIdResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setBillingId">
    <wsdl:part element="tns:setBillingId" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfileByIdResponse">
    <wsdl:part element="tns:getSubscriberProfileByIdResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfiles">
    <wsdl:part element="tns:getSubscriberProfiles" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSubscriberResponse">
    <wsdl:part element="tns:activateSubscriberResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeAdditionalStateInfo">
    <wsdl:part element="tns:changeAdditionalStateInfo" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setExpiryDateResponse">
    <wsdl:part element="tns:setExpiryDateResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setExternalProperty">
    <wsdl:part element="tns:setExternalProperty" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfileResponse">
    <wsdl:part element="tns:getSubscriberProfileResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeExternalProperty">
    <wsdl:part element="tns:removeExternalProperty" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfileByExternalId">
    <wsdl:part element="tns:getSubscriberProfileByExternalId" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setBillingDate">
    <wsdl:part element="tns:setBillingDate" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setAccountLimitResponse">
    <wsdl:part element="tns:setAccountLimitResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeChargingModeResponse">
    <wsdl:part element="tns:changeChargingModeResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeChargingMode">
    <wsdl:part element="tns:changeChargingMode" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeNotification">
    <wsdl:part element="tns:changeNotification" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfileById">
    <wsdl:part element="tns:getSubscriberProfileById" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeNotificationResponse">
    <wsdl:part element="tns:changeNotificationResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeFlagResponse">
    <wsdl:part element="tns:removeFlagResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeLanguageRequest">
    <wsdl:part element="tns:changeLanguageRequest" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setBillingIdResponse">
    <wsdl:part element="tns:setBillingIdResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="blockSubscriber">
    <wsdl:part element="tns:blockSubscriber" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="addFlag">
    <wsdl:part element="tns:addFlag" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeExternalId">
    <wsdl:part element="tns:changeExternalId" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setAccountLimit">
    <wsdl:part element="tns:setAccountLimit" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfileByImsiResponse">
    <wsdl:part element="tns:getSubscriberProfileByImsiResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeFlag">
    <wsdl:part element="tns:removeFlag" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="unblockSubscriber">
    <wsdl:part element="tns:unblockSubscriber" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="SubscriberPeerPortType">
    <wsdl:operation name="setExternalProperty">
      <wsdl:input message="tns:setExternalProperty" name="setExternalProperty"></wsdl:input>
      <wsdl:output message="tns:setExternalPropertyResponse" name="setExternalPropertyResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setExpiryDate">
      <wsdl:input message="tns:setExpiryDate" name="setExpiryDate"></wsdl:input>
      <wsdl:output message="tns:setExpiryDateResponse" name="setExpiryDateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setBillingDate">
      <wsdl:input message="tns:setBillingDate" name="setBillingDate"></wsdl:input>
      <wsdl:output message="tns:setBillingDateResponse" name="setBillingDateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeLanguageRequest">
      <wsdl:input message="tns:changeLanguageRequest" name="changeLanguageRequest"></wsdl:input>
      <wsdl:output message="tns:changeLanguageRequestResponse" name="changeLanguageRequestResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfileByExternalId">
      <wsdl:input message="tns:getSubscriberProfileByExternalId" name="getSubscriberProfileByExternalId"></wsdl:input>
      <wsdl:output message="tns:getSubscriberProfileByExternalIdResponse" name="getSubscriberProfileByExternalIdResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfileByImsi">
      <wsdl:input message="tns:getSubscriberProfileByImsi" name="getSubscriberProfileByImsi"></wsdl:input>
      <wsdl:output message="tns:getSubscriberProfileByImsiResponse" name="getSubscriberProfileByImsiResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addFlag">
      <wsdl:input message="tns:addFlag" name="addFlag"></wsdl:input>
      <wsdl:output message="tns:addFlagResponse" name="addFlagResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfile">
      <wsdl:input message="tns:getSubscriberProfile" name="getSubscriberProfile"></wsdl:input>
      <wsdl:output message="tns:getSubscriberProfileResponse" name="getSubscriberProfileResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeExternalId">
      <wsdl:input message="tns:changeExternalId" name="changeExternalId"></wsdl:input>
      <wsdl:output message="tns:changeExternalIdResponse" name="changeExternalIdResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setBillingId">
      <wsdl:input message="tns:setBillingId" name="setBillingId"></wsdl:input>
      <wsdl:output message="tns:setBillingIdResponse" name="setBillingIdResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeNotification">
      <wsdl:input message="tns:changeNotification" name="changeNotification"></wsdl:input>
      <wsdl:output message="tns:changeNotificationResponse" name="changeNotificationResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="unblockSubscriber">
      <wsdl:input message="tns:unblockSubscriber" name="unblockSubscriber"></wsdl:input>
      <wsdl:output message="tns:unblockSubscriberResponse" name="unblockSubscriberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="removeExternalProperty">
      <wsdl:input message="tns:removeExternalProperty" name="removeExternalProperty"></wsdl:input>
      <wsdl:output message="tns:removeExternalPropertyResponse" name="removeExternalPropertyResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="removeFlag">
      <wsdl:input message="tns:removeFlag" name="removeFlag"></wsdl:input>
      <wsdl:output message="tns:removeFlagResponse" name="removeFlagResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeAdditionalStateInfo">
      <wsdl:input message="tns:changeAdditionalStateInfo" name="changeAdditionalStateInfo"></wsdl:input>
      <wsdl:output message="tns:changeAdditionalStateInfoResponse" name="changeAdditionalStateInfoResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfileById">
      <wsdl:input message="tns:getSubscriberProfileById" name="getSubscriberProfileById"></wsdl:input>
      <wsdl:output message="tns:getSubscriberProfileByIdResponse" name="getSubscriberProfileByIdResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriber">
      <wsdl:input message="tns:activateSubscriber" name="activateSubscriber"></wsdl:input>
      <wsdl:output message="tns:activateSubscriberResponse" name="activateSubscriberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeChargingMode">
      <wsdl:input message="tns:changeChargingMode" name="changeChargingMode"></wsdl:input>
      <wsdl:output message="tns:changeChargingModeResponse" name="changeChargingModeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="blockSubscriber">
      <wsdl:input message="tns:blockSubscriber" name="blockSubscriber"></wsdl:input>
      <wsdl:output message="tns:blockSubscriberResponse" name="blockSubscriberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfiles">
      <wsdl:input message="tns:getSubscriberProfiles" name="getSubscriberProfiles"></wsdl:input>
      <wsdl:output message="tns:getSubscriberProfilesResponse" name="getSubscriberProfilesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setAccountLimit">
      <wsdl:input message="tns:setAccountLimit" name="setAccountLimit"></wsdl:input>
      <wsdl:output message="tns:setAccountLimitResponse" name="setAccountLimitResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="SubscriberPeerSoapBinding" type="tns:SubscriberPeerPortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="setBillingDate">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="setBillingDate">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="setBillingDateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setExpiryDate">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="setExpiryDate">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="setExpiryDateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setExternalProperty">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="setExternalProperty">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="setExternalPropertyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeLanguageRequest">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeLanguageRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeLanguageRequestResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfileByExternalId">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSubscriberProfileByExternalId">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSubscriberProfileByExternalIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addFlag">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="addFlag">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="addFlagResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfileByImsi">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSubscriberProfileByImsi">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSubscriberProfileByImsiResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfile">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSubscriberProfile">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSubscriberProfileResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeExternalId">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeExternalId">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeExternalIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setBillingId">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="setBillingId">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="setBillingIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeNotification">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeNotification">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeNotificationResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="removeExternalProperty">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="removeExternalProperty">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="removeExternalPropertyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="unblockSubscriber">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="unblockSubscriber">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="unblockSubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="removeFlag">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="removeFlag">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="removeFlagResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeAdditionalStateInfo">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeAdditionalStateInfo">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeAdditionalStateInfoResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfileById">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSubscriberProfileById">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSubscriberProfileByIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriber">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="activateSubscriber">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="activateSubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="blockSubscriber">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="blockSubscriber">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="blockSubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeChargingMode">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeChargingMode">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeChargingModeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfiles">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSubscriberProfiles">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSubscriberProfilesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setAccountLimit">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="setAccountLimit">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="setAccountLimitResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="SubscriberPeer">
    <wsdl:port binding="tns:SubscriberPeerSoapBinding" name="SubscriberPeerPort">
      <soap:address location="http://10.105.140.125:8080/profiler/subscriber"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="activateSubscriber" bindingOperationName="activateSubscriber" type="Request-Response" outputName="activateSubscriberResponse" inputName="activateSubscriber" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="fabd1020-6e54-4ec9-b46b-11a1d699badb"><con:settings/><con:call name="Request 1" id="50d2d631-6913-4a0f-9b26-6c362714a162"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:activateSubscriber>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
      </ser:activateSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/activateSubscriber"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="addFlag" bindingOperationName="addFlag" type="Request-Response" outputName="addFlagResponse" inputName="addFlag" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="f3f4a8ee-fb98-439a-81af-13184fff646d"><con:settings/><con:call name="Request 1" id="c853f1d3-11ec-45dc-9430-90d3cbbaa064"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:addFlag>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
      </ser:addFlag>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/addFlag"/></con:call></con:operation><con:operation isOneWay="false" action="" name="blockSubscriber" bindingOperationName="blockSubscriber" type="Request-Response" outputName="blockSubscriberResponse" inputName="blockSubscriber" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="299e03bb-96c5-40aa-ad5e-0eb4314e4fbb"><con:settings/><con:call name="Request 1" id="8d5977ea-c804-4106-a06e-cdbf31b6848f"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:blockSubscriber>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
         <!--Optional:-->
         <ser:arg2>?</ser:arg2>
         <!--Optional:-->
         <ser:arg3>?</ser:arg3>
      </ser:blockSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/blockSubscriber"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeAdditionalStateInfo" bindingOperationName="changeAdditionalStateInfo" type="Request-Response" outputName="changeAdditionalStateInfoResponse" inputName="changeAdditionalStateInfo" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="2107be6d-126b-4369-8fdf-42540acfec9f"><con:settings/><con:call name="Request 1" id="4da206ed-caab-4fe8-853d-c1f65406a1d0"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeAdditionalStateInfo>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
         <!--Optional:-->
         <ser:arg2>?</ser:arg2>
      </ser:changeAdditionalStateInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/changeAdditionalStateInfo"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeChargingMode" bindingOperationName="changeChargingMode" type="Request-Response" outputName="changeChargingModeResponse" inputName="changeChargingMode" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="842d9dbc-e8dc-44ac-8b37-eec85cfe9516"><con:settings/><con:call name="Request 1" id="2e346813-0a88-4524-b4ef-f4dd3fac4aa5"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeChargingMode>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
         <!--Optional:-->
         <ser:arg2>?</ser:arg2>
      </ser:changeChargingMode>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/changeChargingMode"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeExternalId" bindingOperationName="changeExternalId" type="Request-Response" outputName="changeExternalIdResponse" inputName="changeExternalId" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="f5f5399c-f021-4598-85d8-eb2f28784bab"><con:settings/><con:call name="Request 1" id="b0a297d1-acd4-4ee9-a9d2-2998f2409e1b"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeExternalId>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
      </ser:changeExternalId>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/changeExternalId"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeLanguageRequest" bindingOperationName="changeLanguageRequest" type="Request-Response" outputName="changeLanguageRequestResponse" inputName="changeLanguageRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="72cebef0-bfd6-4553-b24e-a289423e86c8"><con:settings/><con:call name="Request 1" id="3af8dd27-b8c6-4519-aaa4-107b7984394f"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeLanguageRequest>
         <ser:arg0>?</ser:arg0>
         <ser:arg1>?</ser:arg1>
         <!--Optional:-->
         <ser:arg2>?</ser:arg2>
      </ser:changeLanguageRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/changeLanguageRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeNotification" bindingOperationName="changeNotification" type="Request-Response" outputName="changeNotificationResponse" inputName="changeNotification" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="522c29cf-9d04-41df-814b-9f64f0b051d1"><con:settings/><con:call name="Request 1" id="45ac1fc8-af1a-441c-ac9f-d1f9b8d3ad64"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeNotification>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:category>?</ser1:category>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
            <!--Optional:-->
            <ser1:type>?</ser1:type>
         </ser:arg0>
      </ser:changeNotification>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/changeNotification"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSubscriberProfile" bindingOperationName="getSubscriberProfile" type="Request-Response" outputName="getSubscriberProfileResponse" inputName="getSubscriberProfile" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="d6ce0db1-40cc-4e69-b67f-5145bfdc08f7"><con:settings/><con:call name="Request 1" id="9c24dbf4-7861-4268-96ae-626d5afbaaef"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfile>
         <!--Optional:-->
         <ser:arg0>?</ser:arg0>
      </ser:getSubscriberProfile>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/getSubscriberProfile"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSubscriberProfileByExternalId" bindingOperationName="getSubscriberProfileByExternalId" type="Request-Response" outputName="getSubscriberProfileByExternalIdResponse" inputName="getSubscriberProfileByExternalId" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="de0024e4-4ebe-4254-b7cb-7865ebced766"><con:settings/><con:call name="Request 1" id="78565cd7-1d64-4cd3-b687-426ac7adddd0"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfileByExternalId>
         <!--Optional:-->
         <ser:arg0>?</ser:arg0>
      </ser:getSubscriberProfileByExternalId>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/getSubscriberProfileByExternalId"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSubscriberProfileById" bindingOperationName="getSubscriberProfileById" type="Request-Response" outputName="getSubscriberProfileByIdResponse" inputName="getSubscriberProfileById" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="50f881d0-02dc-41dd-8be2-6afc0277d732"><con:settings/><con:call name="Request 1" id="05c75729-2e0a-447e-8be5-a30695c531a4"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfileById>
         <ser:arg0>?</ser:arg0>
      </ser:getSubscriberProfileById>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/getSubscriberProfileById"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSubscriberProfileByImsi" bindingOperationName="getSubscriberProfileByImsi" type="Request-Response" outputName="getSubscriberProfileByImsiResponse" inputName="getSubscriberProfileByImsi" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="b40c9b47-7ffc-4f5f-8faf-3c44c4775797"><con:settings/><con:call name="Request 1" id="965a17c6-194e-4043-ac0d-1e10d888d5cd"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfileByImsi>
         <!--Optional:-->
         <ser:arg0>?</ser:arg0>
      </ser:getSubscriberProfileByImsi>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/getSubscriberProfileByImsi"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSubscriberProfiles" bindingOperationName="getSubscriberProfiles" type="Request-Response" outputName="getSubscriberProfilesResponse" inputName="getSubscriberProfiles" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="4a6e2aeb-bac0-4561-b061-c0b6fffda2b3"><con:settings/><con:call name="Request 1" id="2662c627-dbe6-48a4-8f11-d7ebcbe114f4"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com" xmlns:com="http://commons.api.plugins.profiler.inewcs.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfiles>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:subscribers>
               <!--Zero or more repetitions:-->
               <com:SubscriberMatcher>
                  <!--Optional:-->
                  <com:imsi>?</com:imsi>
                  <!--Optional:-->
                  <com:msisdn>?</com:msisdn>
                  <!--Optional:-->
                  <com:subscriberId>?</com:subscriberId>
               </com:SubscriberMatcher>
            </ser1:subscribers>
         </ser:arg0>
      </ser:getSubscriberProfiles>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/getSubscriberProfiles"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="removeExternalProperty" bindingOperationName="removeExternalProperty" type="Request-Response" outputName="removeExternalPropertyResponse" inputName="removeExternalProperty" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="c6131200-1bae-4304-951a-b41dd7c4177a"><con:settings/><con:call name="Request 1" id="e3ed6d19-bf77-4b37-be37-9614358c625b"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:removeExternalProperty>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:propertyName>?</ser1:propertyName>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
         </ser:arg0>
      </ser:removeExternalProperty>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/removeExternalProperty"/></con:call></con:operation><con:operation isOneWay="false" action="" name="removeFlag" bindingOperationName="removeFlag" type="Request-Response" outputName="removeFlagResponse" inputName="removeFlag" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="b17bf88b-dbcc-4612-8c84-9b4fbaaff469"><con:settings/><con:call name="Request 1" id="e18e3fc1-27ba-4b37-ae78-dc63194bdbd7"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:removeFlag>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
      </ser:removeFlag>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/removeFlag"/></con:call></con:operation><con:operation isOneWay="false" action="" name="setAccountLimit" bindingOperationName="setAccountLimit" type="Request-Response" outputName="setAccountLimitResponse" inputName="setAccountLimit" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="361a0ed3-2319-4577-b05e-a57e6ae356d5"><con:settings/><con:call name="Request 1" id="258d2761-a9ae-41a3-8863-ce129a945c29"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:setAccountLimit>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:accountLimit>?</ser1:accountLimit>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
         </ser:arg0>
      </ser:setAccountLimit>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/setAccountLimit"/></con:call></con:operation><con:operation isOneWay="false" action="" name="setBillingDate" bindingOperationName="setBillingDate" type="Request-Response" outputName="setBillingDateResponse" inputName="setBillingDate" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="de17e571-23b5-42ea-a25f-ce98f5e1cd01"><con:settings/><con:call name="Request 1" id="ca305039-3053-45b0-a605-0ef65b81566a"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:setBillingDate>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:billingDate>?</ser1:billingDate>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
         </ser:arg0>
      </ser:setBillingDate>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/setBillingDate"/></con:call></con:operation><con:operation isOneWay="false" action="" name="setBillingId" bindingOperationName="setBillingId" type="Request-Response" outputName="setBillingIdResponse" inputName="setBillingId" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="f97b86a2-1615-4a9b-ba8b-c278ae46656c"><con:settings/><con:call name="Request 1" id="a64d74fe-b80f-4d95-bbee-4f553977147b"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:setBillingId>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:billingId>?</ser1:billingId>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
         </ser:arg0>
      </ser:setBillingId>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/setBillingId"/></con:call></con:operation><con:operation isOneWay="false" action="" name="setExpiryDate" bindingOperationName="setExpiryDate" type="Request-Response" outputName="setExpiryDateResponse" inputName="setExpiryDate" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="5c0d95c6-1397-43cb-914f-be52a18e9262"><con:settings/><con:call name="Request 1" id="3057dd51-32ff-40fa-be38-827bc54b75fa"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:setExpiryDate>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:expiryDate>?</ser1:expiryDate>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
         </ser:arg0>
      </ser:setExpiryDate>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/setExpiryDate"/></con:call></con:operation><con:operation isOneWay="false" action="" name="setExternalProperty" bindingOperationName="setExternalProperty" type="Request-Response" outputName="setExternalPropertyResponse" inputName="setExternalProperty" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="e83dffee-3188-4610-8654-21995ff7b876"><con:settings/><con:call name="Request 1" id="4a326675-98cf-4e8b-bb49-1c497509ca06"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:setExternalProperty>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:propertyName>?</ser1:propertyName>
            <!--Optional:-->
            <ser1:propertyValue>?</ser1:propertyValue>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
         </ser:arg0>
      </ser:setExternalProperty>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/setExternalProperty"/></con:call></con:operation><con:operation isOneWay="false" action="" name="unblockSubscriber" bindingOperationName="unblockSubscriber" type="Request-Response" outputName="unblockSubscriberResponse" inputName="unblockSubscriber" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="84b9b8b3-0737-4613-9a38-98e68e4ebb06"><con:settings/><con:call name="Request 1" id="67ec6fbd-229a-426d-8630-4e050b0c7aa1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:unblockSubscriber>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
         <!--Optional:-->
         <ser:arg2>?</ser:arg2>
         <!--Optional:-->
         <ser:arg3>?</ser:arg3>
      </ser:unblockSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/unblockSubscriber"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="SubscriberProvisioningPeerSoapBinding" type="wsdl" bindingName="{http://services.profiler.negret.tryge.com/}SubscriberProvisioningPeerSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://10.105.140.125:8080/profiler/provisioning?wsdl" id="e02f778a-370f-40ef-ae9d-8c71c710034d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://10.105.140.125:8080/profiler/provisioning?wsdl"><con:part><con:url>http://10.105.140.125:8080/profiler/provisioning?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="SubscriberProvisioningPeer" targetNamespace="http://services.profiler.negret.tryge.com/" xmlns:ns1="http://schemas.xmlsoap.org/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://services.profiler.negret.tryge.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://services.profiler.negret.tryge.com" xmlns:ns0="http://commons.api.plugins.profiler.inewcs.com" xmlns:tns="http://services.profiler.negret.tryge.com">
      <xsd:import namespace="http://commons.api.plugins.profiler.inewcs.com"/>
      <xsd:simpleType name="Application">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="CRM"/>
          <xsd:enumeration value="PROVISIONING"/>
          <xsd:enumeration value="USSD"/>
          <xsd:enumeration value="IVR"/>
          <xsd:enumeration value="WEB_PORTAL"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType abstract="true" name="TariffType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="category" nillable="true" type="tns:TariffCategory"/>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="default" type="xsd:boolean"/>
          <xsd:element minOccurs="0" name="id" type="xsd:long"/>
          <xsd:element minOccurs="0" name="includedQuota" nillable="true" type="tns:ArrayOfQuotaType"/>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="providerId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="TariffCycle">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="WEEKLY"/>
          <xsd:enumeration value="MONTHLY"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="QuotaType">
        <xsd:complexContent>
          <xsd:extension base="tns:BaseQuotaType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="rolloverEnabled" type="xsd:boolean"/>
              <xsd:element minOccurs="0" name="unitId" type="xsd:long"/>
              <xsd:element minOccurs="0" name="unitName" nillable="true" type="xsd:string"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="InvalidArguments"/>
          <xsd:enumeration value="InvalidPlanDefinition"/>
          <xsd:enumeration value="InvalidState"/>
          <xsd:enumeration value="InsufficientFunds"/>
          <xsd:enumeration value="PlanAlreadyActivated"/>
          <xsd:enumeration value="UnknownSubscriber"/>
          <xsd:enumeration value="UnknownCounter"/>
          <xsd:enumeration value="UnknownTariff"/>
          <xsd:enumeration value="UnknownProvider"/>
          <xsd:enumeration value="UnknownLocation"/>
          <xsd:enumeration value="DbError"/>
          <xsd:enumeration value="UnknownError"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="TariffIntervalPeriod">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPeriod">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="interval" type="xsd:int"/>
              <xsd:element minOccurs="0" name="intervalUnit" nillable="true" type="tns:TariffTimeInterval"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="Charge">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="amount" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="currencyUnitId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyUnitName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="relation" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SimSwapRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="crmUser" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="imsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="msisdn" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="serviceType" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="swapImsi" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SelectableQuotaType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="bonusMessage" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="bonusThresholdAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="increment" nillable="true" type="xsd:int"/>
          <xsd:element minOccurs="0" name="maxAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="minAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="rangeMaxAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="rangeMinAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unitRelation" nillable="true" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffPlanType">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="charges" nillable="true" type="tns:ArrayOfChargeExt"/>
              <xsd:element minOccurs="0" name="lastRenewalDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="nextRenewalDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="periodicCharge" nillable="true" type="tns:Charge"/>
              <xsd:element minOccurs="0" name="periodicCycle" nillable="true" type="tns:TariffCycle"/>
              <xsd:element minOccurs="0" name="renewalPeriod" nillable="true" type="tns:TariffPeriod"/>
              <xsd:element minOccurs="0" name="status" nillable="true" type="tns:TariffPlanStatus"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="TariffChangeRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="imsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="msisdn" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="serviceType" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="tariffId" nillable="true" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SimChangeRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="crmUser" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="imsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="msisdn" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="newImsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="newMsisdn" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="serviceType" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="simType" nillable="true" type="ns0:SimType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="TariffPlanStatus">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="ACTIVE"/>
          <xsd:enumeration value="ON_HOLD"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="TariffPeriodType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="INTERVAL"/>
          <xsd:enumeration value="CALENDAR"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="TariffTimeInterval">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DAYS"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="BaseQuotaType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="amount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unitRelation" nillable="true" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfSelectableQuotaType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="SelectableQuotaType" nillable="true" type="tns:SelectableQuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SubscriberProvisioningType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="billingId" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="chargingMode" nillable="true" type="tns:SubscriberChargingMode"/>
          <xsd:element minOccurs="0" name="crmUser" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="externalId" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="imei" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="imsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="languageId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="msisdn" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="serviceType" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="simType" nillable="true" type="ns0:SimType"/>
          <xsd:element minOccurs="0" name="tariffId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="type" nillable="true" type="tns:SubscriberType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfQuotaType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="QuotaType" nillable="true" type="tns:QuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffCalendarPeriod">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPeriod">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="dayOf" type="xsd:int"/>
              <xsd:element minOccurs="0" name="periodicity" nillable="true" type="tns:TariffCycle"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="SubscriberProvisioningResultType">
        <xsd:complexContent>
          <xsd:extension base="tns:ActionResultType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:simpleType name="SubscriberChargingMode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="ONLINE"/>
          <xsd:enumeration value="OFFLINE"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ImeiChangeRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="imei" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="imsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="msisdn" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="serviceType" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType abstract="true" name="TariffPeriod">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="periodType" nillable="true" type="tns:TariffPeriodType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfChargeExt">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="ChargeExt" nillable="true" type="tns:ChargeExt"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="SubscriberType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="PREPAID"/>
          <xsd:enumeration value="POSTPAID"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ActionResultType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ChargeExt">
        <xsd:complexContent>
          <xsd:extension base="tns:Charge">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="preferred" type="xsd:boolean"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="UserDefinablePlanType">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPlanType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="minimumCharge" nillable="true" type="tns:Charge"/>
              <xsd:element minOccurs="0" name="selectableQuotas" nillable="true" type="tns:ArrayOfSelectableQuotaType"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:simpleType name="TariffCategory">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DEFAULT_TARIFF"/>
          <xsd:enumeration value="TARIFF_PLAN"/>
          <xsd:enumeration value="DEFINABLE_TARIFF_PLAN"/>
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://commons.api.plugins.profiler.inewcs.com" xmlns:tns="http://commons.api.plugins.profiler.inewcs.com">
      <xsd:simpleType name="SimType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="STANDARD"/>
          <xsd:enumeration value="DATAONLY"/>
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://services.profiler.negret.tryge.com/" xmlns:ns0="http://services.profiler.negret.tryge.com">
      <xsd:import namespace="http://services.profiler.negret.tryge.com"/>
      <xsd:element name="changeInitialImei" type="tns:changeInitialImei"/>
      <xsd:complexType name="changeInitialImei">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns0:ImeiChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeInitialImeiResponse" type="tns:changeInitialImeiResponse"/>
      <xsd:complexType name="changeInitialImeiResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="simSwap" type="tns:simSwap"/>
      <xsd:complexType name="simSwap">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns0:SimSwapRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="simSwapResponse" type="tns:simSwapResponse"/>
      <xsd:complexType name="simSwapResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="createSubscriber" type="tns:createSubscriber"/>
      <xsd:complexType name="createSubscriber">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns0:SubscriberProvisioningType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="createSubscriberResponse" type="tns:createSubscriberResponse"/>
      <xsd:complexType name="createSubscriberResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeImei" type="tns:changeImei"/>
      <xsd:complexType name="changeImei">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns0:ImeiChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeImeiResponse" type="tns:changeImeiResponse"/>
      <xsd:complexType name="changeImeiResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="deleteSubscriber" type="tns:deleteSubscriber"/>
      <xsd:complexType name="deleteSubscriber">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="deleteSubscriberResponse" type="tns:deleteSubscriberResponse"/>
      <xsd:complexType name="deleteSubscriberResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeSimType" type="tns:changeSimType"/>
      <xsd:complexType name="changeSimType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns0:SimChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeSimTypeResponse" type="tns:changeSimTypeResponse"/>
      <xsd:complexType name="changeSimTypeResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="activateSubscriber" type="tns:activateSubscriber"/>
      <xsd:complexType name="activateSubscriber">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns0:SubscriberProvisioningType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="activateSubscriberResponse" type="tns:activateSubscriberResponse"/>
      <xsd:complexType name="activateSubscriberResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeTariff" type="tns:changeTariff"/>
      <xsd:complexType name="changeTariff">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns0:TariffChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeTariffResponse" type="tns:changeTariffResponse"/>
      <xsd:complexType name="changeTariffResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="deleteSubscriber1" type="tns:deleteSubscriber1"/>
      <xsd:complexType name="deleteSubscriber1">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="arg2" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="deleteSubscriber1Response" type="tns:deleteSubscriber1Response"/>
      <xsd:complexType name="deleteSubscriber1Response">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="convertAndActivateSubscriber" type="tns:convertAndActivateSubscriber"/>
      <xsd:complexType name="convertAndActivateSubscriber">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns0:SubscriberProvisioningType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="convertAndActivateSubscriberResponse" type="tns:convertAndActivateSubscriberResponse"/>
      <xsd:complexType name="convertAndActivateSubscriberResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="convertPostpaidToPrepaid" type="tns:convertPostpaidToPrepaid"/>
      <xsd:complexType name="convertPostpaidToPrepaid">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns0:SubscriberProvisioningType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="convertPostpaidToPrepaidResponse" type="tns:convertPostpaidToPrepaidResponse"/>
      <xsd:complexType name="convertPostpaidToPrepaidResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="activateSubscriberById1" type="tns:activateSubscriberById1"/>
      <xsd:complexType name="activateSubscriberById1">
        <xsd:sequence>
          <xsd:element name="subscriberId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="serviceType" nillable="true" type="ns0:Application"/>
          <xsd:element minOccurs="0" name="crmUser" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="activateSubscriberById1Response" type="tns:activateSubscriberById1Response"/>
      <xsd:complexType name="activateSubscriberById1Response">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="activationResponse" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeMsisdn" type="tns:changeMsisdn"/>
      <xsd:complexType name="changeMsisdn">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns0:SimChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeMsisdnResponse" type="tns:changeMsisdnResponse"/>
      <xsd:complexType name="changeMsisdnResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeImsi" type="tns:changeImsi"/>
      <xsd:complexType name="changeImsi">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns0:SimChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeImsiResponse" type="tns:changeImsiResponse"/>
      <xsd:complexType name="changeImsiResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="activateSubscriberById" type="tns:activateSubscriberById"/>
      <xsd:complexType name="activateSubscriberById">
        <xsd:sequence>
          <xsd:element name="subscriberId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="serviceType" nillable="true" type="ns0:Application"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="activateSubscriberByIdResponse" type="tns:activateSubscriberByIdResponse"/>
      <xsd:complexType name="activateSubscriberByIdResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="activationResponse" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="convertPrepaidToPostpaid" type="tns:convertPrepaidToPostpaid"/>
      <xsd:complexType name="convertPrepaidToPostpaid">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns0:SubscriberProvisioningType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="convertPrepaidToPostpaidResponse" type="tns:convertPrepaidToPostpaidResponse"/>
      <xsd:complexType name="convertPrepaidToPostpaidResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SubscriberProvisioningResultType"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="activateSubscriber">
    <wsdl:part element="tns:activateSubscriber" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeImei">
    <wsdl:part element="tns:changeImei" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="convertPostpaidToPrepaid">
    <wsdl:part element="tns:convertPostpaidToPrepaid" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSubscriberById1Response">
    <wsdl:part element="tns:activateSubscriberById1Response" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeMsisdn">
    <wsdl:part element="tns:changeMsisdn" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeSimType">
    <wsdl:part element="tns:changeSimType" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createSubscriber">
    <wsdl:part element="tns:createSubscriber" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="convertPostpaidToPrepaidResponse">
    <wsdl:part element="tns:convertPostpaidToPrepaidResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeTariff">
    <wsdl:part element="tns:changeTariff" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSubscriberResponse">
    <wsdl:part element="tns:activateSubscriberResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="convertPrepaidToPostpaid">
    <wsdl:part element="tns:convertPrepaidToPostpaid" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSubscriberById">
    <wsdl:part element="tns:activateSubscriberById" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeTariffResponse">
    <wsdl:part element="tns:changeTariffResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeImsiResponse">
    <wsdl:part element="tns:changeImsiResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="convertAndActivateSubscriberResponse">
    <wsdl:part element="tns:convertAndActivateSubscriberResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="simSwapResponse">
    <wsdl:part element="tns:simSwapResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSubscriberById1">
    <wsdl:part element="tns:activateSubscriberById1" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeImeiResponse">
    <wsdl:part element="tns:changeImeiResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeMsisdnResponse">
    <wsdl:part element="tns:changeMsisdnResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="convertAndActivateSubscriber">
    <wsdl:part element="tns:convertAndActivateSubscriber" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeSimTypeResponse">
    <wsdl:part element="tns:changeSimTypeResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteSubscriber1Response">
    <wsdl:part element="tns:deleteSubscriber1Response" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="createSubscriberResponse">
    <wsdl:part element="tns:createSubscriberResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteSubscriber">
    <wsdl:part element="tns:deleteSubscriber" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteSubscriber1">
    <wsdl:part element="tns:deleteSubscriber1" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteSubscriberResponse">
    <wsdl:part element="tns:deleteSubscriberResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="convertPrepaidToPostpaidResponse">
    <wsdl:part element="tns:convertPrepaidToPostpaidResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSubscriberByIdResponse">
    <wsdl:part element="tns:activateSubscriberByIdResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeInitialImei">
    <wsdl:part element="tns:changeInitialImei" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="simSwap">
    <wsdl:part element="tns:simSwap" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeInitialImeiResponse">
    <wsdl:part element="tns:changeInitialImeiResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeImsi">
    <wsdl:part element="tns:changeImsi" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="SubscriberProvisioningPeerPortType">
    <wsdl:operation name="changeInitialImei">
      <wsdl:input message="tns:changeInitialImei" name="changeInitialImei"></wsdl:input>
      <wsdl:output message="tns:changeInitialImeiResponse" name="changeInitialImeiResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="simSwap">
      <wsdl:input message="tns:simSwap" name="simSwap"></wsdl:input>
      <wsdl:output message="tns:simSwapResponse" name="simSwapResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createSubscriber">
      <wsdl:input message="tns:createSubscriber" name="createSubscriber"></wsdl:input>
      <wsdl:output message="tns:createSubscriberResponse" name="createSubscriberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeImei">
      <wsdl:input message="tns:changeImei" name="changeImei"></wsdl:input>
      <wsdl:output message="tns:changeImeiResponse" name="changeImeiResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteSubscriber">
      <wsdl:input message="tns:deleteSubscriber" name="deleteSubscriber"></wsdl:input>
      <wsdl:output message="tns:deleteSubscriberResponse" name="deleteSubscriberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeSimType">
      <wsdl:input message="tns:changeSimType" name="changeSimType"></wsdl:input>
      <wsdl:output message="tns:changeSimTypeResponse" name="changeSimTypeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriber">
      <wsdl:input message="tns:activateSubscriber" name="activateSubscriber"></wsdl:input>
      <wsdl:output message="tns:activateSubscriberResponse" name="activateSubscriberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeTariff">
      <wsdl:input message="tns:changeTariff" name="changeTariff"></wsdl:input>
      <wsdl:output message="tns:changeTariffResponse" name="changeTariffResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteSubscriber1">
      <wsdl:input message="tns:deleteSubscriber1" name="deleteSubscriber1"></wsdl:input>
      <wsdl:output message="tns:deleteSubscriber1Response" name="deleteSubscriber1Response"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="convertAndActivateSubscriber">
      <wsdl:input message="tns:convertAndActivateSubscriber" name="convertAndActivateSubscriber"></wsdl:input>
      <wsdl:output message="tns:convertAndActivateSubscriberResponse" name="convertAndActivateSubscriberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="convertPostpaidToPrepaid">
      <wsdl:input message="tns:convertPostpaidToPrepaid" name="convertPostpaidToPrepaid"></wsdl:input>
      <wsdl:output message="tns:convertPostpaidToPrepaidResponse" name="convertPostpaidToPrepaidResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriberById1">
      <wsdl:input message="tns:activateSubscriberById1" name="activateSubscriberById1"></wsdl:input>
      <wsdl:output message="tns:activateSubscriberById1Response" name="activateSubscriberById1Response"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeMsisdn">
      <wsdl:input message="tns:changeMsisdn" name="changeMsisdn"></wsdl:input>
      <wsdl:output message="tns:changeMsisdnResponse" name="changeMsisdnResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeImsi">
      <wsdl:input message="tns:changeImsi" name="changeImsi"></wsdl:input>
      <wsdl:output message="tns:changeImsiResponse" name="changeImsiResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriberById">
      <wsdl:input message="tns:activateSubscriberById" name="activateSubscriberById"></wsdl:input>
      <wsdl:output message="tns:activateSubscriberByIdResponse" name="activateSubscriberByIdResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="convertPrepaidToPostpaid">
      <wsdl:input message="tns:convertPrepaidToPostpaid" name="convertPrepaidToPostpaid"></wsdl:input>
      <wsdl:output message="tns:convertPrepaidToPostpaidResponse" name="convertPrepaidToPostpaidResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="SubscriberProvisioningPeerSoapBinding" type="tns:SubscriberProvisioningPeerPortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="changeInitialImei">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeInitialImei">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeInitialImeiResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createSubscriber">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="createSubscriber">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="createSubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="simSwap">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="simSwap">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="simSwapResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeImei">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeImei">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeImeiResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteSubscriber">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="deleteSubscriber">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="deleteSubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeSimType">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeSimType">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeSimTypeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriber">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="activateSubscriber">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="activateSubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeTariff">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeTariff">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeTariffResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteSubscriber1">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="deleteSubscriber1">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="deleteSubscriber1Response">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="convertAndActivateSubscriber">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="convertAndActivateSubscriber">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="convertAndActivateSubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="convertPostpaidToPrepaid">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="convertPostpaidToPrepaid">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="convertPostpaidToPrepaidResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriberById1">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="activateSubscriberById1">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="activateSubscriberById1Response">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeMsisdn">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeMsisdn">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeMsisdnResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriberById">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="activateSubscriberById">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="activateSubscriberByIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeImsi">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeImsi">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeImsiResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="convertPrepaidToPostpaid">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="convertPrepaidToPostpaid">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="convertPrepaidToPostpaidResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="SubscriberProvisioningPeer">
    <wsdl:port binding="tns:SubscriberProvisioningPeerSoapBinding" name="SubscriberProvisioningPeerPort">
      <soap:address location="http://10.105.140.125:8080/profiler/provisioning"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="activateSubscriber" bindingOperationName="activateSubscriber" type="Request-Response" outputName="activateSubscriberResponse" inputName="activateSubscriber" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="9a227523-64d5-47c9-875b-dd0f7c0c7ffc"><con:settings/><con:call name="Request 1" id="f5d48ef3-0683-4c65-b824-804fd349bfe6"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:activateSubscriber>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:billingId>?</ser1:billingId>
            <!--Optional:-->
            <ser1:chargingMode>?</ser1:chargingMode>
            <!--Optional:-->
            <ser1:crmUser>?</ser1:crmUser>
            <!--Optional:-->
            <ser1:externalId>?</ser1:externalId>
            <!--Optional:-->
            <ser1:imei>?</ser1:imei>
            <!--Optional:-->
            <ser1:imsi>?</ser1:imsi>
            <!--Optional:-->
            <ser1:languageId>?</ser1:languageId>
            <!--Optional:-->
            <ser1:msisdn>?</ser1:msisdn>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:simType>?</ser1:simType>
            <!--Optional:-->
            <ser1:tariffId>?</ser1:tariffId>
            <!--Optional:-->
            <ser1:type>?</ser1:type>
         </ser:arg0>
      </ser:activateSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/activateSubscriber"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="activateSubscriberById" bindingOperationName="activateSubscriberById" type="Request-Response" outputName="activateSubscriberByIdResponse" inputName="activateSubscriberById" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="af224f5a-b6ad-48b4-bdee-0f65db3ca162"><con:settings/><con:call name="Request 1" id="027e0e45-90d0-44d2-b098-a416b94d395f"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:activateSubscriberById>
         <ser:subscriberId>?</ser:subscriberId>
         <!--Optional:-->
         <ser:serviceType>?</ser:serviceType>
      </ser:activateSubscriberById>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/activateSubscriberById"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="activateSubscriberById1" bindingOperationName="activateSubscriberById1" type="Request-Response" outputName="activateSubscriberById1Response" inputName="activateSubscriberById1" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="7dc0b727-d528-46d6-9e39-326a2c745a78"><con:settings/><con:call name="Request 1" id="a7500ce7-541f-45ea-987a-e2cd4b99d91a"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:activateSubscriberById1>
         <ser:subscriberId>?</ser:subscriberId>
         <!--Optional:-->
         <ser:serviceType>?</ser:serviceType>
         <!--Optional:-->
         <ser:crmUser>?</ser:crmUser>
      </ser:activateSubscriberById1>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/activateSubscriberById1"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeImei" bindingOperationName="changeImei" type="Request-Response" outputName="changeImeiResponse" inputName="changeImei" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="deac9d87-c3af-4627-b986-179785dc537b"><con:settings/><con:call name="Request 1" id="97c1bdcd-3f77-451c-8299-3e2cb8d9d2c1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeImei>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:imei>?</ser1:imei>
            <!--Optional:-->
            <ser1:imsi>?</ser1:imsi>
            <!--Optional:-->
            <ser1:msisdn>?</ser1:msisdn>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
         </ser:arg0>
      </ser:changeImei>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/changeImei"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeImsi" bindingOperationName="changeImsi" type="Request-Response" outputName="changeImsiResponse" inputName="changeImsi" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="335bde41-3c14-479f-a737-07727f91be2c"><con:settings/><con:call name="Request 1" id="44ffcbbf-0aca-4f23-9569-f064e4170618"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeImsi>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:crmUser>?</ser1:crmUser>
            <!--Optional:-->
            <ser1:imsi>?</ser1:imsi>
            <!--Optional:-->
            <ser1:msisdn>?</ser1:msisdn>
            <!--Optional:-->
            <ser1:newImsi>?</ser1:newImsi>
            <!--Optional:-->
            <ser1:newMsisdn>?</ser1:newMsisdn>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:simType>?</ser1:simType>
         </ser:arg0>
      </ser:changeImsi>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/changeImsi"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeInitialImei" bindingOperationName="changeInitialImei" type="Request-Response" outputName="changeInitialImeiResponse" inputName="changeInitialImei" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="0a47a7f1-15b6-4abd-8d13-38da7008ef70"><con:settings/><con:call name="Request 1" id="8aa7f97b-6371-4096-af50-3086604252d3"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeInitialImei>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:imei>?</ser1:imei>
            <!--Optional:-->
            <ser1:imsi>?</ser1:imsi>
            <!--Optional:-->
            <ser1:msisdn>?</ser1:msisdn>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
         </ser:arg0>
      </ser:changeInitialImei>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/changeInitialImei"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeMsisdn" bindingOperationName="changeMsisdn" type="Request-Response" outputName="changeMsisdnResponse" inputName="changeMsisdn" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="9407ff70-4c2a-4afa-93e0-280ce776d7d1"><con:settings/><con:call name="Request 1" id="07c84e31-9d86-4536-b54e-d0047ce2c4bb"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeMsisdn>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:crmUser>?</ser1:crmUser>
            <!--Optional:-->
            <ser1:imsi>?</ser1:imsi>
            <!--Optional:-->
            <ser1:msisdn>?</ser1:msisdn>
            <!--Optional:-->
            <ser1:newImsi>?</ser1:newImsi>
            <!--Optional:-->
            <ser1:newMsisdn>?</ser1:newMsisdn>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:simType>?</ser1:simType>
         </ser:arg0>
      </ser:changeMsisdn>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/changeMsisdn"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeSimType" bindingOperationName="changeSimType" type="Request-Response" outputName="changeSimTypeResponse" inputName="changeSimType" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="c7ddb0a4-b0b5-413d-af5b-d6f8763f1b72"><con:settings/><con:call name="Request 1" id="1de35c9e-2b0e-4209-9ea0-3ac5dbe47618"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeSimType>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:crmUser>?</ser1:crmUser>
            <!--Optional:-->
            <ser1:imsi>?</ser1:imsi>
            <!--Optional:-->
            <ser1:msisdn>?</ser1:msisdn>
            <!--Optional:-->
            <ser1:newImsi>?</ser1:newImsi>
            <!--Optional:-->
            <ser1:newMsisdn>?</ser1:newMsisdn>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:simType>?</ser1:simType>
         </ser:arg0>
      </ser:changeSimType>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/changeSimType"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeTariff" bindingOperationName="changeTariff" type="Request-Response" outputName="changeTariffResponse" inputName="changeTariff" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="826740b7-16b3-4e82-b2e6-1ee74bc1b13c"><con:settings/><con:call name="Request 1" id="a4edb01c-e2c8-4888-bfe0-53c277d2b2e9"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeTariff>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:imsi>?</ser1:imsi>
            <!--Optional:-->
            <ser1:msisdn>?</ser1:msisdn>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:tariffId>?</ser1:tariffId>
         </ser:arg0>
      </ser:changeTariff>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/changeTariff"/></con:call></con:operation><con:operation isOneWay="false" action="" name="convertAndActivateSubscriber" bindingOperationName="convertAndActivateSubscriber" type="Request-Response" outputName="convertAndActivateSubscriberResponse" inputName="convertAndActivateSubscriber" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="336daeb3-68e3-445f-b819-309f577f999c"><con:settings/><con:call name="Request 1" id="71605360-8a83-4c36-8e8a-e0966fc95210"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:convertAndActivateSubscriber>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:billingId>?</ser1:billingId>
            <!--Optional:-->
            <ser1:chargingMode>?</ser1:chargingMode>
            <!--Optional:-->
            <ser1:crmUser>?</ser1:crmUser>
            <!--Optional:-->
            <ser1:externalId>?</ser1:externalId>
            <!--Optional:-->
            <ser1:imei>?</ser1:imei>
            <!--Optional:-->
            <ser1:imsi>?</ser1:imsi>
            <!--Optional:-->
            <ser1:languageId>?</ser1:languageId>
            <!--Optional:-->
            <ser1:msisdn>?</ser1:msisdn>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:simType>?</ser1:simType>
            <!--Optional:-->
            <ser1:tariffId>?</ser1:tariffId>
            <!--Optional:-->
            <ser1:type>?</ser1:type>
         </ser:arg0>
      </ser:convertAndActivateSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/convertAndActivateSubscriber"/></con:call></con:operation><con:operation isOneWay="false" action="" name="convertPostpaidToPrepaid" bindingOperationName="convertPostpaidToPrepaid" type="Request-Response" outputName="convertPostpaidToPrepaidResponse" inputName="convertPostpaidToPrepaid" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="c0ec1001-f5a7-4530-a224-cd943916df21"><con:settings/><con:call name="Request 1" id="bdc7e5a3-6bd0-4c0a-bdfe-b9ecaa3e50b0"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:convertPostpaidToPrepaid>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:billingId>?</ser1:billingId>
            <!--Optional:-->
            <ser1:chargingMode>?</ser1:chargingMode>
            <!--Optional:-->
            <ser1:crmUser>?</ser1:crmUser>
            <!--Optional:-->
            <ser1:externalId>?</ser1:externalId>
            <!--Optional:-->
            <ser1:imei>?</ser1:imei>
            <!--Optional:-->
            <ser1:imsi>?</ser1:imsi>
            <!--Optional:-->
            <ser1:languageId>?</ser1:languageId>
            <!--Optional:-->
            <ser1:msisdn>?</ser1:msisdn>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:simType>?</ser1:simType>
            <!--Optional:-->
            <ser1:tariffId>?</ser1:tariffId>
            <!--Optional:-->
            <ser1:type>?</ser1:type>
         </ser:arg0>
      </ser:convertPostpaidToPrepaid>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/convertPostpaidToPrepaid"/></con:call></con:operation><con:operation isOneWay="false" action="" name="convertPrepaidToPostpaid" bindingOperationName="convertPrepaidToPostpaid" type="Request-Response" outputName="convertPrepaidToPostpaidResponse" inputName="convertPrepaidToPostpaid" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="20e57bb9-34ee-495a-ac2e-ba17ed143703"><con:settings/><con:call name="Request 1" id="86a89bc4-0679-4e58-9732-aa43bd42b5e9"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:convertPrepaidToPostpaid>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:billingId>?</ser1:billingId>
            <!--Optional:-->
            <ser1:chargingMode>?</ser1:chargingMode>
            <!--Optional:-->
            <ser1:crmUser>?</ser1:crmUser>
            <!--Optional:-->
            <ser1:externalId>?</ser1:externalId>
            <!--Optional:-->
            <ser1:imei>?</ser1:imei>
            <!--Optional:-->
            <ser1:imsi>?</ser1:imsi>
            <!--Optional:-->
            <ser1:languageId>?</ser1:languageId>
            <!--Optional:-->
            <ser1:msisdn>?</ser1:msisdn>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:simType>?</ser1:simType>
            <!--Optional:-->
            <ser1:tariffId>?</ser1:tariffId>
            <!--Optional:-->
            <ser1:type>?</ser1:type>
         </ser:arg0>
      </ser:convertPrepaidToPostpaid>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/convertPrepaidToPostpaid"/></con:call></con:operation><con:operation isOneWay="false" action="" name="createSubscriber" bindingOperationName="createSubscriber" type="Request-Response" outputName="createSubscriberResponse" inputName="createSubscriber" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="144a2859-c499-4cb3-b6e0-a8fc7f75da41"><con:settings/><con:call name="Request 1" id="3b659a75-6e4c-4432-9255-dca3cc195d6e"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:createSubscriber>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:billingId>?</ser1:billingId>
            <!--Optional:-->
            <ser1:chargingMode>?</ser1:chargingMode>
            <!--Optional:-->
            <ser1:crmUser>?</ser1:crmUser>
            <!--Optional:-->
            <ser1:externalId>?</ser1:externalId>
            <!--Optional:-->
            <ser1:imei>?</ser1:imei>
            <!--Optional:-->
            <ser1:imsi>?</ser1:imsi>
            <!--Optional:-->
            <ser1:languageId>?</ser1:languageId>
            <!--Optional:-->
            <ser1:msisdn>?</ser1:msisdn>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:simType>?</ser1:simType>
            <!--Optional:-->
            <ser1:tariffId>?</ser1:tariffId>
            <!--Optional:-->
            <ser1:type>?</ser1:type>
         </ser:arg0>
      </ser:createSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/createSubscriber"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="deleteSubscriber" bindingOperationName="deleteSubscriber" type="Request-Response" outputName="deleteSubscriberResponse" inputName="deleteSubscriber" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="a3435719-b952-4120-bd97-c445683bd97d"><con:settings/><con:call name="Request 1" id="cd95434b-3c4e-4bed-bed8-548b3de072bf"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:deleteSubscriber>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
      </ser:deleteSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/deleteSubscriber"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="deleteSubscriber1" bindingOperationName="deleteSubscriber1" type="Request-Response" outputName="deleteSubscriber1Response" inputName="deleteSubscriber1" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="60157886-e4af-4b4f-9f36-cb9b0102147e"><con:settings/><con:call name="Request 1" id="9de33d26-5395-4491-b693-763007c9d176"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:deleteSubscriber1>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
         <!--Optional:-->
         <ser:arg2>?</ser:arg2>
      </ser:deleteSubscriber1>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/deleteSubscriber1"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="simSwap" bindingOperationName="simSwap" type="Request-Response" outputName="simSwapResponse" inputName="simSwap" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="4d11b6ba-0c5d-4fa3-aa03-e454fc789fad"><con:settings/><con:call name="Request 1" id="fe53c180-914f-4974-9da3-01e9215ca377"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:simSwap>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:crmUser>?</ser1:crmUser>
            <!--Optional:-->
            <ser1:imsi>?</ser1:imsi>
            <!--Optional:-->
            <ser1:msisdn>?</ser1:msisdn>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:swapImsi>?</ser1:swapImsi>
         </ser:arg0>
      </ser:simSwap>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberProvisioningPeerPortType/simSwap"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="AccountAdministrationPeerSoapBinding" type="wsdl" bindingName="{http://provisioning.published.accounting.negret.tryge.com/}AccountAdministrationPeerSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://10.105.140.125:8080/accounting/account_administration?wsdl" id="3feeaf32-4098-4e49-b8b4-590cbe17e130" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://10.105.140.125:8080/accounting/account_administration?wsdl"><con:part><con:url>http://10.105.140.125:8080/accounting/account_administration?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="AccountAdministrationPeer" targetNamespace="http://provisioning.published.accounting.negret.tryge.com/" xmlns:ns1="http://schemas.xmlsoap.org/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://provisioning.published.accounting.negret.tryge.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://published.accounting.crce.inewcs.com" xmlns:tns="http://published.accounting.crce.inewcs.com">
      <xsd:simpleType name="AccountCategory">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="MAIN"/>
          <xsd:enumeration value="BUSINESS"/>
          <xsd:enumeration value="LOYALTY"/>
          <xsd:enumeration value="TARIFF"/>
          <xsd:enumeration value="TARIFF_PLAN"/>
          <xsd:enumeration value="BUNDLE_ACCOUNT"/>
          <xsd:enumeration value="BONUS"/>
          <xsd:enumeration value="LOAN"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="ServiceType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="CRM"/>
          <xsd:enumeration value="WEB_PORTAL"/>
          <xsd:enumeration value="USSD"/>
          <xsd:enumeration value="IVR"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="AccountType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="PREPAID"/>
          <xsd:enumeration value="POSTPAID"/>
          <xsd:enumeration value="GROUP_PREPAID"/>
          <xsd:enumeration value="GROUP_POSTPAID"/>
          <xsd:enumeration value="EXTERNAL_PREPAID"/>
          <xsd:enumeration value="UNLIMITED"/>
          <xsd:enumeration value="TIMER"/>
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://services.profiler.negret.tryge.com" xmlns:tns="http://services.profiler.negret.tryge.com">
      <xsd:complexType abstract="true" name="TariffType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="category" nillable="true" type="tns:TariffCategory"/>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="default" type="xsd:boolean"/>
          <xsd:element minOccurs="0" name="id" type="xsd:long"/>
          <xsd:element minOccurs="0" name="includedQuota" nillable="true" type="tns:ArrayOfQuotaType"/>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="providerId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfQuotaType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="QuotaType" nillable="true" type="tns:QuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffCalendarPeriod">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPeriod">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="dayOf" type="xsd:int"/>
              <xsd:element minOccurs="0" name="periodicity" nillable="true" type="tns:TariffCycle"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="QuotaType">
        <xsd:complexContent>
          <xsd:extension base="tns:BaseQuotaType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="rolloverEnabled" type="xsd:boolean"/>
              <xsd:element minOccurs="0" name="unitId" type="xsd:long"/>
              <xsd:element minOccurs="0" name="unitName" nillable="true" type="xsd:string"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:simpleType name="TariffCycle">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="WEEKLY"/>
          <xsd:enumeration value="MONTHLY"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="InvalidArguments"/>
          <xsd:enumeration value="InvalidPlanDefinition"/>
          <xsd:enumeration value="InvalidState"/>
          <xsd:enumeration value="InsufficientFunds"/>
          <xsd:enumeration value="PlanAlreadyActivated"/>
          <xsd:enumeration value="UnknownSubscriber"/>
          <xsd:enumeration value="UnknownCounter"/>
          <xsd:enumeration value="UnknownTariff"/>
          <xsd:enumeration value="UnknownProvider"/>
          <xsd:enumeration value="UnknownLocation"/>
          <xsd:enumeration value="DbError"/>
          <xsd:enumeration value="UnknownError"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="TariffIntervalPeriod">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPeriod">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="interval" type="xsd:int"/>
              <xsd:element minOccurs="0" name="intervalUnit" nillable="true" type="tns:TariffTimeInterval"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="Charge">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="amount" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="currencyUnitId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyUnitName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="relation" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SelectableQuotaType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="bonusMessage" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="bonusThresholdAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="increment" nillable="true" type="xsd:int"/>
          <xsd:element minOccurs="0" name="maxAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="minAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="rangeMaxAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="rangeMinAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unitRelation" nillable="true" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffPlanType">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="charges" nillable="true" type="tns:ArrayOfChargeExt"/>
              <xsd:element minOccurs="0" name="lastRenewalDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="nextRenewalDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="periodicCharge" nillable="true" type="tns:Charge"/>
              <xsd:element minOccurs="0" name="periodicCycle" nillable="true" type="tns:TariffCycle"/>
              <xsd:element minOccurs="0" name="renewalPeriod" nillable="true" type="tns:TariffPeriod"/>
              <xsd:element minOccurs="0" name="status" nillable="true" type="tns:TariffPlanStatus"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType abstract="true" name="TariffPeriod">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="periodType" nillable="true" type="tns:TariffPeriodType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfChargeExt">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="ChargeExt" nillable="true" type="tns:ChargeExt"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="TariffPlanStatus">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="ACTIVE"/>
          <xsd:enumeration value="ON_HOLD"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="TariffPeriodType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="INTERVAL"/>
          <xsd:enumeration value="CALENDAR"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="TariffTimeInterval">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DAYS"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ChargeExt">
        <xsd:complexContent>
          <xsd:extension base="tns:Charge">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="preferred" type="xsd:boolean"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="BaseQuotaType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="amount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unitRelation" nillable="true" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="UserDefinablePlanType">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPlanType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="minimumCharge" nillable="true" type="tns:Charge"/>
              <xsd:element minOccurs="0" name="selectableQuotas" nillable="true" type="tns:ArrayOfSelectableQuotaType"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:simpleType name="TariffCategory">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DEFAULT_TARIFF"/>
          <xsd:enumeration value="TARIFF_PLAN"/>
          <xsd:enumeration value="DEFINABLE_TARIFF_PLAN"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ArrayOfSelectableQuotaType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="SelectableQuotaType" nillable="true" type="tns:SelectableQuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://provisioning.published.accounting.negret.tryge.com" xmlns:ns0="http://published.accounting.crce.inewcs.com" xmlns:tns="http://provisioning.published.accounting.negret.tryge.com">
      <xsd:import namespace="http://published.accounting.crce.inewcs.com"/>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="RuleViolation"/>
          <xsd:enumeration value="UnknownSubscriber"/>
          <xsd:enumeration value="UnknownAccount"/>
          <xsd:enumeration value="UnknownCurrency"/>
          <xsd:enumeration value="UnknownCurrencyUnit"/>
          <xsd:enumeration value="InvalidArguments"/>
          <xsd:enumeration value="DbError"/>
          <xsd:enumeration value="UnknownError"/>
          <xsd:enumeration value="InsufficientFunds"/>
          <xsd:enumeration value="UnknownReservation"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="BalanceCommitResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="chargedAccount" nillable="true" type="tns:ChargedAccountType"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BalanceReservationRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="balance" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="timeoutInSeconds" nillable="true" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BalanceRefundRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="accountDescriptorId" nillable="true" type="xsd:int"/>
          <xsd:element minOccurs="0" name="amount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="campaignId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="cdrInfo" nillable="true" type="tns:ChargedRecordId"/>
          <xsd:element minOccurs="0" name="customerCareUser" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="reason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" nillable="true" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BundleCancelRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="reservationId" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SetBalanceReqType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="accountId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="amount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="serviceType" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" nillable="true" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ChargedRecordId">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="sessionCreationTimestamp" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="sessionId" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CurrencyUnitType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="currencyId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="id" type="xsd:long"/>
          <xsd:element minOccurs="0" name="mantissa" type="xsd:long"/>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="relation" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BalanceCommitRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="reason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="reservationId" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="serviceType" nillable="true" type="ns0:ServiceType"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AddBalanceReqType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="accountId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="amount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="customerCareUser" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="reason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="serviceType" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" nillable="true" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ChargedAccountType">
        <xsd:complexContent>
          <xsd:extension base="tns:AccountType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="chargedBalance" type="xsd:long"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="BalanceReservationResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="expiryDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="reservationId" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AccountResType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="account" nillable="true" type="tns:AccountType"/>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AccountType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="accountId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="balance" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="category" nillable="true" type="ns0:AccountCategory"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="expiryDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="initialBalance" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="reservedBalance" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="type" nillable="true" type="ns0:AccountType"/>
          <xsd:element minOccurs="0" name="unit" nillable="true" type="tns:CurrencyUnitType"/>
          <xsd:element minOccurs="0" name="unitId" nillable="true" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://provisioning.published.accounting.negret.tryge.com/" xmlns:ns0="http://provisioning.published.accounting.negret.tryge.com">
      <xsd:import namespace="http://provisioning.published.accounting.negret.tryge.com"/>
      <xsd:element name="setBalance" type="tns:setBalance"/>
      <xsd:complexType name="setBalance">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns0:SetBalanceReqType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setBalanceResponse" type="tns:setBalanceResponse"/>
      <xsd:complexType name="setBalanceResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:AccountResType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="addBalance" type="tns:addBalance"/>
      <xsd:complexType name="addBalance">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns0:AddBalanceReqType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="addBalanceResponse" type="tns:addBalanceResponse"/>
      <xsd:complexType name="addBalanceResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:AccountResType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="cancelReservation" type="tns:cancelReservation"/>
      <xsd:complexType name="cancelReservation">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="cancelRequest" type="ns0:BundleCancelRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="cancelReservationResponse" type="tns:cancelReservationResponse"/>
      <xsd:complexType name="cancelReservationResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="cancelResponse" nillable="true" type="ns0:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="reserveBalance" type="tns:reserveBalance"/>
      <xsd:complexType name="reserveBalance">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="reservationRequest" type="ns0:BalanceReservationRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="reserveBalanceResponse" type="tns:reserveBalanceResponse"/>
      <xsd:complexType name="reserveBalanceResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="reservationResponse" type="ns0:BalanceReservationResponse"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="commitReservation" type="tns:commitReservation"/>
      <xsd:complexType name="commitReservation">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="commitRequest" type="ns0:BalanceCommitRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="commitReservationResponse" type="tns:commitReservationResponse"/>
      <xsd:complexType name="commitReservationResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="commitResponse" type="ns0:BalanceCommitResponse"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="refundBalance" type="tns:refundBalance"/>
      <xsd:complexType name="refundBalance">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns0:BalanceRefundRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="refundBalanceResponse" type="tns:refundBalanceResponse"/>
      <xsd:complexType name="refundBalanceResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:AccountResType"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="reserveBalanceResponse">
    <wsdl:part element="tns:reserveBalanceResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="addBalanceResponse">
    <wsdl:part element="tns:addBalanceResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="cancelReservationResponse">
    <wsdl:part element="tns:cancelReservationResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="refundBalance">
    <wsdl:part element="tns:refundBalance" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setBalanceResponse">
    <wsdl:part element="tns:setBalanceResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="commitReservationResponse">
    <wsdl:part element="tns:commitReservationResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="reserveBalance">
    <wsdl:part element="tns:reserveBalance" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="addBalance">
    <wsdl:part element="tns:addBalance" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="refundBalanceResponse">
    <wsdl:part element="tns:refundBalanceResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="commitReservation">
    <wsdl:part element="tns:commitReservation" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="cancelReservation">
    <wsdl:part element="tns:cancelReservation" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setBalance">
    <wsdl:part element="tns:setBalance" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="AccountAdministrationPeerPortType">
    <wsdl:operation name="setBalance">
      <wsdl:input message="tns:setBalance" name="setBalance"></wsdl:input>
      <wsdl:output message="tns:setBalanceResponse" name="setBalanceResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addBalance">
      <wsdl:input message="tns:addBalance" name="addBalance"></wsdl:input>
      <wsdl:output message="tns:addBalanceResponse" name="addBalanceResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="cancelReservation">
      <wsdl:input message="tns:cancelReservation" name="cancelReservation"></wsdl:input>
      <wsdl:output message="tns:cancelReservationResponse" name="cancelReservationResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="reserveBalance">
      <wsdl:input message="tns:reserveBalance" name="reserveBalance"></wsdl:input>
      <wsdl:output message="tns:reserveBalanceResponse" name="reserveBalanceResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="commitReservation">
      <wsdl:input message="tns:commitReservation" name="commitReservation"></wsdl:input>
      <wsdl:output message="tns:commitReservationResponse" name="commitReservationResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="refundBalance">
      <wsdl:input message="tns:refundBalance" name="refundBalance"></wsdl:input>
      <wsdl:output message="tns:refundBalanceResponse" name="refundBalanceResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="AccountAdministrationPeerSoapBinding" type="tns:AccountAdministrationPeerPortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="addBalance">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="addBalance">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="addBalanceResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setBalance">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="setBalance">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="setBalanceResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="cancelReservation">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="cancelReservation">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="cancelReservationResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="reserveBalance">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="reserveBalance">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="reserveBalanceResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="commitReservation">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="commitReservation">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="commitReservationResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="refundBalance">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="refundBalance">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="refundBalanceResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="AccountAdministrationPeer">
    <wsdl:port binding="tns:AccountAdministrationPeerSoapBinding" name="AccountAdministrationPeerPort">
      <soap:address location="http://10.105.140.125:8080/accounting/account_administration"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/account_administration</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="addBalance" bindingOperationName="addBalance" type="Request-Response" outputName="addBalanceResponse" inputName="addBalance" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="1c912677-1290-4687-a0bd-3a2af0811460"><con:settings/><con:call name="Request 1" id="9221ab3b-9e75-464f-8593-9a0effccf3d6"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/account_administration</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/" xmlns:prov1="http://provisioning.published.accounting.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:addBalance>
         <!--Optional:-->
         <prov:arg0>
            <!--Optional:-->
            <prov1:accountId>?</prov1:accountId>
            <!--Optional:-->
            <prov1:amount>?</prov1:amount>
            <!--Optional:-->
            <prov1:customerCareUser>?</prov1:customerCareUser>
            <!--Optional:-->
            <prov1:reason>?</prov1:reason>
            <!--Optional:-->
            <prov1:serviceType>?</prov1:serviceType>
            <!--Optional:-->
            <prov1:subscriberId>?</prov1:subscriberId>
         </prov:arg0>
      </prov:addBalance>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountAdministrationPeerPortType/addBalance"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="cancelReservation" bindingOperationName="cancelReservation" type="Request-Response" outputName="cancelReservationResponse" inputName="cancelReservation" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="afab1991-41b3-4088-ba84-040c25147724"><con:settings/><con:call name="Request 1" id="4e41e932-4e65-45ca-971d-56633909ad99"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/account_administration</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/" xmlns:prov1="http://provisioning.published.accounting.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:cancelReservation>
         <!--Optional:-->
         <prov:cancelRequest>
            <!--Optional:-->
            <prov1:reservationId>?</prov1:reservationId>
            <!--Optional:-->
            <prov1:subscriberId>?</prov1:subscriberId>
         </prov:cancelRequest>
      </prov:cancelReservation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountAdministrationPeerPortType/cancelReservation"/></con:call></con:operation><con:operation isOneWay="false" action="" name="commitReservation" bindingOperationName="commitReservation" type="Request-Response" outputName="commitReservationResponse" inputName="commitReservation" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="9d1d988d-79e7-4f05-ad07-089615cac93d"><con:settings/><con:call name="Request 1" id="01b39a71-5008-47f8-9745-b307fe047b6f"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/account_administration</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/" xmlns:prov1="http://provisioning.published.accounting.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:commitReservation>
         <!--Optional:-->
         <prov:commitRequest>
            <!--Optional:-->
            <prov1:reason>?</prov1:reason>
            <!--Optional:-->
            <prov1:reservationId>?</prov1:reservationId>
            <!--Optional:-->
            <prov1:serviceType>?</prov1:serviceType>
            <!--Optional:-->
            <prov1:subscriberId>?</prov1:subscriberId>
         </prov:commitRequest>
      </prov:commitReservation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountAdministrationPeerPortType/commitReservation"/></con:call></con:operation><con:operation isOneWay="false" action="" name="refundBalance" bindingOperationName="refundBalance" type="Request-Response" outputName="refundBalanceResponse" inputName="refundBalance" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="9f239f64-bf51-482b-92d2-b3e546a44138"><con:settings/><con:call name="Request 1" id="ade6c8f3-9721-434f-a9ca-542700307dfc"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/account_administration</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/" xmlns:prov1="http://provisioning.published.accounting.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:refundBalance>
         <!--Optional:-->
         <prov:arg0>
            <!--Optional:-->
            <prov1:accountDescriptorId>?</prov1:accountDescriptorId>
            <!--Optional:-->
            <prov1:amount>?</prov1:amount>
            <!--Optional:-->
            <prov1:campaignId>?</prov1:campaignId>
            <!--Optional:-->
            <prov1:cdrInfo>
               <!--Optional:-->
               <prov1:sessionCreationTimestamp>?</prov1:sessionCreationTimestamp>
               <!--Optional:-->
               <prov1:sessionId>?</prov1:sessionId>
            </prov1:cdrInfo>
            <!--Optional:-->
            <prov1:customerCareUser>?</prov1:customerCareUser>
            <!--Optional:-->
            <prov1:reason>?</prov1:reason>
            <!--Optional:-->
            <prov1:subscriberId>?</prov1:subscriberId>
         </prov:arg0>
      </prov:refundBalance>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountAdministrationPeerPortType/refundBalance"/></con:call></con:operation><con:operation isOneWay="false" action="" name="reserveBalance" bindingOperationName="reserveBalance" type="Request-Response" outputName="reserveBalanceResponse" inputName="reserveBalance" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="e0a1c87d-8fa2-4ea1-a37b-5f981d083cf0"><con:settings/><con:call name="Request 1" id="ef3da69c-bd6e-45e7-83aa-a7861c8a1b91"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/account_administration</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/" xmlns:prov1="http://provisioning.published.accounting.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:reserveBalance>
         <!--Optional:-->
         <prov:reservationRequest>
            <!--Optional:-->
            <prov1:balance>?</prov1:balance>
            <!--Optional:-->
            <prov1:currencyId>?</prov1:currencyId>
            <!--Optional:-->
            <prov1:subscriberId>?</prov1:subscriberId>
            <!--Optional:-->
            <prov1:timeoutInSeconds>?</prov1:timeoutInSeconds>
         </prov:reservationRequest>
      </prov:reserveBalance>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountAdministrationPeerPortType/reserveBalance"/></con:call></con:operation><con:operation isOneWay="false" action="" name="setBalance" bindingOperationName="setBalance" type="Request-Response" outputName="setBalanceResponse" inputName="setBalance" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="c919ee9d-0f82-4437-95d4-0100a46fc60f"><con:settings/><con:call name="Request 1" id="ed7c9352-6cb9-42b6-9dd2-84f8d2f72dd0"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/account_administration</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/" xmlns:prov1="http://provisioning.published.accounting.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:setBalance>
         <!--Optional:-->
         <prov:arg0>
            <!--Optional:-->
            <prov1:accountId>?</prov1:accountId>
            <!--Optional:-->
            <prov1:amount>?</prov1:amount>
            <!--Optional:-->
            <prov1:serviceType>?</prov1:serviceType>
            <!--Optional:-->
            <prov1:subscriberId>?</prov1:subscriberId>
         </prov:arg0>
      </prov:setBalance>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountAdministrationPeerPortType/setBalance"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="AccountPeerSoapBinding" type="wsdl" bindingName="{http://provisioning.published.accounting.negret.tryge.com/}AccountPeerSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://10.105.140.125:8080/accounting/accounts?wsdl" id="322500a0-6399-4e99-9aa0-c94c9f274f24" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://10.105.140.125:8080/accounting/accounts?wsdl"><con:part><con:url>http://10.105.140.125:8080/accounting/accounts?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="AccountPeer" targetNamespace="http://provisioning.published.accounting.negret.tryge.com/" xmlns:ns1="http://schemas.xmlsoap.org/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://provisioning.published.accounting.negret.tryge.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://published.accounting.crce.inewcs.com" xmlns:tns="http://published.accounting.crce.inewcs.com">
      <xsd:complexType name="AccountDescriptor">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="category" nillable="true" type="tns:AccountCategory"/>
          <xsd:element minOccurs="0" name="currencyId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="descriptorId" type="xsd:int"/>
          <xsd:element minOccurs="0" name="providerId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="type" nillable="true" type="tns:AccountType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfAccountDescriptor">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="AccountDescriptor" nillable="true" type="tns:AccountDescriptor"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="AccountCategory">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="MAIN"/>
          <xsd:enumeration value="BUSINESS"/>
          <xsd:enumeration value="LOYALTY"/>
          <xsd:enumeration value="TARIFF"/>
          <xsd:enumeration value="TARIFF_PLAN"/>
          <xsd:enumeration value="BUNDLE_ACCOUNT"/>
          <xsd:enumeration value="BONUS"/>
          <xsd:enumeration value="LOAN"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="AccountType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="PREPAID"/>
          <xsd:enumeration value="POSTPAID"/>
          <xsd:enumeration value="GROUP_PREPAID"/>
          <xsd:enumeration value="GROUP_POSTPAID"/>
          <xsd:enumeration value="EXTERNAL_PREPAID"/>
          <xsd:enumeration value="UNLIMITED"/>
          <xsd:enumeration value="TIMER"/>
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://services.profiler.negret.tryge.com" xmlns:tns="http://services.profiler.negret.tryge.com">
      <xsd:complexType abstract="true" name="TariffType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="category" nillable="true" type="tns:TariffCategory"/>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="default" type="xsd:boolean"/>
          <xsd:element minOccurs="0" name="id" type="xsd:long"/>
          <xsd:element minOccurs="0" name="includedQuota" nillable="true" type="tns:ArrayOfQuotaType"/>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="providerId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfQuotaType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="QuotaType" nillable="true" type="tns:QuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffCalendarPeriod">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPeriod">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="dayOf" type="xsd:int"/>
              <xsd:element minOccurs="0" name="periodicity" nillable="true" type="tns:TariffCycle"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="QuotaType">
        <xsd:complexContent>
          <xsd:extension base="tns:BaseQuotaType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="rolloverEnabled" type="xsd:boolean"/>
              <xsd:element minOccurs="0" name="unitId" type="xsd:long"/>
              <xsd:element minOccurs="0" name="unitName" nillable="true" type="xsd:string"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:simpleType name="TariffCycle">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="WEEKLY"/>
          <xsd:enumeration value="MONTHLY"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="InvalidArguments"/>
          <xsd:enumeration value="InvalidPlanDefinition"/>
          <xsd:enumeration value="InvalidState"/>
          <xsd:enumeration value="InsufficientFunds"/>
          <xsd:enumeration value="PlanAlreadyActivated"/>
          <xsd:enumeration value="UnknownSubscriber"/>
          <xsd:enumeration value="UnknownCounter"/>
          <xsd:enumeration value="UnknownTariff"/>
          <xsd:enumeration value="UnknownProvider"/>
          <xsd:enumeration value="UnknownLocation"/>
          <xsd:enumeration value="DbError"/>
          <xsd:enumeration value="UnknownError"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="TariffIntervalPeriod">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPeriod">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="interval" type="xsd:int"/>
              <xsd:element minOccurs="0" name="intervalUnit" nillable="true" type="tns:TariffTimeInterval"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="Charge">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="amount" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="currencyUnitId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyUnitName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="relation" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SelectableQuotaType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="bonusMessage" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="bonusThresholdAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="increment" nillable="true" type="xsd:int"/>
          <xsd:element minOccurs="0" name="maxAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="minAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="rangeMaxAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="rangeMinAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unitRelation" nillable="true" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffPlanType">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="charges" nillable="true" type="tns:ArrayOfChargeExt"/>
              <xsd:element minOccurs="0" name="lastRenewalDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="nextRenewalDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="periodicCharge" nillable="true" type="tns:Charge"/>
              <xsd:element minOccurs="0" name="periodicCycle" nillable="true" type="tns:TariffCycle"/>
              <xsd:element minOccurs="0" name="renewalPeriod" nillable="true" type="tns:TariffPeriod"/>
              <xsd:element minOccurs="0" name="status" nillable="true" type="tns:TariffPlanStatus"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType abstract="true" name="TariffPeriod">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="periodType" nillable="true" type="tns:TariffPeriodType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfChargeExt">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="ChargeExt" nillable="true" type="tns:ChargeExt"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="TariffPlanStatus">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="ACTIVE"/>
          <xsd:enumeration value="ON_HOLD"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="TariffPeriodType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="INTERVAL"/>
          <xsd:enumeration value="CALENDAR"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="TariffTimeInterval">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DAYS"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ChargeExt">
        <xsd:complexContent>
          <xsd:extension base="tns:Charge">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="preferred" type="xsd:boolean"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="BaseQuotaType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="amount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unitRelation" nillable="true" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="UserDefinablePlanType">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPlanType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="minimumCharge" nillable="true" type="tns:Charge"/>
              <xsd:element minOccurs="0" name="selectableQuotas" nillable="true" type="tns:ArrayOfSelectableQuotaType"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:simpleType name="TariffCategory">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DEFAULT_TARIFF"/>
          <xsd:enumeration value="TARIFF_PLAN"/>
          <xsd:enumeration value="DEFINABLE_TARIFF_PLAN"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ArrayOfSelectableQuotaType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="SelectableQuotaType" nillable="true" type="tns:SelectableQuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://provisioning.published.accounting.negret.tryge.com" xmlns:ns0="http://published.accounting.crce.inewcs.com" xmlns:tns="http://provisioning.published.accounting.negret.tryge.com">
      <xsd:import namespace="http://published.accounting.crce.inewcs.com"/>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="RuleViolation"/>
          <xsd:enumeration value="UnknownSubscriber"/>
          <xsd:enumeration value="UnknownAccount"/>
          <xsd:enumeration value="UnknownCurrency"/>
          <xsd:enumeration value="UnknownCurrencyUnit"/>
          <xsd:enumeration value="InvalidArguments"/>
          <xsd:enumeration value="DbError"/>
          <xsd:enumeration value="UnknownError"/>
          <xsd:enumeration value="InsufficientFunds"/>
          <xsd:enumeration value="UnknownReservation"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="SummaryListType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="summaryList" nillable="true" type="tns:ArrayOfSummaryType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfSummaryType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="SummaryType" nillable="true" type="tns:SummaryType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SummaryResType">
        <xsd:complexContent>
          <xsd:extension base="tns:SummaryType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="AccountDetailsType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="accounts" nillable="true" type="tns:ArrayOfAccountType"/>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SummaryType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="balance" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="expiryAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="expiryDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="reservedBalance" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unit" nillable="true" type="tns:CurrencyUnitType"/>
          <xsd:element minOccurs="0" name="unitId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unlimited" type="xsd:boolean"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="CurrencyGroup">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="VOICE"/>
          <xsd:enumeration value="DATA"/>
          <xsd:enumeration value="SMS"/>
          <xsd:enumeration value="MMS"/>
          <xsd:enumeration value="LOYALTY"/>
          <xsd:enumeration value="MONETARY"/>
          <xsd:enumeration value="OTHER"/>
          <xsd:enumeration value="DATA_TIMER"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="CurrencyUnitType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="currencyId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="id" type="xsd:long"/>
          <xsd:element minOccurs="0" name="mantissa" type="xsd:long"/>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="relation" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AccountResType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="account" nillable="true" type="tns:AccountType"/>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfAccountType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="AccountType" nillable="true" type="tns:AccountType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AccountType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="accountId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="balance" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="category" nillable="true" type="ns0:AccountCategory"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="expiryDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="initialBalance" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="reservedBalance" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="type" nillable="true" type="ns0:AccountType"/>
          <xsd:element minOccurs="0" name="unit" nillable="true" type="tns:CurrencyUnitType"/>
          <xsd:element minOccurs="0" name="unitId" nillable="true" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://provisioning.published.accounting.negret.tryge.com/" xmlns:ns0="http://provisioning.published.accounting.negret.tryge.com" xmlns:ns1="http://published.accounting.crce.inewcs.com">
      <xsd:import namespace="http://provisioning.published.accounting.negret.tryge.com"/>
      <xsd:import namespace="http://published.accounting.crce.inewcs.com"/>
      <xsd:element name="getMainAccount" type="tns:getMainAccount"/>
      <xsd:complexType name="getMainAccount">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getMainAccountResponse" type="tns:getMainAccountResponse"/>
      <xsd:complexType name="getMainAccountResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:AccountResType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getMainAccountAsSummary" type="tns:getMainAccountAsSummary"/>
      <xsd:complexType name="getMainAccountAsSummary">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getMainAccountAsSummaryResponse" type="tns:getMainAccountAsSummaryResponse"/>
      <xsd:complexType name="getMainAccountAsSummaryResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SummaryResType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSummaryByCurrencyGroup" type="tns:getSummaryByCurrencyGroup"/>
      <xsd:complexType name="getSummaryByCurrencyGroup">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="ns0:CurrencyGroup"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSummaryByCurrencyGroupResponse" type="tns:getSummaryByCurrencyGroupResponse"/>
      <xsd:complexType name="getSummaryByCurrencyGroupResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SummaryListType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountDetails" type="tns:getAccountDetails"/>
      <xsd:complexType name="getAccountDetails">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountDetailsResponse" type="tns:getAccountDetailsResponse"/>
      <xsd:complexType name="getAccountDetailsResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:AccountDetailsType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountDescriptor" type="tns:getAccountDescriptor"/>
      <xsd:complexType name="getAccountDescriptor">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountDescriptorResponse" type="tns:getAccountDescriptorResponse"/>
      <xsd:complexType name="getAccountDescriptorResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:AccountDescriptor"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountSummary" type="tns:getAccountSummary"/>
      <xsd:complexType name="getAccountSummary">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountSummaryResponse" type="tns:getAccountSummaryResponse"/>
      <xsd:complexType name="getAccountSummaryResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SummaryResType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSummaryByCurrency" type="tns:getSummaryByCurrency"/>
      <xsd:complexType name="getSummaryByCurrency">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSummaryByCurrencyResponse" type="tns:getSummaryByCurrencyResponse"/>
      <xsd:complexType name="getSummaryByCurrencyResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SummaryListType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountDescriptors" type="tns:getAccountDescriptors"/>
      <xsd:complexType name="getAccountDescriptors">
        <xsd:sequence/>
      </xsd:complexType>
      <xsd:element name="getAccountDescriptorsResponse" type="tns:getAccountDescriptorsResponse"/>
      <xsd:complexType name="getAccountDescriptorsResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ArrayOfAccountDescriptor"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccount" type="tns:getAccount"/>
      <xsd:complexType name="getAccount">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element name="arg1" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountResponse" type="tns:getAccountResponse"/>
      <xsd:complexType name="getAccountResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:AccountResType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountsByCurrency" type="tns:getAccountsByCurrency"/>
      <xsd:complexType name="getAccountsByCurrency">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountsByCurrencyResponse" type="tns:getAccountsByCurrencyResponse"/>
      <xsd:complexType name="getAccountsByCurrencyResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:AccountDetailsType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccounts" type="tns:getAccounts"/>
      <xsd:complexType name="getAccounts">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountsResponse" type="tns:getAccountsResponse"/>
      <xsd:complexType name="getAccountsResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:AccountDetailsType"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="getSummaryByCurrencyGroupResponse">
    <wsdl:part element="tns:getSummaryByCurrencyGroupResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSummaryByCurrencyResponse">
    <wsdl:part element="tns:getSummaryByCurrencyResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMainAccountAsSummaryResponse">
    <wsdl:part element="tns:getMainAccountAsSummaryResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountDescriptorResponse">
    <wsdl:part element="tns:getAccountDescriptorResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccounts">
    <wsdl:part element="tns:getAccounts" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountDetailsResponse">
    <wsdl:part element="tns:getAccountDetailsResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountDescriptor">
    <wsdl:part element="tns:getAccountDescriptor" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountDetails">
    <wsdl:part element="tns:getAccountDetails" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountResponse">
    <wsdl:part element="tns:getAccountResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountSummaryResponse">
    <wsdl:part element="tns:getAccountSummaryResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountDescriptors">
    <wsdl:part element="tns:getAccountDescriptors" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSummaryByCurrency">
    <wsdl:part element="tns:getSummaryByCurrency" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSummaryByCurrencyGroup">
    <wsdl:part element="tns:getSummaryByCurrencyGroup" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountsByCurrencyResponse">
    <wsdl:part element="tns:getAccountsByCurrencyResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMainAccountAsSummary">
    <wsdl:part element="tns:getMainAccountAsSummary" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountSummary">
    <wsdl:part element="tns:getAccountSummary" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMainAccountResponse">
    <wsdl:part element="tns:getMainAccountResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccount">
    <wsdl:part element="tns:getAccount" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountsByCurrency">
    <wsdl:part element="tns:getAccountsByCurrency" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountsResponse">
    <wsdl:part element="tns:getAccountsResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMainAccount">
    <wsdl:part element="tns:getMainAccount" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountDescriptorsResponse">
    <wsdl:part element="tns:getAccountDescriptorsResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="AccountPeerPortType">
    <wsdl:operation name="getMainAccount">
      <wsdl:input message="tns:getMainAccount" name="getMainAccount"></wsdl:input>
      <wsdl:output message="tns:getMainAccountResponse" name="getMainAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getMainAccountAsSummary">
      <wsdl:input message="tns:getMainAccountAsSummary" name="getMainAccountAsSummary"></wsdl:input>
      <wsdl:output message="tns:getMainAccountAsSummaryResponse" name="getMainAccountAsSummaryResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSummaryByCurrencyGroup">
      <wsdl:input message="tns:getSummaryByCurrencyGroup" name="getSummaryByCurrencyGroup"></wsdl:input>
      <wsdl:output message="tns:getSummaryByCurrencyGroupResponse" name="getSummaryByCurrencyGroupResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountDetails">
      <wsdl:input message="tns:getAccountDetails" name="getAccountDetails"></wsdl:input>
      <wsdl:output message="tns:getAccountDetailsResponse" name="getAccountDetailsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountDescriptor">
      <wsdl:input message="tns:getAccountDescriptor" name="getAccountDescriptor"></wsdl:input>
      <wsdl:output message="tns:getAccountDescriptorResponse" name="getAccountDescriptorResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountSummary">
      <wsdl:input message="tns:getAccountSummary" name="getAccountSummary"></wsdl:input>
      <wsdl:output message="tns:getAccountSummaryResponse" name="getAccountSummaryResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSummaryByCurrency">
      <wsdl:input message="tns:getSummaryByCurrency" name="getSummaryByCurrency"></wsdl:input>
      <wsdl:output message="tns:getSummaryByCurrencyResponse" name="getSummaryByCurrencyResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountDescriptors">
      <wsdl:input message="tns:getAccountDescriptors" name="getAccountDescriptors"></wsdl:input>
      <wsdl:output message="tns:getAccountDescriptorsResponse" name="getAccountDescriptorsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccount">
      <wsdl:input message="tns:getAccount" name="getAccount"></wsdl:input>
      <wsdl:output message="tns:getAccountResponse" name="getAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountsByCurrency">
      <wsdl:input message="tns:getAccountsByCurrency" name="getAccountsByCurrency"></wsdl:input>
      <wsdl:output message="tns:getAccountsByCurrencyResponse" name="getAccountsByCurrencyResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccounts">
      <wsdl:input message="tns:getAccounts" name="getAccounts"></wsdl:input>
      <wsdl:output message="tns:getAccountsResponse" name="getAccountsResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="AccountPeerSoapBinding" type="tns:AccountPeerPortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getMainAccount">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getMainAccount">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getMainAccountResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getMainAccountAsSummary">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getMainAccountAsSummary">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getMainAccountAsSummaryResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSummaryByCurrencyGroup">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSummaryByCurrencyGroup">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSummaryByCurrencyGroupResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountDescriptor">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAccountDescriptor">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAccountDescriptorResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountDetails">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAccountDetails">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAccountDetailsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountSummary">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAccountSummary">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAccountSummaryResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountDescriptors">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAccountDescriptors">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAccountDescriptorsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSummaryByCurrency">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSummaryByCurrency">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSummaryByCurrencyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccount">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAccount">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAccountResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccounts">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAccounts">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAccountsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountsByCurrency">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAccountsByCurrency">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAccountsByCurrencyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="AccountPeer">
    <wsdl:port binding="tns:AccountPeerSoapBinding" name="AccountPeerPort">
      <soap:address location="http://10.105.140.125:8080/accounting/accounts"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="getAccount" bindingOperationName="getAccount" type="Request-Response" outputName="getAccountResponse" inputName="getAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="045e2bbf-4b74-4779-8e4c-f60255847576"><con:settings/><con:call name="Request 1" id="8bddc3a9-cbcc-4079-855a-2480e99ef7cd"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccount>
         <prov:arg0>?</prov:arg0>
         <prov:arg1>?</prov:arg1>
      </prov:getAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getAccount"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAccountDescriptor" bindingOperationName="getAccountDescriptor" type="Request-Response" outputName="getAccountDescriptorResponse" inputName="getAccountDescriptor" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="0c6afdce-8aec-4ccf-941d-23b856170919"><con:settings/><con:call name="Request 1" id="6c1c6d15-8ab5-4b8d-a41b-74ce6e701e1d"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccountDescriptor>
         <prov:arg0>?</prov:arg0>
      </prov:getAccountDescriptor>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getAccountDescriptor"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAccountDescriptors" bindingOperationName="getAccountDescriptors" type="Request-Response" outputName="getAccountDescriptorsResponse" inputName="getAccountDescriptors" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="d0e62908-052c-478b-87d4-ef6970953e9f"><con:settings/><con:call name="Request 1" id="7792d8ef-8643-4e3e-aff9-92a72eaddf8e"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccountDescriptors/>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getAccountDescriptors"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAccountDetails" bindingOperationName="getAccountDetails" type="Request-Response" outputName="getAccountDetailsResponse" inputName="getAccountDetails" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="f5a43f31-e64e-43ac-b221-fd777cb284df"><con:settings/><con:call name="Request 1" id="3b3a6e9d-56f3-4197-bc8c-c64bc6dc8ced"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccountDetails>
         <prov:arg0>?</prov:arg0>
      </prov:getAccountDetails>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getAccountDetails"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAccounts" bindingOperationName="getAccounts" type="Request-Response" outputName="getAccountsResponse" inputName="getAccounts" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="dbdad8dd-5a6b-404f-b10a-6799c9087c9c"><con:settings/><con:call name="Request 1" id="6593e3b8-8662-45fb-bd59-93fdce2392d9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccounts>
         <prov:arg0>12248</prov:arg0>
      </prov:getAccounts>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getAccounts"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAccountsByCurrency" bindingOperationName="getAccountsByCurrency" type="Request-Response" outputName="getAccountsByCurrencyResponse" inputName="getAccountsByCurrency" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="20a1da8b-df7a-4f80-831f-0f6d400502a7"><con:settings/><con:call name="Request 1" id="dbb57dd9-f5e9-4734-adb5-155b66b1332c"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccountsByCurrency>
         <prov:arg0>?</prov:arg0>
         <!--Optional:-->
         <prov:arg1>?</prov:arg1>
      </prov:getAccountsByCurrency>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getAccountsByCurrency"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAccountSummary" bindingOperationName="getAccountSummary" type="Request-Response" outputName="getAccountSummaryResponse" inputName="getAccountSummary" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="413fed77-40ca-48e8-b79e-155b9e58533f"><con:settings/><con:call name="Request 1" id="008fc7e8-ce21-4424-a398-c751cd05f924"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccountSummary>
         <prov:arg0>?</prov:arg0>
         <!--Optional:-->
         <prov:arg1>?</prov:arg1>
      </prov:getAccountSummary>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getAccountSummary"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getMainAccount" bindingOperationName="getMainAccount" type="Request-Response" outputName="getMainAccountResponse" inputName="getMainAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="f2151b7f-14f9-4cb2-97c0-7b257a9ed1b5"><con:settings/><con:call name="Request 1" id="4f09aec6-955c-414f-8030-4a80e361f34e"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getMainAccount>
         <prov:arg0>?</prov:arg0>
      </prov:getMainAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getMainAccount"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getMainAccountAsSummary" bindingOperationName="getMainAccountAsSummary" type="Request-Response" outputName="getMainAccountAsSummaryResponse" inputName="getMainAccountAsSummary" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="505fccb3-f916-4a2a-8220-f6519a6f4799"><con:settings/><con:call name="Request 1" id="a3675fbd-ff20-4d56-ad56-2fb4df43aff1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getMainAccountAsSummary>
         <prov:arg0>?</prov:arg0>
      </prov:getMainAccountAsSummary>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getMainAccountAsSummary"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSummaryByCurrency" bindingOperationName="getSummaryByCurrency" type="Request-Response" outputName="getSummaryByCurrencyResponse" inputName="getSummaryByCurrency" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="d2410956-caf6-4a17-bd04-84b01b1d4496"><con:settings/><con:call name="Request 1" id="17dc9657-0eed-4163-abc3-03e52abfb0f1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getSummaryByCurrency>
         <prov:arg0>?</prov:arg0>
      </prov:getSummaryByCurrency>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getSummaryByCurrency"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSummaryByCurrencyGroup" bindingOperationName="getSummaryByCurrencyGroup" type="Request-Response" outputName="getSummaryByCurrencyGroupResponse" inputName="getSummaryByCurrencyGroup" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="ebee6b92-ea98-4e05-b151-24fa7eacfde4"><con:settings/><con:call name="Request 1" id="8581910e-def4-46e5-b9b9-200ee3dc02ed"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getSummaryByCurrencyGroup>
         <prov:arg0>?</prov:arg0>
         <!--Optional:-->
         <prov:arg1>?</prov:arg1>
      </prov:getSummaryByCurrencyGroup>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getSummaryByCurrencyGroup"/></con:call></con:operation></con:interface><con:testSuite name="HighLevelOps" id="f392d4c9-86b8-4d18-a58b-580a0fa3dbc3"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="createTestSubscribers" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="94c23079-3be2-46bd-a387-2741dedcb7af"><con:description>Creates a certain amount (>=1) of test subscribers (first deletion if they already exist, then create, activate and set balance)

Arguments (i.e. related LowLevelOps.getMainAccount.input.XXX project properties):

  amount           >=1 
  imsiRangeStart
  msisdnRangeStart
  tariffId          
  balance          MAIN account balance to set
  languageId
  type             "PREPAID" OR "POSTPAID"
 

Returnvalues (as "LowLevelOps.setBalance.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    SOAP_ERROR  in case of an interface error (e.g. no connection, invalid SOAP response, ...)
    OK                   in case of success 
    CRCE's non-OK &lt;code> tag of the first failing response - i.e.
      DbError
      ...
  </con:description><con:settings/><con:testStep type="groovy" name="init_repeat_counter" id="e1d5c067-8d7e-484d-824f-4a48cea4ada2"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.local.repeatcounter'].value = 0
</script></con:config></con:testStep><con:testStep type="groovy" name="01_init_next_subscriber" id="6084b581-8a3a-482c-bb95-178d9b9c4903"><con:settings/><con:config><script>def counter = Long.parseLong(testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.local.repeatcounter'].value)

def currentImsi = Long.parseLong(testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.input.imsiRangeStart'].value)
currentImsi = currentImsi+counter
testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.local.currentImsi'].value = currentImsi

def currentMsisdn = Long.parseLong(testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.input.msisdnRangeStart'].value)
currentMsisdn = currentMsisdn+counter
testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.local.currentMsisdn'].value = currentMsisdn
</script></con:config></con:testStep><con:testStep type="request" name="getSubscriberProfileByImsi" id="b6b5e0e6-677a-48ff-80c3-d74fa29069e4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SubscriberPeerSoapBinding</con:interface><con:operation>getSubscriberProfileByImsi</con:operation><con:request name="getSubscriberProfileByImsi" id="655f54ec-f247-48e8-b3b9-ded32ebac953"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfileByImsi>
         <ser:arg0>${#Project#HighLevelOps.createTestSubscribers.local.currentImsi}</ser:arg0>
      </ser:getSubscriberProfileByImsi>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="7dbada89-c6e6-4dbb-be4c-ea6196aa8830"/><con:assertion type="Schema Compliance" disabled="true" id="7c6194ff-c547-423a-bde6-e58c1f3edff1"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="afd5dff5-ef09-485e-980a-2dbf458631f3"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_SOAP_error" id="63f919dc-864e-4c9c-9f3f-394e4aba8423"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("getSubscriberProfileByImsi").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'HighLevelOps.createTestSubscribers.output.resultCode=' + testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value
  testRunner.fail( "getSubscriberProfileByImsi" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_response_values" id="c0149760-b12e-4110-a241-99c435a5e240"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileByImsi</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByImsiResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>HighLevelOps.createTestSubscribers.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" transferChildNodes="false" ignoreEmpty="false"><con:name>id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileByImsi</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByImsiResponse[1]/ns1:return[1]/ns2:id[1]</con:sourcePath><con:targetType>HighLevelOps.createTestSubscribers.local.deletetionSubscriberId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber" id="effd4650-44c7-4b30-8107-c5c62314604c"><con:settings/><con:config><script>def resultCode = testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value

if ( resultCode == 'OK' ) {
  //testRunner.gotoStep(testRunner.testCase.getTestStepIndexByName('deleteSubscriber'))
  
} else if ( resultCode == 'UnknownSubscriber' ) {	
  testRunner.gotoStep(testRunner.testCase.getTestStepIndexByName('02_createSubscriber'))
  
} else {	
  testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value = resultCode
  log.error 'HighLevelOps.createTestSubscribers.output.resultCode=' + resultCode
  testRunner.fail( "getSubscriberProfileByImsi" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
} 
</script></con:config></con:testStep><con:testStep type="request" name="deleteSubscriber" id="1731d086-67ec-4cf1-9972-29c23b515f8d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SubscriberProvisioningPeerSoapBinding</con:interface><con:operation>deleteSubscriber</con:operation><con:request name="deleteSubscriber" id="20e5ba36-26c1-4044-b725-9c69a72db96e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:deleteSubscriber>
         <ser:arg0>${#Project#HighLevelOps.createTestSubscribers.local.deletetionSubscriberId}</ser:arg0>
         <ser:arg1>TestAutomation</ser:arg1>
      </ser:deleteSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="1944ce2e-9f3e-4608-9f10-c99f1c627a29"/><con:assertion type="Schema Compliance" disabled="true" id="4ce6c63a-3aba-45d2-b07e-76c2f26b0f1c"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="5e47d1dc-37ab-49eb-9abd-c4e9b0158f18"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="2nd_cancel_on_SOAP_error" id="a4a4821b-6724-43d5-b929-fca91a982280"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("deleteSubscriber").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'HighLevelOps.createTestSubscribers.output.resultCode=' + testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value
  testRunner.fail( "deleteSubscriber" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="2nd_transfer_response_values" id="3b849004-7624-4d9e-8bc9-3aacd04eb20e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>deleteSubscriber</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:deleteSubscriberResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>HighLevelOps.createTestSubscribers.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_deletion_error" id="3f5f33f4-8b9c-4fb3-8216-00b319bfa393"><con:settings/><con:config><script>def resultCode = testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value

if ( resultCode != 'OK' ) {
  testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value = resultCode
  log.error 'HighLevelOps.createTestSubscribers.output.resultCode=' + resultCode
  testRunner.fail( "deleteSubscriber" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
} 
</script></con:config></con:testStep><con:testStep type="request" name="02_createSubscriber" id="8f8b1a2b-f7d0-40f7-b464-0aac12eee2f9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SubscriberProvisioningPeerSoapBinding</con:interface><con:operation>createSubscriber</con:operation><con:request name="02_createSubscriber" id="06717695-a5ed-4741-ab65-7d144d335f98"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:createSubscriber>
         <ser:arg0>
            <ser1:billingId></ser1:billingId>
            <ser1:chargingMode>ONLINE</ser1:chargingMode>
            <ser1:crmUser>TestAutomation</ser1:crmUser>
            <ser1:externalId>TestAutomation</ser1:externalId>
            <!-- ser1:imei>?</ser1:imei -->
            <ser1:imsi>${#Project#HighLevelOps.createTestSubscribers.local.currentImsi}</ser1:imsi>
            <ser1:languageId>${#Project#HighLevelOps.createTestSubscribers.input.languageId}</ser1:languageId>
            <ser1:msisdn>${#Project#HighLevelOps.createTestSubscribers.local.currentMsisdn}</ser1:msisdn>
            <ser1:serviceType>TestAutomation</ser1:serviceType>
            <!-- ser1:simType>?</ser1:simType -->
            <ser1:tariffId>${#Project#HighLevelOps.createTestSubscribers.input.tariffId}</ser1:tariffId>
            <ser1:type>${#Project#HighLevelOps.createTestSubscribers.input.type}</ser1:type>
         </ser:arg0>
      </ser:createSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="35e66e19-f53b-4ebd-a3be-e79d238a71c1"/><con:assertion type="Schema Compliance" disabled="true" id="6939b970-8edd-4e9e-85dd-6a02ad702b16"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="e5b285ed-9a89-44dd-be32-05f6245d8a6f"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="3rd_cancel_on_SOAP_error" id="75b132ae-4264-4721-b65e-7c89a0ba7745"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("02_createSubscriber").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'HighLevelOps.createTestSubscribers.output.resultCode=' + testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value
  testRunner.fail( "02_createSubscriber" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="3rd_transfer_response_values" id="598f0f19-72ad-4362-a203-81832ae42db7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>02_createSubscriber</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:createSubscriberResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>HighLevelOps.createTestSubscribers.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>02_createSubscriber</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:createSubscriberResponse[1]/ns1:return[1]/ns2:subscriberId[1]</con:sourcePath><con:targetType>HighLevelOps.createTestSubscribers.local.currentSubscriberId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_create_error" id="03e731c8-dab5-471a-9ac1-9359173db573"><con:settings/><con:config><script>def resultCode = testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value

if ( resultCode != 'OK' ) {
  log.error 'HighLevelOps.createTestSubscribers.output.resultCode=' + resultCode
  testRunner.fail( "02_createSubscriber" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
} 
</script></con:config></con:testStep><con:testStep type="request" name="activateSubscriber" id="e5691882-2066-4390-afe3-0f5908e24ca0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SubscriberPeerSoapBinding</con:interface><con:operation>activateSubscriber</con:operation><con:request name="activateSubscriber" id="736bb8f6-3cae-446b-a82c-b7fe192d1499"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:activateSubscriber>
         <ser:arg0>${#Project#HighLevelOps.createTestSubscribers.local.currentSubscriberId}</ser:arg0>
         <ser:arg1>TestAutomation</ser:arg1>
      </ser:activateSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a326bb49-3b44-4b40-ad15-9b9e926ff598"/><con:assertion type="Schema Compliance" disabled="true" id="a9c1768b-3aad-4132-87d5-b2ec7943a4f9"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="4d77f211-c42c-4397-a908-bb051cca479e"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="4th_cancel_on_SOAP_error" id="c3f700f8-2047-43d8-919a-885b4141c193"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("activateSubscriber").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'HighLevelOps.createTestSubscribers.output.resultCode=' + testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value
  testRunner.fail( "activateSubscriber" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="4th_transfer_response_values" id="ffc9747f-36ec-44c2-beee-39709888ffcf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>activateSubscriber</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:activateSubscriberResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>HighLevelOps.createTestSubscribers.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_activate_error" id="ae472757-ba9b-49ee-b6a6-249a637071c5"><con:settings/><con:config><script>def resultCode = testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value

if ( resultCode != 'OK' ) {
  log.error 'HighLevelOps.createTestSubscribers.output.resultCode=' + resultCode
  testRunner.fail( "activateSubscriber" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
} 
</script></con:config></con:testStep><con:testStep type="request" name="getMainAccount" id="80f134ed-c174-4759-8da0-61932fc77523"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AccountPeerSoapBinding</con:interface><con:operation>getMainAccount</con:operation><con:request name="getMainAccount" id="e968f5bb-73d5-43c6-a7e9-0f5391bacfd1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getMainAccount>
         <prov:arg0>${#Project#HighLevelOps.createTestSubscribers.local.currentSubscriberId}</prov:arg0>
      </prov:getMainAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="ad01e5af-6bbf-47ad-8258-e3f15249931e"/><con:assertion type="Schema Compliance" disabled="true" id="ecd20c41-d1b2-42cf-be98-c4e5c50888f5"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="cf17282a-beb7-4b2c-adbb-bb88b51fc687"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="5th_cancel_on_SOAP_error" id="cf77abdd-328b-4a00-8724-86b9fa15d88e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("getMainAccount").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'HighLevelOps.createTestSubscribers.output.resultCode=' + testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value
  testRunner.fail( "getMainAccount" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="5th_transfer_response_values" id="4ab59568-9272-4359-b27e-8bcb2b17aff4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMainAccount</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getMainAccountResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>HighLevelOps.createTestSubscribers.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>accountId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMainAccount</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getMainAccountResponse[1]/ns1:return[1]/ns2:account[1]/ns2:accountId[1]</con:sourcePath><con:targetType>HighLevelOps.createTestSubscribers.local.currentAccountId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_getmainaccount_error" id="1b26dce9-f138-4a31-873a-e1a61486aaf7"><con:settings/><con:config><script>def resultCode = testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value

if ( resultCode != 'OK' ) {
  testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value = resultCode
  log.error 'HighLevelOps.createTestSubscribers.output.resultCode=' + resultCode
  testRunner.fail( "getMainAccount" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
} 
</script></con:config></con:testStep><con:testStep type="request" name="setBalance" id="2809c628-ad91-4fcf-8237-cc845edede82"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AccountAdministrationPeerSoapBinding</con:interface><con:operation>setBalance</con:operation><con:request name="setBalance" id="e1e2e787-a7f1-48ed-844f-9082c5118d99"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/account_administration</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/" xmlns:prov1="http://provisioning.published.accounting.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:setBalance>
         <prov:arg0>
            <prov1:accountId>${#Project#HighLevelOps.createTestSubscribers.local.currentAccountId}</prov1:accountId>
            <prov1:amount>${#Project#HighLevelOps.createTestSubscribers.input.balance}</prov1:amount>
            <prov1:serviceType>TestAutomation</prov1:serviceType>
            <prov1:subscriberId>${#Project#HighLevelOps.createTestSubscribers.local.currentSubscriberId}</prov1:subscriberId>
         </prov:arg0>
      </prov:setBalance>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e8d6d5bb-74ad-48bd-be07-e8522a380191"/><con:assertion type="Schema Compliance" disabled="true" id="4a6dc039-0369-429c-826a-374ec1fa5137"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="050bc3cf-e655-4bf8-8612-c3fb10ec9048"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="6th_cancel_on_SOAP_error" id="f6e3cead-3362-48af-8064-d6586e5ef729"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("setBalance").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'HighLevelOps.createTestSubscribers.output.resultCode=' + testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value
  testRunner.fail( "setBalance" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="6th_transfer_response_values" id="922e7004-b914-4f3b-82f9-f683d040e183"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>setBalance</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:setBalanceResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>HighLevelOps.createTestSubscribers.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_setbalance_error" id="7350f5a8-ad8b-4cd7-b23b-7f522093d893"><con:settings/><con:config><script>def resultCode = testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value

if ( resultCode != 'OK' ) {
  testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value = resultCode
  log.error 'HighLevelOps.createTestSubscribers.output.resultCode=' + resultCode
  testRunner.fail( "setBalance" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
} 
</script></con:config></con:testStep><con:testStep type="groovy" name="repeat_01_amount_times" id="f7db4f77-1c6f-4f52-ab91-98ed6b2c680b"><con:settings/><con:config><script>def counter = Integer.parseInt(testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.local.repeatcounter'].value)
counter=counter+1
testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.local.repeatcounter'].value = counter

def amount = Integer.parseInt(testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.input.amount'].value)
if(counter >=amount) {
  //log.info 'counter= ' + counter + ' => Exit' 
} else {
  //log.info 'counter= ' + counter + ' => Repeat' 
  testRunner.gotoStep(testRunner.testCase.getTestStepIndexByName('01_init_next_subscriber'))
}</script></con:config></con:testStep><con:testStep type="groovy" name="finish_successful" id="518e0b95-0b1b-4f22-9ad4-2ee184fbae1b"><con:settings/><con:config><script>  log.info 'HighLevelOps.createTestSubscribers.output.resultCode=' + testRunner.testCase.testSuite.project.properties['HighLevelOps.createTestSubscribers.output.resultCode'].value
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="LowLevelOps" id="a1b73d63-e566-44b2-a599-7677d95b9943"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="getSubscriberProfileById" searchProperties="true" id="1a3a4b89-f1cb-4dea-a89a-2a274911e835" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>
Arguments (i.e. related LowLevelOps.getSubscriberProfileById.input.XXX project properties):

  id     specifies the subscriber whose profile is requested


Returnvalues (as "LowLevelOps.LowLevelOps.getSubscriberProfileById.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    SOAP_ERROR  in case of an interface error (e.g. no connection, invalid SOAP response, ...)
    CRCE's &lt;code> tag of the received response - i.e.
      OK                   in case of success 
      UnknownSubscriber
      ...

  providerId
  imsi
  msisdn
  state
  tariffId
  type


</con:description><con:settings/><con:testStep type="request" name="getSubscriberProfileById" id="45c69db6-7c09-455f-9471-019907faa516"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SubscriberPeerSoapBinding</con:interface><con:operation>getSubscriberProfileById</con:operation><con:request name="getSubscriberProfileById" id="bfcbe524-7f9e-40a8-988e-889846c27ee6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfileById>
         <ser:arg0>${#Project#LowLevelOps.getSubscriberProfileById.input.id}</ser:arg0>
      </ser:getSubscriberProfileById>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="8039bbfe-2723-4119-9ef1-bea7b12e0363"/><con:assertion type="Schema Compliance" disabled="true" id="f1c14780-bc6e-4df7-bcb1-6fb1e654157c"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="e0fffc20-d317-4d13-b2fc-17072d742aef"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_SOAP_error" id="eff0c954-80d4-448d-acd8-cbdb12733276"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("getSubscriberProfileById").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileById.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'LowLevelOps.getSubscriberProfileById.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileById.output.resultCode'].value
  testRunner.fail( "getSubscriberProfileById" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
  
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_response_values" id="8dbb920e-71ca-4dfe-bb8d-ada8342cfcf8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileById</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByIdResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileById.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false"><con:name>providerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileById</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByIdResponse[1]/ns1:return[1]/ns2:providerId[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileById.output.providerId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>imsi</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileById</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByIdResponse[1]/ns1:return[1]/ns2:imsi[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileById.output.imsi</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>msisdn</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileById</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByIdResponse[1]/ns1:return[1]/ns2:msisdn[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileById.output.msisdn</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>state</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileById</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByIdResponse[1]/ns1:return[1]/ns2:state[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileById.output.state</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>tariffId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileById</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByIdResponse[1]/ns1:return[1]/ns2:tariffId[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileById.output.tariffId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>type</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileById</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByIdResponse[1]/ns1:return[1]/ns2:type[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileById.output.type</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>languageId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileById</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByIdResponse[1]/ns1:return[1]/ns2:languageId[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileById.output.languageId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="log_output" id="ba63c160-9e0e-4480-8da3-4fe67d0af950"><con:settings/><con:config><script>  log.info 'LowLevelOps.getSubscriberProfileById.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileById.output.resultCode'].value
  log.info 'LowLevelOps.getSubscriberProfileById.output.providerId=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileById.output.providerId'].value
  log.info 'LowLevelOps.getSubscriberProfileById.output.imsi=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileById.output.imsi'].value
  log.info 'LowLevelOps.getSubscriberProfileById.output.msisdn=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileById.output.msisdn'].value
  log.info 'LowLevelOps.getSubscriberProfileById.output.state=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileById.output.state'].value
  log.info 'LowLevelOps.getSubscriberProfileById.output.tariffId=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileById.output.tariffId'].value
  log.info 'LowLevelOps.getSubscriberProfileById.output.type=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileById.output.type'].value
  log.info 'LowLevelOps.getSubscriberProfileById.output.languageId=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileById.output.languageId'].value
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="getSubscriberProfile" searchProperties="true" id="089abf44-060a-41a8-93b8-0666cced8b8a" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>
Arguments (i.e. related LowLevelOps.getSubscriberProfile.input.XXX project properties):

  msisdn
    specifies the  subscriber whose profile is requested


Returnvalues (as "LowLevelOps.LowLevelOps.getSubscriberProfile.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    SOAP_ERROR  in case of an interface error (e.g. no connection, invalid SOAP response, ...)
    CRCE's &lt;code> tag of the received response - i.e.
      OK                   in case of success 
      UnknownSubscriber
      ...

  providerId
  imsi
  id
  state
  tariffId
  type

</con:description><con:settings/><con:testStep type="request" name="getSubscriberProfile" id="192ba6da-d895-44a8-9ef9-21ae9859f44b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SubscriberPeerSoapBinding</con:interface><con:operation>getSubscriberProfile</con:operation><con:request name="getSubscriberProfile" id="3f7425c8-46d9-44bc-a22a-ef0c1be16695"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfile>
          <ser:arg0>${#Project#LowLevelOps.getSubscriberProfile.input.msisdn}</ser:arg0>
      </ser:getSubscriberProfile>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="18b1f178-28be-43a3-9631-b40a992684d4"/><con:assertion type="Schema Compliance" disabled="true" id="77429337-118c-416e-84cf-d7529a0952da"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="37cc421c-83ba-40bf-bd4a-8eb81bbd04fe"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_SOAP_error" id="ffcebee9-d6bd-4990-b2f3-30e0ce8cbff5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("getSubscriberProfile").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfile.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'LowLevelOps.getSubscriberProfile.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfile.output.resultCode'].value
  testRunner.fail( "getSubscriberProfile" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
  
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_response_values" id="fa2a8ea9-dca8-480b-8bab-7d0b12e7b638"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfile</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfile.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false"><con:name>providerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfile</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileResponse[1]/ns1:return[1]/ns2:providerId[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfile.output.providerId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfile</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileResponse[1]/ns1:return[1]/ns2:id[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfile.output.id</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>imsi</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfile</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileResponse[1]/ns1:return[1]/ns2:imsi[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfile.output.imsi</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>state</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfile</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileResponse[1]/ns1:return[1]/ns2:state[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfile.output.state</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>tariffId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfile</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileResponse[1]/ns1:return[1]/ns2:tariffId[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfile.output.tariffId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>type</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfile</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileResponse[1]/ns1:return[1]/ns2:type[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfile.output.type</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>languageId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfile</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileResponse[1]/ns1:return[1]/ns2:languageId[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfile.output.languageId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="log_output" id="4d8b49ea-97d6-492a-add6-ecb4262f4659"><con:settings/><con:config><script>  log.info 'LowLevelOps.getSubscriberProfile.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfile.output.resultCode'].value
  log.info 'LowLevelOps.getSubscriberProfile.output.providerId=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfile.output.providerId'].value
  log.info 'LowLevelOps.getSubscriberProfile.output.id=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfile.output.id'].value
  log.info 'LowLevelOps.getSubscriberProfile.output.imsi=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfile.output.imsi'].value
  log.info 'LowLevelOps.getSubscriberProfile.output.state=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfile.output.state'].value
  log.info 'LowLevelOps.getSubscriberProfile.output.tariffId=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfile.output.tariffId'].value
  log.info 'LowLevelOps.getSubscriberProfile.output.type=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfile.output.type'].value
  log.info 'LowLevelOps.getSubscriberProfile.output.languageId=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfile.output.languageId'].value
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="getSubscriberProfileByImsi" searchProperties="true" id="9ddd7aed-3305-4b38-8a73-3ba304b338ba" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>
Arguments (i.e. related LowLevelOps.getSubscriberProfileByImsi.input.XXX project properties):

  imsi
    specifies the  subscriber whose profile is requested


Returnvalues (as "LowLevelOps.LowLevelOps.getSubscriberProfileByImsi.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    SOAP_ERROR  in case of an interface error (e.g. no connection, invalid SOAP response, ...)
    CRCE's &lt;code> tag of the received response - i.e.
      OK                   in case of success 
      UnknownSubscriber
      ...

  providerId
  id
  msisdn
  state
  tariffId
  type

</con:description><con:settings/><con:testStep type="request" name="getSubscriberProfileByImsi" id="96e89f00-2949-460c-9be1-10ca3847d30c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SubscriberPeerSoapBinding</con:interface><con:operation>getSubscriberProfileByImsi</con:operation><con:request name="getSubscriberProfileByImsi" id="b3954761-fd71-444f-9a47-1bbdded58ee2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfileByImsi>
         <ser:arg0>${#Project#LowLevelOps.getSubscriberProfileByImsi.input.imsi}</ser:arg0>
      </ser:getSubscriberProfileByImsi>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="67247cdd-7742-4f52-8fdb-c2acdd1c372b"/><con:assertion type="Schema Compliance" disabled="true" id="6a184818-33e9-43f9-b042-c882465bde3b"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="51756ccc-7e75-4868-be83-393f3902c384"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_SOAP_error" id="ce87a7ff-f03b-42d6-9d82-58fcc4054300"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("getSubscriberProfileByImsi").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileByImsi.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'LowLevelOps.getSubscriberProfileByImsi.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileByImsi.output.resultCode'].value
  testRunner.fail( "getSubscriberProfileByImsi" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
  
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_response_values" id="57c4b372-cccb-4981-8a80-c4f7093ef613"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileByImsi</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByImsiResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileByImsi.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false"><con:name>providerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileByImsi</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByImsiResponse[1]/ns1:return[1]/ns2:providerId[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileByImsi.output.providerId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileByImsi</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByImsiResponse[1]/ns1:return[1]/ns2:id[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileByImsi.output.id</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>msisdn</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileByImsi</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByImsiResponse[1]/ns1:return[1]/ns2:msisdn[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileByImsi.output.msisdn</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>state</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileByImsi</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByImsiResponse[1]/ns1:return[1]/ns2:state[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileByImsi.output.state</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>tariffId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileByImsi</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByImsiResponse[1]/ns1:return[1]/ns2:tariffId[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileByImsi.output.tariffId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>type</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileByImsi</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByImsiResponse[1]/ns1:return[1]/ns2:type[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileByImsi.output.type</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>languageId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getSubscriberProfileByImsi</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:getSubscriberProfileByImsiResponse[1]/ns1:return[1]/ns2:languageId[1]</con:sourcePath><con:targetType>LowLevelOps.getSubscriberProfileByImsi.output.languageId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="log_output" id="21716a14-c1a6-4c67-ae45-c023397a9b53"><con:settings/><con:config><script>  log.info 'LowLevelOps.getSubscriberProfileByImsi.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileByImsi.output.resultCode'].value
  log.info 'LowLevelOps.getSubscriberProfileByImsi.output.providerId=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileByImsi.output.providerId'].value
  log.info 'LowLevelOps.getSubscriberProfileByImsi.output.id=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileByImsi.output.id'].value
  log.info 'LowLevelOps.getSubscriberProfileByImsi.output.msisdn=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileByImsi.output.msisdn'].value
  log.info 'LowLevelOps.getSubscriberProfileByImsi.output.state=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileByImsi.output.state'].value
  log.info 'LowLevelOps.getSubscriberProfileByImsi.output.tariffId=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileByImsi.output.tariffId'].value
  log.info 'LowLevelOps.getSubscriberProfileByImsi.output.type=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileByImsi.output.type'].value
  log.info 'LowLevelOps.getSubscriberProfileByImsi.output.languageId=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getSubscriberProfileByImsi.output.languageId'].value
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="createSubscriber" searchProperties="true" id="3229b26a-05fb-4e90-b76c-4ba8737c8dbe" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>
Arguments (i.e. related LowLevelOps.createSubscriber.input.XXX project properties):

  imsi
  msisdn
  languageId
  tariffId
  type             PREPAID or POSTPAID
 

Returnvalues (as "LowLevelOps.createSubscriber.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    SOAP_ERROR  in case of an interface error (e.g. no connection, invalid SOAP response, ...)
    CRCE's &lt;code> tag of the received response - i.e.
      OK                   in case of success 
      DbError
      ...

  id          the new subscriberId
</con:description><con:settings/><con:testStep type="request" name="createSubscriber" id="605d8f2a-14e8-4d13-9482-814f75427a6d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SubscriberProvisioningPeerSoapBinding</con:interface><con:operation>createSubscriber</con:operation><con:request name="createSubscriber" id="8495471f-bda3-4875-80c7-dafdfd99c4fe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:createSubscriber>
         <ser:arg0>
            <ser1:billingId></ser1:billingId>
            <ser1:chargingMode>ONLINE</ser1:chargingMode>
            <ser1:crmUser>TestAutomation</ser1:crmUser>
            <ser1:externalId>TestAutomation</ser1:externalId>
            <!-- ser1:imei>?</ser1:imei -->
            <ser1:imsi>${#Project#LowLevelOps.createSubscriber.input.imsi}</ser1:imsi>
            <ser1:languageId>${#Project#LowLevelOps.createSubscriber.input.languageId}</ser1:languageId>
            <ser1:msisdn>${#Project#LowLevelOps.createSubscriber.input.msisdn}</ser1:msisdn>
            <ser1:serviceType>TestAutomation</ser1:serviceType>
            <!-- ser1:simType>?</ser1:simType -->
            <ser1:tariffId>${#Project#LowLevelOps.createSubscriber.input.tariffId}</ser1:tariffId>
            <ser1:type>${#Project#LowLevelOps.createSubscriber.input.type}</ser1:type>
         </ser:arg0>
      </ser:createSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="c6f78ae1-40ca-4c22-a7e6-545453eddadb"/><con:assertion type="Schema Compliance" disabled="true" id="b6e15a0e-1dde-4779-94fa-ce0c599fa9bf"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="428bf4fb-b619-4480-bb3d-2a2000d45e93"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_SOAP_error" id="18847d6e-d1c1-419d-bf9e-fe5d0963896e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("createSubscriber").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['LowLevelOps.createSubscriber.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'LowLevelOps.createSubscriber.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.createSubscriber.output.resultCode'].value
  testRunner.fail( "createSubscriber" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
  
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_response_values" id="4ba72488-5420-46ad-affe-8e1b471c550c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createSubscriber</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:createSubscriberResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>LowLevelOps.createSubscriber.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>createSubscriber</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:createSubscriberResponse[1]/ns1:return[1]/ns2:subscriberId[1]</con:sourcePath><con:targetType>LowLevelOps.createSubscriber.output.id</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="log_output" id="dad8b0ad-1971-476a-8281-0497ad2c3b1f"><con:settings/><con:config><script>  log.info 'LowLevelOps.createSubscriber.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.createSubscriber.output.resultCode'].value
  log.info 'LowLevelOps.createSubscriber.output.id='         + testRunner.testCase.testSuite.project.properties['LowLevelOps.createSubscriber.output.id'].value
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="activateSubscriber" searchProperties="true" id="32b30d1b-349a-4fa9-8368-d46adb7191f3" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>
Arguments (i.e. related LowLevelOps.activateSubscriber.input.XXX project properties):

  id      subscriberId of the subscriber to be activated 

Returnvalues (as "LowLevelOps.activateSubscriber.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    SOAP_ERROR  in case of an interface error (e.g. no connection, invalid SOAP response, ...)
    CRCE's &lt;code> tag of the received response - i.e.
      OK                   in case of success 
      InvalidArguments
      ...
</con:description><con:settings/><con:testStep type="request" name="activateSubscriber" id="4474d1be-a94a-4054-909f-027b89afdc14"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SubscriberPeerSoapBinding</con:interface><con:operation>activateSubscriber</con:operation><con:request name="activateSubscriber" id="5660b265-619d-4926-a6d0-8ae464381e67"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:activateSubscriber>
         <ser:arg0>${#Project#LowLevelOps.activateSubscriber.input.id}</ser:arg0>
         <ser:arg1>TestAutomation</ser:arg1>
      </ser:activateSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="21fea587-1ee7-4655-a54a-0868a207d7de"/><con:assertion type="Schema Compliance" disabled="true" id="19b830ee-0b35-4354-808d-696260ba42c8"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="e931740c-42f0-4a17-8a5b-a9ea8661f2f2"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_SOAP_error" id="2638d81e-d33e-4f77-8071-0e7018c7a164"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("activateSubscriber").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['LowLevelOps.activateSubscriber.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'LowLevelOps.activateSubscriber.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.activateSubscriber.output.resultCode'].value
  testRunner.fail( "activateSubscriber" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
  
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_response_values" id="fae26913-bc1e-4351-80fa-6c83d423f996"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>activateSubscriber</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:activateSubscriberResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>LowLevelOps.activateSubscriber.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="log_output" id="5d3c01b0-7c5b-4142-96cb-697a05e668de"><con:settings/><con:config><script>  log.info 'LowLevelOps.activateSubscriber.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.activateSubscriber.output.resultCode'].value
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="deleteSubscriber" searchProperties="true" id="2f1f240d-b0ce-429f-81a2-45f52fad8b4e" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>
Arguments (i.e. related LowLevelOps.deleteSubscriber.input.XXX project properties):

  id      subscriberId of the subscriber to be deleted
 

Returnvalues (as "LowLevelOps.deleterSubscriber.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    SOAP_ERROR  in case of an interface error (e.g. no connection, invalid SOAP response, ...)
    CRCE's &lt;code> tag of the received response - i.e.
      OK                   in case of success 
      UnknownSubscriber
      ...
</con:description><con:settings/><con:testStep type="request" name="deleteSubscriber" id="9db4385b-1c61-4b28-8cd1-54eee0b24961"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SubscriberProvisioningPeerSoapBinding</con:interface><con:operation>deleteSubscriber</con:operation><con:request name="deleteSubscriber" id="0853aaa8-4f8f-4138-ba2f-e1b82016bd01"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}profiler/provisioning</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:deleteSubscriber>
         <ser:arg0>${#Project#LowLevelOps.deleteSubscriber.input.id}</ser:arg0>
         <ser:arg1>TestAutomation</ser:arg1>
      </ser:deleteSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="ebe87a43-deca-4ed1-9f1a-2b0f00ce06e4"/><con:assertion type="Schema Compliance" disabled="true" id="d554c5d3-a771-4202-b4e0-21002f2f4246"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="1393acd7-e90c-44ef-93b5-ddc9953c8187"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_SOAP_error" id="13e85860-e3bc-4a08-8709-b0ed317c73db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("deleteSubscriber").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['LowLevelOps.deleteSubscriber.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'LowLevelOps.deleteSubscriber.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.deleteSubscriber.output.resultCode'].value
  testRunner.fail( "deleteSubscriber" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
  
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_response_values" id="10b3ad1f-c105-4615-ab77-8249f7a13190"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>deleteSubscriber</con:sourceStep><con:sourcePath>declare namespace ns1='http://services.profiler.negret.tryge.com/';
declare namespace ns2='http://services.profiler.negret.tryge.com';
//ns1:deleteSubscriberResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>LowLevelOps.deleteSubscriber.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="log_output" id="ba59db37-7b9f-42ee-be30-2a4cfa828a98"><con:settings/><con:config><script>  log.info 'LowLevelOps.deleteSubscriber.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.deleteSubscriber.output.resultCode'].value
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="getMainAccount" searchProperties="true" id="4d1ee63f-93cf-46e5-b17b-018a25786986" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>
Arguments (i.e. related LowLevelOps.getMainAccount.input.XXX project properties):

  subscriberid
 

Returnvalues (as "LowLevelOps.getMainAccount.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    SOAP_ERROR  in case of an interface error (e.g. no connection, invalid SOAP response, ...)
    CRCE's &lt;code> tag of the received response - i.e.
      OK                   in case of success 
      UnknownSubscriber
      ...

  accountId          
  balance
  category
  currencyId
  </con:description><con:settings/><con:testStep type="request" name="getMainAccount" id="b0926bd5-9853-4d82-a63a-133aec5a9343"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AccountPeerSoapBinding</con:interface><con:operation>getMainAccount</con:operation><con:request name="getMainAccount" id="ea960940-796f-493f-83a9-6cc66fabed2e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getMainAccount>
         <prov:arg0>${#Project#LowLevelOps.getMainAccount.input.subscriberId}</prov:arg0>
      </prov:getMainAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="4702bcb5-7573-4584-b74c-91cdc448dd02"/><con:assertion type="Schema Compliance" disabled="true" id="d20cbd6e-1583-4d3a-bdd4-482f58def076"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="d4d1ab1d-3dba-4938-8b8c-9e33fe5f932c"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_SOAP_error" id="0506813f-7cb6-43d3-a265-d17d330fea0e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("getMainAccount").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['LowLevelOps.getMainAccount.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'LowLevelOps.getMainAccount.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getMainAccount.output.resultCode'].value
  testRunner.fail( "getMainAccount" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
  
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_response_values" id="23bf8264-5e94-4b92-bb5e-ea01bdc80256"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMainAccount</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getMainAccountResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>LowLevelOps.getMainAccount.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" transferChildNodes="false" useXQuery="false" ignoreEmpty="false"><con:name>accountId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMainAccount</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getMainAccountResponse[1]/ns1:return[1]/ns2:account[1]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getMainAccount.output.accountId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false"><con:name>balance</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMainAccount</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getMainAccountResponse[1]/ns1:return[1]/ns2:account[1]/ns2:balance[1]</con:sourcePath><con:targetType>LowLevelOps.getMainAccount.output.balance</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false"><con:name>category</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMainAccount</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getMainAccountResponse[1]/ns1:return[1]/ns2:account[1]/ns2:category[1]</con:sourcePath><con:targetType>LowLevelOps.getMainAccount.output.category</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>currencyId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getMainAccount</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getMainAccountResponse[1]/ns1:return[1]/ns2:account[1]/ns2:currencyId[1]</con:sourcePath><con:targetType>LowLevelOps.getMainAccount.output.currencyId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="log_output" id="c4a37b2a-b063-45ac-9aac-d1cb29ee2c27"><con:settings/><con:config><script>  log.info 'LowLevelOps.getMainAccount.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getMainAccount.output.resultCode'].value
  log.info 'LowLevelOps.getMainAccount.output.accountId=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getMainAccount.output.accountId'].value
  log.info 'LowLevelOps.getMainAccount.output.balance=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getMainAccount.output.balance'].value
  log.info 'LowLevelOps.getMainAccount.output.category=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getMainAccount.output.category'].value
  log.info 'LowLevelOps.getMainAccount.output.currencyId=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getMainAccount.output.currencyId'].value
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="setBalance" searchProperties="true" id="f493373e-f613-4b17-8ce9-d5b1a5f9c3ba" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>
Arguments (i.e. related LowLevelOps.getMainAccount.input.XXX project properties):

  subscriberid
  accountId          
  balance
 

Returnvalues (as "LowLevelOps.setBalance.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    SOAP_ERROR  in case of an interface error (e.g. no connection, invalid SOAP response, ...)
    CRCE's &lt;code> tag of the received response - i.e.
      OK                   in case of success 
      UnknownSubscriber
      ...
  </con:description><con:settings/><con:testStep type="request" name="setBalance" id="033bfeb5-b774-454b-892c-79e621856e79"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AccountAdministrationPeerSoapBinding</con:interface><con:operation>setBalance</con:operation><con:request name="setBalance" id="622a8067-90d1-4509-8621-f497392bd9b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/account_administration</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/" xmlns:prov1="http://provisioning.published.accounting.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:setBalance>
         <prov:arg0>
            <prov1:accountId>${#Project#LowLevelOps.setBalance.input.accountId}</prov1:accountId>
            <prov1:amount>${#Project#LowLevelOps.setBalance.input.amount}</prov1:amount>
            <prov1:serviceType>TestAutomation</prov1:serviceType>
            <prov1:subscriberId>${#Project#LowLevelOps.setBalance.input.subscriberId}</prov1:subscriberId>
         </prov:arg0>
      </prov:setBalance>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="c91f8648-af1a-427e-92e5-504dbdc9c9a4"/><con:assertion type="Schema Compliance" disabled="true" id="984cc1e9-acac-45be-a830-ade8cb857c64"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="0b6b8423-42f2-4ee4-97dc-c1206af6aa38"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_SOAP_error" id="aa06496b-9c7c-44aa-a0cb-e90bc1b2395a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("setBalance").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['LowLevelOps.setBalance.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'LowLevelOps.setBalance.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.setBalance.output.resultCode'].value
  testRunner.fail( "setBalance" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
  
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_response_values" id="a181d245-25af-4972-8787-9e1c5f8adbc8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>setBalance</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:setBalanceResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>LowLevelOps.setBalance.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="log_output" id="eaeb6ed7-3de0-4e88-af62-f213bf6c05ad"><con:settings/><con:config><script>  log.info 'LowLevelOps.setBalance.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.setBalance.output.resultCode'].value
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="getAccounts" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="1a67e2fd-c177-4909-b918-a7b0faadcd74"><con:description>
Arguments (i.e. related LowLevelOps.getAccounts.input.XXX project properties):

  subscriberid
 

Returnvalues (as "LowLevelOps.getAccounts.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    SOAP_ERROR  in case of an interface error (e.g. no connection, invalid SOAP response, ...)
    TOO_MANY_ACCONTS_ERROR in case that the maximum amount of accounts processable by the operation is exceeded 
    CRCE's &lt;code> tag of the received response - i.e.
      OK                   in case of success 
      UnknownSubscriber
      ...

  accountIds    semicolon separated list of the accounts' acountId          
  </con:description><con:settings/><con:testStep type="request" name="getAccounts" id="19fa9d87-d2cd-4abf-ad2d-8a21a6f3e273"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AccountPeerSoapBinding</con:interface><con:operation>getAccounts</con:operation><con:request name="getAccounts" id="322b15e1-9e94-4562-a330-3c23fc7175fd"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccounts>
         <prov:arg0>${#Project#LowLevelOps.getAccounts.input.subscriberId}</prov:arg0>
      </prov:getAccounts>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="8720f292-dd68-45f0-aa5c-5bb1b8b2926c"/><con:assertion type="Schema Compliance" disabled="true" id="066eccad-f729-4833-98dc-ef391060099e"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="ac89c5f0-5316-4c03-8fcb-55c233f92534"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_SOAP_error" id="7303b968-2e90-4f22-bea7-cd88dfa9d586"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("getAccounts").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'LowLevelOps.getAccounts.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.output.resultCode'].value
  testRunner.fail( "getAccounts" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
  
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_response_values" id="85b0a2ba-9244-403f-9b56-04e1e855aed8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" transferChildNodes="false" useXQuery="true" ignoreEmpty="false"><con:name>accountId1</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[1]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId1</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId2</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[2]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId2</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId3</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[3]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId3</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId4</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[4]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId4</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId5</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[5]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId5</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId6</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[6]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId6</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId7</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[7]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId7</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId8</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[8]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId8</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId9</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[9]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId9</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId10</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[10]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId10</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId11</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[11]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId11</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId12</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[12]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId12</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId13</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[13]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId13</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId14</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[14]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId14</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId15</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[15]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId15</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId16</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[16]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId16</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId17</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[17]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId17</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId18</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[18]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId18</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId19</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[19]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId19</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="true"><con:name>accountId20</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccounts</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountsResponse[1]/ns1:return[1]/ns2:accounts[1]/ns2:AccountType[20]/ns2:accountId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccounts.local.accountId20</con:targetType><con:targetStep>#Project#</con:targetStep><con:targetPath xsi:nil="true"/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_too_many_accounts" id="3a434437-7dd0-40c4-96c6-ec4c52561c14"><con:settings/><con:config><script>/****************************************************************** 
 * This failure shall remember on the functions limitation to
 * max 19 accounts.
 * If this error really occures some time than the ammount  
 * of supported accounts has to be increased in this ugly
 * transfer_response_value approach
 ******************************************************************/


def accountId20 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId20'].value

if ( accountId20 != null ){
  testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.output.resultCode'].value = 'TOO_MANY_ACCONTS_ERROR'
  log.error 'LowLevelOps.getAccounts.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.output.resultCode'].value
  testRunner.fail( "getAccounts" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
  
} 
</script></con:config></con:testStep><con:testStep type="groovy" name="collectAccountIds" id="cc534dbd-1602-4470-9afe-5d188a76e7f7"><con:settings/><con:config><script>/****************************************************************** 
 * This is a really ugly solution (due to the lack of SuapUI documentation)
 * for transfering multiple response values into one single property. 
 ******************************************************************/

def accountId1 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId1'].value
def accountId2 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId2'].value
def accountId3 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId3'].value
def accountId4 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId4'].value
def accountId5 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId5'].value
def accountId6 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId6'].value
def accountId7 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId7'].value
def accountId8 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId8'].value
def accountId9 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId9'].value
def accountId10 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId10'].value
def accountId11 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId11'].value
def accountId12 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId12'].value
def accountId13 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId13'].value
def accountId14 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId14'].value
def accountId15 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId15'].value
def accountId16 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId16'].value
def accountId17 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId17'].value
def accountId18 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId18'].value
def accountId19 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId19'].value
def accountId20 = testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.local.accountId20'].value

if (accountId2 != null) accountId1 = accountId1 + ";" +accountId2
if (accountId3 != null) accountId1 = accountId1 + ";" +accountId3
if (accountId4 != null) accountId1 = accountId1 + ";" +accountId4
if (accountId5 != null) accountId1 = accountId1 + ";" +accountId5
if (accountId6 != null) accountId1 = accountId1 + ";" +accountId6
if (accountId7 != null) accountId1 = accountId1 + ";" +accountId7
if (accountId8 != null) accountId1 = accountId1 + ";" +accountId8
if (accountId9 != null) accountId1 = accountId1 + ";" +accountId9
if (accountId9 != null) accountId1 = accountId1 + ";" +accountId10
if (accountId9 != null) accountId1 = accountId1 + ";" +accountId11
if (accountId9 != null) accountId1 = accountId1 + ";" +accountId12
if (accountId9 != null) accountId1 = accountId1 + ";" +accountId13
if (accountId9 != null) accountId1 = accountId1 + ";" +accountId14
if (accountId9 != null) accountId1 = accountId1 + ";" +accountId15
if (accountId9 != null) accountId1 = accountId1 + ";" +accountId16
if (accountId9 != null) accountId1 = accountId1 + ";" +accountId17
if (accountId9 != null) accountId1 = accountId1 + ";" +accountId18
if (accountId9 != null) accountId1 = accountId1 + ";" +accountId19
if (accountId9 != null) accountId1 = accountId1 + ";" +accountId20

testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.output.accountIds'].value = accountId1

</script></con:config></con:testStep><con:testStep type="groovy" name="log_output" id="44fbb645-5d4a-4e9a-90cd-d3887ad07e00"><con:settings/><con:config><script>  log.info 'LowLevelOps.getAccounts.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.output.resultCode'].value
  log.info 'LowLevelOps.getAccounts.output.accountIds=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccounts.output.accountIds'].value

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="getAccount" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2c5140e3-ec19-4446-97af-97e539c74b7d"><con:description>
Arguments (i.e. related LowLevelOps.getAccount.input.XXX project properties):

  subscriberid
  accountId

Returnvalues (as "LowLevelOps.getMainAccount.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    SOAP_ERROR  in case of an interface error (e.g. no connection, invalid SOAP response, ...)
    CRCE's &lt;code> tag of the received response - i.e.
      OK                   in case of success 
      UnknownSubscriber
      ...

  balance
  category
  currencyId
  </con:description><con:settings/><con:testStep type="request" name="getAccount" id="18e2d784-9d80-4907-b774-623c95c6062d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AccountPeerSoapBinding</con:interface><con:operation>getAccount</con:operation><con:request name="getAccount" id="416388e2-d926-4f94-aee9-332a92f6b69b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#crceHost}:${#Project#crcePort}${#Project#crceWebservicesBasePath}accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccount>
         <prov:arg0>${#Project#LowLevelOps.getAccount.input.subscriberId}</prov:arg0>
         <prov:arg1>${#Project#LowLevelOps.getAccount.input.accountId}</prov:arg1>
      </prov:getAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="f6d61dbc-1744-4fe9-9e22-05883e932a31"/><con:assertion type="Schema Compliance" disabled="true" id="4bd9ad75-3d7e-4217-abd4-77a8d259775c"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="1c103129-a700-4a37-b44c-b4d4ff1ff416"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_SOAP_error" id="c78e08d7-002e-4864-9520-e0bdd2900c6d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

  
if ( testRunner.testCase.getTestStepByName("getAccount").assertionStatus!=AssertionStatus.VALID ){
  testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccount.output.resultCode'].value = 'SOAP_ERROR'
  log.error 'LowLevelOps.getAccount.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccount.output.resultCode'].value
  testRunner.fail( "getAccount" )
  //testRunner.cancel( "00_check_ARS_availability" )
  //testRunner.gotoStepByName("finish")
  
} 
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_response_values" id="070247c5-fabe-43cb-ac53-f7d5ca9e90f0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>code</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccount</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountResponse[1]/ns1:return[1]/ns2:code[1]</con:sourcePath><con:targetType>LowLevelOps.getAccount.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>balance</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccount</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountResponse[1]/ns1:return[1]/ns2:account[1]/ns2:balance[1]</con:sourcePath><con:targetType>LowLevelOps.getAccount.output.balance</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false"><con:name>category</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccount</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountResponse[1]/ns1:return[1]/ns2:account[1]/ns2:category[1]</con:sourcePath><con:targetType>LowLevelOps.getAccount.output.category</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>currencyId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>getAccount</con:sourceStep><con:sourcePath>declare namespace ns1='http://provisioning.published.accounting.negret.tryge.com/';
declare namespace ns2='http://provisioning.published.accounting.negret.tryge.com';
//ns1:getAccountResponse[1]/ns1:return[1]/ns2:account[1]/ns2:currencyId[1]</con:sourcePath><con:targetType>LowLevelOps.getAccount.output.currencyId</con:targetType><con:targetStep>#Project#</con:targetStep><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="log_output" id="6554d738-0a90-43d7-bed8-bdcf3469f199"><con:settings/><con:config><script>  log.info 'LowLevelOps.getAccount.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccount.output.resultCode'].value
  log.info 'LowLevelOps.getAccount.output.balance=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccount.output.balance'].value
  log.info 'LowLevelOps.getAccount.output.category=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccount.output.category'].value
  log.info 'LowLevelOps.getAccount.output.currencyId=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.getAccount.output.currencyId'].value
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>crceHost</con:name><con:value>10.105.119.125</con:value></con:property><con:property><con:name>crcePort</con:name><con:value>8080</con:value></con:property><con:property><con:name>crceWebservicesBasePath</con:name><con:value>/inew-mvno-crce-webservices/</con:value></con:property><con:property><con:name>HighLevelOps.createTestSubscribers.input.amount</con:name><con:value>2</con:value></con:property><con:property><con:name>HighLevelOps.createTestSubscribers.input.imsiRangeStart</con:name><con:value>530052041186875</con:value></con:property><con:property><con:name>HighLevelOps.createTestSubscribers.input.msisdnRangeStart</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">642041186875</con:value></con:property><con:property><con:name>HighLevelOps.createTestSubscribers.input.tariffId</con:name><con:value>101001</con:value></con:property><con:property><con:name>HighLevelOps.createTestSubscribers.input.balance</con:name><con:value>10000000</con:value></con:property><con:property><con:name>HighLevelOps.createTestSubscribers.input.languageId</con:name><con:value>1</con:value></con:property><con:property><con:name>HighLevelOps.createTestSubscribers.input.type</con:name><con:value>PREPAID</con:value></con:property><con:property><con:name>HighLevelOps.createTestSubscribers.local.repeatcounter</con:name><con:value>2</con:value></con:property><con:property><con:name>HighLevelOps.createTestSubscribers.local.currentImsi</con:name><con:value>530052041186876</con:value></con:property><con:property><con:name>HighLevelOps.createTestSubscribers.local.currentMsisdn</con:name><con:value>642041186876</con:value></con:property><con:property><con:name>HighLevelOps.createTestSubscribers.local.currentSubscriberId</con:name><con:value>353736</con:value></con:property><con:property><con:name>HighLevelOps.createTestSubscribers.local.currentAccountId</con:name><con:value>353737</con:value></con:property><con:property><con:name>HighLevelOps.createTestSubscribers.local.deletetionSubscriberId</con:name><con:value>353381</con:value></con:property><con:property><con:name>HighLevelOps.createTestSubscribers.output.resultCode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">OK</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileById.input.id</con:name><con:value>10085</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileById.output.resultCode</con:name><con:value>OK</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileById.output.providerId</con:name><con:value>1</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileById.output.imsi</con:name><con:value>530052041000000</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileById.output.msisdn</con:name><con:value>642041000000</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileById.output.state</con:name><con:value>ACTIVE</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileById.output.tariffId</con:name><con:value>101003</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileById.output.type</con:name><con:value>PREPAID</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileById.output.languageId</con:name><con:value>1</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfile.input.msisdn</con:name><con:value>642041000002</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfile.output.resultCode</con:name><con:value>UnknownSubscriber</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfile.output.providerId</con:name><con:value>0</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfile.output.id</con:name><con:value>0</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfile.output.imsi</con:name><con:value>&lt;ns2:imsi xsi:nil="true" xmlns:ns2="http://services.profiler.negret.tryge.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns1="http://services.profiler.negret.tryge.com/" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"/></con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfile.output.state</con:name><con:value>&lt;ns2:state xsi:nil="true" xmlns:ns2="http://services.profiler.negret.tryge.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns1="http://services.profiler.negret.tryge.com/" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"/></con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfile.output.tariffId</con:name><con:value>0</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfile.output.type</con:name><con:value>&lt;ns2:type xsi:nil="true" xmlns:ns2="http://services.profiler.negret.tryge.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns1="http://services.profiler.negret.tryge.com/" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"/></con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfile.output.languageId</con:name><con:value>0</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileByImsi.input.imsi</con:name><con:value>730013000010000</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileByImsi.output.resultCode</con:name><con:value>SOAP_ERROR</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileByImsi.output.providerId</con:name><con:value>1</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileByImsi.output.id</con:name><con:value>11683</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileByImsi.output.msisdn</con:name><con:value>642041000002</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileByImsi.output.state</con:name><con:value>INSTALLED</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileByImsi.output.tariffId</con:name><con:value>101003</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileByImsi.output.type</con:name><con:value>PREPAID</con:value></con:property><con:property><con:name>LowLevelOps.getSubscriberProfileByImsi.output.languageId</con:name><con:value>1</con:value></con:property><con:property><con:name>LowLevelOps.createSubscriber.input.imsi</con:name><con:value>530052041000002</con:value></con:property><con:property><con:name>LowLevelOps.createSubscriber.input.msisdn</con:name><con:value>642041000002</con:value></con:property><con:property><con:name>LowLevelOps.createSubscriber.input.languageId</con:name><con:value>1</con:value></con:property><con:property><con:name>LowLevelOps.createSubscriber.input.tariffId</con:name><con:value>101003</con:value></con:property><con:property><con:name>LowLevelOps.createSubscriber.input.type</con:name><con:value>PREPAID</con:value></con:property><con:property><con:name>LowLevelOps.createSubscriber.output.resultCode</con:name><con:value>OK</con:value></con:property><con:property><con:name>LowLevelOps.createSubscriber.output.id</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">11685</con:value></con:property><con:property><con:name>LowLevelOps.activateSubscriber.input.id</con:name><con:value>10576</con:value></con:property><con:property><con:name>LowLevelOps.activateSubscriber.output.resultCode</con:name><con:value>UnknownSubscriber</con:value></con:property><con:property><con:name>LowLevelOps.deleteSubscriber.input.id</con:name><con:value>11683</con:value></con:property><con:property><con:name>LowLevelOps.deleteSubscriber.output.resultCode</con:name><con:value>OK</con:value></con:property><con:property><con:name>LowLevelOps.getMainAccount.input.subscriberId</con:name><con:value>12171</con:value></con:property><con:property><con:name>LowLevelOps.getMainAccount.output.resultCode</con:name><con:value>OK</con:value></con:property><con:property><con:name>LowLevelOps.getMainAccount.output.accountId</con:name><con:value>12172</con:value></con:property><con:property><con:name>LowLevelOps.getMainAccount.output.balance</con:name><con:value>1</con:value></con:property><con:property><con:name>LowLevelOps.getMainAccount.output.category</con:name><con:value>MAIN</con:value></con:property><con:property><con:name>LowLevelOps.getMainAccount.output.currencyId</con:name><con:value>1</con:value></con:property><con:property><con:name>LowLevelOps.setBalance.input.subscriberId</con:name><con:value>12473</con:value></con:property><con:property><con:name>LowLevelOps.setBalance.input.accountId</con:name><con:value>12474</con:value></con:property><con:property><con:name>LowLevelOps.setBalance.input.amount</con:name><con:value>1</con:value></con:property><con:property><con:name>LowLevelOps.setBalance.output.resultCode</con:name><con:value>OK</con:value></con:property><con:property><con:name>LowLevelOps.getAccounts.input.subscriberId</con:name><con:value>12248</con:value></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId1</con:name><con:value>12249</con:value></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId2</con:name><con:value>12252</con:value></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId3</con:name><con:value>12251</con:value></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId4</con:name><con:value>12250</con:value></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId5</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId6</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId7</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId8</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId9</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId10</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId11</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId12</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId13</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId14</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId15</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId16</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId17</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId18</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId19</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.local.accountId20</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LowLevelOps.getAccounts.output.resultCode</con:name><con:value>OK</con:value></con:property><con:property><con:name>LowLevelOps.getAccounts.output.accountIds</con:name><con:value>12249;12252;12251;12250</con:value></con:property><con:property><con:name>LowLevelOps.getAccount.input.subscriberId</con:name><con:value>12248</con:value></con:property><con:property><con:name>LowLevelOps.getAccount.input.accountId</con:name><con:value>12252</con:value></con:property><con:property><con:name>LowLevelOps.getAccount.output.resultCode</con:name><con:value>OK</con:value></con:property><con:property><con:name>LowLevelOps.getAccount.output.balance</con:name><con:value>1</con:value></con:property><con:property><con:name>LowLevelOps.getAccount.output.category</con:name><con:value>TARIFF_PLAN</con:value></con:property><con:property><con:name>LowLevelOps.getAccount.output.currencyId</con:name><con:value>4</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>