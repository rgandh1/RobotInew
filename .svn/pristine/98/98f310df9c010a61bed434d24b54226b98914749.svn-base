<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20150630 11:53:17.068">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/regression-robot-suite.txt" id="s1" name="Regression-Robot-Suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20150630 11:53:18.799" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20150630 11:53:18.802" level="INFO">${date} = Tue Jun 30 11:53:18 CEST 2015</msg>
<status status="PASS" endtime="20150630 11:53:18.801" starttime="20150630 11:53:18.788"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:53:18.807" level="INFO">Date and time: Tue Jun 30 11:53:18 CEST 2015</msg>
<status status="PASS" endtime="20150630 11:53:18.808" starttime="20150630 11:53:18.804"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:53:18.812" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20150630 11:53:18.813" starttime="20150630 11:53:18.810"></status>
</kw>
<kw type="kw" name="${in_version} = Check IN Version">
<doc>Checks the version of the running service</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:19.018" starttime="20150630 11:53:18.826"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
</arguments>
<msg timestamp="20150630 11:53:19.027" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:53:20.317" level="INFO">Read output: Last login: Tue Jun 30 09:38:15 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$[m</msg>
<msg timestamp="20150630 11:53:20.324" level="INFO">${output_login} = Last login: Tue Jun 30 09:38:15 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150630 11:53:20.320" starttime="20150630 11:53:19.024"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20150630 11:53:20.335" level="INFO">Last login: Tue Jun 30 09:38:15 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150630 11:53:20.338" starttime="20150630 11:53:20.329"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-corein-services status</arg>
</arguments>
<msg timestamp="20150630 11:53:20.346" level="INFO">Executing command 'sudo service inew-mvno-corein-services status'.</msg>
<msg timestamp="20150630 11:53:22.922" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:53:22.929" level="INFO">${output} =  inew-mvna-corein-router-mfc-3.0.1
I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 31713 
 inew-mvna-corein-router-moc-3.0.1
I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-...</msg>
<status status="PASS" endtime="20150630 11:53:22.926" starttime="20150630 11:53:20.342"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20150630 11:53:22.941" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 5399 </msg>
<status status="PASS" endtime="20150630 11:53:22.940" starttime="20150630 11:53:22.934"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20150630 11:53:22.953" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20150630 11:53:22.951" starttime="20150630 11:53:22.946"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:53:22.964" starttime="20150630 11:53:22.957"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN version: ${version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:53:22.976" level="INFO">IN version:  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20150630 11:53:22.979" starttime="20150630 11:53:22.970"></status>
</kw>
<msg timestamp="20150630 11:53:22.985" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20150630 11:53:22.983" starttime="20150630 11:53:18.815"></status>
</kw>
<kw type="kw" name="${xdr_version} = Check XDR Version">
<doc>Checks the version of the running service</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:23.079" starttime="20150630 11:53:23.016"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20150630 11:53:23.089" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:53:24.346" level="INFO">Read output: Last login: Tue Jun 30 09:38:14 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$[m</msg>
<msg timestamp="20150630 11:53:24.352" level="INFO">${output_login} = Last login: Tue Jun 30 09:38:14 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150630 11:53:24.349" starttime="20150630 11:53:23.083"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20150630 11:53:24.361" level="INFO">Last login: Tue Jun 30 09:38:14 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150630 11:53:24.363" starttime="20150630 11:53:24.356"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-xdr status</arg>
</arguments>
<msg timestamp="20150630 11:53:24.372" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20150630 11:53:24.756" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:53:24.760" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.0.22932 is running PID: 3376 </msg>
<status status="PASS" endtime="20150630 11:53:24.758" starttime="20150630 11:53:24.367"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20150630 11:53:24.771" level="INFO">${version_r} =  5.3.0.22932 is running PID: 3376 </msg>
<status status="PASS" endtime="20150630 11:53:24.770" starttime="20150630 11:53:24.763"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20150630 11:53:24.781" level="INFO">${version} =  5.3.0.22932 </msg>
<status status="PASS" endtime="20150630 11:53:24.780" starttime="20150630 11:53:24.774"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:53:24.792" starttime="20150630 11:53:24.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR version: ${version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:53:24.801" level="INFO">XDR version:  5.3.0.22932 </msg>
<status status="PASS" endtime="20150630 11:53:24.804" starttime="20150630 11:53:24.795"></status>
</kw>
<msg timestamp="20150630 11:53:24.811" level="INFO">${xdr_version} =  5.3.0.22932 </msg>
<status status="PASS" endtime="20150630 11:53:24.808" starttime="20150630 11:53:22.990"></status>
</kw>
<kw type="kw" name="${crce_version} = Check CRCE Version">
<doc>Checks the version of the running service</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${CRCE HOST}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:24.895" starttime="20150630 11:53:24.835"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
</arguments>
<msg timestamp="20150630 11:53:24.909" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:53:26.179" level="INFO">Read output: Last login: Tue Jun 30 09:38:15 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$[m</msg>
<msg timestamp="20150630 11:53:26.184" level="INFO">${output_login} = Last login: Tue Jun 30 09:38:15 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150630 11:53:26.182" starttime="20150630 11:53:24.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20150630 11:53:26.192" level="INFO">Last login: Tue Jun 30 09:38:15 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150630 11:53:26.194" starttime="20150630 11:53:26.188"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-crce status</arg>
</arguments>
<msg timestamp="20150630 11:53:26.200" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20150630 11:53:26.397" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:53:26.402" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.12.25820
Negret Rating &amp; Charging Engine 5.3.12.25820 is running (PID:4190, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20150630 11:53:26.400" starttime="20150630 11:53:26.197"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20150630 11:53:26.412" level="INFO">${version_r} =  5.3.12.25820 is running (PID:4190, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20150630 11:53:26.411" starttime="20150630 11:53:26.405"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20150630 11:53:26.422" level="INFO">${version} =  5.3.12.25820 </msg>
<status status="PASS" endtime="20150630 11:53:26.420" starttime="20150630 11:53:26.415"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:53:26.430" starttime="20150630 11:53:26.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE version: ${version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:53:26.439" level="INFO">CRCE version:  5.3.12.25820 </msg>
<status status="PASS" endtime="20150630 11:53:26.441" starttime="20150630 11:53:26.434"></status>
</kw>
<msg timestamp="20150630 11:53:26.448" level="INFO">${crce_version} =  5.3.12.25820 </msg>
<status status="PASS" endtime="20150630 11:53:26.444" starttime="20150630 11:53:24.815"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20150630 11:53:26.456" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20150630 11:53:26.455" starttime="20150630 11:53:26.451"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20150630 11:53:26.502" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20150630 11:53:26.504" starttime="20150630 11:53:26.497"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20150630 11:53:26.511" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20150630 11:53:26.513" starttime="20150630 11:53:26.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20150630 11:53:26.521" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20150630 11:53:26.522" starttime="20150630 11:53:26.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20150630 11:53:26.529" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20150630 11:53:26.531" starttime="20150630 11:53:26.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20150630 11:53:26.538" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20150630 11:53:26.540" starttime="20150630 11:53:26.534"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20150630 11:53:26.547" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20150630 11:53:26.549" starttime="20150630 11:53:26.543"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20150630 11:53:26.553" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20150630 11:53:26.553" starttime="20150630 11:53:26.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20150630 11:53:26.557" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20150630 11:53:26.557" starttime="20150630 11:53:26.555"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20150630 11:53:26.629" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20150630 11:53:26.630" starttime="20150630 11:53:26.624"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20150630 11:53:26.634" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20150630 11:53:26.635" starttime="20150630 11:53:26.632"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20150630 11:53:26.657" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:26.658" starttime="20150630 11:53:26.653"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:26.660" starttime="20150630 11:53:26.650"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20150630 11:53:26.667" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:26.668" starttime="20150630 11:53:26.664"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:26.670" starttime="20150630 11:53:26.661"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20150630 11:53:26.678" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:26.679" starttime="20150630 11:53:26.675"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:26.681" starttime="20150630 11:53:26.671"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:26.682" starttime="20150630 11:53:26.640"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20150630 11:53:26.689" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20150630 11:53:26.690" starttime="20150630 11:53:26.684"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:26.695" starttime="20150630 11:53:26.692"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:26.700" starttime="20150630 11:53:26.697"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:26.705" starttime="20150630 11:53:26.702"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:26.709" starttime="20150630 11:53:26.707"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:26.713" starttime="20150630 11:53:26.711"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:26.717" starttime="20150630 11:53:26.715"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:26.721" starttime="20150630 11:53:26.719"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:26.725" starttime="20150630 11:53:26.723"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:26.729" starttime="20150630 11:53:26.727"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:26.733" starttime="20150630 11:53:26.730"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:26.737" starttime="20150630 11:53:26.734"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:26.741" starttime="20150630 11:53:26.738"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:53:26.746" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20150630 11:53:33.348" level="INFO">11:53:26,927 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/ext] for external libraries
11:53:26,927 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
11:53:28,844 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
11:53:28,860 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.113.125]
11:53:28,860 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
11:53:28,860 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
11:53:28,860 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [1]
11:53:28,860 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [530052041010000]
11:53:28,860 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [642041010000]
11:53:28,861 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
11:53:28,861 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
11:53:28,861 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
11:53:28,861 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
11:53:28,861 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
11:53:28,861 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
11:53:28,871 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
11:53:28,877 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
11:53:29,482 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
11:53:29,546 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
11:53:29,714 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:53:29,714 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
11:53:30,438 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:53:30,445 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:53:30,638 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:53:30,638 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:53:30,642 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:53:30,642 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
11:53:30,721 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
11:53:30,994 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
11:53:31,020 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
11:53:31,022 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:53:31,024 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:53:31,024 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
11:53:31,682 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:53:31,683 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:53:31,692 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:53:31,692 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:53:31,692 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:53:31,692 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
11:53:31,764 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
11:53:31,770 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
11:53:31,821 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
11:53:31,825 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:53:31,827 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:53:31,827 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
11:53:31,849 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:53:31,850 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:53:31,856 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:53:31,856 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:53:31,856 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:53:31,856 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
11:53:31,926 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
11:53:31,937 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
11:53:31,982 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
11:53:31,985 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:53:31,987 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:53:31,987 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
11:53:32,314 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:53:32,314 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:53:32,326 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:53:32,326 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:53:32,326 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:53:32,326 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
11:53:32,394 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
11:53:32,400 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
11:53:32,444 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
11:53:32,447 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:53:32,449 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:53:32,449 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
11:53:32,792 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:53:32,792 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:53:32,806 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:53:32,807 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:53:32,807 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:53:32,807 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
11:53:32,884 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
11:53:32,905 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
11:53:32,936 INFO  [SoapUITestCaseRunner] running step [setBalance]
11:53:32,938 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:53:32,939 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:53:32,939 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
11:53:33,135 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:53:33,135 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:53:33,147 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:53:33,148 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:53:33,148 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:53:33,148 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
11:53:33,214 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
11:53:33,224 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
11:53:33,267 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
11:53:33,312 INFO  [SoapUITestCaseRunner] running step [finish_successful]
11:53:33,344 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
11:53:33,345 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 4434ms, status: FINISHED
11:53:33,345 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 4434ms</msg>
<status status="PASS" endtime="20150630 11:53:33.351" starttime="20150630 11:53:26.744"></status>
</kw>
<msg timestamp="20150630 11:53:33.354" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150630 11:53:33.355" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20150630 11:53:33.353" starttime="20150630 11:53:26.742"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20150630 11:53:33.374" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20150630 11:53:33.374" starttime="20150630 11:53:33.371"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150630 11:53:33.379" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20150630 11:53:33.378" starttime="20150630 11:53:33.376"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150630 11:53:33.383" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20150630 11:53:33.383" starttime="20150630 11:53:33.381"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20150630 11:53:33.392" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:53:33.398" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20150630 11:53:33.399" starttime="20150630 11:53:33.388"></status>
</kw>
<msg timestamp="20150630 11:53:33.401" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150630 11:53:33.402" level="INFO">${return_log_entry} = 2015-06-30 11:53:33,344 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150630 11:53:33.400" starttime="20150630 11:53:33.385"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:33.419" starttime="20150630 11:53:33.416"></status>
</kw>
<msg timestamp="20150630 11:53:33.420" level="INFO">${return_log_entry} = 2015-06-30 11:53:33,344 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150630 11:53:33.420" starttime="20150630 11:53:33.405"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:33.430" starttime="20150630 11:53:33.428"></status>
</kw>
<msg timestamp="20150630 11:53:33.431" level="INFO">${return_log_entry} = 2015-06-30 11:53:33,344 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150630 11:53:33.431" starttime="20150630 11:53:33.422"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:33.441" starttime="20150630 11:53:33.439"></status>
</kw>
<msg timestamp="20150630 11:53:33.443" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150630 11:53:33.442" starttime="20150630 11:53:33.433"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:33.455" starttime="20150630 11:53:33.453"></status>
</kw>
<msg timestamp="20150630 11:53:33.456" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150630 11:53:33.456" starttime="20150630 11:53:33.444"></status>
</kw>
<msg timestamp="20150630 11:53:33.459" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150630 11:53:33.458" starttime="20150630 11:53:33.358"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:33.473" starttime="20150630 11:53:33.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:33.477" starttime="20150630 11:53:33.475"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:33.480" starttime="20150630 11:53:33.478"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20150630 11:53:33.495" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20150630 11:53:33.496" starttime="20150630 11:53:33.489"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:33.497" starttime="20150630 11:53:33.487"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:33.498" starttime="20150630 11:53:33.481"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:33.499" starttime="20150630 11:53:33.460"></status>
</kw>
<msg timestamp="20150630 11:53:33.502" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20150630 11:53:33.501" starttime="20150630 11:53:26.464"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20150630 11:53:33.505" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150630 11:53:33.506" starttime="20150630 11:53:33.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:53:33.509" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20150630 11:53:33.510" starttime="20150630 11:53:33.508"></status>
</kw>
<kw type="kw" name="${week} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date +%V</arg>
</arguments>
<msg timestamp="20150630 11:53:33.518" level="INFO">Running command 'date +%V 2&gt;&amp;1'</msg>
<msg timestamp="20150630 11:53:33.526" level="INFO">${week} = 27</msg>
<status status="PASS" endtime="20150630 11:53:33.524" starttime="20150630 11:53:33.512"></status>
</kw>
<kw type="kw" name="${year} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date +%Y</arg>
</arguments>
<msg timestamp="20150630 11:53:33.539" level="INFO">Running command 'date +%Y 2&gt;&amp;1'</msg>
<msg timestamp="20150630 11:53:33.544" level="INFO">${year} = 2015</msg>
<status status="PASS" endtime="20150630 11:53:33.543" starttime="20150630 11:53:33.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${YYYYwWW}</arg>
<arg>${year}w${week}</arg>
</arguments>
<msg timestamp="20150630 11:53:33.589" level="INFO">${YYYYwWW} = 2015w27</msg>
<status status="PASS" endtime="20150630 11:53:33.591" starttime="20150630 11:53:33.547"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:33.593" starttime="20150630 11:53:18.777"></status>
</kw>
<test id="s1-t1" name="Run MOC Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Connect with XDR and start the log monitoring</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:33.626" starttime="20150630 11:53:33.623"></status>
</kw>
<kw type="kw" name="${ssh_connection_xdr} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:33.696" starttime="20150630 11:53:33.694"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:33.763" starttime="20150630 11:53:33.703"></status>
</kw>
<msg timestamp="20150630 11:53:33.767" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150630 11:53:33.766" starttime="20150630 11:53:33.697"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150630 11:53:33.788" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:53:34.191" level="INFO">Read output: Last login: Tue Jun 30 09:53:23 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150630 11:53:34.193" starttime="20150630 11:53:33.782"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:34.195" starttime="20150630 11:53:33.770"></status>
</kw>
<msg timestamp="20150630 11:53:34.197" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150630 11:53:34.196" starttime="20150630 11:53:33.682"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:34.211" starttime="20150630 11:53:34.209"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:53:34.214" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20150630 11:53:34.218" starttime="20150630 11:53:34.212"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:34.219" starttime="20150630 11:53:34.199"></status>
</kw>
<msg timestamp="20150630 11:53:34.221" level="INFO">${ssh_connection_xdr} = 4</msg>
<status status="PASS" endtime="20150630 11:53:34.220" starttime="20150630 11:53:33.659"></status>
</kw>
<kw type="kw" name="${ssh_connection_in} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN_MOC_LOG_FILE_PATH}${IN_LOG_FILE_NAME}</arg>
<arg>host=${IN-APP HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:34.261" starttime="20150630 11:53:34.259"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:34.324" starttime="20150630 11:53:34.268"></status>
</kw>
<msg timestamp="20150630 11:53:34.328" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150630 11:53:34.327" starttime="20150630 11:53:34.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150630 11:53:34.348" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:53:34.767" level="INFO">Read output: Last login: Tue Jun 30 09:53:19 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20150630 11:53:34.769" starttime="20150630 11:53:34.343"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:34.771" starttime="20150630 11:53:34.331"></status>
</kw>
<msg timestamp="20150630 11:53:34.775" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150630 11:53:34.774" starttime="20150630 11:53:34.248"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:34.803" starttime="20150630 11:53:34.798"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:53:34.810" level="INFO">Starting command 'tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20150630 11:53:34.815" starttime="20150630 11:53:34.805"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:34.817" starttime="20150630 11:53:34.780"></status>
</kw>
<msg timestamp="20150630 11:53:34.821" level="INFO">${ssh_connection_in} = 5</msg>
<status status="PASS" endtime="20150630 11:53:34.820" starttime="20150630 11:53:34.235"></status>
</kw>
<kw type="kw" name="${ssh_connection_crce} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE_LOG_FILE_PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:34.945" starttime="20150630 11:53:34.941"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:35.003" starttime="20150630 11:53:34.958"></status>
</kw>
<msg timestamp="20150630 11:53:35.008" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20150630 11:53:35.006" starttime="20150630 11:53:34.947"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150630 11:53:35.028" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:53:35.436" level="INFO">Read output: Last login: Tue Jun 30 09:53:25 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20150630 11:53:35.437" starttime="20150630 11:53:35.024"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:35.438" starttime="20150630 11:53:35.011"></status>
</kw>
<msg timestamp="20150630 11:53:35.441" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20150630 11:53:35.440" starttime="20150630 11:53:34.918"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:35.453" starttime="20150630 11:53:35.451"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:53:35.456" level="INFO">Starting command 'tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20150630 11:53:35.461" starttime="20150630 11:53:35.454"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:35.462" starttime="20150630 11:53:35.443"></status>
</kw>
<msg timestamp="20150630 11:53:35.464" level="INFO">${ssh_connection_crce} = 6</msg>
<status status="PASS" endtime="20150630 11:53:35.463" starttime="20150630 11:53:34.892"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MOC *******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:35.467" starttime="20150630 11:53:35.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:53:35.469" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20150630 11:53:35.470" starttime="20150630 11:53:35.468"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20150630 11:53:35.502" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20150630 11:53:35.501" starttime="20150630 11:53:35.499"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20150630 11:53:35.505" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20150630 11:53:35.505" starttime="20150630 11:53:35.503"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20150630 11:53:35.509" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20150630 11:53:35.509" starttime="20150630 11:53:35.507"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20150630 11:53:35.513" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20150630 11:53:35.512" starttime="20150630 11:53:35.510"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:35.515" starttime="20150630 11:53:35.514"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20150630 11:53:35.520" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:35.520" starttime="20150630 11:53:35.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:35.523" starttime="20150630 11:53:35.521"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20150630 11:53:35.527" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:35.527" starttime="20150630 11:53:35.524"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150630 11:53:35.532" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:35.533" starttime="20150630 11:53:35.528"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:35.535" starttime="20150630 11:53:35.534"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150630 11:53:35.539" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:35.539" starttime="20150630 11:53:35.536"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20150630 11:53:35.544" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:35.545" starttime="20150630 11:53:35.541"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:35.548" starttime="20150630 11:53:35.546"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150630 11:53:35.558" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150630 11:53:40.808" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150630 11:53:40.805" starttime="20150630 11:53:35.549"></status>
</kw>
<msg timestamp="20150630 11:53:40.816" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150630 11:53:40.814" starttime="20150630 11:53:35.487"></status>
</kw>
<msg timestamp="20150630 11:53:40.821" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150630 11:53:40.819" starttime="20150630 11:53:35.473"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150630 11:53:45.832" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150630 11:53:45.837" starttime="20150630 11:53:40.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:53:45.844" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20150630 11:53:45.846" starttime="20150630 11:53:45.841"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_in}</arg>
<arg>MOC_${TAILED_IN_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:45.892" starttime="20150630 11:53:45.888"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150630 11:53:45.903" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150630 11:53:45.902" starttime="20150630 11:53:45.895"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150630 11:53:45.912" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150630 11:53:45.914" starttime="20150630 11:53:45.906"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:45.938" starttime="20150630 11:53:45.934"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150630 11:53:45.943" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150630 11:53:45.995" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:53:45.999" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150630 11:53:45.997" starttime="20150630 11:53:45.940"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.007" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150630 11:53:46.103" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:53:46.106" level="INFO">${processes_string} =   720 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log
  738 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log
...</msg>
<status status="PASS" endtime="20150630 11:53:46.105" starttime="20150630 11:53:46.001"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.116" level="INFO">@{processes_list} = [   720 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log |   738 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00....</msg>
<status status="PASS" endtime="20150630 11:53:46.114" starttime="20150630 11:53:46.109"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   720 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.127" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:46.126" starttime="20150630 11:53:46.121"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.133" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:46.192" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:46.194" starttime="20150630 11:53:46.129"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:46.196" starttime="20150630 11:53:46.119"></status>
</kw>
<kw type="foritem" name="${process} =   738 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.205" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:46.203" starttime="20150630 11:53:46.199"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.211" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:46.273" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:46.275" starttime="20150630 11:53:46.207"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:46.276" starttime="20150630 11:53:46.197"></status>
</kw>
<kw type="foritem" name="${process} =  1064 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.285" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:46.284" starttime="20150630 11:53:46.279"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.293" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:46.359" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:46.361" starttime="20150630 11:53:46.288"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:46.363" starttime="20150630 11:53:46.277"></status>
</kw>
<kw type="foritem" name="${process} =  1079 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.372" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:46.371" starttime="20150630 11:53:46.366"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.378" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:46.437" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:46.439" starttime="20150630 11:53:46.374"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:46.440" starttime="20150630 11:53:46.364"></status>
</kw>
<kw type="foritem" name="${process} =  1482 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.449" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:46.448" starttime="20150630 11:53:46.443"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.455" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:46.521" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:46.523" starttime="20150630 11:53:46.451"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:46.524" starttime="20150630 11:53:46.441"></status>
</kw>
<kw type="foritem" name="${process} =  1500 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.533" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:46.531" starttime="20150630 11:53:46.527"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.538" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:46.603" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:46.604" starttime="20150630 11:53:46.535"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:46.605" starttime="20150630 11:53:46.525"></status>
</kw>
<kw type="foritem" name="${process} =  2079 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor8.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.614" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:46.613" starttime="20150630 11:53:46.608"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.620" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:46.681" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:46.683" starttime="20150630 11:53:46.616"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:46.685" starttime="20150630 11:53:46.606"></status>
</kw>
<kw type="foritem" name="${process} =  2112 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.694" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:46.692" starttime="20150630 11:53:46.688"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.699" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:46.761" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:46.763" starttime="20150630 11:53:46.696"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:46.765" starttime="20150630 11:53:46.686"></status>
</kw>
<kw type="foritem" name="${process} =  2552 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-smsc-submit-00.log &gt; tmpfilemonitor11.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.774" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:46.773" starttime="20150630 11:53:46.768"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.781" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:46.847" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:46.848" starttime="20150630 11:53:46.777"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:46.850" starttime="20150630 11:53:46.766"></status>
</kw>
<kw type="foritem" name="${process} =  2567 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-smsc-submit-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.858" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:46.857" starttime="20150630 11:53:46.853"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.864" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:46.929" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:46.930" starttime="20150630 11:53:46.861"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:46.930" starttime="20150630 11:53:46.851"></status>
</kw>
<kw type="foritem" name="${process} =  3676 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.934" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:46.934" starttime="20150630 11:53:46.932"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:46.937" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:47.014" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:47.015" starttime="20150630 11:53:46.935"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:47.018" starttime="20150630 11:53:46.931"></status>
</kw>
<kw type="foritem" name="${process} =  3691 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.027" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:47.026" starttime="20150630 11:53:47.021"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.033" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:47.096" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:47.098" starttime="20150630 11:53:47.030"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:47.099" starttime="20150630 11:53:47.020"></status>
</kw>
<kw type="foritem" name="${process} =  6285 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.108" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:47.107" starttime="20150630 11:53:47.102"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.114" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:47.177" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:47.178" starttime="20150630 11:53:47.110"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:47.180" starttime="20150630 11:53:47.100"></status>
</kw>
<kw type="foritem" name="${process} =  6300 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.188" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:47.187" starttime="20150630 11:53:47.183"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.194" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:47.265" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:47.267" starttime="20150630 11:53:47.190"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:47.268" starttime="20150630 11:53:47.181"></status>
</kw>
<kw type="foritem" name="${process} =  6330 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.276" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:47.275" starttime="20150630 11:53:47.271"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.282" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:47.350" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:47.352" starttime="20150630 11:53:47.279"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:47.353" starttime="20150630 11:53:47.269"></status>
</kw>
<kw type="foritem" name="${process} =  6346 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.361" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:47.360" starttime="20150630 11:53:47.356"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.367" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:47.431" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:47.433" starttime="20150630 11:53:47.364"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:47.435" starttime="20150630 11:53:47.354"></status>
</kw>
<kw type="foritem" name="${process} =  6887 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.443" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:47.442" starttime="20150630 11:53:47.437"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.449" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:47.519" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:47.521" starttime="20150630 11:53:47.445"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:47.522" starttime="20150630 11:53:47.435"></status>
</kw>
<kw type="foritem" name="${process} =  6902 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.530" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:47.529" starttime="20150630 11:53:47.525"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.536" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:47.603" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:47.605" starttime="20150630 11:53:47.533"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:47.607" starttime="20150630 11:53:47.523"></status>
</kw>
<kw type="foritem" name="${process} =  9866 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.616" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:47.615" starttime="20150630 11:53:47.610"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.621" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:47.684" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:47.686" starttime="20150630 11:53:47.618"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:47.688" starttime="20150630 11:53:47.608"></status>
</kw>
<kw type="foritem" name="${process} =  9881 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.698" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:53:47.697" starttime="20150630 11:53:47.691"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.704" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:53:47.767" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:47.770" starttime="20150630 11:53:47.701"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:47.771" starttime="20150630 11:53:47.689"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:47.773" starttime="20150630 11:53:46.117"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:47.776" starttime="20150630 11:53:45.917"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:53:47.784" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20150630 11:53:47.810" starttime="20150630 11:53:47.779"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:53:47.819" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20150630 11:53:47.860" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:53:47.864" level="INFO">${stdout_string} = [2015-06-30 09:53:37,003][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [25], AdditionalInfo [];CorrelationId: 506550], Dela...</msg>
<status status="PASS" endtime="20150630 11:53:47.863" starttime="20150630 11:53:47.815"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:53:47.871" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20150630 11:53:47.938" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:53:47.941" starttime="20150630 11:53:47.867"></status>
</kw>
<msg timestamp="20150630 11:53:47.947" level="INFO">${tailed_text} = [2015-06-30 09:53:37,003][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [25], AdditionalInfo [];CorrelationId: 506550], Dela...</msg>
<status status="PASS" endtime="20150630 11:53:47.945" starttime="20150630 11:53:45.871"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150630 11:53:47.966" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:47.967" starttime="20150630 11:53:47.959"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:47.969" starttime="20150630 11:53:47.950"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:47.990" starttime="20150630 11:53:47.986"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:53:47.996" starttime="20150630 11:53:47.992"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:47.999" starttime="20150630 11:53:47.972"></status>
</kw>
<msg timestamp="20150630 11:53:48.004" level="INFO">${tailed_text} = [2015-06-30 09:53:37,003][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [25], AdditionalInfo [];CorrelationId: 506550], Dela...</msg>
<status status="PASS" endtime="20150630 11:53:48.002" starttime="20150630 11:53:45.852"></status>
</kw>
<kw type="kw" name="Check MOC IN log">
<doc>Checks the tailed log file of MOC call created on IN.</doc>
<arguments>
<arg>MOC_${TAILED_IN_LOG_FILE}</arg>
<arg>${rc}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.027" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:53:48.030" level="INFO">${temp} = [2015-06-30 09:53:37,003][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [25], AdditionalInfo [];CorrelationId: 506550], Dela...</msg>
<status status="PASS" endtime="20150630 11:53:48.029" starttime="20150630 11:53:48.023"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rel_c}</arg>
<arg>0</arg>
<arg>msg=CG session failed - check MOC IN log</arg>
</arguments>
<msg timestamp="20150630 11:53:48.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150630 11:53:48.038" starttime="20150630 11:53:48.033"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>TrafficType: Originating</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:48.045" starttime="20150630 11:53:48.040"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Imsi: ${TESTSUBCRIBERS IMSI RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:48.052" starttime="20150630 11:53:48.047"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>UsedTime: 1000</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:48.058" starttime="20150630 11:53:48.054"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:48.064" starttime="20150630 11:53:48.060"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:48.065" starttime="20150630 11:53:48.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:53:48.072" level="INFO">IN OK...</msg>
<status status="PASS" endtime="20150630 11:53:48.073" starttime="20150630 11:53:48.068"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_xdr}</arg>
<arg>MOC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:48.114" starttime="20150630 11:53:48.110"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150630 11:53:48.124" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150630 11:53:48.123" starttime="20150630 11:53:48.116"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.133" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150630 11:53:48.135" starttime="20150630 11:53:48.126"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:48.158" starttime="20150630 11:53:48.154"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150630 11:53:48.163" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150630 11:53:48.220" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:53:48.222" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150630 11:53:48.221" starttime="20150630 11:53:48.160"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.226" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150630 11:53:48.316" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:53:48.322" level="INFO">${processes_string} = 27781 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor10.log
27796 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
28302 ?      ...</msg>
<status status="PASS" endtime="20150630 11:53:48.320" starttime="20150630 11:53:48.223"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.333" level="INFO">@{processes_list} = [ 27781 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor10.log | 27796 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 28302 ?...</msg>
<status status="PASS" endtime="20150630 11:53:48.331" starttime="20150630 11:53:48.325"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 27781 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor10.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.344" level="INFO">${pid} = 27781</msg>
<status status="PASS" endtime="20150630 11:53:48.343" starttime="20150630 11:53:48.339"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.350" level="INFO">Executing command 'kill -9 27781'.</msg>
<msg timestamp="20150630 11:53:48.392" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:53:48.394" starttime="20150630 11:53:48.346"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:48.394" starttime="20150630 11:53:48.337"></status>
</kw>
<kw type="foritem" name="${process} = 27796 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.398" level="INFO">${pid} = 27796</msg>
<status status="PASS" endtime="20150630 11:53:48.397" starttime="20150630 11:53:48.395"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.400" level="INFO">Executing command 'kill -9 27796'.</msg>
<msg timestamp="20150630 11:53:48.471" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:53:48.473" starttime="20150630 11:53:48.399"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:48.475" starttime="20150630 11:53:48.395"></status>
</kw>
<kw type="foritem" name="${process} = 28302 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.484" level="INFO">${pid} = 28302</msg>
<status status="PASS" endtime="20150630 11:53:48.482" starttime="20150630 11:53:48.478"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.489" level="INFO">Executing command 'kill -9 28302'.</msg>
<msg timestamp="20150630 11:53:48.549" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:53:48.551" starttime="20150630 11:53:48.486"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:48.552" starttime="20150630 11:53:48.476"></status>
</kw>
<kw type="foritem" name="${process} = 28317 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.561" level="INFO">${pid} = 28317</msg>
<status status="PASS" endtime="20150630 11:53:48.560" starttime="20150630 11:53:48.555"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.567" level="INFO">Executing command 'kill -9 28317'.</msg>
<msg timestamp="20150630 11:53:48.627" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:53:48.628" starttime="20150630 11:53:48.563"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:48.629" starttime="20150630 11:53:48.554"></status>
</kw>
<kw type="foritem" name="${process} = 28337 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.638" level="INFO">${pid} = 28337</msg>
<status status="PASS" endtime="20150630 11:53:48.637" starttime="20150630 11:53:48.632"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.643" level="INFO">Executing command 'kill -9 28337'.</msg>
<msg timestamp="20150630 11:53:48.705" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:48.707" starttime="20150630 11:53:48.640"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:48.708" starttime="20150630 11:53:48.630"></status>
</kw>
<kw type="foritem" name="${process} = 28353 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.717" level="INFO">${pid} = 28353</msg>
<status status="PASS" endtime="20150630 11:53:48.715" starttime="20150630 11:53:48.711"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.722" level="INFO">Executing command 'kill -9 28353'.</msg>
<msg timestamp="20150630 11:53:48.783" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:48.784" starttime="20150630 11:53:48.719"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:48.786" starttime="20150630 11:53:48.709"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:48.786" starttime="20150630 11:53:48.334"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:48.787" starttime="20150630 11:53:48.138"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:53:48.793" level="INFO">Starting command 'cat tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20150630 11:53:48.826" starttime="20150630 11:53:48.790"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:53:48.831" level="INFO">Reading output of command 'cat tmpfilemonitor4.log'.</msg>
<msg timestamp="20150630 11:53:48.862" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:53:48.864" level="INFO">${stdout_string} = [2015-06-30 09:53:40,140][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:53:48.863" starttime="20150630 11:53:48.828"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:53:48.870" level="INFO">Executing command 'rm tmpfilemonitor4.log'.</msg>
<msg timestamp="20150630 11:53:48.940" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:53:48.942" starttime="20150630 11:53:48.866"></status>
</kw>
<msg timestamp="20150630 11:53:48.946" level="INFO">${tailed_text} = [2015-06-30 09:53:40,140][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:53:48.944" starttime="20150630 11:53:48.095"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150630 11:53:48.964" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:48.965" starttime="20150630 11:53:48.958"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:48.967" starttime="20150630 11:53:48.948"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:48.988" starttime="20150630 11:53:48.984"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:53:48.993" starttime="20150630 11:53:48.990"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:48.997" starttime="20150630 11:53:48.970"></status>
</kw>
<msg timestamp="20150630 11:53:49.001" level="INFO">${tailed_text} = [2015-06-30 09:53:40,140][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:53:48.999" starttime="20150630 11:53:48.078"></status>
</kw>
<kw type="kw" name="Check MOC XDR log">
<doc>Checks the tailed log file of MOC call created on XDR.</doc>
<arguments>
<arg>MOC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.021" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:53:49.024" level="INFO">${temp} = [2015-06-30 09:53:40,140][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:53:49.023" starttime="20150630 11:53:49.018"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${temp}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:49.030" starttime="20150630 11:53:49.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:49.035" starttime="20150630 11:53:49.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:49.040" starttime="20150630 11:53:49.037"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:49.047" starttime="20150630 11:53:49.042"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>CRCE|CDR</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:49.053" starttime="20150630 11:53:49.049"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>(on-net)|Originating|</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:49.059" starttime="20150630 11:53:49.055"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:49.060" starttime="20150630 11:53:49.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:53:49.065" level="INFO">XDR OK...</msg>
<status status="PASS" endtime="20150630 11:53:49.068" starttime="20150630 11:53:49.062"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_crce}</arg>
<arg>MOC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:49.106" starttime="20150630 11:53:49.102"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150630 11:53:49.116" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150630 11:53:49.115" starttime="20150630 11:53:49.108"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.125" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150630 11:53:49.126" starttime="20150630 11:53:49.118"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:49.147" starttime="20150630 11:53:49.144"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150630 11:53:49.152" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150630 11:53:49.197" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:53:49.200" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150630 11:53:49.199" starttime="20150630 11:53:49.149"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.207" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150630 11:53:49.293" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:53:49.296" level="INFO">${processes_string} = 15042 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor12.log
15057 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log
15300 ?        Ss  ...</msg>
<status status="PASS" endtime="20150630 11:53:49.295" starttime="20150630 11:53:49.203"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.302" level="INFO">@{processes_list} = [ 15042 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor12.log | 15057 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log | 15300 ?      ...</msg>
<status status="PASS" endtime="20150630 11:53:49.301" starttime="20150630 11:53:49.298"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 15042 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor12.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.306" level="INFO">${pid} = 15042</msg>
<status status="PASS" endtime="20150630 11:53:49.306" starttime="20150630 11:53:49.304"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.309" level="INFO">Executing command 'kill -9 15042'.</msg>
<msg timestamp="20150630 11:53:49.370" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:53:49.372" starttime="20150630 11:53:49.307"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:49.373" starttime="20150630 11:53:49.303"></status>
</kw>
<kw type="foritem" name="${process} = 15057 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.384" level="INFO">${pid} = 15057</msg>
<status status="PASS" endtime="20150630 11:53:49.383" starttime="20150630 11:53:49.376"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.390" level="INFO">Executing command 'kill -9 15057'.</msg>
<msg timestamp="20150630 11:53:49.450" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:53:49.451" starttime="20150630 11:53:49.386"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:49.453" starttime="20150630 11:53:49.374"></status>
</kw>
<kw type="foritem" name="${process} = 15300 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.461" level="INFO">${pid} = 15300</msg>
<status status="PASS" endtime="20150630 11:53:49.460" starttime="20150630 11:53:49.455"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.466" level="INFO">Executing command 'kill -9 15300'.</msg>
<msg timestamp="20150630 11:53:49.530" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:53:49.531" starttime="20150630 11:53:49.463"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:49.532" starttime="20150630 11:53:49.453"></status>
</kw>
<kw type="foritem" name="${process} = 15315 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.540" level="INFO">${pid} = 15315</msg>
<status status="PASS" endtime="20150630 11:53:49.539" starttime="20150630 11:53:49.535"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.546" level="INFO">Executing command 'kill -9 15315'.</msg>
<msg timestamp="20150630 11:53:49.608" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:53:49.610" starttime="20150630 11:53:49.542"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:49.611" starttime="20150630 11:53:49.533"></status>
</kw>
<kw type="foritem" name="${process} = 15336 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.619" level="INFO">${pid} = 15336</msg>
<status status="PASS" endtime="20150630 11:53:49.618" starttime="20150630 11:53:49.614"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.625" level="INFO">Executing command 'kill -9 15336'.</msg>
<msg timestamp="20150630 11:53:49.686" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:49.688" starttime="20150630 11:53:49.621"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:49.690" starttime="20150630 11:53:49.612"></status>
</kw>
<kw type="foritem" name="${process} = 15352 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.698" level="INFO">${pid} = 15352</msg>
<status status="PASS" endtime="20150630 11:53:49.697" starttime="20150630 11:53:49.692"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.703" level="INFO">Executing command 'kill -9 15352'.</msg>
<msg timestamp="20150630 11:53:49.766" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:53:49.767" starttime="20150630 11:53:49.700"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:49.769" starttime="20150630 11:53:49.691"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:49.769" starttime="20150630 11:53:49.302"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:49.771" starttime="20150630 11:53:49.129"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:53:49.776" level="INFO">Starting command 'cat tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20150630 11:53:49.809" starttime="20150630 11:53:49.772"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:53:49.814" level="INFO">Reading output of command 'cat tmpfilemonitor6.log'.</msg>
<msg timestamp="20150630 11:53:49.875" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:53:49.878" level="INFO">${stdout_string} = [2015-06-30 09:53:37,016][FINEST][275][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:53:37,262][FINEST][275][            ...</msg>
<status status="PASS" endtime="20150630 11:53:49.877" starttime="20150630 11:53:49.811"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:53:49.884" level="INFO">Executing command 'rm tmpfilemonitor6.log'.</msg>
<msg timestamp="20150630 11:53:49.945" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:53:49.947" starttime="20150630 11:53:49.881"></status>
</kw>
<msg timestamp="20150630 11:53:49.951" level="INFO">${tailed_text} = [2015-06-30 09:53:37,016][FINEST][275][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:53:37,262][FINEST][275][            ...</msg>
<status status="PASS" endtime="20150630 11:53:49.950" starttime="20150630 11:53:49.089"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150630 11:53:49.972" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:49.973" starttime="20150630 11:53:49.963"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:49.975" starttime="20150630 11:53:49.953"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:49.997" starttime="20150630 11:53:49.992"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.003" starttime="20150630 11:53:49.999"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:50.008" starttime="20150630 11:53:49.978"></status>
</kw>
<msg timestamp="20150630 11:53:50.014" level="INFO">${tailed_text} = [2015-06-30 09:53:37,016][FINEST][275][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:53:37,262][FINEST][275][            ...</msg>
<status status="PASS" endtime="20150630 11:53:50.012" starttime="20150630 11:53:49.072"></status>
</kw>
<kw type="kw" name="Check MOC CRCE log">
<doc>Checks the tailed log file created on CRCE.</doc>
<arguments>
<arg>MOC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150630 11:53:50.035" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:53:50.039" level="INFO">${temp} = [2015-06-30 09:53:37,016][FINEST][275][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:53:37,262][FINEST][275][            ...</msg>
<status status="PASS" endtime="20150630 11:53:50.037" starttime="20150630 11:53:50.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.044" starttime="20150630 11:53:50.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>finalCommit=true, usedTime=1000</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.050" starttime="20150630 11:53:50.046"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${temp}</arg>
<arg>Voice|FALSE|${MSC ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.056" starttime="20150630 11:53:50.052"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>|20000|20000|</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.062" starttime="20150630 11:53:50.058"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:50.064" starttime="20150630 11:53:50.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:53:50.071" level="INFO">CRCE OK...</msg>
<status status="PASS" endtime="20150630 11:53:50.072" starttime="20150630 11:53:50.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Check XDR DB *******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.077" starttime="20150630 11:53:50.074"></status>
</kw>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${XDR DB HOST}</arg>
<arg>${XDR DB PORT}</arg>
<arg>${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.192" starttime="20150630 11:53:50.099"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:50.194" starttime="20150630 11:53:50.081"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${db} ${table} and check if entry exists.</doc>
<arguments>
<arg>xdr</arg>
<arg>crce_cdr_${YYYYwWW}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>1000</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${db}' == 'xdr'</arg>
<arg>AnalyseXdrDB</arg>
<arg>${table}</arg>
<arg>${called_party}</arg>
<arg>${call_length}</arg>
</arguments>
<kw type="kw" name="AnalyseXdrDB">
<doc>Look into the crce_cdr_2015w27 and check if entry exists.</doc>
<arguments>
<arg>${table}</arg>
<arg>${called_party}</arg>
<arg>${call_length}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select calledmsisdn, callduration from ${table} where id in (select max(id) from ${table});</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.301" starttime="20150630 11:53:50.300"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.333" starttime="20150630 11:53:50.302"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.335" starttime="20150630 11:53:50.334"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150630 11:53:50.338" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:53:50.340" level="INFO">${queryResultSetLines} = 642041010000|1000|
</msg>
<status status="PASS" endtime="20150630 11:53:50.339" starttime="20150630 11:53:50.336"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.342" starttime="20150630 11:53:50.341"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150630 11:53:50.344" level="INFO">1 lines returned</msg>
<msg timestamp="20150630 11:53:50.346" level="INFO">@{queryResultSet} = [ 642041010000|1000| ]</msg>
<status status="PASS" endtime="20150630 11:53:50.345" starttime="20150630 11:53:50.343"></status>
</kw>
<msg timestamp="20150630 11:53:50.347" level="INFO">@{queryRows} = [ 642041010000|1000| ]</msg>
<status status="PASS" endtime="20150630 11:53:50.347" starttime="20150630 11:53:50.286"></status>
</kw>
<kw type="kw" name="@{fields} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>@{queryRows}[0]</arg>
<arg>|</arg>
</arguments>
<msg timestamp="20150630 11:53:50.351" level="INFO">@{fields} = [ 642041010000 | 1000 |  ]</msg>
<status status="PASS" endtime="20150630 11:53:50.350" starttime="20150630 11:53:50.348"></status>
</kw>
<kw type="kw" name="${b_party} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[0]</arg>
</arguments>
<msg timestamp="20150630 11:53:50.354" level="INFO">${b_party} = 642041010000</msg>
<status status="PASS" endtime="20150630 11:53:50.353" starttime="20150630 11:53:50.352"></status>
</kw>
<kw type="kw" name="${duration} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[1]</arg>
</arguments>
<msg timestamp="20150630 11:53:50.357" level="INFO">${duration} = 1000</msg>
<status status="PASS" endtime="20150630 11:53:50.356" starttime="20150630 11:53:50.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${b_party}</arg>
<arg>${called_party}</arg>
<arg>msg=XDR DB ${table} values are wrong</arg>
</arguments>
<msg timestamp="20150630 11:53:50.360" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150630 11:53:50.361" starttime="20150630 11:53:50.358"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${duration}</arg>
<arg>${call_length}</arg>
<arg>msg=XDR DB ${table} values are wrong</arg>
</arguments>
<msg timestamp="20150630 11:53:50.364" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150630 11:53:50.365" starttime="20150630 11:53:50.362"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:50.365" starttime="20150630 11:53:50.269"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:50.366" starttime="20150630 11:53:50.258"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:50.367" starttime="20150630 11:53:50.242"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:53:50.369" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150630 11:53:50.370" starttime="20150630 11:53:50.368"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR DB OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:53:50.372" level="INFO">XDR DB OK...</msg>
<status status="PASS" endtime="20150630 11:53:50.373" starttime="20150630 11:53:50.371"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.375" starttime="20150630 11:53:50.374"></status>
</kw>
<kw type="kw" name="Check Subscriber Balance">
<doc>Check the CRCE DB entry for test subscriber's monetary account balance.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${EXPECTED_BALANCE_1S_MOC}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.402" starttime="20150630 11:53:50.391"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:50.404" starttime="20150630 11:53:50.384"></status>
</kw>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select balance from acc_subscriber_accounts where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.424" starttime="20150630 11:53:50.421"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.733" starttime="20150630 11:53:50.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.739" starttime="20150630 11:53:50.736"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150630 11:53:50.746" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:53:50.749" level="INFO">${queryResultSetLines} = 9980000|
</msg>
<status status="PASS" endtime="20150630 11:53:50.748" starttime="20150630 11:53:50.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.754" starttime="20150630 11:53:50.751"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150630 11:53:50.759" level="INFO">1 lines returned</msg>
<msg timestamp="20150630 11:53:50.762" level="INFO">@{queryResultSet} = [ 9980000| ]</msg>
<status status="PASS" endtime="20150630 11:53:50.760" starttime="20150630 11:53:50.756"></status>
</kw>
<msg timestamp="20150630 11:53:50.765" level="INFO">@{queryRows} = [ 9980000| ]</msg>
<status status="PASS" endtime="20150630 11:53:50.764" starttime="20150630 11:53:50.407"></status>
</kw>
<kw type="kw" name="@{fields} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>@{queryRows}[0]</arg>
<arg>|</arg>
</arguments>
<msg timestamp="20150630 11:53:50.772" level="INFO">@{fields} = [ 9980000 |  ]</msg>
<status status="PASS" endtime="20150630 11:53:50.771" starttime="20150630 11:53:50.767"></status>
</kw>
<kw type="kw" name="${balance} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[0]</arg>
</arguments>
<msg timestamp="20150630 11:53:50.779" level="INFO">${balance} = 9980000</msg>
<status status="PASS" endtime="20150630 11:53:50.778" starttime="20150630 11:53:50.775"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:53:50.784" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150630 11:53:50.785" starttime="20150630 11:53:50.781"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${balance}</arg>
<arg>${expected_bal}</arg>
<arg>msg=Balance ${balance} NOT OK!</arg>
</arguments>
<msg timestamp="20150630 11:53:50.792" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150630 11:53:50.794" starttime="20150630 11:53:50.787"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Balance= ${balance} OK!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:53:50.800" level="INFO">Balance= 9980000 OK!</msg>
<status status="PASS" endtime="20150630 11:53:50.801" starttime="20150630 11:53:50.796"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:50.803" starttime="20150630 11:53:50.376"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.809" starttime="20150630 11:53:50.806"></status>
</kw>
<doc>Test will make a MOC call, duration 1s.
Logs from XDR, IN and CRCE are collected and analysed as well as XDR DB. Before the call subscriber's
balance is set, and after the call balance is checked for correct charging.

Arguments:
none
Returns:
none
Fails:

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MFC_involved</tag>
<tag>MOC_involved</tag>
<tag>MTC_involved</tag>
<tag>SMS_involved</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20150630 11:53:50.811" starttime="20150630 11:53:33.598"></status>
</test>
<test id="s1-t2" name="Run Long MOC Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Connect with XDR, IN, CRCE and start the log monitoring</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.839" starttime="20150630 11:53:50.836"></status>
</kw>
<kw type="kw" name="${ssh_connection_xdr} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:50.907" starttime="20150630 11:53:50.904"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:51.036" starttime="20150630 11:53:50.967"></status>
</kw>
<msg timestamp="20150630 11:53:51.042" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20150630 11:53:51.040" starttime="20150630 11:53:50.909"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150630 11:53:51.061" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:53:51.441" level="INFO">Read output: Last login: Tue Jun 30 09:53:33 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150630 11:53:51.442" starttime="20150630 11:53:51.057"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:51.443" starttime="20150630 11:53:51.045"></status>
</kw>
<msg timestamp="20150630 11:53:51.445" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20150630 11:53:51.444" starttime="20150630 11:53:50.888"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:51.454" starttime="20150630 11:53:51.452"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:53:51.456" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log'.</msg>
<status status="PASS" endtime="20150630 11:53:51.460" starttime="20150630 11:53:51.454"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:51.461" starttime="20150630 11:53:51.447"></status>
</kw>
<msg timestamp="20150630 11:53:51.462" level="INFO">${ssh_connection_xdr} = 1</msg>
<status status="PASS" endtime="20150630 11:53:51.462" starttime="20150630 11:53:50.866"></status>
</kw>
<kw type="kw" name="${ssh_connection_in} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN_MOC_LOG_FILE_PATH}${IN_LOG_FILE_NAME}</arg>
<arg>host=${IN-APP HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:51.490" starttime="20150630 11:53:51.489"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:51.607" starttime="20150630 11:53:51.496"></status>
</kw>
<msg timestamp="20150630 11:53:51.610" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20150630 11:53:51.609" starttime="20150630 11:53:51.491"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150630 11:53:51.626" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:53:52.053" level="INFO">Read output: Last login: Tue Jun 30 09:53:34 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20150630 11:53:52.056" starttime="20150630 11:53:51.623"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:52.059" starttime="20150630 11:53:51.612"></status>
</kw>
<msg timestamp="20150630 11:53:52.064" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20150630 11:53:52.062" starttime="20150630 11:53:51.482"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:52.080" starttime="20150630 11:53:52.078"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:53:52.086" level="INFO">Starting command 'tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log'.</msg>
<status status="PASS" endtime="20150630 11:53:52.091" starttime="20150630 11:53:52.082"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:52.092" starttime="20150630 11:53:52.067"></status>
</kw>
<msg timestamp="20150630 11:53:52.096" level="INFO">${ssh_connection_in} = 2</msg>
<status status="PASS" endtime="20150630 11:53:52.095" starttime="20150630 11:53:51.473"></status>
</kw>
<kw type="kw" name="${ssh_connection_crce} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE_LOG_FILE_PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:52.153" starttime="20150630 11:53:52.150"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:52.223" starttime="20150630 11:53:52.164"></status>
</kw>
<msg timestamp="20150630 11:53:52.226" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150630 11:53:52.225" starttime="20150630 11:53:52.154"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150630 11:53:52.242" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:53:52.639" level="INFO">Read output: Last login: Tue Jun 30 09:53:35 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20150630 11:53:52.641" starttime="20150630 11:53:52.238"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:52.642" starttime="20150630 11:53:52.228"></status>
</kw>
<msg timestamp="20150630 11:53:52.646" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20150630 11:53:52.644" starttime="20150630 11:53:52.136"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:52.663" starttime="20150630 11:53:52.659"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:53:52.668" level="INFO">Starting command 'tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor3.log'.</msg>
<status status="PASS" endtime="20150630 11:53:52.673" starttime="20150630 11:53:52.664"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:52.675" starttime="20150630 11:53:52.649"></status>
</kw>
<msg timestamp="20150630 11:53:52.678" level="INFO">${ssh_connection_crce} = 3</msg>
<status status="PASS" endtime="20150630 11:53:52.677" starttime="20150630 11:53:52.119"></status>
</kw>
<kw type="kw" name="Reset Subscriber Balance">
<doc>Reset the test subscriber's monetary account balance to initial value.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:52.739" starttime="20150630 11:53:52.705"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:52.741" starttime="20150630 11:53:52.692"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>update acc_subscriber_accounts set balance=10000000 where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:53.106" starttime="20150630 11:53:52.743"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:53:53.113" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150630 11:53:53.114" starttime="20150630 11:53:53.110"></status>
</kw>
<status status="PASS" endtime="20150630 11:53:53.116" starttime="20150630 11:53:52.681"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MOC *******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:53.121" starttime="20150630 11:53:53.119"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the Long MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:53:53.126" level="INFO">Running the Long MOC call...</msg>
<status status="PASS" endtime="20150630 11:53:53.127" starttime="20150630 11:53:53.123"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 136s">
<doc>Runs a standard MOC 136s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc136s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20150630 11:53:53.179" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv</msg>
<status status="PASS" endtime="20150630 11:53:53.173" starttime="20150630 11:53:53.170"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20150630 11:53:53.185" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv</msg>
<status status="PASS" endtime="20150630 11:53:53.184" starttime="20150630 11:53:53.181"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20150630 11:53:53.191" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini</msg>
<status status="PASS" endtime="20150630 11:53:53.190" starttime="20150630 11:53:53.187"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20150630 11:53:53.197" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc136s.cgs</msg>
<status status="PASS" endtime="20150630 11:53:53.196" starttime="20150630 11:53:53.193"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:53.201" starttime="20150630 11:53:53.199"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20150630 11:53:53.210" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:53.211" starttime="20150630 11:53:53.203"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:53.216" starttime="20150630 11:53:53.213"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20150630 11:53:53.222" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:53.224" starttime="20150630 11:53:53.217"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150630 11:53:53.231" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:53.233" starttime="20150630 11:53:53.225"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:53.237" starttime="20150630 11:53:53.234"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150630 11:53:53.243" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:53.244" starttime="20150630 11:53:53.238"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20150630 11:53:53.253" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:53:53.255" starttime="20150630 11:53:53.246"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:53:53.259" starttime="20150630 11:53:53.256"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150630 11:53:53.274" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc136s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150630 11:56:14.442" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150630 11:56:14.437" starttime="20150630 11:53:53.261"></status>
</kw>
<msg timestamp="20150630 11:56:14.450" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150630 11:56:14.447" starttime="20150630 11:53:53.152"></status>
</kw>
<msg timestamp="20150630 11:56:14.454" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150630 11:56:14.452" starttime="20150630 11:53:53.132"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150630 11:56:19.461" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150630 11:56:19.463" starttime="20150630 11:56:14.456"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:56:19.469" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20150630 11:56:19.471" starttime="20150630 11:56:19.467"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_in}</arg>
<arg>LongMOC_${TAILED_IN_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:19.499" starttime="20150630 11:56:19.495"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150630 11:56:19.509" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150630 11:56:19.508" starttime="20150630 11:56:19.500"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150630 11:56:19.516" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150630 11:56:19.517" starttime="20150630 11:56:19.511"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:19.532" starttime="20150630 11:56:19.529"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150630 11:56:19.536" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150630 11:56:19.636" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:19.638" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150630 11:56:19.637" starttime="20150630 11:56:19.534"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150630 11:56:19.644" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150630 11:56:19.742" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:19.744" level="INFO">${processes_string} =   720 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log
  738 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log
...</msg>
<status status="PASS" endtime="20150630 11:56:19.743" starttime="20150630 11:56:19.640"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150630 11:56:19.751" level="INFO">@{processes_list} = [   720 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log |   738 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00....</msg>
<status status="PASS" endtime="20150630 11:56:19.750" starttime="20150630 11:56:19.746"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   720 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:19.760" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:19.759" starttime="20150630 11:56:19.755"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:19.765" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:19.822" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:19.823" starttime="20150630 11:56:19.762"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:19.824" starttime="20150630 11:56:19.754"></status>
</kw>
<kw type="foritem" name="${process} =   738 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:19.831" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:19.830" starttime="20150630 11:56:19.827"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:19.836" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:19.901" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:19.902" starttime="20150630 11:56:19.833"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:19.904" starttime="20150630 11:56:19.825"></status>
</kw>
<kw type="foritem" name="${process} =  1064 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:19.910" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:19.909" starttime="20150630 11:56:19.906"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:19.915" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:19.979" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:19.980" starttime="20150630 11:56:19.912"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:19.981" starttime="20150630 11:56:19.904"></status>
</kw>
<kw type="foritem" name="${process} =  1079 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:19.988" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:19.987" starttime="20150630 11:56:19.984"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:19.993" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:20.057" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:20.059" starttime="20150630 11:56:19.990"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:20.061" starttime="20150630 11:56:19.982"></status>
</kw>
<kw type="foritem" name="${process} =  1482 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.069" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:20.068" starttime="20150630 11:56:20.064"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.073" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:20.137" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:20.138" starttime="20150630 11:56:20.070"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:20.140" starttime="20150630 11:56:20.063"></status>
</kw>
<kw type="foritem" name="${process} =  1500 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.146" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:20.145" starttime="20150630 11:56:20.142"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.151" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:20.217" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:20.219" starttime="20150630 11:56:20.148"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:20.220" starttime="20150630 11:56:20.140"></status>
</kw>
<kw type="foritem" name="${process} =  2079 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor8.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.226" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:20.225" starttime="20150630 11:56:20.222"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.231" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:20.296" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:20.297" starttime="20150630 11:56:20.228"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:20.298" starttime="20150630 11:56:20.220"></status>
</kw>
<kw type="foritem" name="${process} =  2112 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.305" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:20.304" starttime="20150630 11:56:20.301"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.310" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:20.379" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:20.380" starttime="20150630 11:56:20.307"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:20.381" starttime="20150630 11:56:20.299"></status>
</kw>
<kw type="foritem" name="${process} =  2552 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-smsc-submit-00.log &gt; tmpfilemonitor11.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.388" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:20.387" starttime="20150630 11:56:20.383"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.393" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:20.459" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:20.460" starttime="20150630 11:56:20.390"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:20.461" starttime="20150630 11:56:20.382"></status>
</kw>
<kw type="foritem" name="${process} =  2567 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-smsc-submit-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.468" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:20.467" starttime="20150630 11:56:20.463"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.472" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:20.541" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:20.542" starttime="20150630 11:56:20.469"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:20.543" starttime="20150630 11:56:20.462"></status>
</kw>
<kw type="foritem" name="${process} =  3676 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.550" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:20.548" starttime="20150630 11:56:20.545"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.554" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:20.621" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:20.622" starttime="20150630 11:56:20.552"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:20.623" starttime="20150630 11:56:20.544"></status>
</kw>
<kw type="foritem" name="${process} =  3691 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.630" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:20.629" starttime="20150630 11:56:20.626"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.635" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:20.699" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:20.701" starttime="20150630 11:56:20.632"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:20.702" starttime="20150630 11:56:20.624"></status>
</kw>
<kw type="foritem" name="${process} =  6285 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.709" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:20.708" starttime="20150630 11:56:20.704"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.713" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:20.782" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:20.783" starttime="20150630 11:56:20.710"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:20.784" starttime="20150630 11:56:20.703"></status>
</kw>
<kw type="foritem" name="${process} =  6300 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.792" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:20.791" starttime="20150630 11:56:20.787"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.797" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:20.862" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:20.863" starttime="20150630 11:56:20.794"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:20.864" starttime="20150630 11:56:20.785"></status>
</kw>
<kw type="foritem" name="${process} =  6712 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.871" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:20.870" starttime="20150630 11:56:20.866"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.875" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:20.940" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:20.941" starttime="20150630 11:56:20.872"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:20.942" starttime="20150630 11:56:20.865"></status>
</kw>
<kw type="foritem" name="${process} =  6727 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.949" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:20.948" starttime="20150630 11:56:20.944"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:20.954" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:21.023" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:21.024" starttime="20150630 11:56:20.951"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:21.026" starttime="20150630 11:56:20.943"></status>
</kw>
<kw type="foritem" name="${process} =  6843 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.034" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:21.033" starttime="20150630 11:56:21.029"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.039" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:21.104" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:21.105" starttime="20150630 11:56:21.036"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:21.106" starttime="20150630 11:56:21.028"></status>
</kw>
<kw type="foritem" name="${process} =  6859 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.113" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:21.112" starttime="20150630 11:56:21.108"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.117" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:21.180" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:21.182" starttime="20150630 11:56:21.114"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:21.183" starttime="20150630 11:56:21.107"></status>
</kw>
<kw type="foritem" name="${process} =  6887 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.190" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:21.189" starttime="20150630 11:56:21.185"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.194" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:21.260" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:21.261" starttime="20150630 11:56:21.191"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:21.262" starttime="20150630 11:56:21.184"></status>
</kw>
<kw type="foritem" name="${process} =  6902 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.269" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:21.268" starttime="20150630 11:56:21.264"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.274" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:21.343" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:21.344" starttime="20150630 11:56:21.271"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:21.345" starttime="20150630 11:56:21.263"></status>
</kw>
<kw type="foritem" name="${process} =  9866 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.352" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:21.351" starttime="20150630 11:56:21.347"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.357" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:21.444" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:21.446" starttime="20150630 11:56:21.354"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:21.447" starttime="20150630 11:56:21.346"></status>
</kw>
<kw type="foritem" name="${process} =  9881 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.453" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:21.452" starttime="20150630 11:56:21.449"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.458" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:21.525" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:21.527" starttime="20150630 11:56:21.455"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:21.528" starttime="20150630 11:56:21.447"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:21.528" starttime="20150630 11:56:19.753"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:21.530" starttime="20150630 11:56:19.520"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:21.536" level="INFO">Starting command 'cat tmpfilemonitor2.log'.</msg>
<status status="PASS" endtime="20150630 11:56:21.569" starttime="20150630 11:56:21.533"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:56:21.573" level="INFO">Reading output of command 'cat tmpfilemonitor2.log'.</msg>
<msg timestamp="20150630 11:56:21.622" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:21.625" level="INFO">${stdout_string} = [2015-06-30 09:53:54,619][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [25], AdditionalInfo [];CorrelationId: 506560], Dela...</msg>
<status status="PASS" endtime="20150630 11:56:21.624" starttime="20150630 11:56:21.571"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:21.631" level="INFO">Executing command 'rm tmpfilemonitor2.log'.</msg>
<msg timestamp="20150630 11:56:21.696" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:21.697" starttime="20150630 11:56:21.627"></status>
</kw>
<msg timestamp="20150630 11:56:21.701" level="INFO">${tailed_text} = [2015-06-30 09:53:54,619][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [25], AdditionalInfo [];CorrelationId: 506560], Dela...</msg>
<status status="PASS" endtime="20150630 11:56:21.700" starttime="20150630 11:56:19.487"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.718" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:21.719" starttime="20150630 11:56:21.712"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:21.721" starttime="20150630 11:56:21.703"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:21.735" starttime="20150630 11:56:21.732"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:56:21.740" starttime="20150630 11:56:21.737"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:21.744" starttime="20150630 11:56:21.723"></status>
</kw>
<msg timestamp="20150630 11:56:21.747" level="INFO">${tailed_text} = [2015-06-30 09:53:54,619][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [25], AdditionalInfo [];CorrelationId: 506560], Dela...</msg>
<status status="PASS" endtime="20150630 11:56:21.746" starttime="20150630 11:56:19.475"></status>
</kw>
<kw type="kw" name="Check Long MOC IN log">
<doc>Checks the tailed log file of multi-slice (long) MOC call created on IN.</doc>
<arguments>
<arg>LongMOC_${TAILED_IN_LOG_FILE}</arg>
<arg>${rc}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.762" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:56:21.765" level="INFO">${temp} = [2015-06-30 09:53:54,619][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [25], AdditionalInfo [];CorrelationId: 506560], Dela...</msg>
<status status="PASS" endtime="20150630 11:56:21.764" starttime="20150630 11:56:21.759"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rel_c}</arg>
<arg>0</arg>
<arg>msg=CG session failed - check MOC IN log</arg>
</arguments>
<msg timestamp="20150630 11:56:21.771" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150630 11:56:21.772" starttime="20150630 11:56:21.767"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>TrafficType: Originating</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:21.777" starttime="20150630 11:56:21.773"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Imsi: ${TESTSUBCRIBERS IMSI RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:21.782" starttime="20150630 11:56:21.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>UsedTime: 136000</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:21.787" starttime="20150630 11:56:21.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:21.793" starttime="20150630 11:56:21.789"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:21.794" starttime="20150630 11:56:21.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:56:21.799" level="INFO">IN OK...</msg>
<status status="PASS" endtime="20150630 11:56:21.801" starttime="20150630 11:56:21.796"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_xdr}</arg>
<arg>LongMOC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:21.828" starttime="20150630 11:56:21.825"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150630 11:56:21.837" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150630 11:56:21.837" starttime="20150630 11:56:21.830"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.845" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150630 11:56:21.847" starttime="20150630 11:56:21.839"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:21.861" starttime="20150630 11:56:21.858"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150630 11:56:21.865" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150630 11:56:21.960" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:21.962" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150630 11:56:21.961" starttime="20150630 11:56:21.863"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150630 11:56:21.967" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150630 11:56:22.056" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:22.059" level="INFO">${processes_string} = 28511 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log
28526 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
28586 ?       ...</msg>
<status status="PASS" endtime="20150630 11:56:22.057" starttime="20150630 11:56:21.964"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.066" level="INFO">@{processes_list} = [ 28511 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log | 28526 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 28586 ? ...</msg>
<status status="PASS" endtime="20150630 11:56:22.065" starttime="20150630 11:56:22.061"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 28511 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.074" level="INFO">${pid} = 28511</msg>
<status status="PASS" endtime="20150630 11:56:22.073" starttime="20150630 11:56:22.070"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.079" level="INFO">Executing command 'kill -9 28511'.</msg>
<msg timestamp="20150630 11:56:22.134" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:22.135" starttime="20150630 11:56:22.076"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:22.137" starttime="20150630 11:56:22.068"></status>
</kw>
<kw type="foritem" name="${process} = 28526 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.143" level="INFO">${pid} = 28526</msg>
<status status="PASS" endtime="20150630 11:56:22.142" starttime="20150630 11:56:22.139"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.148" level="INFO">Executing command 'kill -9 28526'.</msg>
<msg timestamp="20150630 11:56:22.213" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:22.214" starttime="20150630 11:56:22.145"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:22.215" starttime="20150630 11:56:22.137"></status>
</kw>
<kw type="foritem" name="${process} = 28586 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.222" level="INFO">${pid} = 28586</msg>
<status status="PASS" endtime="20150630 11:56:22.221" starttime="20150630 11:56:22.217"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.226" level="INFO">Executing command 'kill -9 28586'.</msg>
<msg timestamp="20150630 11:56:22.314" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:22.316" starttime="20150630 11:56:22.224"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:22.317" starttime="20150630 11:56:22.216"></status>
</kw>
<kw type="foritem" name="${process} = 28602 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.326" level="INFO">${pid} = 28602</msg>
<status status="PASS" endtime="20150630 11:56:22.325" starttime="20150630 11:56:22.320"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.331" level="INFO">Executing command 'kill -9 28602'.</msg>
<msg timestamp="20150630 11:56:22.393" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:22.394" starttime="20150630 11:56:22.328"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:22.396" starttime="20150630 11:56:22.318"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:22.396" starttime="20150630 11:56:22.067"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:22.397" starttime="20150630 11:56:21.849"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:22.403" level="INFO">Starting command 'cat tmpfilemonitor1.log'.</msg>
<status status="PASS" endtime="20150630 11:56:22.436" starttime="20150630 11:56:22.400"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:56:22.439" level="INFO">Reading output of command 'cat tmpfilemonitor1.log'.</msg>
<msg timestamp="20150630 11:56:22.472" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:22.475" level="INFO">${stdout_string} = [2015-06-30 09:56:13,983][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:56:22.474" starttime="20150630 11:56:22.437"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:22.480" level="INFO">Executing command 'rm tmpfilemonitor1.log'.</msg>
<msg timestamp="20150630 11:56:22.552" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:22.553" starttime="20150630 11:56:22.477"></status>
</kw>
<msg timestamp="20150630 11:56:22.557" level="INFO">${tailed_text} = [2015-06-30 09:56:13,983][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:56:22.555" starttime="20150630 11:56:21.817"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.573" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:22.575" starttime="20150630 11:56:22.568"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:22.576" starttime="20150630 11:56:22.559"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:22.590" starttime="20150630 11:56:22.587"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:56:22.595" starttime="20150630 11:56:22.592"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:22.598" starttime="20150630 11:56:22.579"></status>
</kw>
<msg timestamp="20150630 11:56:22.602" level="INFO">${tailed_text} = [2015-06-30 09:56:13,983][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:56:22.600" starttime="20150630 11:56:21.805"></status>
</kw>
<kw type="kw" name="Check Long MOC XDR log">
<doc>Checks the tailed log file of MOC call created on XDR.</doc>
<arguments>
<arg>LongMOC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.616" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:56:22.618" level="INFO">${temp} = [2015-06-30 09:56:13,983][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:56:22.617" starttime="20150630 11:56:22.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${temp}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:22.623" starttime="20150630 11:56:22.620"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:22.628" starttime="20150630 11:56:22.624"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>CRCE|CDR</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:22.633" starttime="20150630 11:56:22.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>136000|180000</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:22.637" starttime="20150630 11:56:22.634"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>(on-net)|Originating</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:22.642" starttime="20150630 11:56:22.639"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:22.643" starttime="20150630 11:56:22.605"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:56:22.648" level="INFO">XDR OK...</msg>
<status status="PASS" endtime="20150630 11:56:22.649" starttime="20150630 11:56:22.645"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_crce}</arg>
<arg>LongMOC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:22.674" starttime="20150630 11:56:22.670"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150630 11:56:22.679" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150630 11:56:22.678" starttime="20150630 11:56:22.675"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.684" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150630 11:56:22.684" starttime="20150630 11:56:22.679"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:22.691" starttime="20150630 11:56:22.689"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150630 11:56:22.692" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150630 11:56:22.786" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:22.786" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150630 11:56:22.786" starttime="20150630 11:56:22.691"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.789" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150630 11:56:22.882" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:22.884" level="INFO">${processes_string} = 15507 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor3.log
15522 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log
15568 ?        Ss   ...</msg>
<status status="PASS" endtime="20150630 11:56:22.883" starttime="20150630 11:56:22.787"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.890" level="INFO">@{processes_list} = [ 15507 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor3.log | 15522 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log | 15568 ?       ...</msg>
<status status="PASS" endtime="20150630 11:56:22.889" starttime="20150630 11:56:22.886"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 15507 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor3.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.898" level="INFO">${pid} = 15507</msg>
<status status="PASS" endtime="20150630 11:56:22.897" starttime="20150630 11:56:22.894"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.903" level="INFO">Executing command 'kill -9 15507'.</msg>
<msg timestamp="20150630 11:56:22.961" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:22.962" starttime="20150630 11:56:22.900"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:22.964" starttime="20150630 11:56:22.893"></status>
</kw>
<kw type="foritem" name="${process} = 15522 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.970" level="INFO">${pid} = 15522</msg>
<status status="PASS" endtime="20150630 11:56:22.969" starttime="20150630 11:56:22.966"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:22.975" level="INFO">Executing command 'kill -9 15522'.</msg>
<msg timestamp="20150630 11:56:23.040" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:23.042" starttime="20150630 11:56:22.972"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:23.044" starttime="20150630 11:56:22.964"></status>
</kw>
<kw type="foritem" name="${process} = 15568 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:23.052" level="INFO">${pid} = 15568</msg>
<status status="PASS" endtime="20150630 11:56:23.051" starttime="20150630 11:56:23.047"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:23.056" level="INFO">Executing command 'kill -9 15568'.</msg>
<msg timestamp="20150630 11:56:23.118" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:23.119" starttime="20150630 11:56:23.053"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:23.120" starttime="20150630 11:56:23.046"></status>
</kw>
<kw type="foritem" name="${process} = 15584 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:23.127" level="INFO">${pid} = 15584</msg>
<status status="PASS" endtime="20150630 11:56:23.126" starttime="20150630 11:56:23.122"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:23.131" level="INFO">Executing command 'kill -9 15584'.</msg>
<msg timestamp="20150630 11:56:23.196" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:23.197" starttime="20150630 11:56:23.128"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:23.198" starttime="20150630 11:56:23.121"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:23.199" starttime="20150630 11:56:22.891"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:23.201" starttime="20150630 11:56:22.685"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:23.206" level="INFO">Starting command 'cat tmpfilemonitor3.log'.</msg>
<status status="PASS" endtime="20150630 11:56:23.239" starttime="20150630 11:56:23.203"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:56:23.243" level="INFO">Reading output of command 'cat tmpfilemonitor3.log'.</msg>
<msg timestamp="20150630 11:56:23.374" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:23.378" level="INFO">${stdout_string} = [2015-06-30 09:53:54,629][FINEST][275][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:53:54,804][FINEST][275][            ...</msg>
<status status="PASS" endtime="20150630 11:56:23.377" starttime="20150630 11:56:23.241"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:23.384" level="INFO">Executing command 'rm tmpfilemonitor3.log'.</msg>
<msg timestamp="20150630 11:56:23.426" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:23.427" starttime="20150630 11:56:23.381"></status>
</kw>
<msg timestamp="20150630 11:56:23.431" level="INFO">${tailed_text} = [2015-06-30 09:53:54,629][FINEST][275][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:53:54,804][FINEST][275][            ...</msg>
<status status="PASS" endtime="20150630 11:56:23.429" starttime="20150630 11:56:22.662"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150630 11:56:23.451" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:23.452" starttime="20150630 11:56:23.442"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:23.453" starttime="20150630 11:56:23.433"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:23.468" starttime="20150630 11:56:23.464"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:56:23.472" starttime="20150630 11:56:23.469"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:23.476" starttime="20150630 11:56:23.456"></status>
</kw>
<msg timestamp="20150630 11:56:23.480" level="INFO">${tailed_text} = [2015-06-30 09:53:54,629][FINEST][275][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:53:54,804][FINEST][275][            ...</msg>
<status status="PASS" endtime="20150630 11:56:23.478" starttime="20150630 11:56:22.652"></status>
</kw>
<kw type="kw" name="Check Long MOC CRCE log">
<doc>Checks the tailed log file created on CRCE.</doc>
<arguments>
<arg>LongMOC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150630 11:56:23.494" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:56:23.499" level="INFO">${temp} = [2015-06-30 09:53:54,629][FINEST][275][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:53:54,804][FINEST][275][            ...</msg>
<status status="PASS" endtime="20150630 11:56:23.498" starttime="20150630 11:56:23.492"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:23.504" starttime="20150630 11:56:23.501"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>finalCommit=true, usedTime=136000</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:23.510" starttime="20150630 11:56:23.506"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${temp}</arg>
<arg>Voice|FALSE|${MSC ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:23.514" starttime="20150630 11:56:23.511"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>136000|136000</arg>
</arguments>
<msg timestamp="20150630 11:56:23.566" level="FAIL">'[2015-06-30 09:53:54,629][FINEST][275][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:53:54,804][FINEST][275][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:53:54,804][FINEST][275][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:53:54,804][FINEST][275][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:53:54,806][FINEST][275][                SubscriberPeerImpl.getSubscriber()] Subscriber lookup returned [resultCode=OK subscriberId=42,539,077 msisdn=642041010000 imsi=530052041010000]
[2015-06-30 09:53:54,832][  INFO][278][                     TraceInterceptorImpl.invoke()] reserve(SessionReservationRequest [header=[sessionId=5065600000, sessionBeginTimeStamp=Tue Jun 30 09:53:54 UTC 2015, chargingType=REGULAR], trafficType=MOC, imsi=530052041010000, subscriberId=42539077, suppressNumber=false, startTime=Tue Jun 30 09:53:54 UTC 2015, duration=0, location=64278, roaming=false, bearerType=Voice, referenceNumber=0001ABFF0E, callingParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], calledParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], locationNumber=null, locationDetailedId=null])
[2015-06-30 09:53:54,916][FINEST][278][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:53:54,916][FINEST][278][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:53:54,916][FINEST][278][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:53:54,917][FINEST][278][     LocalNumberPortabilityService.getNumberInfo()] Performing local MNP query [msisdn=642041010000]
[2015-06-30 09:53:55,067][  FINE][278][                       ZonePeerImpl.matchWithMnp()] Number '642041010000' is HPLMN
[2015-06-30 09:53:55,074][FINEST][278][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=create execTime=5.843]
[2015-06-30 09:53:55,075][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Create]
[2015-06-30 09:53:55,075][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=CreateSession]
[2015-06-30 09:53:55,079][FINEST][278][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=selectContext execTime=2.483]
[2015-06-30 09:53:55,079][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Select]
[2015-06-30 09:53:55,080][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=SelectSession]
[2015-06-30 09:53:55,081][FINEST][278][                 SessionContext.getCommitActions()] Reading commit actions: []
[2015-06-30 09:53:55,081][ FINER][278][                    RateplanPeerImpl.getRateplan()] Getting the rateplan for key: ptk.skinny/101001/moc
[2015-06-30 09:53:55,081][FINEST][278][                     ReservationStoreImpl.create()] Creating a reservation [subscriberId=42,539,077, reservation=InternalReservationImpl{id='R42539077T1435658335081@16922226053408351~-8157972946390078563', subscriberId=42539077, expires=1435658335081, reservedAt=1435658035081, reservation=[]}]
[2015-06-30 09:53:55,082][FINEST][278][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,034,816, duration=60,000]
[2015-06-30 09:53:55,082][FINEST][278][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,094,816, duration=60,000]
[2015-06-30 09:53:55,083][ FINER][278][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000032
[2015-06-30 09:53:55,083][ FINER][278][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000790
[2015-06-30 09:53:55,083][FINEST][278][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,791
[2015-06-30 09:53:55,083][ FINER][278][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,791]
[2015-06-30 09:53:55,083][FINEST][278][                    CompiledRatingFilter.rateMoc()] Beginning of session, adding setup rating
[2015-06-30 09:53:55,083][ FINER][278][                                SessionRater.add()] Try rating: setup=true, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:53:55,084][FINEST][278][                AccountStoreImpl.loadDescriptors()] Loading descriptors from database [subscriberId=42,539,077, actionId=1902356294]
[2015-06-30 09:53:55,084][FINEST][278][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=278]
[2015-06-30 09:53:55,087][FINEST][278][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=278]
[2015-06-30 09:53:55,087][FINEST][278][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.896]
[2015-06-30 09:53:55,087][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:53:55,087][FINEST][278][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.AccountDaoImpl method=loadDescriptors execTime=3.65]
[2015-06-30 09:53:55,088][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=Lookup]
[2015-06-30 09:53:55,088][ FINER][278][                               SessionRater.rate()] Failed to charge rating: setup=true, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:53:55,088][ FINER][278][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000790
[2015-06-30 09:53:55,088][FINEST][278][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,791
[2015-06-30 09:53:55,088][ FINER][278][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,791]
[2015-06-30 09:53:55,089][ FINER][278][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:53:55,089][FINEST][278][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1902356294]
[2015-06-30 09:53:55,089][ FINER][278][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:53:55,089][ FINER][278][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000033
[2015-06-30 09:53:55,089][ FINER][278][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000798
[2015-06-30 09:53:55,090][FINEST][278][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,799
[2015-06-30 09:53:55,090][ FINER][278][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,799]
[2015-06-30 09:53:55,090][FINEST][278][                    CompiledRatingFilter.rateMoc()] Beginning of session, adding setup rating
[2015-06-30 09:53:55,090][ FINER][278][                                SessionRater.add()] Try rating: setup=true, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:53:55,090][FINEST][278][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1902356294]
[2015-06-30 09:53:55,090][ FINER][278][                               SessionRater.rate()] Failed to charge rating: setup=true, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:53:55,091][ FINER][278][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000798
[2015-06-30 09:53:55,091][FINEST][278][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,799
[2015-06-30 09:53:55,091][ FINER][278][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,799]
[2015-06-30 09:53:55,091][ FINER][278][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:53:55,091][FINEST][278][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1902356294]
[2015-06-30 09:53:55,091][ FINER][278][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:53:55,092][ FINER][278][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000034
[2015-06-30 09:53:55,092][ FINER][278][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000814
[2015-06-30 09:53:55,092][FINEST][278][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,815
[2015-06-30 09:53:55,092][ FINER][278][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,815]
[2015-06-30 09:53:55,092][FINEST][278][                    CompiledRatingFilter.rateMoc()] Beginning of session, adding setup rating
[2015-06-30 09:53:55,092][ FINER][278][                                SessionRater.add()] Try rating: setup=true, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:53:55,092][FINEST][278][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1902356294]
[2015-06-30 09:53:55,093][ FINER][278][                               SessionRater.rate()] Failed to charge rating: setup=true, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:53:55,093][ FINER][278][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000814
[2015-06-30 09:53:55,093][FINEST][278][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,815
[2015-06-30 09:53:55,093][ FINER][278][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,815]
[2015-06-30 09:53:55,093][ FINER][278][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:53:55,093][FINEST][278][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1902356294]
[2015-06-30 09:53:55,094][ FINER][278][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:53:55,094][ FINER][278][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000045
[2015-06-30 09:53:55,094][ FINER][278][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010001094
[2015-06-30 09:53:55,094][FINEST][278][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,001,095
[2015-06-30 09:53:55,094][ FINER][278][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,001,095]
[2015-06-30 09:53:55,094][FINEST][278][                    CompiledRatingFilter.rateMoc()] Beginning of session, adding setup rating
[2015-06-30 09:53:55,095][ FINER][278][                                SessionRater.add()] Try rating: setup=true, begin=0, duration=0, price=20000, perPeriod=60000, currency=NZD
[2015-06-30 09:53:55,095][FINEST][278][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1902356294]
[2015-06-30 09:53:55,095][ FINER][278][                     AbstractAccountManager.load()] Loading acount from descriptor [accountId=42,539,078, subscriberId=42,539,077]
[2015-06-30 09:53:55,095][FINEST][278][            ReservationStoreImpl.getReservations()] Loading all reservations from database [subscriberId=42,539,077]
[2015-06-30 09:53:55,096][FINEST][278][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=278]
[2015-06-30 09:53:55,097][FINEST][278][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=278]
[2015-06-30 09:53:55,098][FINEST][278][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.18]
[2015-06-30 09:53:55,098][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:53:55,098][FINEST][278][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.ReservationDaoImpl method=getBySubscriber execTime=2.864]
[2015-06-30 09:53:55,098][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=SelectReservation]
[2015-06-30 09:53:55,099][FINEST][278][                        AccountStoreImpl.getById()] Loading the account by id [subscriberId=42,539,077, accountId=42,539,078]
[2015-06-30 09:53:55,099][FINEST][278][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1902356294]
[2015-06-30 09:53:55,099][FINEST][278][                          AccountListImpl.charge()] Charging attempt succeeded [requestedCharge=20,000, accountId=42,539,078, available=20,000]
[2015-06-30 09:53:55,099][ FINER][278][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010001094
[2015-06-30 09:53:55,099][FINEST][278][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,001,095
[2015-06-30 09:53:55,100][ FINER][278][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,001,095]
[2015-06-30 09:53:55,100][ FINER][278][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=20000, perPeriod=60000, currency=NZD
[2015-06-30 09:53:55,100][FINEST][278][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1902356294]
[2015-06-30 09:53:55,100][FINEST][278][                          AccountListImpl.charge()] Charging attempt succeeded [requestedCharge=20,000, accountId=42,539,078, available=20,000]
[2015-06-30 09:53:55,101][FINEST][278][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=278]
[2015-06-30 09:53:55,102][FINEST][278][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=278]
[2015-06-30 09:53:55,102][FINEST][278][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=1.024]
[2015-06-30 09:53:55,102][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:53:55,103][ FINER][278][                      ReservationStoreImpl.share()] Sharing reservation [reservationId=R42539077T1435658335081@16922226053408351~-8157972946390078563, subscriberId=42,539,077, reservation=[20000@42539078[270]]
[2015-06-30 09:53:55,103][FINEST][278][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=278]
[2015-06-30 09:53:55,108][FINEST][278][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=278]
[2015-06-30 09:53:55,108][FINEST][278][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=4.943]
[2015-06-30 09:53:55,108][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:53:55,108][FINEST][278][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.ReservationDaoImpl method=save execTime=5.598]
[2015-06-30 09:53:55,109][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=CreateReservation]
[2015-06-30 09:53:55,109][FINEST][278][                AccountStoreImpl.releaseAccounts()] Releasing the cached accounts for subscriber [subscriberId=42539077, actionId=1902356294]
[2015-06-30 09:53:55,115][FINEST][278][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=updateContext execTime=5.188]
[2015-06-30 09:53:55,115][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Update]
[2015-06-30 09:53:55,116][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=UpdateSession]
[2015-06-30 09:53:55,120][FINEST][278][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.apps.session.impl.SessionApplicationImpl method=reserve execTime=287.748]
[2015-06-30 09:53:55,120][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=Reserve]
[2015-06-30 09:53:55,121][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=ReserveMOC]
[2015-06-30 09:53:55,122][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=ReserveInitial]
[2015-06-30 09:53:55,122][FINEST][278][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=ReserveMOCInitial]
[2015-06-30 09:53:55,123][  INFO][278][                     TraceInterceptorImpl.invoke()] reserve(...): SessionReservationResponse [sessionId=5065600000, responseCode=OK, reservationId=R42539077T1435658335081@16922226053408351~-8157972946390078563, lastSegment=false, grantedTime=60000, accounts=[[accountId=42539078, amount=20000, unitId=270]]] [291ms]
[2015-06-30 09:53:56,252][  INFO][279][                     TraceInterceptorImpl.invoke()] update(SessionUpdateReservationRequest [header=[sessionId=5065600000, sessionBeginTimeStamp=Tue Jun 30 09:53:54 UTC 2015, chargingType=REGULAR], reservationId=R42539077T1435658335081@16922226053408351~-8157972946390078563, trafficType=MOC, imsi=530052041010000, subscriberId=42539077, callingParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], calledParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], bearerType=Voice, startTime=Tue Jun 30 09:53:56 UTC 2015, duration=0, location=64278, roaming=false, referenceNumber=0001ABFF0E])
[2015-06-30 09:53:56,335][FINEST][279][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:53:56,335][FINEST][279][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:53:56,335][FINEST][279][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:53:56,337][FINEST][279][     LocalNumberPortabilityService.getNumberInfo()] Performing local MNP query [msisdn=642041010000]
[2015-06-30 09:53:56,495][  FINE][279][                       ZonePeerImpl.matchWithMnp()] Number '642041010000' is HPLMN
[2015-06-30 09:53:56,500][FINEST][279][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=selectContext execTime=4.208]
[2015-06-30 09:53:56,501][FINEST][279][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Select]
[2015-06-30 09:53:56,501][FINEST][279][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=SelectSession]
[2015-06-30 09:53:56,502][FINEST][279][                 SessionContext.getCommitActions()] Reading commit actions: []
[2015-06-30 09:53:56,502][ FINER][279][                    RateplanPeerImpl.getRateplan()] Getting the rateplan for key: ptk.skinny/101001/moc
[2015-06-30 09:53:56,502][FINEST][279][            ReservationStoreImpl.getReservations()] Loading all reservations from database [subscriberId=42,539,077]
[2015-06-30 09:53:56,503][FINEST][279][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=279]
[2015-06-30 09:53:56,505][FINEST][279][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=279]
[2015-06-30 09:53:56,505][FINEST][279][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.765]
[2015-06-30 09:53:56,506][FINEST][279][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:53:56,506][FINEST][279][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.ReservationDaoImpl method=getBySubscriber execTime=3.465]
[2015-06-30 09:53:56,506][FINEST][279][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=SelectReservation]
[2015-06-30 09:53:56,507][FINEST][279][                        AccountStoreImpl.getById()] Loading the account by id [subscriberId=42,539,077, accountId=42,539,078]
[2015-06-30 09:53:56,507][FINEST][279][                AccountStoreImpl.loadDescriptors()] Loading descriptors from database [subscriberId=42,539,077, actionId=-1509724528]
[2015-06-30 09:53:56,508][FINEST][279][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=279]
[2015-06-30 09:53:56,510][FINEST][279][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=279]
[2015-06-30 09:53:56,510][FINEST][279][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.518]
[2015-06-30 09:53:56,510][FINEST][279][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:53:56,510][FINEST][279][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.AccountDaoImpl method=loadDescriptors execTime=3.24]
[2015-06-30 09:53:56,511][FINEST][279][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=Lookup]
[2015-06-30 09:53:56,511][ FINER][279][                     AbstractAccountManager.load()] Loading acount from descriptor [accountId=42,539,078, subscriberId=42,539,077]
[2015-06-30 09:53:56,511][FINEST][279][            ReservationStoreImpl.getReservations()] Loading reservations from cache [subscriberId=42,539,077]
[2015-06-30 09:53:56,512][FINEST][279][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,036,020, duration=60,000]
[2015-06-30 09:53:56,512][FINEST][279][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,096,020, duration=60,000]
[2015-06-30 09:53:56,512][ FINER][279][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000032
[2015-06-30 09:53:56,512][ FINER][279][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000790
[2015-06-30 09:53:56,513][FINEST][279][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,791
[2015-06-30 09:53:56,513][ FINER][279][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,791]
[2015-06-30 09:53:56,513][FINEST][279][                    CompiledRatingFilter.rateMoc()] Beginning of session, adding setup rating
[2015-06-30 09:53:56,513][ FINER][279][                                SessionRater.add()] Try rating: setup=true, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:53:56,513][FINEST][279][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-1509724528]
[2015-06-30 09:53:56,514][ FINER][279][                               SessionRater.rate()] Failed to charge rating: setup=true, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:53:56,514][ FINER][279][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000790
[2015-06-30 09:53:56,514][FINEST][279][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,791
[2015-06-30 09:53:56,514][ FINER][279][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,791]
[2015-06-30 09:53:56,514][ FINER][279][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:53:56,514][FINEST][279][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-1509724528]
[2015-06-30 09:53:56,515][ FINER][279][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:53:56,515][ FINER][279][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000033
[2015-06-30 09:53:56,515][ FINER][279][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000798
[2015-06-30 09:53:56,515][FINEST][279][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,799
[2015-06-30 09:53:56,515][ FINER][279][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,799]
[2015-06-30 09:53:56,515][FINEST][279][                    CompiledRatingFilter.rateMoc()] Beginning of session, adding setup rating
[2015-06-30 09:53:56,516][ FINER][279][                                SessionRater.add()] Try rating: setup=true, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:53:56,516][FINEST][279][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-1509724528]
[2015-06-30 09:53:56,516][ FINER][279][                               SessionRater.rate()] Failed to charge rating: setup=true, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:53:56,516][ FINER][279][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000798
[2015-06-30 09:53:56,516][FINEST][279][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,799
[2015-06-30 09:53:56,517][ FINER][279][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,799]
[2015-06-30 09:53:56,517][ FINER][279][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:53:56,517][FINEST][279][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-1509724528]
[2015-06-30 09:53:56,517][ FINER][279][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:53:56,517][ FINER][279][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000034
[2015-06-30 09:53:56,518][ FINER][279][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000814
[2015-06-30 09:53:56,518][FINEST][279][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,815
[2015-06-30 09:53:56,518][ FINER][279][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,815]
[2015-06-30 09:53:56,518][FINEST][279][                    CompiledRatingFilter.rateMoc()] Beginning of session, adding setup rating
[2015-06-30 09:53:56,518][ FINER][279][                                SessionRater.add()] Try rating: setup=true, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:53:56,518][FINEST][279][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-1509724528]
[2015-06-30 09:53:56,519][ FINER][279][                               SessionRater.rate()] Failed to charge rating: setup=true, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:53:56,519][ FINER][279][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000814
[2015-06-30 09:53:56,519][FINEST][279][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,815
[2015-06-30 09:53:56,519][ FINER][279][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,815]
[2015-06-30 09:53:56,519][ FINER][279][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:53:56,519][FINEST][279][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-1509724528]
[2015-06-30 09:53:56,520][ FINER][279][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:53:56,520][ FINER][279][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000045
[2015-06-30 09:53:56,520][ FINER][279][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010001094
[2015-06-30 09:53:56,520][FINEST][279][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,001,095
[2015-06-30 09:53:56,520][ FINER][279][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,001,095]
[2015-06-30 09:53:56,520][FINEST][279][                    CompiledRatingFilter.rateMoc()] Beginning of session, adding setup rating
[2015-06-30 09:53:56,521][ FINER][279][                                SessionRater.add()] Try rating: setup=true, begin=0, duration=0, price=20000, perPeriod=60000, currency=NZD
[2015-06-30 09:53:56,521][FINEST][279][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-1509724528]
[2015-06-30 09:53:56,521][  FINE][279][                      SpecialChargeAction.charge()] accountId=42,539,078 amount=20,000 proposal=true
[2015-06-30 09:53:56,521][FINEST][279][                          AccountListImpl.charge()] Charging attempt succeeded [requestedCharge=20,000, accountId=42,539,078, available=20,000]
[2015-06-30 09:53:56,522][ FINER][279][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010001094
[2015-06-30 09:53:56,522][FINEST][279][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,001,095
[2015-06-30 09:53:56,522][ FINER][279][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,001,095]
[2015-06-30 09:53:56,522][ FINER][279][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=20000, perPeriod=60000, currency=NZD
[2015-06-30 09:53:56,522][FINEST][279][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-1509724528]
[2015-06-30 09:53:56,523][FINEST][279][                          AccountListImpl.charge()] Charging attempt succeeded [requestedCharge=20,000, accountId=42,539,078, available=20,000]
[2015-06-30 09:53:56,523][FINEST][279][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=279]
[2015-06-30 09:53:56,524][FINEST][279][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=279]
[2015-06-30 09:53:56,524][FINEST][279][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=0.953]
[2015-06-30 09:53:56,524][FINEST][279][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:53:56,524][FINEST][279][                AccountStoreImpl.releaseAccounts()] Releasing the cached accounts for subscriber [subscriberId=42539077, actionId=-1509724528]
[2015-06-30 09:53:56,530][FINEST][279][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=updateContext execTime=5.266]
[2015-06-30 09:53:56,531][FINEST][279][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Update]
[2015-06-30 09:53:56,532][FINEST][279][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=UpdateSession]
[2015-06-30 09:53:56,535][FINEST][279][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.apps.session.impl.SessionApplicationImpl method=update execTime=281.818]
[2015-06-30 09:53:56,535][FINEST][279][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=Update]
[2015-06-30 09:53:56,535][FINEST][279][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=UpdateMOC]
[2015-06-30 09:53:56,536][  INFO][279][                     TraceInterceptorImpl.invoke()] update(...): SessionReservationResponse [sessionId=5065600000, responseCode=OK, reservationId=R42539077T1435658335081@16922226053408351~-8157972946390078563, lastSegment=false, grantedTime=60000, accounts=[]] [283ms]
[2015-06-30 09:53:57,413][FINEST][108][                   ProviderPeerImpl.getProviders()] return: [com.tryge.negret.profiler.services.ProviderType@52d5ca80, com.tryge.negret.profiler.services.ProviderType@51e1c3fc, com.tryge.negret.profiler.services.ProviderType@3d09ff63]
[2015-06-30 09:54:42,398][FINEST][108][                   ProviderPeerImpl.getProviders()] return: [com.tryge.negret.profiler.services.ProviderType@54382132, com.tryge.negret.profiler.services.ProviderType@310b84d0, com.tryge.negret.profiler.services.ProviderType@6b3c8cd7]
[2015-06-30 09:54:56,289][  INFO][282][                     TraceInterceptorImpl.invoke()] commit(SessionCommitRequest [header=[sessionId=5065600000, sessionBeginTimeStamp=Tue Jun 30 09:53:54 UTC 2015, chargingType=REGULAR], reservationId=R42539077T1435658335081@16922226053408351~-8157972946390078563, finalCommit=false, usedTime=60000])
[2015-06-30 09:54:56,294][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=selectContext execTime=4.744]
[2015-06-30 09:54:56,295][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Select]
[2015-06-30 09:54:56,296][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=SelectSession]
[2015-06-30 09:54:56,296][  FINE][282][                SessionCommitClosure.withContext()] try to commit reservation: R42539077T1435658335081@16922226053408351~-8157972946390078563
[2015-06-30 09:54:56,450][FINEST][282][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:54:56,450][FINEST][282][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:54:56,450][FINEST][282][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:54:56,451][FINEST][282][            ReservationStoreImpl.getReservations()] Loading all reservations from database [subscriberId=42,539,077]
[2015-06-30 09:54:56,451][FINEST][282][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=282]
[2015-06-30 09:54:56,453][FINEST][282][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=282]
[2015-06-30 09:54:56,454][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.609]
[2015-06-30 09:54:56,454][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:54:56,454][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.ReservationDaoImpl method=getBySubscriber execTime=3.063]
[2015-06-30 09:54:56,454][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=SelectReservation]
[2015-06-30 09:54:56,454][FINEST][282][                     ConsumeAction.commitPartial()] Partially commiting the reservation [subscriberId=42,539,077, reservationId=R42539077T1435658335081@16922226053408351~-8157972946390078563, tuples=[20000@42539078[270]]]
[2015-06-30 09:54:56,454][FINEST][282][                        AccountStoreImpl.getById()] Loading the account by id [subscriberId=42,539,077, accountId=42,539,078]
[2015-06-30 09:54:56,455][FINEST][282][                AccountStoreImpl.loadDescriptors()] Loading descriptors from database [subscriberId=42,539,077, actionId=1585093954]
[2015-06-30 09:54:56,455][FINEST][282][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=282]
[2015-06-30 09:54:56,457][FINEST][282][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=282]
[2015-06-30 09:54:56,457][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.242]
[2015-06-30 09:54:56,457][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:54:56,457][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.AccountDaoImpl method=loadDescriptors execTime=2.697]
[2015-06-30 09:54:56,457][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=Lookup]
[2015-06-30 09:54:56,458][ FINER][282][                     AbstractAccountManager.load()] Loading acount from descriptor [accountId=42,539,078, subscriberId=42,539,077]
[2015-06-30 09:54:56,458][FINEST][282][            ReservationStoreImpl.getReservations()] Loading reservations from cache [subscriberId=42,539,077]
[2015-06-30 09:54:56,458][FINEST][282][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=282]
[2015-06-30 09:54:56,459][FINEST][282][                            AccountDaoImpl.flush()] Flushing account [id=42,539,078, balance=9,980,000]
[2015-06-30 09:54:56,461][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.AccountDaoImpl method=flush execTime=2.694]
[2015-06-30 09:54:56,461][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=Flush]
[2015-06-30 09:54:56,462][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=3.049]
[2015-06-30 09:54:56,462][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:54:56,464][FINEST][282][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=282]
[2015-06-30 09:54:56,464][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=5.777]
[2015-06-30 09:54:56,464][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:54:56,464][ FINER][282][                    ReservationStoreImpl.discard()] Discarding reservation [reservationId=R42539077T1435658335081@16922226053408351~-8157972946390078563]
[2015-06-30 09:54:56,465][FINEST][282][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=282]
[2015-06-30 09:54:56,467][FINEST][282][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=282]
[2015-06-30 09:54:56,467][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.825]
[2015-06-30 09:54:56,468][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:54:56,468][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.ReservationDaoImpl method=delete execTime=3.237]
[2015-06-30 09:54:56,468][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=DeleteReservation]
[2015-06-30 09:54:56,468][FINEST][282][                AccountStoreImpl.releaseAccounts()] Releasing the cached accounts for subscriber [subscriberId=42539077, actionId=1585093954]
[2015-06-30 09:54:56,468][  FINE][ 48][                  AccountChangeHook.eventOccured()] Received event: AccountChangeEvent [type=3, subscriberId=42539077, timestamp=1435658096468, transactionId=ef3875bc-5c22-4c5e-9fdf-1429743a3550]
[2015-06-30 09:54:56,468][FINEST][282][                 SessionContext.getCommitActions()] Reading commit actions: []
[2015-06-30 09:54:56,469][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.plugins.datacontrol.impl.DataControlTimerListener
[2015-06-30 09:54:56,469][FINEST][282][                 SessionContext.getCommitActions()] Reading commit actions: []
[2015-06-30 09:54:56,469][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.emergencyloan.service.impl.EmergencyLoanRepaymentAccountListener
[2015-06-30 09:54:56,469][  FINE][ 48][EmergencyLoanRepaymentAccountListener.accountChanged()] Received accountChanged event for account id 42,539,078
[2015-06-30 09:54:56,469][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.integration.diameter.impl.listeners.DiameterReauthAccountListener
[2015-06-30 09:54:56,470][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.plugins.accountlimit.AccountChangeLimitListener
[2015-06-30 09:54:56,470][FINEST][ 48][       AccountChangeLimitListener.accountChanged()] Checking account limit [subscriberId=42539077, remainingBalance=9980000]
[2015-06-30 09:54:56,470][FINEST][ 48][       AccountChangeLimitListener.accountChanged()] Account limit not set for subscriber [subscriberId=42539077]
[2015-06-30 09:54:56,470][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.plugins.notifications.accounts.AccountExpiryNotificationListener
[2015-06-30 09:54:56,470][  INFO][ 48][AccountExpiryNotificationListener.isMainTopupOrChangedExpiry()] Balance or expiry changed evaluation result [isTopup=false, changedExpiry=false]
[2015-06-30 09:54:56,470][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.plugins.notifications.accounts.AccountBalanceNotificationListener
[2015-06-30 09:54:56,470][FINEST][ 48][AccountBalanceNotificationListener.accountChanged()] Checking account notifications [subscriberId=42539077]
[2015-06-30 09:54:56,471][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_au_minutes_20_percent, currencyId=101,004]
[2015-06-30 09:54:56,471][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_au_minutes_used, currencyId=101,004]
[2015-06-30 09:54:56,471][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_au_texts_20_percent, currencyId=101,003]
[2015-06-30 09:54:56,471][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_au_texts_used, currencyId=101,003]
[2015-06-30 09:54:56,472][FINEST][ 48][                  AccountQuotaEvaluator.evaluate()] Notification conditions not met [subscriberId=42,539,077, notification=low_credit_05]
[2015-06-30 09:54:56,472][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=data_quota_used, currencyGroup=DATA]
[2015-06-30 09:54:56,472][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=skinny_texts_20_percent, currencyId=101,000]
[2015-06-30 09:54:56,473][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=updateContext execTime=3.611]
[2015-06-30 09:54:56,473][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=rollover_data_quota_20mb, currencyId=101,006]
[2015-06-30 09:54:56,473][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=data_quota_20mb, currencyId=4]
[2015-06-30 09:54:56,473][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Update]
[2015-06-30 09:54:56,474][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=skinny_minutes_used, currencyId=6]
[2015-06-30 09:54:56,474][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=UpdateSession]
[2015-06-30 09:54:56,474][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=skinny_minutes_20_percent, currencyId=6]
[2015-06-30 09:54:56,474][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_minutes_20_percent, currencyId=2]
[2015-06-30 09:54:56,475][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_minutes_used, currencyId=2]
[2015-06-30 09:54:56,475][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_texts_used, currencyId=3]
[2015-06-30 09:54:56,475][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=skinny_texts_used, currencyId=101,000]
[2015-06-30 09:54:56,476][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_texts_20_percent, currencyId=3]
[2015-06-30 09:54:56,476][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.tariffs.service.TariffAccountListener
[2015-06-30 09:54:56,477][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.apps.session.impl.SessionApplicationImpl method=commit execTime=187.522]
[2015-06-30 09:54:56,477][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=Commit]
[2015-06-30 09:54:56,477][  INFO][282][                     TraceInterceptorImpl.invoke()] commit(...): SessionCommitResponse [header=[sessionId=5065600000, sessionBeginTimeStamp=Tue Jun 30 09:53:54 UTC 2015, chargingType=REGULAR], responseCode=OK, reservationId=R42539077T1435658335081@16922226053408351~-8157972946390078563, accounts=[[accountId=42539078, amount=20000, unitId=270]]] [187ms]
[2015-06-30 09:54:56,477][  INFO][282][                     TraceInterceptorImpl.invoke()] reserve(SessionReservationRequest [header=[sessionId=5065600000, sessionBeginTimeStamp=Tue Jun 30 09:53:54 UTC 2015, chargingType=REGULAR], trafficType=MOC, imsi=530052041010000, subscriberId=42539077, suppressNumber=false, startTime=Tue Jun 30 09:53:56 UTC 2015, duration=60000, location=64278, roaming=false, bearerType=Voice, referenceNumber=0001ABFF0E, callingParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], calledParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], locationNumber=null, locationDetailedId=null])
[2015-06-30 09:54:56,627][FINEST][282][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:54:56,627][FINEST][282][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:54:56,629][FINEST][282][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:54:56,629][FINEST][282][     LocalNumberPortabilityService.getNumberInfo()] Performing local MNP query [msisdn=642041010000]
[2015-06-30 09:54:56,901][  FINE][282][                       ZonePeerImpl.matchWithMnp()] Number '642041010000' is HPLMN
[2015-06-30 09:54:56,906][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=selectContext execTime=4.563]
[2015-06-30 09:54:56,907][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Select]
[2015-06-30 09:54:56,907][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=SelectSession]
[2015-06-30 09:54:56,908][FINEST][282][                 SessionContext.getCommitActions()] Reading commit actions: []
[2015-06-30 09:54:56,908][ FINER][282][                    RateplanPeerImpl.getRateplan()] Getting the rateplan for key: ptk.skinny/101001/moc
[2015-06-30 09:54:56,909][FINEST][282][                     ReservationStoreImpl.create()] Creating a reservation [subscriberId=42,539,077, reservation=InternalReservationImpl{id='R42539077T1435658216909@16922287880896056~-4910470396583759783', subscriberId=42539077, expires=1435658216909, reservedAt=1435658096909, reservation=[]}]
[2015-06-30 09:54:56,909][FINEST][282][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,096,020, duration=60,000]
[2015-06-30 09:54:56,910][FINEST][282][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,156,020, duration=60,000]
[2015-06-30 09:54:56,910][ FINER][282][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000032
[2015-06-30 09:54:56,910][ FINER][282][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000790
[2015-06-30 09:54:56,910][FINEST][282][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,791
[2015-06-30 09:54:56,910][ FINER][282][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,791]
[2015-06-30 09:54:56,911][ FINER][282][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:54:56,911][FINEST][282][                AccountStoreImpl.loadDescriptors()] Loading descriptors from database [subscriberId=42,539,077, actionId=-701567938]
[2015-06-30 09:54:56,912][FINEST][282][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=282]
[2015-06-30 09:54:56,914][FINEST][282][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=282]
[2015-06-30 09:54:56,915][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=3.412]
[2015-06-30 09:54:56,915][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:54:56,915][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.AccountDaoImpl method=loadDescriptors execTime=4.177]
[2015-06-30 09:54:56,915][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=Lookup]
[2015-06-30 09:54:56,916][ FINER][282][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:54:56,916][ FINER][282][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000790
[2015-06-30 09:54:56,916][FINEST][282][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,791
[2015-06-30 09:54:56,916][ FINER][282][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,791]
[2015-06-30 09:54:56,917][ FINER][282][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:54:56,917][FINEST][282][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-701567938]
[2015-06-30 09:54:56,917][ FINER][282][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:54:56,917][ FINER][282][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000033
[2015-06-30 09:54:56,917][ FINER][282][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000798
[2015-06-30 09:54:56,917][FINEST][282][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,799
[2015-06-30 09:54:56,918][ FINER][282][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,799]
[2015-06-30 09:54:56,918][ FINER][282][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:54:56,918][FINEST][282][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-701567938]
[2015-06-30 09:54:56,918][ FINER][282][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:54:56,918][ FINER][282][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000798
[2015-06-30 09:54:56,919][FINEST][282][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,799
[2015-06-30 09:54:56,919][ FINER][282][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,799]
[2015-06-30 09:54:56,919][ FINER][282][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:54:56,919][FINEST][282][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-701567938]
[2015-06-30 09:54:56,919][ FINER][282][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:54:56,919][ FINER][282][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000034
[2015-06-30 09:54:56,920][ FINER][282][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000814
[2015-06-30 09:54:56,920][FINEST][282][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,815
[2015-06-30 09:54:56,920][ FINER][282][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,815]
[2015-06-30 09:54:56,920][ FINER][282][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:54:56,920][FINEST][282][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-701567938]
[2015-06-30 09:54:56,921][ FINER][282][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:54:56,921][ FINER][282][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000814
[2015-06-30 09:54:56,921][FINEST][282][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,815
[2015-06-30 09:54:56,921][ FINER][282][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,815]
[2015-06-30 09:54:56,921][ FINER][282][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:54:56,921][FINEST][282][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-701567938]
[2015-06-30 09:54:56,922][ FINER][282][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:54:56,922][ FINER][282][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000045
[2015-06-30 09:54:56,922][ FINER][282][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010001094
[2015-06-30 09:54:56,922][FINEST][282][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,001,095
[2015-06-30 09:54:56,922][ FINER][282][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,001,095]
[2015-06-30 09:54:56,922][ FINER][282][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=20000, perPeriod=60000, currency=NZD
[2015-06-30 09:54:56,922][FINEST][282][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-701567938]
[2015-06-30 09:54:56,923][ FINER][282][                     AbstractAccountManager.load()] Loading acount from descriptor [accountId=42,539,078, subscriberId=42,539,077]
[2015-06-30 09:54:56,923][FINEST][282][            ReservationStoreImpl.getReservations()] Loading all reservations from database [subscriberId=42,539,077]
[2015-06-30 09:54:56,923][FINEST][282][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=282]
[2015-06-30 09:54:56,925][FINEST][282][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=282]
[2015-06-30 09:54:56,926][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.636]
[2015-06-30 09:54:56,926][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:54:56,926][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.ReservationDaoImpl method=getBySubscriber execTime=3.319]
[2015-06-30 09:54:56,926][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=SelectReservation]
[2015-06-30 09:54:56,927][FINEST][282][                        AccountStoreImpl.getById()] Loading the account by id [subscriberId=42,539,077, accountId=42,539,078]
[2015-06-30 09:54:56,927][FINEST][282][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-701567938]
[2015-06-30 09:54:56,927][FINEST][282][                          AccountListImpl.charge()] Charging attempt succeeded [requestedCharge=20,000, accountId=42,539,078, available=20,000]
[2015-06-30 09:54:56,927][ FINER][282][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010001094
[2015-06-30 09:54:56,928][FINEST][282][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,001,095
[2015-06-30 09:54:56,928][ FINER][282][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,001,095]
[2015-06-30 09:54:56,928][ FINER][282][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=20000, perPeriod=60000, currency=NZD
[2015-06-30 09:54:56,928][FINEST][282][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=-701567938]
[2015-06-30 09:54:56,928][FINEST][282][                          AccountListImpl.charge()] Charging attempt succeeded [requestedCharge=20,000, accountId=42,539,078, available=20,000]
[2015-06-30 09:54:56,929][FINEST][282][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=282]
[2015-06-30 09:54:56,930][FINEST][282][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=282]
[2015-06-30 09:54:56,930][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=0.812]
[2015-06-30 09:54:56,930][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:54:56,930][ FINER][282][                      ReservationStoreImpl.share()] Sharing reservation [reservationId=R42539077T1435658216909@16922287880896056~-4910470396583759783, subscriberId=42,539,077, reservation=[20000@42539078[270]]
[2015-06-30 09:54:56,931][FINEST][282][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=282]
[2015-06-30 09:54:56,936][FINEST][282][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=282]
[2015-06-30 09:54:56,936][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=5.256]
[2015-06-30 09:54:56,936][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:54:56,936][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.ReservationDaoImpl method=save execTime=5.913]
[2015-06-30 09:54:56,937][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=CreateReservation]
[2015-06-30 09:54:56,937][FINEST][282][                AccountStoreImpl.releaseAccounts()] Releasing the cached accounts for subscriber [subscriberId=42539077, actionId=-701567938]
[2015-06-30 09:54:56,945][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=updateContext execTime=6.993]
[2015-06-30 09:54:56,945][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Update]
[2015-06-30 09:54:56,946][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=UpdateSession]
[2015-06-30 09:54:56,950][FINEST][282][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.apps.session.impl.SessionApplicationImpl method=reserve execTime=472.003]
[2015-06-30 09:54:56,950][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=Reserve]
[2015-06-30 09:54:56,950][FINEST][282][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=ReserveMOC]
[2015-06-30 09:54:56,952][  INFO][282][                     TraceInterceptorImpl.invoke()] reserve(...): SessionReservationResponse [sessionId=5065600000, responseCode=OK, reservationId=R42539077T1435658216909@16922287880896056~-4910470396583759783, lastSegment=false, grantedTime=60000, accounts=[[accountId=42539078, amount=20000, unitId=270]]] [474ms]
[2015-06-30 09:54:57,413][FINEST][108][                   ProviderPeerImpl.getProviders()] return: [com.tryge.negret.profiler.services.ProviderType@48506f37, com.tryge.negret.profiler.services.ProviderType@18b5a8f8, com.tryge.negret.profiler.services.ProviderType@3e683e74]
[2015-06-30 09:55:05,485][SEVERE][121][                    DatabaseContextSharing.clean()] unexpected exception during cleanup: 
java.lang.RuntimeException: com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 241
	at com.inewcs.crce.contextsharing.db.dialect.Utils.deserializeString(Utils.java:141)
	at com.inewcs.crce.contextsharing.db.dialect.AbstractDbDialect.createContextFromResultSet(AbstractDbDialect.java:183)
	at com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing.clean(DatabaseContextSharing.java:450)
	at com.tryge.negret.proc.impl.CleanerImpl$1$1.run(CleanerImpl.java:70)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
Caused by: com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 241
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:176)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:93)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:172)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:93)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:172)
	at com.google.gson.Gson.fromJson(Gson.java:795)
	at com.google.gson.Gson.fromJson(Gson.java:761)
	at com.google.gson.Gson.fromJson(Gson.java:710)
	at com.google.gson.Gson.fromJson(Gson.java:682)
	at com.inewcs.crce.contextsharing.db.dialect.Utils.deserializeString(Utils.java:137)
	... 6 more
Caused by: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 241
	at com.google.gson.stream.JsonReader.expect(JsonReader.java:339)
	at com.google.gson.stream.JsonReader.beginObject(JsonReader.java:322)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:165)
	... 15 more
[2015-06-30 09:55:12,617][FINEST][384][                   ProviderPeerImpl.getProviders()] return: [com.tryge.negret.profiler.services.ProviderType@1656dfd5, com.tryge.negret.profiler.services.ProviderType@21812468, com.tryge.negret.profiler.services.ProviderType@257d3907]
[2015-06-30 09:55:42,398][FINEST][108][                   ProviderPeerImpl.getProviders()] return: [com.tryge.negret.profiler.services.ProviderType@786d2fa5, com.tryge.negret.profiler.services.ProviderType@48533767, com.tryge.negret.profiler.services.ProviderType@4f5a7049]
[2015-06-30 09:55:57,128][  INFO][283][                     TraceInterceptorImpl.invoke()] commit(SessionCommitRequest [header=[sessionId=5065600000, sessionBeginTimeStamp=Tue Jun 30 09:53:54 UTC 2015, chargingType=REGULAR], reservationId=R42539077T1435658216909@16922287880896056~-4910470396583759783, finalCommit=false, usedTime=120000])
[2015-06-30 09:55:57,135][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=selectContext execTime=5.736]
[2015-06-30 09:55:57,135][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Select]
[2015-06-30 09:55:57,136][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=SelectSession]
[2015-06-30 09:55:57,137][  FINE][283][                SessionCommitClosure.withContext()] try to commit reservation: R42539077T1435658216909@16922287880896056~-4910470396583759783
[2015-06-30 09:55:57,225][FINEST][283][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:55:57,225][FINEST][283][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:55:57,225][FINEST][283][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:55:57,226][FINEST][283][            ReservationStoreImpl.getReservations()] Loading all reservations from database [subscriberId=42,539,077]
[2015-06-30 09:55:57,227][FINEST][283][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=283]
[2015-06-30 09:55:57,229][FINEST][283][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=283]
[2015-06-30 09:55:57,229][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.577]
[2015-06-30 09:55:57,230][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:55:57,230][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.ReservationDaoImpl method=getBySubscriber execTime=3.318]
[2015-06-30 09:55:57,230][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=SelectReservation]
[2015-06-30 09:55:57,231][FINEST][283][                     ConsumeAction.commitPartial()] Partially commiting the reservation [subscriberId=42,539,077, reservationId=R42539077T1435658216909@16922287880896056~-4910470396583759783, tuples=[20000@42539078[270]]]
[2015-06-30 09:55:57,231][FINEST][283][                        AccountStoreImpl.getById()] Loading the account by id [subscriberId=42,539,077, accountId=42,539,078]
[2015-06-30 09:55:57,231][FINEST][283][                AccountStoreImpl.loadDescriptors()] Loading descriptors from database [subscriberId=42,539,077, actionId=1319611039]
[2015-06-30 09:55:57,232][FINEST][283][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=283]
[2015-06-30 09:55:57,234][FINEST][283][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=283]
[2015-06-30 09:55:57,234][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.476]
[2015-06-30 09:55:57,234][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:55:57,235][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.AccountDaoImpl method=loadDescriptors execTime=3.126]
[2015-06-30 09:55:57,235][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=Lookup]
[2015-06-30 09:55:57,235][ FINER][283][                     AbstractAccountManager.load()] Loading acount from descriptor [accountId=42,539,078, subscriberId=42,539,077]
[2015-06-30 09:55:57,235][FINEST][283][            ReservationStoreImpl.getReservations()] Loading reservations from cache [subscriberId=42,539,077]
[2015-06-30 09:55:57,236][FINEST][283][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=283]
[2015-06-30 09:55:57,236][FINEST][283][                            AccountDaoImpl.flush()] Flushing account [id=42,539,078, balance=9,960,000]
[2015-06-30 09:55:57,238][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.AccountDaoImpl method=flush execTime=1.48]
[2015-06-30 09:55:57,238][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=Flush]
[2015-06-30 09:55:57,238][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=1.963]
[2015-06-30 09:55:57,239][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:55:57,241][FINEST][283][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=283]
[2015-06-30 09:55:57,242][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=5.822]
[2015-06-30 09:55:57,242][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:55:57,242][ FINER][283][                    ReservationStoreImpl.discard()] Discarding reservation [reservationId=R42539077T1435658216909@16922287880896056~-4910470396583759783]
[2015-06-30 09:55:57,243][FINEST][283][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=283]
[2015-06-30 09:55:57,245][FINEST][283][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=283]
[2015-06-30 09:55:57,246][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=3.219]
[2015-06-30 09:55:57,246][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:55:57,246][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.ReservationDaoImpl method=delete execTime=3.897]
[2015-06-30 09:55:57,246][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=DeleteReservation]
[2015-06-30 09:55:57,247][FINEST][283][                AccountStoreImpl.releaseAccounts()] Releasing the cached accounts for subscriber [subscriberId=42539077, actionId=1319611039]
[2015-06-30 09:55:57,247][  FINE][ 48][                  AccountChangeHook.eventOccured()] Received event: AccountChangeEvent [type=3, subscriberId=42539077, timestamp=1435658157247, transactionId=9937071a-66ec-477a-ad31-9e67c0772d05]
[2015-06-30 09:55:57,247][FINEST][283][                 SessionContext.getCommitActions()] Reading commit actions: []
[2015-06-30 09:55:57,247][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.plugins.datacontrol.impl.DataControlTimerListener
[2015-06-30 09:55:57,247][FINEST][283][                 SessionContext.getCommitActions()] Reading commit actions: []
[2015-06-30 09:55:57,247][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.emergencyloan.service.impl.EmergencyLoanRepaymentAccountListener
[2015-06-30 09:55:57,248][  FINE][ 48][EmergencyLoanRepaymentAccountListener.accountChanged()] Received accountChanged event for account id 42,539,078
[2015-06-30 09:55:57,248][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.integration.diameter.impl.listeners.DiameterReauthAccountListener
[2015-06-30 09:55:57,248][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.plugins.accountlimit.AccountChangeLimitListener
[2015-06-30 09:55:57,248][FINEST][ 48][       AccountChangeLimitListener.accountChanged()] Checking account limit [subscriberId=42539077, remainingBalance=9960000]
[2015-06-30 09:55:57,248][FINEST][ 48][       AccountChangeLimitListener.accountChanged()] Account limit not set for subscriber [subscriberId=42539077]
[2015-06-30 09:55:57,249][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.plugins.notifications.accounts.AccountExpiryNotificationListener
[2015-06-30 09:55:57,249][  INFO][ 48][AccountExpiryNotificationListener.isMainTopupOrChangedExpiry()] Balance or expiry changed evaluation result [isTopup=false, changedExpiry=false]
[2015-06-30 09:55:57,249][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.plugins.notifications.accounts.AccountBalanceNotificationListener
[2015-06-30 09:55:57,249][FINEST][ 48][AccountBalanceNotificationListener.accountChanged()] Checking account notifications [subscriberId=42539077]
[2015-06-30 09:55:57,249][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_au_minutes_20_percent, currencyId=101,004]
[2015-06-30 09:55:57,249][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_au_minutes_used, currencyId=101,004]
[2015-06-30 09:55:57,249][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_au_texts_20_percent, currencyId=101,003]
[2015-06-30 09:55:57,249][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_au_texts_used, currencyId=101,003]
[2015-06-30 09:55:57,250][FINEST][ 48][                  AccountQuotaEvaluator.evaluate()] Notification conditions not met [subscriberId=42,539,077, notification=low_credit_05]
[2015-06-30 09:55:57,250][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=data_quota_used, currencyGroup=DATA]
[2015-06-30 09:55:57,250][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=skinny_texts_20_percent, currencyId=101,000]
[2015-06-30 09:55:57,250][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=rollover_data_quota_20mb, currencyId=101,006]
[2015-06-30 09:55:57,250][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=data_quota_20mb, currencyId=4]
[2015-06-30 09:55:57,251][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=skinny_minutes_used, currencyId=6]
[2015-06-30 09:55:57,251][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=skinny_minutes_20_percent, currencyId=6]
[2015-06-30 09:55:57,251][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_minutes_20_percent, currencyId=2]
[2015-06-30 09:55:57,251][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_minutes_used, currencyId=2]
[2015-06-30 09:55:57,251][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_texts_used, currencyId=3]
[2015-06-30 09:55:57,251][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=skinny_texts_used, currencyId=101,000]
[2015-06-30 09:55:57,251][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_texts_20_percent, currencyId=3]
[2015-06-30 09:55:57,252][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.tariffs.service.TariffAccountListener
[2015-06-30 09:55:57,263][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=updateContext execTime=14.928]
[2015-06-30 09:55:57,264][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Update]
[2015-06-30 09:55:57,264][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=UpdateSession]
[2015-06-30 09:55:57,267][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.apps.session.impl.SessionApplicationImpl method=commit execTime=138.082]
[2015-06-30 09:55:57,267][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=Commit]
[2015-06-30 09:55:57,267][  INFO][283][                     TraceInterceptorImpl.invoke()] commit(...): SessionCommitResponse [header=[sessionId=5065600000, sessionBeginTimeStamp=Tue Jun 30 09:53:54 UTC 2015, chargingType=REGULAR], responseCode=OK, reservationId=R42539077T1435658216909@16922287880896056~-4910470396583759783, accounts=[[accountId=42539078, amount=20000, unitId=270]]] [138ms]
[2015-06-30 09:55:57,268][  INFO][283][                     TraceInterceptorImpl.invoke()] reserve(SessionReservationRequest [header=[sessionId=5065600000, sessionBeginTimeStamp=Tue Jun 30 09:53:54 UTC 2015, chargingType=REGULAR], trafficType=MOC, imsi=530052041010000, subscriberId=42539077, suppressNumber=false, startTime=Tue Jun 30 09:53:56 UTC 2015, duration=120000, location=64278, roaming=false, bearerType=Voice, referenceNumber=0001ABFF0E, callingParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], calledParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], locationNumber=null, locationDetailedId=null])
[2015-06-30 09:55:57,365][FINEST][283][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:55:57,365][FINEST][283][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:55:57,365][FINEST][283][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:55:57,366][FINEST][283][     LocalNumberPortabilityService.getNumberInfo()] Performing local MNP query [msisdn=642041010000]
[2015-06-30 09:55:57,413][FINEST][108][                   ProviderPeerImpl.getProviders()] return: [com.tryge.negret.profiler.services.ProviderType@28cb0d97, com.tryge.negret.profiler.services.ProviderType@2ae9496d, com.tryge.negret.profiler.services.ProviderType@39d3a91d]
[2015-06-30 09:55:57,549][  FINE][283][                       ZonePeerImpl.matchWithMnp()] Number '642041010000' is HPLMN
[2015-06-30 09:55:57,555][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=selectContext execTime=5.25]
[2015-06-30 09:55:57,555][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Select]
[2015-06-30 09:55:57,556][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=SelectSession]
[2015-06-30 09:55:57,557][FINEST][283][                 SessionContext.getCommitActions()] Reading commit actions: []
[2015-06-30 09:55:57,557][ FINER][283][                    RateplanPeerImpl.getRateplan()] Getting the rateplan for key: ptk.skinny/101001/moc
[2015-06-30 09:55:57,557][FINEST][283][                     ReservationStoreImpl.create()] Creating a reservation [subscriberId=42,539,077, reservation=InternalReservationImpl{id='R42539077T1435658277557@16922348529382806~-4704609700479659567', subscriberId=42539077, expires=1435658277557, reservedAt=1435658157557, reservation=[]}]
[2015-06-30 09:55:57,558][FINEST][283][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,156,020, duration=60,000]
[2015-06-30 09:55:57,558][FINEST][283][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,216,020, duration=60,000]
[2015-06-30 09:55:57,559][ FINER][283][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000032
[2015-06-30 09:55:57,559][ FINER][283][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000790
[2015-06-30 09:55:57,559][FINEST][283][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,791
[2015-06-30 09:55:57,559][ FINER][283][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,791]
[2015-06-30 09:55:57,559][ FINER][283][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:55:57,559][FINEST][283][                AccountStoreImpl.loadDescriptors()] Loading descriptors from database [subscriberId=42,539,077, actionId=1412266327]
[2015-06-30 09:55:57,560][FINEST][283][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=283]
[2015-06-30 09:55:57,562][FINEST][283][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=283]
[2015-06-30 09:55:57,563][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.924]
[2015-06-30 09:55:57,563][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:55:57,563][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.AccountDaoImpl method=loadDescriptors execTime=3.693]
[2015-06-30 09:55:57,563][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=Lookup]
[2015-06-30 09:55:57,564][ FINER][283][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:55:57,564][ FINER][283][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000790
[2015-06-30 09:55:57,564][FINEST][283][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,791
[2015-06-30 09:55:57,564][ FINER][283][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,791]
[2015-06-30 09:55:57,564][ FINER][283][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:55:57,565][FINEST][283][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1412266327]
[2015-06-30 09:55:57,565][ FINER][283][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Skinny Mins
[2015-06-30 09:55:57,565][ FINER][283][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000033
[2015-06-30 09:55:57,565][ FINER][283][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000798
[2015-06-30 09:55:57,565][FINEST][283][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,799
[2015-06-30 09:55:57,565][ FINER][283][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,799]
[2015-06-30 09:55:57,566][ FINER][283][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:55:57,566][FINEST][283][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1412266327]
[2015-06-30 09:55:57,566][ FINER][283][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:55:57,566][ FINER][283][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000798
[2015-06-30 09:55:57,566][FINEST][283][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,799
[2015-06-30 09:55:57,566][ FINER][283][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,799]
[2015-06-30 09:55:57,567][ FINER][283][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:55:57,567][FINEST][283][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1412266327]
[2015-06-30 09:55:57,567][ FINER][283][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=Minutes
[2015-06-30 09:55:57,567][ FINER][283][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000034
[2015-06-30 09:55:57,567][ FINER][283][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000814
[2015-06-30 09:55:57,567][FINEST][283][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,815
[2015-06-30 09:55:57,568][ FINER][283][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,815]
[2015-06-30 09:55:57,568][ FINER][283][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:55:57,568][FINEST][283][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1412266327]
[2015-06-30 09:55:57,568][ FINER][283][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:55:57,568][ FINER][283][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010000814
[2015-06-30 09:55:57,568][FINEST][283][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,000,815
[2015-06-30 09:55:57,569][ FINER][283][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,815]
[2015-06-30 09:55:57,569][ FINER][283][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:55:57,569][FINEST][283][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1412266327]
[2015-06-30 09:55:57,569][ FINER][283][                               SessionRater.rate()] Failed to charge rating: setup=false, begin=0, duration=0, price=1, perPeriod=60000, currency=NZ and AU Mins
[2015-06-30 09:55:57,569][ FINER][283][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000045
[2015-06-30 09:55:57,570][ FINER][283][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010001094
[2015-06-30 09:55:57,570][FINEST][283][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,001,095
[2015-06-30 09:55:57,570][ FINER][283][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,001,095]
[2015-06-30 09:55:57,570][ FINER][283][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=20000, perPeriod=60000, currency=NZD
[2015-06-30 09:55:57,570][FINEST][283][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1412266327]
[2015-06-30 09:55:57,571][ FINER][283][                     AbstractAccountManager.load()] Loading acount from descriptor [accountId=42,539,078, subscriberId=42,539,077]
[2015-06-30 09:55:57,571][FINEST][283][            ReservationStoreImpl.getReservations()] Loading all reservations from database [subscriberId=42,539,077]
[2015-06-30 09:55:57,571][FINEST][283][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=283]
[2015-06-30 09:55:57,573][FINEST][283][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=283]
[2015-06-30 09:55:57,574][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.206]
[2015-06-30 09:55:57,574][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:55:57,574][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.ReservationDaoImpl method=getBySubscriber execTime=2.896]
[2015-06-30 09:55:57,574][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=SelectReservation]
[2015-06-30 09:55:57,575][FINEST][283][                        AccountStoreImpl.getById()] Loading the account by id [subscriberId=42,539,077, accountId=42,539,078]
[2015-06-30 09:55:57,575][FINEST][283][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1412266327]
[2015-06-30 09:55:57,575][FINEST][283][                          AccountListImpl.charge()] Charging attempt succeeded [requestedCharge=20,000, accountId=42,539,078, available=20,000]
[2015-06-30 09:55:57,575][ FINER][283][                  CompiledDestinationFilter.rate()] Executing destination filter: id=1010010001094
[2015-06-30 09:55:57,575][FINEST][283][                  CompiledDestinationFilter.rate()] Destination zone=Zone [id=1, info=(network) bumblebee, name=Local (on-net), numberPrefix=64204] -&gt; next filter: id=1,010,010,001,095
[2015-06-30 09:55:57,575][ FINER][283][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,001,095]
[2015-06-30 09:55:57,576][ FINER][283][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=20000, perPeriod=60000, currency=NZD
[2015-06-30 09:55:57,576][FINEST][283][                AccountStoreImpl.loadDescriptors()] Loading descriptors from cache [subscriberId=42539077, actionId=1412266327]
[2015-06-30 09:55:57,576][FINEST][283][                          AccountListImpl.charge()] Charging attempt succeeded [requestedCharge=20,000, accountId=42,539,078, available=20,000]
[2015-06-30 09:55:57,577][FINEST][283][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=283]
[2015-06-30 09:55:57,577][FINEST][283][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=283]
[2015-06-30 09:55:57,578][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=0.813]
[2015-06-30 09:55:57,578][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:55:57,578][ FINER][283][                      ReservationStoreImpl.share()] Sharing reservation [reservationId=R42539077T1435658277557@16922348529382806~-4704609700479659567, subscriberId=42,539,077, reservation=[20000@42539078[270]]
[2015-06-30 09:55:57,579][FINEST][283][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=283]
[2015-06-30 09:55:57,583][FINEST][283][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=283]
[2015-06-30 09:55:57,583][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=4.68]
[2015-06-30 09:55:57,583][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:55:57,584][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.ReservationDaoImpl method=save execTime=5.349]
[2015-06-30 09:55:57,584][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=CreateReservation]
[2015-06-30 09:55:57,584][FINEST][283][                AccountStoreImpl.releaseAccounts()] Releasing the cached accounts for subscriber [subscriberId=42539077, actionId=1412266327]
[2015-06-30 09:55:57,603][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=updateContext execTime=18.535]
[2015-06-30 09:55:57,604][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Update]
[2015-06-30 09:55:57,605][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=UpdateSession]
[2015-06-30 09:55:57,607][FINEST][283][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.apps.session.impl.SessionApplicationImpl method=reserve execTime=339.054]
[2015-06-30 09:55:57,607][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=Reserve]
[2015-06-30 09:55:57,608][FINEST][283][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=ReserveMOC]
[2015-06-30 09:55:57,610][  INFO][283][                     TraceInterceptorImpl.invoke()] reserve(...): SessionReservationResponse [sessionId=5065600000, responseCode=OK, reservationId=R42539077T1435658277557@16922348529382806~-4704609700479659567, lastSegment=false, grantedTime=60000, accounts=[[accountId=42539078, amount=20000, unitId=270]]] [341ms]
[2015-06-30 09:56:13,782][  INFO][284][                     TraceInterceptorImpl.invoke()] commit(SessionCommitRequest [header=[sessionId=5065600000, sessionBeginTimeStamp=Tue Jun 30 09:53:54 UTC 2015, chargingType=REGULAR], reservationId=R42539077T1435658277557@16922348529382806~-4704609700479659567, finalCommit=true, usedTime=136000])
[2015-06-30 09:56:13,789][FINEST][284][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=selectContext execTime=6.445]
[2015-06-30 09:56:13,790][FINEST][284][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Select]
[2015-06-30 09:56:13,791][FINEST][284][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=SelectSession]
[2015-06-30 09:56:13,792][  FINE][284][                SessionCommitClosure.withContext()] try to commit reservation: R42539077T1435658277557@16922348529382806~-4704609700479659567
[2015-06-30 09:56:13,946][FINEST][284][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:13,946][FINEST][284][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:13,946][FINEST][284][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:13,948][FINEST][284][            ReservationStoreImpl.getReservations()] Loading all reservations from database [subscriberId=42,539,077]
[2015-06-30 09:56:13,948][FINEST][284][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=284]
[2015-06-30 09:56:13,951][FINEST][284][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=284]
[2015-06-30 09:56:13,951][FINEST][284][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=3.099]
[2015-06-30 09:56:13,951][FINEST][284][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:56:13,952][FINEST][284][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.ReservationDaoImpl method=getBySubscriber execTime=3.895]
[2015-06-30 09:56:13,952][FINEST][284][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=SelectReservation]
[2015-06-30 09:56:13,953][FINEST][284][                     ConsumeAction.commitPartial()] Partially commiting the reservation [subscriberId=42,539,077, reservationId=R42539077T1435658277557@16922348529382806~-4704609700479659567, tuples=[20000@42539078[270]]]
[2015-06-30 09:56:13,953][FINEST][284][                        AccountStoreImpl.getById()] Loading the account by id [subscriberId=42,539,077, accountId=42,539,078]
[2015-06-30 09:56:13,953][FINEST][284][                AccountStoreImpl.loadDescriptors()] Loading descriptors from database [subscriberId=42,539,077, actionId=548328551]
[2015-06-30 09:56:13,953][FINEST][284][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=284]
[2015-06-30 09:56:13,956][FINEST][284][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=284]
[2015-06-30 09:56:13,956][FINEST][284][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=3.036]
[2015-06-30 09:56:13,957][FINEST][284][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:56:13,957][FINEST][284][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.AccountDaoImpl method=loadDescriptors execTime=3.705]
[2015-06-30 09:56:13,957][FINEST][284][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=Lookup]
[2015-06-30 09:56:13,957][ FINER][284][                     AbstractAccountManager.load()] Loading acount from descriptor [accountId=42,539,078, subscriberId=42,539,077]
[2015-06-30 09:56:13,957][FINEST][284][            ReservationStoreImpl.getReservations()] Loading reservations from cache [subscriberId=42,539,077]
[2015-06-30 09:56:13,958][FINEST][284][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=284]
[2015-06-30 09:56:13,959][FINEST][284][                            AccountDaoImpl.flush()] Flushing account [id=42,539,078, balance=9,940,000]
[2015-06-30 09:56:13,961][FINEST][284][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.AccountDaoImpl method=flush execTime=1.912]
[2015-06-30 09:56:13,961][FINEST][284][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=Flush]
[2015-06-30 09:56:13,961][FINEST][284][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.406]
[2015-06-30 09:56:13,961][FINEST][284][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:56:13,964][FINEST][284][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=284]
[2015-06-30 09:56:13,964][FINEST][284][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=5.994]
[2015-06-30 09:56:13,964][FINEST][284][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:56:13,965][ FINER][284][                    ReservationStoreImpl.discard()] Discarding reservation [reservationId=R42539077T1435658277557@16922348529382806~-4704609700479659567]
[2015-06-30 09:56:13,965][FINEST][284][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=284]
[2015-06-30 09:56:13,968][FINEST][284][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=284]
[2015-06-30 09:56:13,969][FINEST][284][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=3.699]
[2015-06-30 09:56:13,969][FINEST][284][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:56:13,969][FINEST][284][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.ReservationDaoImpl method=delete execTime=4.484]
[2015-06-30 09:56:13,970][FINEST][284][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=DeleteReservation]
[2015-06-30 09:56:13,970][FINEST][284][                AccountStoreImpl.releaseAccounts()] Releasing the cached accounts for subscriber [subscriberId=42539077, actionId=548328551]
[2015-06-30 09:56:13,970][  FINE][ 48][                  AccountChangeHook.eventOccured()] Received event: AccountChangeEvent [type=3, subscriberId=42539077, timestamp=1435658173970, transactionId=ccbb6c8f-b370-4aeb-aff3-a93bc756cd81]
[2015-06-30 09:56:13,970][FINEST][284][                 SessionContext.getCommitActions()] Reading commit actions: []
[2015-06-30 09:56:13,970][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.plugins.datacontrol.impl.DataControlTimerListener
[2015-06-30 09:56:13,970][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.emergencyloan.service.impl.EmergencyLoanRepaymentAccountListener
[2015-06-30 09:56:13,971][  FINE][ 48][EmergencyLoanRepaymentAccountListener.accountChanged()] Received accountChanged event for account id 42,539,078
[2015-06-30 09:56:13,971][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.integration.diameter.impl.listeners.DiameterReauthAccountListener
[2015-06-30 09:56:13,971][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.plugins.accountlimit.AccountChangeLimitListener
[2015-06-30 09:56:13,971][FINEST][ 48][       AccountChangeLimitListener.accountChanged()] Checking account limit [subscriberId=42539077, remainingBalance=9940000]
[2015-06-30 09:56:13,971][FINEST][ 48][       AccountChangeLimitListener.accountChanged()] Account limit not set for subscriber [subscriberId=42539077]
[2015-06-30 09:56:13,972][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.plugins.notifications.accounts.AccountExpiryNotificationListener
[2015-06-30 09:56:13,972][  INFO][ 48][AccountExpiryNotificationListener.isMainTopupOrChangedExpiry()] Balance or expiry changed evaluation result [isTopup=false, changedExpiry=false]
[2015-06-30 09:56:13,972][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.plugins.notifications.accounts.AccountBalanceNotificationListener
[2015-06-30 09:56:13,972][FINEST][ 48][AccountBalanceNotificationListener.accountChanged()] Checking account notifications [subscriberId=42539077]
[2015-06-30 09:56:13,972][FINEST][284][                       SessionTicketImpl.newPart()] added part, parts: [[TicketPartImpl duration=0 segments=null data=0]]
[2015-06-30 09:56:13,972][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_au_minutes_20_percent, currencyId=101,004]
[2015-06-30 09:56:13,972][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_au_minutes_used, currencyId=101,004]
[2015-06-30 09:56:13,973][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_au_texts_20_percent, currencyId=101,003]
[2015-06-30 09:56:13,972][FINEST][284][                   SessionTicketImpl.finalCommit()] About to write final tickets, segments are: [(SessionSegment [duration=0, feature=15, charges=null, count=1, transferredData=0, ratingGroup=-2147483648])]
[2015-06-30 09:56:13,973][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_au_texts_used, currencyId=101,003]
[2015-06-30 09:56:13,974][FINEST][ 48][                  AccountQuotaEvaluator.evaluate()] Notification conditions not met [subscriberId=42,539,077, notification=low_credit_05]
[2015-06-30 09:56:13,974][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=data_quota_used, currencyGroup=DATA]
[2015-06-30 09:56:13,974][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=skinny_texts_20_percent, currencyId=101,000]
[2015-06-30 09:56:13,974][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=rollover_data_quota_20mb, currencyId=101,006]
[2015-06-30 09:56:13,974][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=data_quota_20mb, currencyId=4]
[2015-06-30 09:56:13,975][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=skinny_minutes_used, currencyId=6]
[2015-06-30 09:56:13,975][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=skinny_minutes_20_percent, currencyId=6]
[2015-06-30 09:56:13,975][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_minutes_20_percent, currencyId=2]
[2015-06-30 09:56:13,975][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_minutes_used, currencyId=2]
[2015-06-30 09:56:13,976][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_texts_used, currencyId=3]
[2015-06-30 09:56:13,976][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=skinny_texts_used, currencyId=101,000]
[2015-06-30 09:56:13,976][FINEST][ 48][                   AccountQuotaEvaluator.applies()] Notification not applicable for the currency [notification=nz_texts_20_percent, currencyId=3]
[2015-06-30 09:56:13,976][FINEST][ 48][                  AccountChangeHook.eventOccured()] Calling listener for account change: com.inewcs.crce.tariffs.service.TariffAccountListener
[2015-06-30 09:56:13,978][ FINER][367][                          TicketSenderImpl$1.run()] Sending ticket to inew-cs.crce.cdr: 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-06-30T09:56:13.971+0000|2015-06-30T09:53:54.000+0000|5065600000|1|1|42539077|642041010000|PREPAID|ACTIVE||1|NONE|OK||1.2|FinalCommit|BasicSession|1|530052041010000|642041010000|false|642041010000|(network) bumblebee|Local (on-net)|Originating||||Voice|false|64278|(network) TNZ #8|2015-06-30T09:53:56.000+0000|0|136000|180000|0|0|0001ABFF0E|false|101001|15730641|101001|60000|60000|NZD|9940000|PREPAID|OK||
[2015-06-30 09:56:13,979][FINEST][284][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=deleteContext execTime=1.026]
[2015-06-30 09:56:13,979][FINEST][284][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Delete]
[2015-06-30 09:56:13,981][FINEST][284][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.apps.session.impl.SessionApplicationImpl method=commit execTime=198.492]
[2015-06-30 09:56:13,982][FINEST][284][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=Commit]
[2015-06-30 09:56:13,982][FINEST][284][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=CommitFinal]
[2015-06-30 09:56:13,982][  INFO][284][                     TraceInterceptorImpl.invoke()] commit(...): SessionCommitResponse [header=[sessionId=5065600000, sessionBeginTimeStamp=Tue Jun 30 09:53:54 UTC 2015, chargingType=REGULAR], responseCode=OK, reservationId=R42539077T1435658277557@16922348529382806~-4704609700479659567, accounts=[[accountId=42539078, amount=20000, unitId=270]]] [199ms]
[2015-06-30 09:56:14,085][FINEST][389][     SubscriberPeerImpl.getSubscriberProfileById()] Reading subscriber profile by ID [subscriberId=42,539,077]
[2015-06-30 09:56:14,238][FINEST][389][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:14,239][FINEST][389][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:14,239][FINEST][389][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:14,240][FINEST][389][                SubscriberPeerImpl.getSubscriber()] Subscriber lookup returned [resultCode=OK subscriberId=42,539,077 msisdn=642041010000 imsi=530052041010000]' does not contain '136000|136000'</msg>
<status status="FAIL" endtime="20150630 11:56:23.584" starttime="20150630 11:56:23.516"></status>
</kw>
<status status="FAIL" endtime="20150630 11:56:23.586" starttime="20150630 11:56:23.483"></status>
</kw>
<doc>Longer MOC call; duration is 136s. The goal is to have call duration longer than 1 slice (60secs)
Logs from XDR, IN and CRCE are collected and analysed as well as XDR DB
Arguments:
subscriber
Returns:
Fails:

==</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MFC_involved</tag>
<tag>MOC_involved</tag>
<tag>MTC_involved</tag>
<tag>SMS_involved</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20150630 11:56:23.587" starttime="20150630 11:53:50.817">'[2015-06-30 09:53:54,629][FINEST][275][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:53:54,804][FINEST][275][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:53:54,804][FINEST][275][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:53:54,804][FINEST][275][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:53:54,806][FINEST][275][                SubscriberPeerImpl.getSubscriber()] Subscriber lookup returned [resultCode=OK subscriberId=42,539,077 msisdn=642041010000 imsi=530052041010000]
[2015-06-30 09:53:54,832][  INFO][278][                     TraceInterceptorImpl.invoke()] reserve(SessionReservationRequest [header=[sessionId=5065600000, sessionBeginTimeStamp=Tue Jun 30 09:53:54 UTC 2015, chargingType=REGULAR], trafficType=MOC, imsi=530052041010000, subscriberId=42539077, suppressNumber=false, startTime=Tue Jun 30 09:53:54 UTC 2015, duration=0, location=64278, roaming=false, bearerType=Voice, referenceNumber=0001ABFF0E, callingParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], calledParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], locationNumber=null, locationDetailedId=null])
    [ Message content over the limit has been removed. ]
...30 09:56:13,982][FINEST][284][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=CommitFinal]
[2015-06-30 09:56:13,982][  INFO][284][                     TraceInterceptorImpl.invoke()] commit(...): SessionCommitResponse [header=[sessionId=5065600000, sessionBeginTimeStamp=Tue Jun 30 09:53:54 UTC 2015, chargingType=REGULAR], responseCode=OK, reservationId=R42539077T1435658277557@16922348529382806~-4704609700479659567, accounts=[[accountId=42539078, amount=20000, unitId=270]]] [199ms]
[2015-06-30 09:56:14,085][FINEST][389][     SubscriberPeerImpl.getSubscriberProfileById()] Reading subscriber profile by ID [subscriberId=42,539,077]
[2015-06-30 09:56:14,238][FINEST][389][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:14,239][FINEST][389][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:14,239][FINEST][389][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:14,240][FINEST][389][                SubscriberPeerImpl.getSubscriber()] Subscriber lookup returned [resultCode=OK subscriberId=42,539,077 msisdn=642041010000 imsi=530052041010000]' does not contain '136000|136000'</status>
</test>
<test id="s1-t3" name="Run MTC Call">
<kw type="kw" name="${ssh_connection_xdr} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:23.622" starttime="20150630 11:56:23.620"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:23.683" starttime="20150630 11:56:23.627"></status>
</kw>
<msg timestamp="20150630 11:56:23.686" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150630 11:56:23.685" starttime="20150630 11:56:23.622"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150630 11:56:23.701" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:56:24.082" level="INFO">Read output: Last login: Tue Jun 30 09:53:51 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150630 11:56:24.084" starttime="20150630 11:56:23.697"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:24.085" starttime="20150630 11:56:23.688"></status>
</kw>
<msg timestamp="20150630 11:56:24.088" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150630 11:56:24.087" starttime="20150630 11:56:23.614"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:24.096" starttime="20150630 11:56:24.095"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:24.098" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20150630 11:56:24.102" starttime="20150630 11:56:24.097"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:24.102" starttime="20150630 11:56:24.090"></status>
</kw>
<msg timestamp="20150630 11:56:24.104" level="INFO">${ssh_connection_xdr} = 4</msg>
<status status="PASS" endtime="20150630 11:56:24.103" starttime="20150630 11:56:23.607"></status>
</kw>
<kw type="kw" name="${ssh_connection_in} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN_MTC_LOG_FILE_PATH}${IN_LOG_FILE_NAME}</arg>
<arg>host=${IN-APP HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:24.128" starttime="20150630 11:56:24.126"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:24.178" starttime="20150630 11:56:24.133"></status>
</kw>
<msg timestamp="20150630 11:56:24.180" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150630 11:56:24.179" starttime="20150630 11:56:24.128"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150630 11:56:24.190" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:56:24.611" level="INFO">Read output: Last login: Tue Jun 30 09:53:51 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20150630 11:56:24.618" starttime="20150630 11:56:24.187"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:24.618" starttime="20150630 11:56:24.181"></status>
</kw>
<msg timestamp="20150630 11:56:24.620" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150630 11:56:24.620" starttime="20150630 11:56:24.121"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:24.627" starttime="20150630 11:56:24.626"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:24.629" level="INFO">Starting command 'tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20150630 11:56:24.632" starttime="20150630 11:56:24.628"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:24.633" starttime="20150630 11:56:24.621"></status>
</kw>
<msg timestamp="20150630 11:56:24.634" level="INFO">${ssh_connection_in} = 5</msg>
<status status="PASS" endtime="20150630 11:56:24.634" starttime="20150630 11:56:24.114"></status>
</kw>
<kw type="kw" name="${ssh_connection_crce} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE_LOG_FILE_PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:24.656" starttime="20150630 11:56:24.655"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:24.722" starttime="20150630 11:56:24.661"></status>
</kw>
<msg timestamp="20150630 11:56:24.725" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20150630 11:56:24.724" starttime="20150630 11:56:24.657"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150630 11:56:24.738" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:56:25.134" level="INFO">Read output: Last login: Tue Jun 30 09:53:52 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20150630 11:56:25.137" starttime="20150630 11:56:24.735"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:25.140" starttime="20150630 11:56:24.726"></status>
</kw>
<msg timestamp="20150630 11:56:25.145" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20150630 11:56:25.144" starttime="20150630 11:56:24.650"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:25.163" starttime="20150630 11:56:25.160"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:25.168" level="INFO">Starting command 'tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20150630 11:56:25.172" starttime="20150630 11:56:25.164"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:25.174" starttime="20150630 11:56:25.150"></status>
</kw>
<msg timestamp="20150630 11:56:25.176" level="INFO">${ssh_connection_crce} = 6</msg>
<status status="PASS" endtime="20150630 11:56:25.175" starttime="20150630 11:56:24.643"></status>
</kw>
<kw type="kw" name="Reset Subscriber Balance">
<doc>Reset the test subscriber's monetary account balance to initial value.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:25.194" starttime="20150630 11:56:25.186"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:25.195" starttime="20150630 11:56:25.181"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>update acc_subscriber_accounts set balance=10000000 where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:25.406" starttime="20150630 11:56:25.196"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:56:25.412" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150630 11:56:25.413" starttime="20150630 11:56:25.409"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:25.414" starttime="20150630 11:56:25.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:56:25.418" level="INFO">Running the MTC call...</msg>
<status status="PASS" endtime="20150630 11:56:25.420" starttime="20150630 11:56:25.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MTC *******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:25.424" starttime="20150630 11:56:25.422"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC 1s">
<doc>Runs a standard (i.e. non-roaming) MTC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MTC REQ QUEUE}</arg>
<arg>${AMQ-SIG MTC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20150630 11:56:25.464" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv</msg>
<status status="PASS" endtime="20150630 11:56:25.463" starttime="20150630 11:56:25.460"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20150630 11:56:25.469" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv</msg>
<status status="PASS" endtime="20150630 11:56:25.468" starttime="20150630 11:56:25.465"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20150630 11:56:25.475" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini</msg>
<status status="PASS" endtime="20150630 11:56:25.474" starttime="20150630 11:56:25.471"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20150630 11:56:25.480" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs</msg>
<status status="PASS" endtime="20150630 11:56:25.479" starttime="20150630 11:56:25.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:25.484" starttime="20150630 11:56:25.482"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150630 11:56:25.491" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:25.493" starttime="20150630 11:56:25.486"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:25.496" starttime="20150630 11:56:25.494"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20150630 11:56:25.502" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:25.503" starttime="20150630 11:56:25.498"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20150630 11:56:25.510" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:25.511" starttime="20150630 11:56:25.505"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:25.515" starttime="20150630 11:56:25.513"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150630 11:56:25.521" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:25.522" starttime="20150630 11:56:25.517"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20150630 11:56:25.530" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:25.531" starttime="20150630 11:56:25.524"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:25.534" starttime="20150630 11:56:25.532"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150630 11:56:25.551" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150630 11:56:30.839" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150630 11:56:30.835" starttime="20150630 11:56:25.536"></status>
</kw>
<msg timestamp="20150630 11:56:30.843" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150630 11:56:30.842" starttime="20150630 11:56:25.446"></status>
</kw>
<msg timestamp="20150630 11:56:30.847" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150630 11:56:30.845" starttime="20150630 11:56:25.429"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150630 11:56:35.852" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150630 11:56:35.854" starttime="20150630 11:56:30.849"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:56:35.859" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20150630 11:56:35.861" starttime="20150630 11:56:35.857"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_in}</arg>
<arg>MTC_${TAILED_IN_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:35.884" starttime="20150630 11:56:35.882"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150630 11:56:35.894" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150630 11:56:35.893" starttime="20150630 11:56:35.886"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150630 11:56:35.901" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150630 11:56:35.902" starttime="20150630 11:56:35.896"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:35.915" starttime="20150630 11:56:35.912"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150630 11:56:35.919" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150630 11:56:35.965" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:35.967" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150630 11:56:35.966" starttime="20150630 11:56:35.917"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150630 11:56:35.972" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150630 11:56:36.072" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:36.075" level="INFO">${processes_string} =   720 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log
  738 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log
...</msg>
<status status="PASS" endtime="20150630 11:56:36.073" starttime="20150630 11:56:35.969"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.082" level="INFO">@{processes_list} = [   720 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log |   738 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00....</msg>
<status status="PASS" endtime="20150630 11:56:36.080" starttime="20150630 11:56:36.077"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   720 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.090" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:36.089" starttime="20150630 11:56:36.086"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.094" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:36.152" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:36.153" starttime="20150630 11:56:36.091"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:36.154" starttime="20150630 11:56:36.084"></status>
</kw>
<kw type="foritem" name="${process} =   738 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.160" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:36.159" starttime="20150630 11:56:36.156"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.164" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:36.232" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:36.233" starttime="20150630 11:56:36.162"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:36.235" starttime="20150630 11:56:36.155"></status>
</kw>
<kw type="foritem" name="${process} =  1064 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.241" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:36.240" starttime="20150630 11:56:36.237"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.245" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:36.316" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:36.317" starttime="20150630 11:56:36.242"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:36.318" starttime="20150630 11:56:36.235"></status>
</kw>
<kw type="foritem" name="${process} =  1079 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.324" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:36.323" starttime="20150630 11:56:36.320"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.328" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:36.396" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:36.397" starttime="20150630 11:56:36.326"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:36.398" starttime="20150630 11:56:36.319"></status>
</kw>
<kw type="foritem" name="${process} =  1482 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.415" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:36.414" starttime="20150630 11:56:36.400"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.419" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:36.475" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:36.476" starttime="20150630 11:56:36.416"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:36.477" starttime="20150630 11:56:36.399"></status>
</kw>
<kw type="foritem" name="${process} =  1500 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.483" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:36.482" starttime="20150630 11:56:36.479"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.487" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:36.554" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:36.555" starttime="20150630 11:56:36.484"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:36.556" starttime="20150630 11:56:36.478"></status>
</kw>
<kw type="foritem" name="${process} =  2079 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor8.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.562" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:36.561" starttime="20150630 11:56:36.558"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.567" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:36.636" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:36.638" starttime="20150630 11:56:36.564"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:36.639" starttime="20150630 11:56:36.557"></status>
</kw>
<kw type="foritem" name="${process} =  2112 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.644" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:36.643" starttime="20150630 11:56:36.640"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.648" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:36.716" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:36.718" starttime="20150630 11:56:36.646"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:36.719" starttime="20150630 11:56:36.639"></status>
</kw>
<kw type="foritem" name="${process} =  2552 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-smsc-submit-00.log &gt; tmpfilemonitor11.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.724" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:36.724" starttime="20150630 11:56:36.720"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.729" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:36.796" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:36.797" starttime="20150630 11:56:36.726"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:36.798" starttime="20150630 11:56:36.719"></status>
</kw>
<kw type="foritem" name="${process} =  2567 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-smsc-submit-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.804" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:36.803" starttime="20150630 11:56:36.800"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.808" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:36.876" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:36.877" starttime="20150630 11:56:36.806"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:36.878" starttime="20150630 11:56:36.798"></status>
</kw>
<kw type="foritem" name="${process} =  3676 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.884" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:36.883" starttime="20150630 11:56:36.880"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.888" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:36.957" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:36.959" starttime="20150630 11:56:36.886"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:36.960" starttime="20150630 11:56:36.879"></status>
</kw>
<kw type="foritem" name="${process} =  3691 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.965" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:36.965" starttime="20150630 11:56:36.961"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:36.970" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:37.037" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:37.039" starttime="20150630 11:56:36.967"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:37.041" starttime="20150630 11:56:36.960"></status>
</kw>
<kw type="foritem" name="${process} =  6285 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.047" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:37.046" starttime="20150630 11:56:37.043"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.052" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:37.120" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:37.121" starttime="20150630 11:56:37.049"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:37.122" starttime="20150630 11:56:37.042"></status>
</kw>
<kw type="foritem" name="${process} =  6300 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.128" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:37.127" starttime="20150630 11:56:37.124"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.132" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:37.197" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:37.198" starttime="20150630 11:56:37.130"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:37.199" starttime="20150630 11:56:37.123"></status>
</kw>
<kw type="foritem" name="${process} =  6712 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.205" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:37.204" starttime="20150630 11:56:37.201"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.209" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:37.282" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:37.283" starttime="20150630 11:56:37.206"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:37.284" starttime="20150630 11:56:37.200"></status>
</kw>
<kw type="foritem" name="${process} =  6727 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.290" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:37.289" starttime="20150630 11:56:37.286"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.294" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:37.363" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:37.365" starttime="20150630 11:56:37.292"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:37.366" starttime="20150630 11:56:37.285"></status>
</kw>
<kw type="foritem" name="${process} =  6887 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.372" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:37.371" starttime="20150630 11:56:37.368"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.377" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:37.440" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:37.441" starttime="20150630 11:56:37.374"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:37.442" starttime="20150630 11:56:37.366"></status>
</kw>
<kw type="foritem" name="${process} =  6902 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.448" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:37.447" starttime="20150630 11:56:37.444"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.452" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:37.525" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:37.526" starttime="20150630 11:56:37.450"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:37.527" starttime="20150630 11:56:37.443"></status>
</kw>
<kw type="foritem" name="${process} =  7258 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.534" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:37.533" starttime="20150630 11:56:37.530"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.538" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:37.610" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:37.612" starttime="20150630 11:56:37.536"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:37.613" starttime="20150630 11:56:37.528"></status>
</kw>
<kw type="foritem" name="${process} =  7273 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.619" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:37.618" starttime="20150630 11:56:37.615"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.623" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:37.689" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:37.690" starttime="20150630 11:56:37.621"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:37.691" starttime="20150630 11:56:37.613"></status>
</kw>
<kw type="foritem" name="${process} =  7303 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.697" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:37.696" starttime="20150630 11:56:37.693"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.701" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:37.769" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:37.770" starttime="20150630 11:56:37.699"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:37.771" starttime="20150630 11:56:37.692"></status>
</kw>
<kw type="foritem" name="${process} =  7319 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.777" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:37.776" starttime="20150630 11:56:37.773"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.781" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:37.852" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:37.853" starttime="20150630 11:56:37.779"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:37.854" starttime="20150630 11:56:37.772"></status>
</kw>
<kw type="foritem" name="${process} =  9866 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.860" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:37.859" starttime="20150630 11:56:37.856"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.864" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:37.928" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:37.930" starttime="20150630 11:56:37.861"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:37.931" starttime="20150630 11:56:37.854"></status>
</kw>
<kw type="foritem" name="${process} =  9881 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.936" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:37.935" starttime="20150630 11:56:37.932"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:37.941" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:38.009" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:38.011" starttime="20150630 11:56:37.938"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:38.013" starttime="20150630 11:56:37.931"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:38.015" starttime="20150630 11:56:36.083"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:38.017" starttime="20150630 11:56:35.905"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:38.022" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20150630 11:56:38.052" starttime="20150630 11:56:38.019"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:56:38.055" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20150630 11:56:38.098" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:38.100" level="INFO">${stdout_string} = [2015-06-30 09:56:27,058][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [25], AdditionalInfo [];CorrelationId: 506570], Dela...</msg>
<status status="PASS" endtime="20150630 11:56:38.099" starttime="20150630 11:56:38.054"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:38.105" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20150630 11:56:38.171" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:38.172" starttime="20150630 11:56:38.102"></status>
</kw>
<msg timestamp="20150630 11:56:38.176" level="INFO">${tailed_text} = [2015-06-30 09:56:27,058][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [25], AdditionalInfo [];CorrelationId: 506570], Dela...</msg>
<status status="PASS" endtime="20150630 11:56:38.174" starttime="20150630 11:56:35.874"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150630 11:56:38.192" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:38.193" starttime="20150630 11:56:38.185"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:38.194" starttime="20150630 11:56:38.177"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.207" starttime="20150630 11:56:38.204"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.212" starttime="20150630 11:56:38.208"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:38.215" starttime="20150630 11:56:38.197"></status>
</kw>
<msg timestamp="20150630 11:56:38.219" level="INFO">${tailed_text} = [2015-06-30 09:56:27,058][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [25], AdditionalInfo [];CorrelationId: 506570], Dela...</msg>
<status status="PASS" endtime="20150630 11:56:38.217" starttime="20150630 11:56:35.865"></status>
</kw>
<kw type="kw" name="Check MTC IN log">
<doc>Checks the tailed IN log file created during MTC test case</doc>
<arguments>
<arg>MTC_${TAILED_IN_LOG_FILE}</arg>
<arg>${rc}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150630 11:56:38.232" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:56:38.234" level="INFO">${temp} = [2015-06-30 09:56:27,058][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [25], AdditionalInfo [];CorrelationId: 506570], Dela...</msg>
<status status="PASS" endtime="20150630 11:56:38.233" starttime="20150630 11:56:38.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rel_c}</arg>
<arg>0</arg>
<arg>msg=CG session failed - check MTC IN log</arg>
</arguments>
<msg timestamp="20150630 11:56:38.239" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150630 11:56:38.240" starttime="20150630 11:56:38.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Imsi: ${TESTSUBCRIBERS IMSI RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.245" starttime="20150630 11:56:38.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>UsedTime: 36000</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.249" starttime="20150630 11:56:38.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>TrafficType: Terminating</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.254" starttime="20150630 11:56:38.251"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.258" starttime="20150630 11:56:38.255"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:38.259" starttime="20150630 11:56:38.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:56:38.263" level="INFO">IN OK...</msg>
<status status="PASS" endtime="20150630 11:56:38.264" starttime="20150630 11:56:38.261"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_xdr}</arg>
<arg>MTC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.289" starttime="20150630 11:56:38.286"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150630 11:56:38.298" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150630 11:56:38.297" starttime="20150630 11:56:38.290"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150630 11:56:38.303" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150630 11:56:38.304" starttime="20150630 11:56:38.299"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.309" starttime="20150630 11:56:38.308"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150630 11:56:38.311" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150630 11:56:38.350" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:38.351" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150630 11:56:38.351" starttime="20150630 11:56:38.310"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150630 11:56:38.353" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150630 11:56:38.443" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:38.445" level="INFO">${processes_string} = 28727 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log
28742 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
28761 ?       ...</msg>
<status status="PASS" endtime="20150630 11:56:38.444" starttime="20150630 11:56:38.352"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150630 11:56:38.451" level="INFO">@{processes_list} = [ 28727 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log | 28742 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 28761 ? ...</msg>
<status status="PASS" endtime="20150630 11:56:38.450" starttime="20150630 11:56:38.447"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 28727 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:38.459" level="INFO">${pid} = 28727</msg>
<status status="PASS" endtime="20150630 11:56:38.458" starttime="20150630 11:56:38.454"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:38.463" level="INFO">Executing command 'kill -9 28727'.</msg>
<msg timestamp="20150630 11:56:38.520" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:38.521" starttime="20150630 11:56:38.460"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:38.522" starttime="20150630 11:56:38.453"></status>
</kw>
<kw type="foritem" name="${process} = 28742 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:38.528" level="INFO">${pid} = 28742</msg>
<status status="PASS" endtime="20150630 11:56:38.527" starttime="20150630 11:56:38.524"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:38.532" level="INFO">Executing command 'kill -9 28742'.</msg>
<msg timestamp="20150630 11:56:38.597" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:38.599" starttime="20150630 11:56:38.530"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:38.600" starttime="20150630 11:56:38.523"></status>
</kw>
<kw type="foritem" name="${process} = 28761 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:38.606" level="INFO">${pid} = 28761</msg>
<status status="PASS" endtime="20150630 11:56:38.605" starttime="20150630 11:56:38.602"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:38.611" level="INFO">Executing command 'kill -9 28761'.</msg>
<msg timestamp="20150630 11:56:38.675" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:38.676" starttime="20150630 11:56:38.608"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:38.677" starttime="20150630 11:56:38.600"></status>
</kw>
<kw type="foritem" name="${process} = 28777 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:38.683" level="INFO">${pid} = 28777</msg>
<status status="PASS" endtime="20150630 11:56:38.682" starttime="20150630 11:56:38.679"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:38.687" level="INFO">Executing command 'kill -9 28777'.</msg>
<msg timestamp="20150630 11:56:38.752" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:38.755" starttime="20150630 11:56:38.685"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:38.756" starttime="20150630 11:56:38.678"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:38.756" starttime="20150630 11:56:38.452"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:38.758" starttime="20150630 11:56:38.305"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:38.763" level="INFO">Starting command 'cat tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20150630 11:56:38.795" starttime="20150630 11:56:38.760"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:56:38.798" level="INFO">Reading output of command 'cat tmpfilemonitor4.log'.</msg>
<msg timestamp="20150630 11:56:38.831" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:38.833" level="INFO">${stdout_string} = [2015-06-30 09:56:30,198][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:56:38.832" starttime="20150630 11:56:38.797"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:38.837" level="INFO">Executing command 'rm tmpfilemonitor4.log'.</msg>
<msg timestamp="20150630 11:56:38.909" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:38.910" starttime="20150630 11:56:38.834"></status>
</kw>
<msg timestamp="20150630 11:56:38.913" level="INFO">${tailed_text} = [2015-06-30 09:56:30,198][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:56:38.912" starttime="20150630 11:56:38.277"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150630 11:56:38.929" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:38.930" starttime="20150630 11:56:38.924"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:38.932" starttime="20150630 11:56:38.914"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.944" starttime="20150630 11:56:38.941"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.948" starttime="20150630 11:56:38.946"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:38.952" starttime="20150630 11:56:38.934"></status>
</kw>
<msg timestamp="20150630 11:56:38.955" level="INFO">${tailed_text} = [2015-06-30 09:56:30,198][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:56:38.954" starttime="20150630 11:56:38.268"></status>
</kw>
<kw type="kw" name="Check MTC XDR log">
<doc>Checks the tailed log file created on XDR during MTC call.</doc>
<arguments>
<arg>MTC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150630 11:56:38.968" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:56:38.970" level="INFO">${temp} = [2015-06-30 09:56:30,198][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:56:38.969" starttime="20150630 11:56:38.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${temp}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.974" starttime="20150630 11:56:38.971"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.978" starttime="20150630 11:56:38.975"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.982" starttime="20150630 11:56:38.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.987" starttime="20150630 11:56:38.983"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>CRCE|CDR</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.991" starttime="20150630 11:56:38.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>(on-net)|Terminating</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:38.995" starttime="20150630 11:56:38.992"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:38.996" starttime="20150630 11:56:38.957"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:56:39.000" level="INFO">XDR OK...</msg>
<status status="PASS" endtime="20150630 11:56:39.002" starttime="20150630 11:56:38.998"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_crce}</arg>
<arg>MTC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:39.025" starttime="20150630 11:56:39.023"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150630 11:56:39.034" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150630 11:56:39.033" starttime="20150630 11:56:39.027"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150630 11:56:39.041" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150630 11:56:39.042" starttime="20150630 11:56:39.036"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:39.052" starttime="20150630 11:56:39.051"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150630 11:56:39.053" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150630 11:56:39.095" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:39.096" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150630 11:56:39.096" starttime="20150630 11:56:39.053"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150630 11:56:39.099" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150630 11:56:39.191" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:39.193" level="INFO">${processes_string} = 15709 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log
15724 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log
15743 ?        Ss   ...</msg>
<status status="PASS" endtime="20150630 11:56:39.192" starttime="20150630 11:56:39.097"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150630 11:56:39.199" level="INFO">@{processes_list} = [ 15709 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log | 15724 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log | 15743 ?       ...</msg>
<status status="PASS" endtime="20150630 11:56:39.198" starttime="20150630 11:56:39.195"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 15709 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor6.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:39.207" level="INFO">${pid} = 15709</msg>
<status status="PASS" endtime="20150630 11:56:39.206" starttime="20150630 11:56:39.203"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:39.211" level="INFO">Executing command 'kill -9 15709'.</msg>
<msg timestamp="20150630 11:56:39.270" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:39.271" starttime="20150630 11:56:39.208"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:39.272" starttime="20150630 11:56:39.201"></status>
</kw>
<kw type="foritem" name="${process} = 15724 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:39.278" level="INFO">${pid} = 15724</msg>
<status status="PASS" endtime="20150630 11:56:39.277" starttime="20150630 11:56:39.274"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:39.282" level="INFO">Executing command 'kill -9 15724'.</msg>
<msg timestamp="20150630 11:56:39.349" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:39.351" starttime="20150630 11:56:39.280"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:39.352" starttime="20150630 11:56:39.273"></status>
</kw>
<kw type="foritem" name="${process} = 15743 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:39.358" level="INFO">${pid} = 15743</msg>
<status status="PASS" endtime="20150630 11:56:39.357" starttime="20150630 11:56:39.354"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:39.362" level="INFO">Executing command 'kill -9 15743'.</msg>
<msg timestamp="20150630 11:56:39.427" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:39.428" starttime="20150630 11:56:39.360"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:39.429" starttime="20150630 11:56:39.353"></status>
</kw>
<kw type="foritem" name="${process} = 15759 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:39.435" level="INFO">${pid} = 15759</msg>
<status status="PASS" endtime="20150630 11:56:39.434" starttime="20150630 11:56:39.431"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:39.439" level="INFO">Executing command 'kill -9 15759'.</msg>
<msg timestamp="20150630 11:56:39.506" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:39.508" starttime="20150630 11:56:39.436"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:39.509" starttime="20150630 11:56:39.430"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:39.509" starttime="20150630 11:56:39.200"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:39.510" starttime="20150630 11:56:39.044"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:39.514" level="INFO">Starting command 'cat tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20150630 11:56:39.550" starttime="20150630 11:56:39.512"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:56:39.553" level="INFO">Reading output of command 'cat tmpfilemonitor6.log'.</msg>
<msg timestamp="20150630 11:56:39.591" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:39.594" level="INFO">${stdout_string} = [2015-06-30 09:56:27,109][FINEST][387][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:56:27,343][FINEST][387][            ...</msg>
<status status="PASS" endtime="20150630 11:56:39.593" starttime="20150630 11:56:39.551"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:39.598" level="INFO">Executing command 'rm tmpfilemonitor6.log'.</msg>
<msg timestamp="20150630 11:56:39.668" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:39.669" starttime="20150630 11:56:39.595"></status>
</kw>
<msg timestamp="20150630 11:56:39.672" level="INFO">${tailed_text} = [2015-06-30 09:56:27,109][FINEST][387][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:56:27,343][FINEST][387][            ...</msg>
<status status="PASS" endtime="20150630 11:56:39.671" starttime="20150630 11:56:39.015"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150630 11:56:39.687" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:39.688" starttime="20150630 11:56:39.681"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:39.689" starttime="20150630 11:56:39.673"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:39.701" starttime="20150630 11:56:39.699"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:56:39.707" starttime="20150630 11:56:39.703"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:39.709" starttime="20150630 11:56:39.691"></status>
</kw>
<msg timestamp="20150630 11:56:39.712" level="INFO">${tailed_text} = [2015-06-30 09:56:27,109][FINEST][387][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:56:27,343][FINEST][387][            ...</msg>
<status status="PASS" endtime="20150630 11:56:39.711" starttime="20150630 11:56:39.006"></status>
</kw>
<kw type="kw" name="Check MTC CRCE log">
<doc>Checks the tailed log file created on CRCE.</doc>
<arguments>
<arg>MTC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150630 11:56:39.724" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:56:39.727" level="INFO">${temp} = [2015-06-30 09:56:27,109][FINEST][387][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:56:27,343][FINEST][387][            ...</msg>
<status status="PASS" endtime="20150630 11:56:39.726" starttime="20150630 11:56:39.722"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:39.731" starttime="20150630 11:56:39.729"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>(on-net)|Terminating</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:39.735" starttime="20150630 11:56:39.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>finalCommit=true, usedTime=36000</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:39.740" starttime="20150630 11:56:39.737"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Voice|FALSE|${MSC ADDRESS}</arg>
</arguments>
<msg timestamp="20150630 11:56:39.748" level="FAIL">'[2015-06-30 09:56:27,109][FINEST][387][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:56:27,343][FINEST][387][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:27,343][FINEST][387][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:27,343][FINEST][387][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:27,345][FINEST][387][                SubscriberPeerImpl.getSubscriber()] Subscriber lookup returned [resultCode=OK subscriberId=42,539,077 msisdn=642041010000 imsi=530052041010000]
[2015-06-30 09:56:27,437][  INFO][287][                     TraceInterceptorImpl.invoke()] reserve(SessionReservationRequest [header=[sessionId=5065700000, sessionBeginTimeStamp=Tue Jun 30 09:56:26 UTC 2015, chargingType=REGULAR], trafficType=MTC, imsi=530052041010000, subscriberId=42539077, suppressNumber=false, startTime=Tue Jun 30 09:56:27 UTC 2015, duration=0, location=64278, roaming=false, bearerType=Voice, referenceNumber=0001ABFF0E, callingParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], calledParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], locationNumber=null, locationDetailedId=null])
[2015-06-30 09:56:27,594][FINEST][287][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:27,594][FINEST][287][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:27,594][FINEST][287][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:27,595][FINEST][287][     LocalNumberPortabilityService.getNumberInfo()] Performing local MNP query [msisdn=642041010000]
[2015-06-30 09:56:27,793][  FINE][287][                       ZonePeerImpl.matchWithMnp()] Number '642041010000' is HPLMN
[2015-06-30 09:56:27,799][FINEST][287][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=create execTime=5.114]
[2015-06-30 09:56:27,800][FINEST][287][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Create]
[2015-06-30 09:56:27,801][FINEST][287][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=CreateSession]
[2015-06-30 09:56:27,804][FINEST][287][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=selectContext execTime=2.582]
[2015-06-30 09:56:27,805][FINEST][287][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Select]
[2015-06-30 09:56:27,805][FINEST][287][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=SelectSession]
[2015-06-30 09:56:27,806][FINEST][287][                 SessionContext.getCommitActions()] Reading commit actions: []
[2015-06-30 09:56:27,806][ FINER][287][                    RateplanPeerImpl.getRateplan()] Getting the rateplan for key: ptk.skinny/101001/mtc
[2015-06-30 09:56:27,807][FINEST][287][                     ReservationStoreImpl.create()] Creating a reservation [subscriberId=42,539,077, reservation=InternalReservationImpl{id='R42539077T1435658907807@16922378778883654~-6132750299793771762', subscriberId=42539077, expires=1435658907807, reservedAt=1435658187807, reservation=[]}]
[2015-06-30 09:56:27,807][FINEST][287][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,187,421, duration=600,000]
[2015-06-30 09:56:27,808][FINEST][287][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,787,421, duration=600,000]
[2015-06-30 09:56:27,808][ FINER][287][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000002
[2015-06-30 09:56:27,808][ FINER][287][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,005]
[2015-06-30 09:56:27,808][FINEST][287][                    CompiledRatingFilter.rateMoc()] Beginning of session, adding setup rating
[2015-06-30 09:56:27,808][ FINER][287][                                SessionRater.add()] Try rating: setup=true, begin=0, duration=0, price=0, perPeriod=60000, currency=NZD
[2015-06-30 09:56:27,809][ FINER][287][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=0, perPeriod=60000, currency=NZD
[2015-06-30 09:56:27,809][ FINER][287][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,005]
[2015-06-30 09:56:27,809][ FINER][287][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=0, perPeriod=60000, currency=NZD
[2015-06-30 09:56:27,810][FINEST][287][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=287]
[2015-06-30 09:56:27,810][FINEST][287][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=287]
[2015-06-30 09:56:27,811][FINEST][287][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=0.995]
[2015-06-30 09:56:27,811][FINEST][287][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:56:27,811][FINEST][287][                AccountStoreImpl.releaseAccounts()] Releasing the cached accounts for subscriber [subscriberId=42539077, actionId=535105533]
[2015-06-30 09:56:27,815][FINEST][287][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=updateContext execTime=3.888]
[2015-06-30 09:56:27,816][FINEST][287][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Update]
[2015-06-30 09:56:27,817][FINEST][287][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=UpdateSession]
[2015-06-30 09:56:27,819][FINEST][287][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.apps.session.impl.SessionApplicationImpl method=reserve execTime=381.875]
[2015-06-30 09:56:27,820][FINEST][287][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=Reserve]
[2015-06-30 09:56:27,821][FINEST][287][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=ReserveMTC]
[2015-06-30 09:56:27,821][FINEST][287][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=ReserveInitial]
[2015-06-30 09:56:27,822][FINEST][287][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=ReserveMTCInitial]
[2015-06-30 09:56:27,822][  INFO][287][                     TraceInterceptorImpl.invoke()] reserve(...): SessionReservationResponse [sessionId=5065700000, responseCode=OK, reservationId=R42539077T1435658907807@16922378778883654~-6132750299793771762, lastSegment=false, grantedTime=600000, accounts=[]] [385ms]
[2015-06-30 09:56:28,988][  INFO][301][                     TraceInterceptorImpl.invoke()] update(SessionUpdateReservationRequest [header=[sessionId=5065700000, sessionBeginTimeStamp=Tue Jun 30 09:56:26 UTC 2015, chargingType=REGULAR], reservationId=R42539077T1435658907807@16922378778883654~-6132750299793771762, trafficType=MTC, imsi=530052041010000, subscriberId=42539077, callingParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], calledParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], bearerType=Voice, startTime=Tue Jun 30 09:56:28 UTC 2015, duration=0, location=64278, roaming=false, referenceNumber=0001ABFF0E])
[2015-06-30 09:56:29,144][FINEST][301][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:29,145][FINEST][301][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:29,145][FINEST][301][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:29,146][FINEST][301][     LocalNumberPortabilityService.getNumberInfo()] Performing local MNP query [msisdn=642041010000]
[2015-06-30 09:56:29,426][  FINE][301][                       ZonePeerImpl.matchWithMnp()] Number '642041010000' is HPLMN
[2015-06-30 09:56:29,430][FINEST][301][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=selectContext execTime=3.609]
[2015-06-30 09:56:29,431][FINEST][301][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Select]
[2015-06-30 09:56:29,431][FINEST][301][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=SelectSession]
[2015-06-30 09:56:29,432][FINEST][301][                 SessionContext.getCommitActions()] Reading commit actions: []
[2015-06-30 09:56:29,432][ FINER][301][                    RateplanPeerImpl.getRateplan()] Getting the rateplan for key: ptk.skinny/101001/mtc
[2015-06-30 09:56:29,433][FINEST][301][                     ReservationStoreImpl.create()] Creating a reservation [subscriberId=42,539,077, reservation=InternalReservationImpl{id='R42539077T1435658909433@16922380404922163~-9048415148037454697', subscriberId=42539077, expires=1435658909433, reservedAt=1435658189433, reservation=[]}]
[2015-06-30 09:56:29,433][FINEST][301][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,188,092, duration=600,000]
[2015-06-30 09:56:29,434][FINEST][301][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,788,092, duration=600,000]
[2015-06-30 09:56:29,434][ FINER][301][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000002
[2015-06-30 09:56:29,434][ FINER][301][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,005]
[2015-06-30 09:56:29,434][FINEST][301][                    CompiledRatingFilter.rateMoc()] Beginning of session, adding setup rating
[2015-06-30 09:56:29,434][ FINER][301][                                SessionRater.add()] Try rating: setup=true, begin=0, duration=0, price=0, perPeriod=60000, currency=NZD
[2015-06-30 09:56:29,435][ FINER][301][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=0, perPeriod=60000, currency=NZD
[2015-06-30 09:56:29,435][ FINER][301][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,005]
[2015-06-30 09:56:29,435][ FINER][301][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=0, perPeriod=60000, currency=NZD
[2015-06-30 09:56:29,436][FINEST][301][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=301]
[2015-06-30 09:56:29,436][FINEST][301][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=301]
[2015-06-30 09:56:29,437][FINEST][301][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=0.929]
[2015-06-30 09:56:29,437][FINEST][301][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:56:29,437][FINEST][301][                AccountStoreImpl.releaseAccounts()] Releasing the cached accounts for subscriber [subscriberId=42539077, actionId=1911188972]
[2015-06-30 09:56:29,442][FINEST][301][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=updateContext execTime=4.239]
[2015-06-30 09:56:29,443][FINEST][301][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Update]
[2015-06-30 09:56:29,443][FINEST][301][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=UpdateSession]
[2015-06-30 09:56:29,446][FINEST][301][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.apps.session.impl.SessionApplicationImpl method=update execTime=458.102]
[2015-06-30 09:56:29,446][FINEST][301][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=Update]
[2015-06-30 09:56:29,447][FINEST][301][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=UpdateMTC]
[2015-06-30 09:56:29,448][  INFO][301][                     TraceInterceptorImpl.invoke()] update(...): SessionReservationResponse [sessionId=5065700000, responseCode=OK, reservationId=R42539077T1435658909433@16922380404922163~-9048415148037454697, lastSegment=false, grantedTime=600000, accounts=[]] [459ms]
[2015-06-30 09:56:30,019][  INFO][302][                     TraceInterceptorImpl.invoke()] commit(SessionCommitRequest [header=[sessionId=5065700000, sessionBeginTimeStamp=Tue Jun 30 09:56:26 UTC 2015, chargingType=REGULAR], reservationId=R42539077T1435658909433@16922380404922163~-9048415148037454697, finalCommit=true, usedTime=36000])
[2015-06-30 09:56:30,024][FINEST][302][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=selectContext execTime=3.782]
[2015-06-30 09:56:30,025][FINEST][302][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Select]
[2015-06-30 09:56:30,025][FINEST][302][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=SelectSession]
[2015-06-30 09:56:30,026][  FINE][302][                SessionCommitClosure.withContext()] try to commit reservation: R42539077T1435658909433@16922380404922163~-9048415148037454697
[2015-06-30 09:56:30,179][FINEST][302][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:30,180][FINEST][302][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:30,180][FINEST][302][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:30,181][FINEST][302][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=302]
[2015-06-30 09:56:30,184][FINEST][302][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=302]
[2015-06-30 09:56:30,184][FINEST][302][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=3.132]
[2015-06-30 09:56:30,185][FINEST][302][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:56:30,185][FINEST][302][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.AccountDaoImpl method=loadDescriptors execTime=3.8]
[2015-06-30 09:56:30,185][FINEST][302][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=Lookup]
[2015-06-30 09:56:30,185][ FINER][302][                     AbstractAccountManager.load()] Loading acount from descriptor [accountId=42,539,078, subscriberId=42,539,077]
[2015-06-30 09:56:30,185][FINEST][302][            ReservationStoreImpl.getReservations()] Loading all reservations from database [subscriberId=42,539,077]
[2015-06-30 09:56:30,186][FINEST][302][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=302]
[2015-06-30 09:56:30,188][FINEST][302][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=302]
[2015-06-30 09:56:30,188][FINEST][302][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.671]
[2015-06-30 09:56:30,189][FINEST][302][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:56:30,189][FINEST][302][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.ReservationDaoImpl method=getBySubscriber execTime=3.285]
[2015-06-30 09:56:30,189][FINEST][302][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=SelectReservation]
[2015-06-30 09:56:30,189][FINEST][302][                SessionCommitClosure.withContext()] Session is free, do not charge reservation, charge 0 on main account [reservationId=R42539077T1435658909433@16922380404922163~-9048415148037454697 subscriberId=42,539,077 accountId=42,539,078 currency=NZD]
[2015-06-30 09:56:30,190][FINEST][302][                 SessionContext.getCommitActions()] Reading commit actions: []
[2015-06-30 09:56:30,190][FINEST][302][                       SessionTicketImpl.newPart()] added part, parts: [[TicketPartImpl duration=0 segments=null data=0]]
[2015-06-30 09:56:30,190][FINEST][302][                   SessionTicketImpl.finalCommit()] About to write final tickets, segments are: [(SessionSegment [duration=0, feature=15, charges=null, count=1, transferredData=0, ratingGroup=0])]
[2015-06-30 09:56:30,194][ FINER][247][                          TicketSenderImpl$1.run()] Sending ticket to inew-cs.crce.cdr: 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-06-30T09:56:30.190+0000|2015-06-30T09:56:26.000+0000|5065700000|1|1|42539077|642041010000|PREPAID|ACTIVE||1|NONE|OK||1.2|FinalCommit|BasicSession|1|530052041010000|642041010000|false|642041010000|(network) bumblebee|Local (on-net)|Terminating||0||Voice|false|64278|(network) TNZ #8|2015-06-30T09:56:28.000+0000|0|36000|60000|0|0|0001ABFF0E|false|101001|15730641|101001|0|0|NZD|10000000|PREPAID|OK||
[2015-06-30 09:56:30,195][FINEST][302][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=deleteContext execTime=1.057]
[2015-06-30 09:56:30,195][FINEST][302][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Delete]
[2015-06-30 09:56:30,197][FINEST][302][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.apps.session.impl.SessionApplicationImpl method=commit execTime=177.642]
[2015-06-30 09:56:30,198][FINEST][302][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=Commit]
[2015-06-30 09:56:30,199][FINEST][302][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=CommitFinal]
[2015-06-30 09:56:30,199][  INFO][302][                     TraceInterceptorImpl.invoke()] commit(...): SessionCommitResponse [header=[sessionId=5065700000, sessionBeginTimeStamp=Tue Jun 30 09:56:26 UTC 2015, chargingType=REGULAR], responseCode=OK, reservationId=R42539077T1435658909433@16922380404922163~-9048415148037454697, accounts=[[accountId=42539078, amount=0, unitId=270]]] [178ms]
[2015-06-30 09:56:30,272][FINEST][389][     SubscriberPeerImpl.getSubscriberProfileById()] Reading subscriber profile by ID [subscriberId=42,539,077]
[2015-06-30 09:56:30,434][FINEST][389][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:30,434][FINEST][389][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:30,435][FINEST][389][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:30,436][FINEST][389][                SubscriberPeerImpl.getSubscriber()] Subscriber lookup returned [resultCode=OK subscriberId=42,539,077 msisdn=642041010000 imsi=530052041010000]' does not contain 'Voice|FALSE|64278'</msg>
<status status="FAIL" endtime="20150630 11:56:39.758" starttime="20150630 11:56:39.741"></status>
</kw>
<status status="FAIL" endtime="20150630 11:56:39.760" starttime="20150630 11:56:39.714"></status>
</kw>
<doc>Reset the test subscriber's monetary account balance to initial value.

Arguments:
subscriber
Returns:
Fails:

==</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MFC_involved</tag>
<tag>MOC_involved</tag>
<tag>MTC_involved</tag>
<tag>SMS_involved</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20150630 11:56:39.763" starttime="20150630 11:56:23.592">'[2015-06-30 09:56:27,109][FINEST][387][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:56:27,343][FINEST][387][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:27,343][FINEST][387][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:27,343][FINEST][387][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:27,345][FINEST][387][                SubscriberPeerImpl.getSubscriber()] Subscriber lookup returned [resultCode=OK subscriberId=42,539,077 msisdn=642041010000 imsi=530052041010000]
[2015-06-30 09:56:27,437][  INFO][287][                     TraceInterceptorImpl.invoke()] reserve(SessionReservationRequest [header=[sessionId=5065700000, sessionBeginTimeStamp=Tue Jun 30 09:56:26 UTC 2015, chargingType=REGULAR], trafficType=MTC, imsi=530052041010000, subscriberId=42539077, suppressNumber=false, startTime=Tue Jun 30 09:56:27 UTC 2015, duration=0, location=64278, roaming=false, bearerType=Voice, referenceNumber=0001ABFF0E, callingParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], calledParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], locationNumber=null, locationDetailedId=null])
    [ Message content over the limit has been removed. ]
...30 09:56:30,199][FINEST][302][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=CommitFinal]
[2015-06-30 09:56:30,199][  INFO][302][                     TraceInterceptorImpl.invoke()] commit(...): SessionCommitResponse [header=[sessionId=5065700000, sessionBeginTimeStamp=Tue Jun 30 09:56:26 UTC 2015, chargingType=REGULAR], responseCode=OK, reservationId=R42539077T1435658909433@16922380404922163~-9048415148037454697, accounts=[[accountId=42539078, amount=0, unitId=270]]] [178ms]
[2015-06-30 09:56:30,272][FINEST][389][     SubscriberPeerImpl.getSubscriberProfileById()] Reading subscriber profile by ID [subscriberId=42,539,077]
[2015-06-30 09:56:30,434][FINEST][389][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:30,434][FINEST][389][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:30,435][FINEST][389][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:30,436][FINEST][389][                SubscriberPeerImpl.getSubscriber()] Subscriber lookup returned [resultCode=OK subscriberId=42,539,077 msisdn=642041010000 imsi=530052041010000]' does not contain 'Voice|FALSE|64278'</status>
</test>
<test id="s1-t4" name="Run MFC Call">
<kw type="kw" name="${ssh_connection_xdr} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:39.813" starttime="20150630 11:56:39.812"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:39.871" starttime="20150630 11:56:39.818"></status>
</kw>
<msg timestamp="20150630 11:56:39.873" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20150630 11:56:39.872" starttime="20150630 11:56:39.814"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150630 11:56:39.886" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:56:40.268" level="INFO">Read output: Last login: Tue Jun 30 09:56:23 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150630 11:56:40.270" starttime="20150630 11:56:39.883"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:40.272" starttime="20150630 11:56:39.875"></status>
</kw>
<msg timestamp="20150630 11:56:40.277" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20150630 11:56:40.275" starttime="20150630 11:56:39.807"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:40.290" starttime="20150630 11:56:40.287"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:40.295" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20150630 11:56:40.299" starttime="20150630 11:56:40.292"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:40.300" starttime="20150630 11:56:40.280"></status>
</kw>
<msg timestamp="20150630 11:56:40.301" level="INFO">${ssh_connection_xdr} = 7</msg>
<status status="PASS" endtime="20150630 11:56:40.301" starttime="20150630 11:56:39.801"></status>
</kw>
<kw type="kw" name="${ssh_connection_in} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN_MFC_LOG_FILE_PATH}${IN_LOG_FILE_NAME}</arg>
<arg>host=${IN-APP HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:40.351" starttime="20150630 11:56:40.348"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:40.420" starttime="20150630 11:56:40.361"></status>
</kw>
<msg timestamp="20150630 11:56:40.423" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20150630 11:56:40.422" starttime="20150630 11:56:40.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150630 11:56:40.436" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:56:40.860" level="INFO">Read output: Last login: Tue Jun 30 09:56:24 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20150630 11:56:40.864" starttime="20150630 11:56:40.433"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:40.865" starttime="20150630 11:56:40.425"></status>
</kw>
<msg timestamp="20150630 11:56:40.869" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20150630 11:56:40.868" starttime="20150630 11:56:40.316"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:40.888" starttime="20150630 11:56:40.880"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:40.892" level="INFO">Starting command 'tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20150630 11:56:40.897" starttime="20150630 11:56:40.889"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:40.898" starttime="20150630 11:56:40.872"></status>
</kw>
<msg timestamp="20150630 11:56:40.901" level="INFO">${ssh_connection_in} = 8</msg>
<status status="PASS" endtime="20150630 11:56:40.900" starttime="20150630 11:56:40.310"></status>
</kw>
<kw type="kw" name="${ssh_connection_crce} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE_LOG_FILE_PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:40.935" starttime="20150630 11:56:40.934"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:40.999" starttime="20150630 11:56:40.940"></status>
</kw>
<msg timestamp="20150630 11:56:41.002" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20150630 11:56:41.000" starttime="20150630 11:56:40.936"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150630 11:56:41.014" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:56:41.440" level="INFO">Read output: Last login: Tue Jun 30 09:56:24 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20150630 11:56:41.443" starttime="20150630 11:56:41.011"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:41.444" starttime="20150630 11:56:41.004"></status>
</kw>
<msg timestamp="20150630 11:56:41.449" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20150630 11:56:41.447" starttime="20150630 11:56:40.929"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:41.463" starttime="20150630 11:56:41.461"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:41.468" level="INFO">Starting command 'tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20150630 11:56:41.472" starttime="20150630 11:56:41.465"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:41.473" starttime="20150630 11:56:41.452"></status>
</kw>
<msg timestamp="20150630 11:56:41.477" level="INFO">${ssh_connection_crce} = 9</msg>
<status status="PASS" endtime="20150630 11:56:41.475" starttime="20150630 11:56:40.920"></status>
</kw>
<kw type="kw" name="Reset Subscriber Balance">
<doc>Reset the test subscriber's monetary account balance to initial value.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:41.516" starttime="20150630 11:56:41.497"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:41.518" starttime="20150630 11:56:41.488"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>update acc_subscriber_accounts set balance=10000000 where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:41.919" starttime="20150630 11:56:41.519"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:56:41.924" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150630 11:56:41.925" starttime="20150630 11:56:41.921"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:41.926" starttime="20150630 11:56:41.479"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MFC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:56:41.930" level="INFO">Running the MFC call...</msg>
<status status="PASS" endtime="20150630 11:56:41.931" starttime="20150630 11:56:41.928"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MFC *******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:41.935" starttime="20150630 11:56:41.933"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MFC 1s">
<doc>Runs a standard MFC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${FINAL_DESTINATION_MFC}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MFC REQ QUEUE}</arg>
<arg>${AMQ-SIG MFC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MFC CGS">
<doc>Runs a standard MFC session (meaning a session that needs only mscAddress, mfcAPartyMsisdn and mfcCPartyMsisdn paramters) for the passed cgs file</doc>
<arguments>
<arg>mfc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${rd_imsi}</arg>
<arg>${rd_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mfc_req}</arg>
<arg>${queue_mfc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20150630 11:56:41.972" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv</msg>
<status status="PASS" endtime="20150630 11:56:41.971" starttime="20150630 11:56:41.968"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20150630 11:56:41.977" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv</msg>
<status status="PASS" endtime="20150630 11:56:41.976" starttime="20150630 11:56:41.973"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20150630 11:56:41.982" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini</msg>
<status status="PASS" endtime="20150630 11:56:41.981" starttime="20150630 11:56:41.978"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20150630 11:56:41.987" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs</msg>
<status status="PASS" endtime="20150630 11:56:41.986" starttime="20150630 11:56:41.983"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:41.990" starttime="20150630 11:56:41.988"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${rd_imsi};${rd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150630 11:56:41.997" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:41.998" starttime="20150630 11:56:41.991"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:42.002" starttime="20150630 11:56:41.999"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;gmscAddress;mfcAPartyMsisdn;mfcCPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20150630 11:56:42.008" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:42.010" starttime="20150630 11:56:42.005"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${msc_address};${cg_msisdn};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150630 11:56:42.017" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:42.018" starttime="20150630 11:56:42.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:42.022" starttime="20150630 11:56:42.020"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150630 11:56:42.027" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:42.028" starttime="20150630 11:56:42.023"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MFC;${queue_mfc_req};${queue_mfc_res};6;1;1</arg>
</arguments>
<msg timestamp="20150630 11:56:42.035" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:42.036" starttime="20150630 11:56:42.029"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:42.039" starttime="20150630 11:56:42.038"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150630 11:56:42.053" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150630 11:56:47.239" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150630 11:56:47.235" starttime="20150630 11:56:42.041"></status>
</kw>
<msg timestamp="20150630 11:56:47.242" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150630 11:56:47.241" starttime="20150630 11:56:41.955"></status>
</kw>
<msg timestamp="20150630 11:56:47.246" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150630 11:56:47.244" starttime="20150630 11:56:41.939"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150630 11:56:52.251" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150630 11:56:52.253" starttime="20150630 11:56:47.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:56:52.258" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20150630 11:56:52.259" starttime="20150630 11:56:52.256"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_in}</arg>
<arg>MFC_${TAILED_IN_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:52.282" starttime="20150630 11:56:52.280"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150630 11:56:52.293" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150630 11:56:52.291" starttime="20150630 11:56:52.284"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.299" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150630 11:56:52.300" starttime="20150630 11:56:52.294"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:52.313" starttime="20150630 11:56:52.310"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150630 11:56:52.316" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150630 11:56:52.344" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:52.347" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150630 11:56:52.346" starttime="20150630 11:56:52.314"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.351" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150630 11:56:52.423" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:52.426" level="INFO">${processes_string} =   720 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log
  738 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log
...</msg>
<status status="PASS" endtime="20150630 11:56:52.425" starttime="20150630 11:56:52.348"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.432" level="INFO">@{processes_list} = [   720 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log |   738 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00....</msg>
<status status="PASS" endtime="20150630 11:56:52.431" starttime="20150630 11:56:52.428"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   720 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.439" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:52.438" starttime="20150630 11:56:52.435"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.443" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:52.491" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:52.492" starttime="20150630 11:56:52.441"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:52.493" starttime="20150630 11:56:52.434"></status>
</kw>
<kw type="foritem" name="${process} =   738 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.499" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:52.498" starttime="20150630 11:56:52.495"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.503" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:52.584" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:52.585" starttime="20150630 11:56:52.500"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:52.586" starttime="20150630 11:56:52.494"></status>
</kw>
<kw type="foritem" name="${process} =  1064 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.592" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:52.591" starttime="20150630 11:56:52.588"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.595" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:52.665" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:52.666" starttime="20150630 11:56:52.593"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:52.667" starttime="20150630 11:56:52.587"></status>
</kw>
<kw type="foritem" name="${process} =  1079 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.672" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:52.671" starttime="20150630 11:56:52.669"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.677" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:52.743" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:52.745" starttime="20150630 11:56:52.674"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:52.746" starttime="20150630 11:56:52.667"></status>
</kw>
<kw type="foritem" name="${process} =  1482 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.751" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:52.750" starttime="20150630 11:56:52.747"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.755" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:52.830" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:52.831" starttime="20150630 11:56:52.752"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:52.832" starttime="20150630 11:56:52.746"></status>
</kw>
<kw type="foritem" name="${process} =  1500 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.838" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:52.837" starttime="20150630 11:56:52.834"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.842" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:52.914" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:52.915" starttime="20150630 11:56:52.839"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:52.915" starttime="20150630 11:56:52.833"></status>
</kw>
<kw type="foritem" name="${process} =  2079 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor8.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.921" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:52.920" starttime="20150630 11:56:52.917"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:52.925" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:52.997" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:52.999" starttime="20150630 11:56:52.922"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:53.000" starttime="20150630 11:56:52.916"></status>
</kw>
<kw type="foritem" name="${process} =  2112 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.007" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:53.006" starttime="20150630 11:56:53.003"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.011" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:53.078" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:53.079" starttime="20150630 11:56:53.008"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:53.080" starttime="20150630 11:56:53.002"></status>
</kw>
<kw type="foritem" name="${process} =  2552 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-smsc-submit-00.log &gt; tmpfilemonitor11.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.086" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:53.085" starttime="20150630 11:56:53.082"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.090" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:53.157" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:53.158" starttime="20150630 11:56:53.087"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:53.159" starttime="20150630 11:56:53.081"></status>
</kw>
<kw type="foritem" name="${process} =  2567 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-smsc-submit-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.164" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:53.164" starttime="20150630 11:56:53.161"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.168" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:53.241" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:53.242" starttime="20150630 11:56:53.166"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:53.243" starttime="20150630 11:56:53.160"></status>
</kw>
<kw type="foritem" name="${process} =  3676 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.249" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:53.248" starttime="20150630 11:56:53.245"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.252" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:53.324" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:53.325" starttime="20150630 11:56:53.250"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:53.326" starttime="20150630 11:56:53.243"></status>
</kw>
<kw type="foritem" name="${process} =  3691 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.332" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:53.331" starttime="20150630 11:56:53.328"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.336" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:53.423" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:53.424" starttime="20150630 11:56:53.333"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:53.425" starttime="20150630 11:56:53.327"></status>
</kw>
<kw type="foritem" name="${process} =  6285 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.431" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:53.430" starttime="20150630 11:56:53.427"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.434" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:53.505" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:53.506" starttime="20150630 11:56:53.432"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:53.507" starttime="20150630 11:56:53.426"></status>
</kw>
<kw type="foritem" name="${process} =  6300 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.512" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:53.511" starttime="20150630 11:56:53.508"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.516" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:53.591" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:53.592" starttime="20150630 11:56:53.514"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:53.593" starttime="20150630 11:56:53.507"></status>
</kw>
<kw type="foritem" name="${process} =  6712 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.598" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:53.598" starttime="20150630 11:56:53.595"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.602" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:53.669" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:53.670" starttime="20150630 11:56:53.600"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:53.671" starttime="20150630 11:56:53.593"></status>
</kw>
<kw type="foritem" name="${process} =  6727 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.677" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:53.676" starttime="20150630 11:56:53.672"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.681" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:53.756" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:53.757" starttime="20150630 11:56:53.678"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:53.758" starttime="20150630 11:56:53.671"></status>
</kw>
<kw type="foritem" name="${process} =  6887 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.764" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:53.763" starttime="20150630 11:56:53.760"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.768" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:53.837" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:53.838" starttime="20150630 11:56:53.765"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:53.839" starttime="20150630 11:56:53.759"></status>
</kw>
<kw type="foritem" name="${process} =  6902 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.845" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:53.844" starttime="20150630 11:56:53.841"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.849" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:53.919" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:53.920" starttime="20150630 11:56:53.846"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:53.921" starttime="20150630 11:56:53.840"></status>
</kw>
<kw type="foritem" name="${process} =  7258 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.927" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:53.926" starttime="20150630 11:56:53.923"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:53.931" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:54.006" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:54.007" starttime="20150630 11:56:53.929"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:54.009" starttime="20150630 11:56:53.922"></status>
</kw>
<kw type="foritem" name="${process} =  7273 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.015" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:54.014" starttime="20150630 11:56:54.012"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.019" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:54.097" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:54.099" starttime="20150630 11:56:54.017"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:54.100" starttime="20150630 11:56:54.010"></status>
</kw>
<kw type="foritem" name="${process} =  7746 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor8.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.105" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:54.104" starttime="20150630 11:56:54.101"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.109" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:54.176" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:54.177" starttime="20150630 11:56:54.107"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:54.178" starttime="20150630 11:56:54.100"></status>
</kw>
<kw type="foritem" name="${process} =  7761 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.183" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:54.182" starttime="20150630 11:56:54.180"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.187" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:54.255" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:54.256" starttime="20150630 11:56:54.185"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:54.257" starttime="20150630 11:56:54.178"></status>
</kw>
<kw type="foritem" name="${process} =  7788 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.263" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:54.262" starttime="20150630 11:56:54.259"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.267" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:54.338" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:54.339" starttime="20150630 11:56:54.264"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:54.340" starttime="20150630 11:56:54.258"></status>
</kw>
<kw type="foritem" name="${process} =  7804 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.345" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:54.344" starttime="20150630 11:56:54.342"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.349" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:54.421" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:54.422" starttime="20150630 11:56:54.347"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:54.423" starttime="20150630 11:56:54.340"></status>
</kw>
<kw type="foritem" name="${process} =  9866 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.429" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:54.428" starttime="20150630 11:56:54.425"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.432" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:54.501" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:54.502" starttime="20150630 11:56:54.430"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:54.503" starttime="20150630 11:56:54.423"></status>
</kw>
<kw type="foritem" name="${process} =  9881 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.509" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:56:54.508" starttime="20150630 11:56:54.505"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.513" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:56:54.582" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:54.583" starttime="20150630 11:56:54.510"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:54.584" starttime="20150630 11:56:54.504"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:54.584" starttime="20150630 11:56:52.433"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:54.586" starttime="20150630 11:56:52.303"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:54.591" level="INFO">Starting command 'cat tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20150630 11:56:54.625" starttime="20150630 11:56:54.589"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:56:54.628" level="INFO">Reading output of command 'cat tmpfilemonitor8.log'.</msg>
<msg timestamp="20150630 11:56:54.693" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:54.696" level="INFO">${stdout_string} = [2015-06-30 09:56:43,206][INFO ][..m.c.c.ContextComponentRAMLockfreeImpl           ][][][][][] Context count: [0]
[2015-06-30 09:56:43,460][DEBUG][IPROT_TRACING                                     ][]...</msg>
<status status="PASS" endtime="20150630 11:56:54.695" starttime="20150630 11:56:54.627"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:54.701" level="INFO">Executing command 'rm tmpfilemonitor8.log'.</msg>
<msg timestamp="20150630 11:56:54.777" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:54.778" starttime="20150630 11:56:54.698"></status>
</kw>
<msg timestamp="20150630 11:56:54.782" level="INFO">${tailed_text} = [2015-06-30 09:56:43,206][INFO ][..m.c.c.ContextComponentRAMLockfreeImpl           ][][][][][] Context count: [0]
[2015-06-30 09:56:43,460][DEBUG][IPROT_TRACING                                     ][]...</msg>
<status status="PASS" endtime="20150630 11:56:54.780" starttime="20150630 11:56:52.272"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.797" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:54.798" starttime="20150630 11:56:54.792"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:54.800" starttime="20150630 11:56:54.784"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:54.816" starttime="20150630 11:56:54.813"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:56:54.820" starttime="20150630 11:56:54.818"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:54.824" starttime="20150630 11:56:54.806"></status>
</kw>
<msg timestamp="20150630 11:56:54.828" level="INFO">${tailed_text} = [2015-06-30 09:56:43,206][INFO ][..m.c.c.ContextComponentRAMLockfreeImpl           ][][][][][] Context count: [0]
[2015-06-30 09:56:43,460][DEBUG][IPROT_TRACING                                     ][]...</msg>
<status status="PASS" endtime="20150630 11:56:54.826" starttime="20150630 11:56:52.263"></status>
</kw>
<kw type="kw" name="Check MFC IN log">
<doc>Checks the tailed log file created during MTC test case</doc>
<arguments>
<arg>MFC_${TAILED_IN_LOG_FILE}</arg>
<arg>${rc}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.840" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:56:54.843" level="INFO">${temp} = [2015-06-30 09:56:43,206][INFO ][..m.c.c.ContextComponentRAMLockfreeImpl           ][][][][][] Context count: [0]
[2015-06-30 09:56:43,460][DEBUG][IPROT_TRACING                                     ][]...</msg>
<status status="PASS" endtime="20150630 11:56:54.842" starttime="20150630 11:56:54.838"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rel_c}</arg>
<arg>0</arg>
<arg>msg=CG session failed - check MFC IN log</arg>
</arguments>
<msg timestamp="20150630 11:56:54.847" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150630 11:56:54.848" starttime="20150630 11:56:54.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Imsi: ${TESTSUBCRIBERS IMSI RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:54.853" starttime="20150630 11:56:54.850"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>UsedTime: 1000</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:54.857" starttime="20150630 11:56:54.854"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>TrafficType: Forwarding</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:54.861" starttime="20150630 11:56:54.858"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:54.865" starttime="20150630 11:56:54.862"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:54.866" starttime="20150630 11:56:54.830"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:56:54.869" level="INFO">IN OK...</msg>
<status status="PASS" endtime="20150630 11:56:54.870" starttime="20150630 11:56:54.867"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG session failed</arg>
</arguments>
<msg timestamp="20150630 11:56:54.875" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150630 11:56:54.876" starttime="20150630 11:56:54.872"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_xdr}</arg>
<arg>MFC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:54.897" starttime="20150630 11:56:54.894"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150630 11:56:54.905" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150630 11:56:54.904" starttime="20150630 11:56:54.898"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.911" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150630 11:56:54.912" starttime="20150630 11:56:54.907"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:54.924" starttime="20150630 11:56:54.921"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150630 11:56:54.926" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150630 11:56:54.966" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:54.967" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150630 11:56:54.967" starttime="20150630 11:56:54.925"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150630 11:56:54.969" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150630 11:56:55.060" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:55.063" level="INFO">${processes_string} = 28902 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor7.log
28917 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
28936 ?       ...</msg>
<status status="PASS" endtime="20150630 11:56:55.061" starttime="20150630 11:56:54.968"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.070" level="INFO">@{processes_list} = [ 28902 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor7.log | 28917 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 28936 ? ...</msg>
<status status="PASS" endtime="20150630 11:56:55.068" starttime="20150630 11:56:55.065"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 28902 ?        Ss     0:00 bash -c tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor7.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.077" level="INFO">${pid} = 28902</msg>
<status status="PASS" endtime="20150630 11:56:55.076" starttime="20150630 11:56:55.073"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.081" level="INFO">Executing command 'kill -9 28902'.</msg>
<msg timestamp="20150630 11:56:55.139" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:55.140" starttime="20150630 11:56:55.078"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:55.141" starttime="20150630 11:56:55.072"></status>
</kw>
<kw type="foritem" name="${process} = 28917 ?        S      0:00 tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.146" level="INFO">${pid} = 28917</msg>
<status status="PASS" endtime="20150630 11:56:55.145" starttime="20150630 11:56:55.143"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.150" level="INFO">Executing command 'kill -9 28917'.</msg>
<msg timestamp="20150630 11:56:55.219" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:55.220" starttime="20150630 11:56:55.148"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:55.221" starttime="20150630 11:56:55.141"></status>
</kw>
<kw type="foritem" name="${process} = 28936 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.227" level="INFO">${pid} = 28936</msg>
<status status="PASS" endtime="20150630 11:56:55.226" starttime="20150630 11:56:55.223"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.231" level="INFO">Executing command 'kill -9 28936'.</msg>
<msg timestamp="20150630 11:56:55.301" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:55.302" starttime="20150630 11:56:55.228"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:55.303" starttime="20150630 11:56:55.222"></status>
</kw>
<kw type="foritem" name="${process} = 28952 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.309" level="INFO">${pid} = 28952</msg>
<status status="PASS" endtime="20150630 11:56:55.308" starttime="20150630 11:56:55.305"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.313" level="INFO">Executing command 'kill -9 28952'.</msg>
<msg timestamp="20150630 11:56:55.379" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:55.380" starttime="20150630 11:56:55.311"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:55.381" starttime="20150630 11:56:55.304"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:55.382" starttime="20150630 11:56:55.071"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:55.383" starttime="20150630 11:56:54.914"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:55.387" level="INFO">Starting command 'cat tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20150630 11:56:55.422" starttime="20150630 11:56:55.385"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:56:55.425" level="INFO">Reading output of command 'cat tmpfilemonitor7.log'.</msg>
<msg timestamp="20150630 11:56:55.457" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:55.459" level="INFO">${stdout_string} = [2015-06-30 09:56:46,420][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:56:55.458" starttime="20150630 11:56:55.423"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:55.463" level="INFO">Executing command 'rm tmpfilemonitor7.log'.</msg>
<msg timestamp="20150630 11:56:55.526" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:55.527" starttime="20150630 11:56:55.461"></status>
</kw>
<msg timestamp="20150630 11:56:55.531" level="INFO">${tailed_text} = [2015-06-30 09:56:46,420][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:56:55.529" starttime="20150630 11:56:54.887"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.544" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:55.545" starttime="20150630 11:56:55.540"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:55.546" starttime="20150630 11:56:55.533"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:55.558" starttime="20150630 11:56:55.556"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:56:55.562" starttime="20150630 11:56:55.560"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:55.566" starttime="20150630 11:56:55.548"></status>
</kw>
<msg timestamp="20150630 11:56:55.569" level="INFO">${tailed_text} = [2015-06-30 09:56:46,420][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:56:55.567" starttime="20150630 11:56:54.879"></status>
</kw>
<kw type="kw" name="Check MFC XDR log">
<doc>Checks the tailed log file of MFC call created on XDR.</doc>
<arguments>
<arg>MFC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.581" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:56:55.583" level="INFO">${temp} = [2015-06-30 09:56:46,420][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20150630 11:56:55.582" starttime="20150630 11:56:55.579"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:55.587" starttime="20150630 11:56:55.585"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:55.591" starttime="20150630 11:56:55.588"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>${FINAL_DESTINATION_MFC}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:55.596" starttime="20150630 11:56:55.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>CRCE|CDR</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:55.600" starttime="20150630 11:56:55.597"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Zone D|Forwarding</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:55.604" starttime="20150630 11:56:55.601"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:55.606" starttime="20150630 11:56:55.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:56:55.610" level="INFO">XDR OK...</msg>
<status status="PASS" endtime="20150630 11:56:55.611" starttime="20150630 11:56:55.607"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_crce}</arg>
<arg>MFC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:55.633" starttime="20150630 11:56:55.630"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150630 11:56:55.641" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150630 11:56:55.640" starttime="20150630 11:56:55.634"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.648" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150630 11:56:55.649" starttime="20150630 11:56:55.643"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:55.661" starttime="20150630 11:56:55.658"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150630 11:56:55.664" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150630 11:56:55.709" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:55.711" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150630 11:56:55.710" starttime="20150630 11:56:55.662"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.716" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150630 11:56:55.804" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:55.807" level="INFO">${processes_string} = 15884 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor9.log
15899 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log
15918 ?        Ss   ...</msg>
<status status="PASS" endtime="20150630 11:56:55.806" starttime="20150630 11:56:55.713"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.815" level="INFO">@{processes_list} = [ 15884 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor9.log | 15899 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log | 15918 ?       ...</msg>
<status status="PASS" endtime="20150630 11:56:55.813" starttime="20150630 11:56:55.809"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} = 15884 ?        Ss     0:00 bash -c tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor9.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.821" level="INFO">${pid} = 15884</msg>
<status status="PASS" endtime="20150630 11:56:55.820" starttime="20150630 11:56:55.818"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.825" level="INFO">Executing command 'kill -9 15884'.</msg>
<msg timestamp="20150630 11:56:55.883" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:55.884" starttime="20150630 11:56:55.823"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:55.885" starttime="20150630 11:56:55.817"></status>
</kw>
<kw type="foritem" name="${process} = 15899 ?        S      0:00 tail -0f /var/log/inew/crce/5.3.12/negret-0.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.890" level="INFO">${pid} = 15899</msg>
<status status="PASS" endtime="20150630 11:56:55.889" starttime="20150630 11:56:55.886"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.893" level="INFO">Executing command 'kill -9 15899'.</msg>
<msg timestamp="20150630 11:56:55.961" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:55.963" starttime="20150630 11:56:55.891"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:55.964" starttime="20150630 11:56:55.885"></status>
</kw>
<kw type="foritem" name="${process} = 15918 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.969" level="INFO">${pid} = 15918</msg>
<status status="PASS" endtime="20150630 11:56:55.968" starttime="20150630 11:56:55.965"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:55.973" level="INFO">Executing command 'kill -9 15918'.</msg>
<msg timestamp="20150630 11:56:56.040" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:56.042" starttime="20150630 11:56:55.970"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:56.044" starttime="20150630 11:56:55.964"></status>
</kw>
<kw type="foritem" name="${process} = 15934 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:56:56.050" level="INFO">${pid} = 15934</msg>
<status status="PASS" endtime="20150630 11:56:56.049" starttime="20150630 11:56:56.046"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:56:56.054" level="INFO">Executing command 'kill -9 15934'.</msg>
<msg timestamp="20150630 11:56:56.119" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:56:56.120" starttime="20150630 11:56:56.052"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:56.121" starttime="20150630 11:56:56.045"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:56.122" starttime="20150630 11:56:55.816"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:56.124" starttime="20150630 11:56:55.651"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:56.128" level="INFO">Starting command 'cat tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20150630 11:56:56.162" starttime="20150630 11:56:56.126"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:56:56.165" level="INFO">Reading output of command 'cat tmpfilemonitor9.log'.</msg>
<msg timestamp="20150630 11:56:56.205" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:56:56.207" level="INFO">${stdout_string} = [2015-06-30 09:56:42,398][FINEST][108][                   ProviderPeerImpl.getProviders()] return: [com.tryge.negret.profiler.services.ProviderType@cb3da7e, com.tryge.negret.profiler.services.Provider...</msg>
<status status="PASS" endtime="20150630 11:56:56.206" starttime="20150630 11:56:56.164"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:56.211" level="INFO">Executing command 'rm tmpfilemonitor9.log'.</msg>
<msg timestamp="20150630 11:56:56.283" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:56:56.284" starttime="20150630 11:56:56.209"></status>
</kw>
<msg timestamp="20150630 11:56:56.287" level="INFO">${tailed_text} = [2015-06-30 09:56:42,398][FINEST][108][                   ProviderPeerImpl.getProviders()] return: [com.tryge.negret.profiler.services.ProviderType@cb3da7e, com.tryge.negret.profiler.services.Provider...</msg>
<status status="PASS" endtime="20150630 11:56:56.286" starttime="20150630 11:56:55.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150630 11:56:56.301" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:56.302" starttime="20150630 11:56:56.296"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:56.304" starttime="20150630 11:56:56.289"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:56.315" starttime="20150630 11:56:56.313"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:56:56.319" starttime="20150630 11:56:56.317"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:56.323" starttime="20150630 11:56:56.305"></status>
</kw>
<msg timestamp="20150630 11:56:56.326" level="INFO">${tailed_text} = [2015-06-30 09:56:42,398][FINEST][108][                   ProviderPeerImpl.getProviders()] return: [com.tryge.negret.profiler.services.ProviderType@cb3da7e, com.tryge.negret.profiler.services.Provider...</msg>
<status status="PASS" endtime="20150630 11:56:56.324" starttime="20150630 11:56:55.615"></status>
</kw>
<kw type="kw" name="Check MFC CRCE log">
<doc>Checks the tailed log file created on CRCE.</doc>
<arguments>
<arg>MFC_${TAILED_CRCE_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150630 11:56:56.338" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-crce.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-crce.log&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:56:56.341" level="INFO">${temp} = [2015-06-30 09:56:42,398][FINEST][108][                   ProviderPeerImpl.getProviders()] return: [com.tryge.negret.profiler.services.ProviderType@cb3da7e, com.tryge.negret.profiler.services.Provider...</msg>
<status status="PASS" endtime="20150630 11:56:56.340" starttime="20150630 11:56:56.336"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:56.344" starttime="20150630 11:56:56.342"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Zone D|Forwarding|Forwarding</arg>
</arguments>
<msg timestamp="20150630 11:56:56.352" level="FAIL">'[2015-06-30 09:56:42,398][FINEST][108][                   ProviderPeerImpl.getProviders()] return: [com.tryge.negret.profiler.services.ProviderType@cb3da7e, com.tryge.negret.profiler.services.ProviderType@73cd8cb5, com.tryge.negret.profiler.services.ProviderType@3bd0fa78]
[2015-06-30 09:56:43,643][FINEST][274][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:56:43,879][FINEST][274][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:43,880][FINEST][274][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:43,880][FINEST][274][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:43,881][FINEST][274][                SubscriberPeerImpl.getSubscriber()] Subscriber lookup returned [resultCode=OK subscriberId=42,539,077 msisdn=642041010000 imsi=530052041010000]
[2015-06-30 09:56:43,908][  INFO][303][                     TraceInterceptorImpl.invoke()] reserve(SessionReservationRequest [header=[sessionId=5065800000, sessionBeginTimeStamp=Tue Jun 30 09:56:43 UTC 2015, chargingType=REGULAR], trafficType=MFC, imsi=530052041010000, subscriberId=42539077, suppressNumber=false, startTime=Tue Jun 30 09:56:43 UTC 2015, duration=0, location=64278, roaming=false, bearerType=Voice, referenceNumber=0001ABFF0E, callingParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], calledParty=Address [msisdn=56955691975, nadi=INTERNATIONAL], locationNumber=null, locationDetailedId=null])
[2015-06-30 09:56:44,061][FINEST][303][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:44,062][FINEST][303][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:44,062][FINEST][303][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:44,069][FINEST][303][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=create execTime=5.543]
[2015-06-30 09:56:44,070][FINEST][303][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Create]
[2015-06-30 09:56:44,071][FINEST][303][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=CreateSession]
[2015-06-30 09:56:44,074][FINEST][303][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=selectContext execTime=2.664]
[2015-06-30 09:56:44,075][FINEST][303][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Select]
[2015-06-30 09:56:44,075][FINEST][303][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=SelectSession]
[2015-06-30 09:56:44,076][FINEST][303][                 SessionContext.getCommitActions()] Reading commit actions: []
[2015-06-30 09:56:44,077][ FINER][303][                    RateplanPeerImpl.getRateplan()] Getting the rateplan for key: ptk.skinny/101001/mfc
[2015-06-30 09:56:44,077][FINEST][303][                     ReservationStoreImpl.create()] Creating a reservation [subscriberId=42,539,077, reservation=InternalReservationImpl{id='R42539077T1435658504077@16922395048967408~-8522271206019756417', subscriberId=42539077, expires=1435658504077, reservedAt=1435658204077, reservation=[]}]
[2015-06-30 09:56:44,077][FINEST][303][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,203,892, duration=60,000]
[2015-06-30 09:56:44,078][FINEST][303][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,263,892, duration=60,000]
[2015-06-30 09:56:44,078][ FINER][303][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000005
[2015-06-30 09:56:44,078][ FINER][303][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,117]
[2015-06-30 09:56:44,078][FINEST][303][                    CompiledRatingFilter.rateMoc()] Beginning of session, adding setup rating
[2015-06-30 09:56:44,079][ FINER][303][                                SessionRater.add()] Try rating: setup=true, begin=0, duration=0, price=0, perPeriod=60000, currency=NZD
[2015-06-30 09:56:44,079][ FINER][303][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,117]
[2015-06-30 09:56:44,079][ FINER][303][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=0, perPeriod=60000, currency=NZD
[2015-06-30 09:56:44,079][FINEST][303][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=303]
[2015-06-30 09:56:44,080][FINEST][303][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=303]
[2015-06-30 09:56:44,080][FINEST][303][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=0.957]
[2015-06-30 09:56:44,080][FINEST][303][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:56:44,081][FINEST][303][                AccountStoreImpl.releaseAccounts()] Releasing the cached accounts for subscriber [subscriberId=42539077, actionId=508607680]
[2015-06-30 09:56:44,085][FINEST][303][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=updateContext execTime=4.184]
[2015-06-30 09:56:44,086][FINEST][303][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Update]
[2015-06-30 09:56:44,087][FINEST][303][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=UpdateSession]
[2015-06-30 09:56:44,089][FINEST][303][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.apps.session.impl.SessionApplicationImpl method=reserve execTime=180.724]
[2015-06-30 09:56:44,090][FINEST][303][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=Reserve]
[2015-06-30 09:56:44,090][FINEST][303][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=ReserveMFC]
[2015-06-30 09:56:44,091][FINEST][303][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=ReserveInitial]
[2015-06-30 09:56:44,092][FINEST][303][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=ReserveMFCInitial]
[2015-06-30 09:56:44,093][  INFO][303][                     TraceInterceptorImpl.invoke()] reserve(...): SessionReservationResponse [sessionId=5065800000, responseCode=OK, reservationId=R42539077T1435658504077@16922395048967408~-8522271206019756417, lastSegment=false, grantedTime=60000, accounts=[]] [183ms]
[2015-06-30 09:56:45,304][  INFO][349][                     TraceInterceptorImpl.invoke()] update(SessionUpdateReservationRequest [header=[sessionId=5065800000, sessionBeginTimeStamp=Tue Jun 30 09:56:43 UTC 2015, chargingType=REGULAR], reservationId=R42539077T1435658504077@16922395048967408~-8522271206019756417, trafficType=MFC, imsi=530052041010000, subscriberId=42539077, callingParty=Address [msisdn=642041010000, nadi=INTERNATIONAL], calledParty=Address [msisdn=56955691975, nadi=INTERNATIONAL], bearerType=Voice, startTime=Tue Jun 30 09:56:45 UTC 2015, duration=0, location=64278, roaming=false, referenceNumber=0001ABFF0E])
[2015-06-30 09:56:45,458][FINEST][349][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:45,458][FINEST][349][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:45,458][FINEST][349][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:45,464][FINEST][349][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=selectContext execTime=3.775]
[2015-06-30 09:56:45,465][FINEST][349][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Select]
[2015-06-30 09:56:45,465][FINEST][349][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=SelectSession]
[2015-06-30 09:56:45,466][FINEST][349][                 SessionContext.getCommitActions()] Reading commit actions: []
[2015-06-30 09:56:45,466][ FINER][349][                    RateplanPeerImpl.getRateplan()] Getting the rateplan for key: ptk.skinny/101001/mfc
[2015-06-30 09:56:45,466][FINEST][349][                     ReservationStoreImpl.create()] Creating a reservation [subscriberId=42,539,077, reservation=InternalReservationImpl{id='R42539077T1435658505466@16922396438492905~-8211199363382630824', subscriberId=42539077, expires=1435658505466, reservedAt=1435658205466, reservation=[]}]
[2015-06-30 09:56:45,467][FINEST][349][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,205,022, duration=60,000]
[2015-06-30 09:56:45,467][FINEST][349][                             SessionRater.&lt;init&gt;()] Initialized session rater [subscriberId=42,539,077, offset=1,435,658,265,022, duration=60,000]
[2015-06-30 09:56:45,468][ FINER][349][      BasicSessionFeatureFactoryImpl.newInstance()] Executing session feature: 1010010000005
[2015-06-30 09:56:45,468][ FINER][349][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,117]
[2015-06-30 09:56:45,468][FINEST][349][                    CompiledRatingFilter.rateMoc()] Beginning of session, adding setup rating
[2015-06-30 09:56:45,468][ FINER][349][                                SessionRater.add()] Try rating: setup=true, begin=0, duration=0, price=0, perPeriod=60000, currency=NZD
[2015-06-30 09:56:45,468][ FINER][349][                    CompiledRatingFilter.rateMoc()] Executing rating filter for session request [filterId=1,010,010,000,117]
[2015-06-30 09:56:45,468][ FINER][349][                                SessionRater.add()] Try rating: setup=false, begin=0, duration=0, price=0, perPeriod=60000, currency=NZD
[2015-06-30 09:56:45,469][FINEST][349][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=349]
[2015-06-30 09:56:45,469][FINEST][349][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=349]
[2015-06-30 09:56:45,470][FINEST][349][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=0.941]
[2015-06-30 09:56:45,470][FINEST][349][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Write]
[2015-06-30 09:56:45,470][FINEST][349][                AccountStoreImpl.releaseAccounts()] Releasing the cached accounts for subscriber [subscriberId=42539077, actionId=1254680896]
[2015-06-30 09:56:45,475][FINEST][349][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=updateContext execTime=4.165]
[2015-06-30 09:56:45,476][FINEST][349][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Update]
[2015-06-30 09:56:45,476][FINEST][349][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=UpdateSession]
[2015-06-30 09:56:45,480][FINEST][349][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.apps.session.impl.SessionApplicationImpl method=update execTime=175.481]
[2015-06-30 09:56:45,480][FINEST][349][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=Update]
[2015-06-30 09:56:45,481][FINEST][349][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=UpdateMFC]
[2015-06-30 09:56:45,482][  INFO][349][                     TraceInterceptorImpl.invoke()] update(...): SessionReservationResponse [sessionId=5065800000, responseCode=OK, reservationId=R42539077T1435658505466@16922396438492905~-8211199363382630824, lastSegment=false, grantedTime=60000, accounts=[]] [176ms]
[2015-06-30 09:56:46,313][  INFO][350][                     TraceInterceptorImpl.invoke()] commit(SessionCommitRequest [header=[sessionId=5065800000, sessionBeginTimeStamp=Tue Jun 30 09:56:43 UTC 2015, chargingType=REGULAR], reservationId=R42539077T1435658505466@16922396438492905~-8211199363382630824, finalCommit=true, usedTime=1000])
[2015-06-30 09:56:46,317][FINEST][350][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=selectContext execTime=3.645]
[2015-06-30 09:56:46,318][FINEST][350][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Select]
[2015-06-30 09:56:46,318][FINEST][350][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=SelectSession]
[2015-06-30 09:56:46,319][  FINE][350][                SessionCommitClosure.withContext()] try to commit reservation: R42539077T1435658505466@16922396438492905~-8211199363382630824
[2015-06-30 09:56:46,403][FINEST][350][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:46,403][FINEST][350][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:46,403][FINEST][350][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:46,405][FINEST][350][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=350]
[2015-06-30 09:56:46,407][FINEST][350][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=350]
[2015-06-30 09:56:46,407][FINEST][350][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.726]
[2015-06-30 09:56:46,408][FINEST][350][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:56:46,408][FINEST][350][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.AccountDaoImpl method=loadDescriptors execTime=3.422]
[2015-06-30 09:56:46,408][FINEST][350][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=Lookup]
[2015-06-30 09:56:46,408][ FINER][350][                     AbstractAccountManager.load()] Loading acount from descriptor [accountId=42,539,078, subscriberId=42,539,077]
[2015-06-30 09:56:46,408][FINEST][350][            ReservationStoreImpl.getReservations()] Loading all reservations from database [subscriberId=42,539,077]
[2015-06-30 09:56:46,409][FINEST][350][                  TransactionalQueryExecutor.run()] Opening a new database transaction [thread=350]
[2015-06-30 09:56:46,411][FINEST][350][                  TransactionalQueryExecutor.run()] Committed the transaction [thread=350]
[2015-06-30 09:56:46,411][FINEST][350][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.tryge.negret.db.impl.TransactionalQueryExecutor method=execute execTime=2.25]
[2015-06-30 09:56:46,411][FINEST][350][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=CoreDB name=Read]
[2015-06-30 09:56:46,411][FINEST][350][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.accounting.persistence.impl.ReservationDaoImpl method=getBySubscriber execTime=2.913]
[2015-06-30 09:56:46,412][FINEST][350][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Accounting name=SelectReservation]
[2015-06-30 09:56:46,412][FINEST][350][                SessionCommitClosure.withContext()] Session is free, do not charge reservation, charge 0 on main account [reservationId=R42539077T1435658505466@16922396438492905~-8211199363382630824 subscriberId=42,539,077 accountId=42,539,078 currency=NZD]
[2015-06-30 09:56:46,412][FINEST][350][                 SessionContext.getCommitActions()] Reading commit actions: []
[2015-06-30 09:56:46,413][FINEST][350][                       SessionTicketImpl.newPart()] added part, parts: [[TicketPartImpl duration=0 segments=null data=0]]
[2015-06-30 09:56:46,413][FINEST][350][                   SessionTicketImpl.finalCommit()] About to write final tickets, segments are: [(SessionSegment [duration=0, feature=15, charges=null, count=1, transferredData=0, ratingGroup=0])]
[2015-06-30 09:56:46,417][ FINER][268][                          TicketSenderImpl$1.run()] Sending ticket to inew-cs.crce.cdr: 5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-06-30T09:56:46.412+0000|2015-06-30T09:56:43.000+0000|5065800000|1|1|42539077|642041010000|PREPAID|ACTIVE||1|NONE|OK||1.2|FinalCommit|BasicSession|1|530052041010000|642041010000|false|56955691975|Chile - 56|Zone D|Forwarding||0||Voice|false|64278|(network) TNZ #8|2015-06-30T09:56:45.000+0000|0|1000|60000|0|0|0001ABFF0E|false|101001|15730641|101001|0|0|NZD|10000000|PREPAID|OK||
[2015-06-30 09:56:46,418][FINEST][350][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.contextsharing.db.impl.DatabaseContextSharing method=deleteContext execTime=0.965]
[2015-06-30 09:56:46,418][FINEST][350][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=ContextDB name=Delete]
[2015-06-30 09:56:46,421][FINEST][350][            MonitorListenerImpl.methodInvocation()] Monitoring event received [class=com.inewcs.crce.apps.session.impl.SessionApplicationImpl method=commit execTime=107.813]
[2015-06-30 09:56:46,421][FINEST][350][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=Commit]
[2015-06-30 09:56:46,422][FINEST][350][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=CommitFinal]
[2015-06-30 09:56:46,422][  INFO][350][                     TraceInterceptorImpl.invoke()] commit(...): SessionCommitResponse [header=[sessionId=5065800000, sessionBeginTimeStamp=Tue Jun 30 09:56:43 UTC 2015, chargingType=REGULAR], responseCode=OK, reservationId=R42539077T1435658505466@16922396438492905~-8211199363382630824, accounts=[[accountId=42539078, amount=0, unitId=270]]] [109ms]
[2015-06-30 09:56:46,491][FINEST][389][     SubscriberPeerImpl.getSubscriberProfileById()] Reading subscriber profile by ID [subscriberId=42,539,077]
[2015-06-30 09:56:46,593][FINEST][389][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:46,594][FINEST][389][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:46,594][FINEST][389][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:46,595][FINEST][389][                SubscriberPeerImpl.getSubscriber()] Subscriber lookup returned [resultCode=OK subscriberId=42,539,077 msisdn=642041010000 imsi=530052041010000]' does not contain 'Zone D|Forwarding|Forwarding'</msg>
<status status="FAIL" endtime="20150630 11:56:56.360" starttime="20150630 11:56:56.346"></status>
</kw>
<status status="FAIL" endtime="20150630 11:56:56.363" starttime="20150630 11:56:56.329"></status>
</kw>
<doc>Reset the test subscriber's monetary account balance to initial value.

Arguments:
subscriber
Returns:
Fails:

==</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MFC_involved</tag>
<tag>MOC_involved</tag>
<tag>MTC_involved</tag>
<tag>SMS_involved</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20150630 11:56:56.365" starttime="20150630 11:56:39.773">'[2015-06-30 09:56:42,398][FINEST][108][                   ProviderPeerImpl.getProviders()] return: [com.tryge.negret.profiler.services.ProviderType@cb3da7e, com.tryge.negret.profiler.services.ProviderType@73cd8cb5, com.tryge.negret.profiler.services.ProviderType@3bd0fa78]
[2015-06-30 09:56:43,643][FINEST][274][   SubscriberPeerImpl.getSubscriberProfileByImsi()] Reading subscriber profile by IMSI [imsi=530052041010000]
[2015-06-30 09:56:43,879][FINEST][274][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:43,880][FINEST][274][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:43,880][FINEST][274][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:43,881][FINEST][274][                SubscriberPeerImpl.getSubscriber()] Subscriber lookup returned [resultCode=OK subscriberId=42,539,077 msisdn=642041010000 imsi=530052041010000]
[2015-06-30 09:56:43,908][  INFO][303][                     TraceInterceptorImpl.invoke()] reserve(SessionReservationRequest [header=[sessionId=5065800000, sessionBeginTimeStamp=Tue Jun 30 09:56:43 UTC 2015, chargingType=REGULAR], trafficType=MFC, imsi=530052041010000, subscriberId=42539077, suppressNumber=f...
    [ Message content over the limit has been removed. ]
...30 09:56:46,422][FINEST][350][            MonitorListenerImpl.handleInvocation()] Condition OK, process monitoring event [group=Session name=CommitFinal]
[2015-06-30 09:56:46,422][  INFO][350][                     TraceInterceptorImpl.invoke()] commit(...): SessionCommitResponse [header=[sessionId=5065800000, sessionBeginTimeStamp=Tue Jun 30 09:56:43 UTC 2015, chargingType=REGULAR], responseCode=OK, reservationId=R42539077T1435658505466@16922396438492905~-8211199363382630824, accounts=[[accountId=42539078, amount=0, unitId=270]]] [109ms]
[2015-06-30 09:56:46,491][FINEST][389][     SubscriberPeerImpl.getSubscriberProfileById()] Reading subscriber profile by ID [subscriberId=42,539,077]
[2015-06-30 09:56:46,593][FINEST][389][                         LifeCycleResolver.touch()] Checking subsriber state transitions [subscriberId=42,539,077]
[2015-06-30 09:56:46,594][FINEST][389][                     CountersFacetResolver.touch()] Checking if there are counters to delete [subscriberId=42,539,077, msisdn=642041010000]
[2015-06-30 09:56:46,594][FINEST][389][                  TariffSubscriberListener.touch()] Checking subscribers tariff state [subscriberId=42,539,077]
[2015-06-30 09:56:46,595][FINEST][389][                SubscriberPeerImpl.getSubscriber()] Subscriber lookup returned [resultCode=OK subscriberId=42,539,077 msisdn=642041010000 imsi=530052041010000]' does not contain 'Zone D|Forwarding|Forwarding'</status>
</test>
<test id="s1-t5" name="Run SMS">
<kw type="kw" name="${ssh_connection_xdr} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:56.425" starttime="20150630 11:56:56.423"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:56.482" starttime="20150630 11:56:56.429"></status>
</kw>
<msg timestamp="20150630 11:56:56.485" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20150630 11:56:56.484" starttime="20150630 11:56:56.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150630 11:56:56.497" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:56:56.885" level="INFO">Read output: Last login: Tue Jun 30 09:56:40 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150630 11:56:56.888" starttime="20150630 11:56:56.495"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:56.889" starttime="20150630 11:56:56.486"></status>
</kw>
<msg timestamp="20150630 11:56:56.893" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20150630 11:56:56.892" starttime="20150630 11:56:56.414"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:56.907" starttime="20150630 11:56:56.905"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:56.911" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20150630 11:56:56.916" starttime="20150630 11:56:56.909"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:56.917" starttime="20150630 11:56:56.896"></status>
</kw>
<msg timestamp="20150630 11:56:56.919" level="INFO">${ssh_connection_xdr} = 10</msg>
<status status="PASS" endtime="20150630 11:56:56.919" starttime="20150630 11:56:56.401"></status>
</kw>
<kw type="kw" name="${ssh_connection_in} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN_SMS_S_LOG_FILE_PATH}${IN_LOG_FILE_NAME}</arg>
<arg>host=${IN-APP HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:56.963" starttime="20150630 11:56:56.961"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:57.036" starttime="20150630 11:56:56.973"></status>
</kw>
<msg timestamp="20150630 11:56:57.041" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20150630 11:56:57.039" starttime="20150630 11:56:56.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150630 11:56:57.054" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:56:57.470" level="INFO">Read output: Last login: Tue Jun 30 09:56:40 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20150630 11:56:57.470" starttime="20150630 11:56:57.051"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:57.471" starttime="20150630 11:56:57.043"></status>
</kw>
<msg timestamp="20150630 11:56:57.473" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20150630 11:56:57.472" starttime="20150630 11:56:56.951"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:57.479" starttime="20150630 11:56:57.478"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:57.481" level="INFO">Starting command 'tail -0f /var/log/inew/core-in/log-mem/inew-in-smsc-submit-00.log &gt; tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20150630 11:56:57.484" starttime="20150630 11:56:57.479"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:57.485" starttime="20150630 11:56:57.474"></status>
</kw>
<msg timestamp="20150630 11:56:57.486" level="INFO">${ssh_connection_in} = 11</msg>
<status status="PASS" endtime="20150630 11:56:57.485" starttime="20150630 11:56:56.938"></status>
</kw>
<kw type="kw" name="${ssh_connection_crce} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE_LOG_FILE_PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:57.506" starttime="20150630 11:56:57.505"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:57.564" starttime="20150630 11:56:57.510"></status>
</kw>
<msg timestamp="20150630 11:56:57.567" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20150630 11:56:57.566" starttime="20150630 11:56:57.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150630 11:56:57.579" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150630 11:56:57.983" level="INFO">Read output: Last login: Tue Jun 30 09:56:41 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20150630 11:56:57.986" starttime="20150630 11:56:57.576"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:57.988" starttime="20150630 11:56:57.568"></status>
</kw>
<msg timestamp="20150630 11:56:57.991" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20150630 11:56:57.990" starttime="20150630 11:56:57.501"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:58.006" starttime="20150630 11:56:58.003"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:56:58.010" level="INFO">Starting command 'tail -0f /var/log/inew/crce/5.3.12/negret-0.log &gt; tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20150630 11:56:58.014" starttime="20150630 11:56:58.007"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:58.015" starttime="20150630 11:56:57.994"></status>
</kw>
<msg timestamp="20150630 11:56:58.020" level="INFO">${ssh_connection_crce} = 12</msg>
<status status="PASS" endtime="20150630 11:56:58.018" starttime="20150630 11:56:57.495"></status>
</kw>
<kw type="kw" name="Reset Subscriber Balance">
<doc>Reset the test subscriber's monetary account balance to initial value.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:58.051" starttime="20150630 11:56:58.039"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:58.052" starttime="20150630 11:56:58.030"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>update acc_subscriber_accounts set balance=10000000 where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:58.396" starttime="20150630 11:56:58.054"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:56:58.402" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150630 11:56:58.403" starttime="20150630 11:56:58.399"></status>
</kw>
<status status="PASS" endtime="20150630 11:56:58.404" starttime="20150630 11:56:58.022"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Sending the SMS...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:56:58.408" level="INFO">Sending the SMS...</msg>
<status status="PASS" endtime="20150630 11:56:58.409" starttime="20150630 11:56:58.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Send SMS *******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:58.413" starttime="20150630 11:56:58.411"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Send SMS">
<doc>Runs a single segment SMS session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG SMS REQ QUEUE}</arg>
<arg>${AMQ-SIG SMS RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-subscribers.csv</arg>
</arguments>
<msg timestamp="20150630 11:56:58.434" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-subscribers.csv</msg>
<status status="PASS" endtime="20150630 11:56:58.433" starttime="20150630 11:56:58.431"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-fleXml.csv</arg>
</arguments>
<msg timestamp="20150630 11:56:58.438" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-fleXml.csv</msg>
<status status="PASS" endtime="20150630 11:56:58.437" starttime="20150630 11:56:58.435"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-workspace.ini</arg>
</arguments>
<msg timestamp="20150630 11:56:58.443" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-workspace.ini</msg>
<status status="PASS" endtime="20150630 11:56:58.442" starttime="20150630 11:56:58.440"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/sms.cgs</arg>
</arguments>
<msg timestamp="20150630 11:56:58.447" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/sms.cgs</msg>
<status status="PASS" endtime="20150630 11:56:58.446" starttime="20150630 11:56:58.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:58.450" starttime="20150630 11:56:58.448"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20150630 11:56:58.456" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:58.457" starttime="20150630 11:56:58.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:58.461" starttime="20150630 11:56:58.459"></status>
</kw>
<kw type="kw" name="${smsc_address} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${smsc_address}'=='None'</arg>
<arg>Set Variable</arg>
<arg>${msc_address}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${smsc_address}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${msc_address}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:58.473" starttime="20150630 11:56:58.470"></status>
</kw>
<msg timestamp="20150630 11:56:58.475" level="INFO">${smsc_address} = 64278</msg>
<status status="PASS" endtime="20150630 11:56:58.474" starttime="20150630 11:56:58.462"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;smscAddress;smsDestinationMsisdn;smsUserDataMessagePart;smsUserDataLength;smsHeaderPresentInUserData;smsDataCodingScheme;smsUserDataDecoded\n</arg>
</arguments>
<msg timestamp="20150630 11:56:58.480" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:58.481" starttime="20150630 11:56:58.476"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>SMS parameters;${msc_address};${smsc_address};${cd_msisdn};${sms_user_data_message_part};${sms_user_data_length};${sms_header_present_in_user_data};${sms_data_coding_scheme};${sms_user_data_decoded}\n</arg>
</arguments>
<msg timestamp="20150630 11:56:58.489" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:58.490" starttime="20150630 11:56:58.482"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:58.493" starttime="20150630 11:56:58.491"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150630 11:56:58.499" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:58.500" starttime="20150630 11:56:58.495"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;MAP3_SMS;${queue_sms_req};${queue_sms_res};6;1;1</arg>
</arguments>
<msg timestamp="20150630 11:56:58.506" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:56:58.507" starttime="20150630 11:56:58.501"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150630 11:56:58.511" starttime="20150630 11:56:58.509"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150630 11:56:58.528" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/sms.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/sms-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150630 11:57:07.667" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20150630 11:57:07.664" starttime="20150630 11:56:58.512"></status>
</kw>
<msg timestamp="20150630 11:57:07.671" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20150630 11:57:07.669" starttime="20150630 11:56:58.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150630 11:57:12.676" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150630 11:57:12.678" starttime="20150630 11:57:07.673"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:57:12.683" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20150630 11:57:12.684" starttime="20150630 11:57:12.680"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_in}</arg>
<arg>SMS_${TAILED_IN_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:57:12.705" starttime="20150630 11:57:12.702"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150630 11:57:12.713" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150630 11:57:12.712" starttime="20150630 11:57:12.706"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150630 11:57:12.719" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150630 11:57:12.720" starttime="20150630 11:57:12.715"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:57:12.732" starttime="20150630 11:57:12.729"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150630 11:57:12.735" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150630 11:57:12.785" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:57:12.787" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150630 11:57:12.786" starttime="20150630 11:57:12.733"></status>
</kw>
<kw type="kw" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps U ${user} --no-heading | grep ${command_name}</arg>
</arguments>
<msg timestamp="20150630 11:57:12.791" level="INFO">Executing command 'ps U qa_automation --no-heading | grep tail'.</msg>
<msg timestamp="20150630 11:57:12.892" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:57:12.894" level="INFO">${processes_string} =   720 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log
  738 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log
...</msg>
<status status="PASS" endtime="20150630 11:57:12.893" starttime="20150630 11:57:12.789"></status>
</kw>
<kw type="kw" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150630 11:57:12.900" level="INFO">@{processes_list} = [   720 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log |   738 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00....</msg>
<status status="PASS" endtime="20150630 11:57:12.898" starttime="20150630 11:57:12.895"></status>
</kw>
<kw type="for" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" name="${process} =   720 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:12.906" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:12.905" starttime="20150630 11:57:12.902"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:12.910" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:12.971" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:12.972" starttime="20150630 11:57:12.907"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:12.973" starttime="20150630 11:57:12.901"></status>
</kw>
<kw type="foritem" name="${process} =   738 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:12.978" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:12.977" starttime="20150630 11:57:12.975"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:12.982" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:13.051" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:13.052" starttime="20150630 11:57:12.979"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:13.054" starttime="20150630 11:57:12.974"></status>
</kw>
<kw type="foritem" name="${process} =  1064 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.060" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:13.059" starttime="20150630 11:57:13.056"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.064" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:13.133" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:13.134" starttime="20150630 11:57:13.061"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:13.135" starttime="20150630 11:57:13.055"></status>
</kw>
<kw type="foritem" name="${process} =  1079 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.140" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:13.139" starttime="20150630 11:57:13.137"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.144" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:13.213" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:13.214" starttime="20150630 11:57:13.142"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:13.215" starttime="20150630 11:57:13.136"></status>
</kw>
<kw type="foritem" name="${process} =  1482 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.220" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:13.220" starttime="20150630 11:57:13.217"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.224" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:13.296" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:13.297" starttime="20150630 11:57:13.222"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:13.298" starttime="20150630 11:57:13.216"></status>
</kw>
<kw type="foritem" name="${process} =  1500 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.304" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:13.303" starttime="20150630 11:57:13.300"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.307" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:13.378" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:13.379" starttime="20150630 11:57:13.305"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:13.380" starttime="20150630 11:57:13.299"></status>
</kw>
<kw type="foritem" name="${process} =  2079 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor8.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.386" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:13.384" starttime="20150630 11:57:13.382"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.390" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:13.460" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:13.461" starttime="20150630 11:57:13.387"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:13.462" starttime="20150630 11:57:13.380"></status>
</kw>
<kw type="foritem" name="${process} =  2112 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.467" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:13.466" starttime="20150630 11:57:13.463"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.470" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:13.540" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:13.541" starttime="20150630 11:57:13.468"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:13.542" starttime="20150630 11:57:13.462"></status>
</kw>
<kw type="foritem" name="${process} =  2552 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-smsc-submit-00.log &gt; tmpfilemonitor11.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.547" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:13.546" starttime="20150630 11:57:13.543"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.551" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:13.621" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:13.622" starttime="20150630 11:57:13.548"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:13.623" starttime="20150630 11:57:13.542"></status>
</kw>
<kw type="foritem" name="${process} =  2567 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-smsc-submit-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.628" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:13.627" starttime="20150630 11:57:13.624"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.631" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:13.704" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:13.705" starttime="20150630 11:57:13.629"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:13.706" starttime="20150630 11:57:13.623"></status>
</kw>
<kw type="foritem" name="${process} =  3676 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.711" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:13.710" starttime="20150630 11:57:13.707"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.714" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:13.783" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:13.784" starttime="20150630 11:57:13.712"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:13.785" starttime="20150630 11:57:13.706"></status>
</kw>
<kw type="foritem" name="${process} =  3691 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.790" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:13.789" starttime="20150630 11:57:13.786"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.793" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:13.864" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:13.865" starttime="20150630 11:57:13.791"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:13.866" starttime="20150630 11:57:13.785"></status>
</kw>
<kw type="foritem" name="${process} =  6285 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.871" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:13.870" starttime="20150630 11:57:13.867"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.874" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:13.947" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:13.948" starttime="20150630 11:57:13.872"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:13.949" starttime="20150630 11:57:13.866"></status>
</kw>
<kw type="foritem" name="${process} =  6300 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.955" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:13.954" starttime="20150630 11:57:13.951"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:13.958" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:14.033" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:14.034" starttime="20150630 11:57:13.956"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:14.036" starttime="20150630 11:57:13.950"></status>
</kw>
<kw type="foritem" name="${process} =  6712 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.043" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:14.042" starttime="20150630 11:57:14.039"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.046" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:14.121" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:14.123" starttime="20150630 11:57:14.044"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:14.124" starttime="20150630 11:57:14.038"></status>
</kw>
<kw type="foritem" name="${process} =  6727 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.129" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:14.128" starttime="20150630 11:57:14.125"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.133" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:14.201" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:14.202" starttime="20150630 11:57:14.130"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:14.202" starttime="20150630 11:57:14.124"></status>
</kw>
<kw type="foritem" name="${process} =  6887 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.205" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:14.205" starttime="20150630 11:57:14.203"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.207" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:14.286" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:14.287" starttime="20150630 11:57:14.206"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:14.288" starttime="20150630 11:57:14.203"></status>
</kw>
<kw type="foritem" name="${process} =  6902 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.293" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:14.292" starttime="20150630 11:57:14.290"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.295" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:14.372" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:14.372" starttime="20150630 11:57:14.294"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:14.373" starttime="20150630 11:57:14.289"></status>
</kw>
<kw type="foritem" name="${process} =  7258 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.376" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:14.375" starttime="20150630 11:57:14.374"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.379" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:14.456" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:14.457" starttime="20150630 11:57:14.376"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:14.458" starttime="20150630 11:57:14.373"></status>
</kw>
<kw type="foritem" name="${process} =  7273 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.463" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:14.462" starttime="20150630 11:57:14.459"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.467" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:14.535" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:14.536" starttime="20150630 11:57:14.464"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:14.537" starttime="20150630 11:57:14.458"></status>
</kw>
<kw type="foritem" name="${process} =  7746 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor8.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.542" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:14.541" starttime="20150630 11:57:14.538"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.546" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:14.620" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:14.621" starttime="20150630 11:57:14.543"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:14.622" starttime="20150630 11:57:14.537"></status>
</kw>
<kw type="foritem" name="${process} =  7761 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.627" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:14.627" starttime="20150630 11:57:14.624"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.631" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:14.704" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:14.705" starttime="20150630 11:57:14.629"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:14.705" starttime="20150630 11:57:14.623"></status>
</kw>
<kw type="foritem" name="${process} =  8260 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-smsc-submit-00.log &gt; tmpfilemonitor11.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.708" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:14.707" starttime="20150630 11:57:14.706"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.731" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:14.790" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:14.791" starttime="20150630 11:57:14.708"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:14.791" starttime="20150630 11:57:14.706"></status>
</kw>
<kw type="foritem" name="${process} =  8275 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-smsc-submit-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.793" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:14.793" starttime="20150630 11:57:14.792"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.795" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:14.872" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:14.872" starttime="20150630 11:57:14.794"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:14.873" starttime="20150630 11:57:14.791"></status>
</kw>
<kw type="foritem" name="${process} =  8304 ?        Ss     0:00 bash -c ps U qa_automation --no-heading | grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.875" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:14.875" starttime="20150630 11:57:14.874"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.877" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:14.955" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:14.956" starttime="20150630 11:57:14.876"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:14.957" starttime="20150630 11:57:14.873"></status>
</kw>
<kw type="foritem" name="${process} =  8320 ?        S      0:00 grep tail">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.962" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:14.961" starttime="20150630 11:57:14.958"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:14.965" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:15.039" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:15.041" starttime="20150630 11:57:14.963"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:15.042" starttime="20150630 11:57:14.957"></status>
</kw>
<kw type="foritem" name="${process} =  9866 ?        Ss     0:00 bash -c tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:15.049" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:15.048" starttime="20150630 11:57:15.045"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:15.053" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:15.123" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:15.124" starttime="20150630 11:57:15.050"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:15.124" starttime="20150630 11:57:15.044"></status>
</kw>
<kw type="foritem" name="${process} =  9881 ?        S      0:00 tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<msg timestamp="20150630 11:57:15.130" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150630 11:57:15.129" starttime="20150630 11:57:15.126"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150630 11:57:15.133" level="INFO">Executing command 'kill -9 '.</msg>
<msg timestamp="20150630 11:57:15.205" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150630 11:57:15.206" starttime="20150630 11:57:15.131"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:15.207" starttime="20150630 11:57:15.125"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:15.208" starttime="20150630 11:57:12.900"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:15.209" starttime="20150630 11:57:12.722"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:57:15.214" level="INFO">Starting command 'cat tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20150630 11:57:15.248" starttime="20150630 11:57:15.212"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150630 11:57:15.251" level="INFO">Reading output of command 'cat tmpfilemonitor11.log'.</msg>
<msg timestamp="20150630 11:57:15.299" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150630 11:57:15.301" level="INFO">${stdout_string} = [2015-06-30 09:56:59,888][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSig1], SID [3], AdditionalInfo [queue://TNZ_USSDSMS_RES];CorrelationId...</msg>
<status status="PASS" endtime="20150630 11:57:15.300" starttime="20150630 11:57:15.250"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150630 11:57:15.305" level="INFO">Executing command 'rm tmpfilemonitor11.log'.</msg>
<msg timestamp="20150630 11:57:15.379" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150630 11:57:15.380" starttime="20150630 11:57:15.303"></status>
</kw>
<msg timestamp="20150630 11:57:15.383" level="INFO">${tailed_text} = [2015-06-30 09:56:59,888][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSig1], SID [3], AdditionalInfo [queue://TNZ_USSDSMS_RES];CorrelationId...</msg>
<status status="PASS" endtime="20150630 11:57:15.381" starttime="20150630 11:57:12.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150630 11:57:15.397" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/SMS_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/SMS_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150630 11:57:15.398" starttime="20150630 11:57:15.392"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:15.399" starttime="20150630 11:57:15.384"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150630 11:57:15.411" starttime="20150630 11:57:15.409"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:57:15.415" starttime="20150630 11:57:15.413"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:15.419" starttime="20150630 11:57:15.402"></status>
</kw>
<msg timestamp="20150630 11:57:15.423" level="INFO">${tailed_text} = [2015-06-30 09:56:59,888][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSig1], SID [3], AdditionalInfo [queue://TNZ_USSDSMS_RES];CorrelationId...</msg>
<status status="PASS" endtime="20150630 11:57:15.421" starttime="20150630 11:57:12.687"></status>
</kw>
<kw type="kw" name="Check SMS IN log">
<doc>Checks the tailed log file created during MTC test case</doc>
<arguments>
<arg>SMS_${TAILED_IN_LOG_FILE}</arg>
<arg>${rc}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150630 11:57:15.435" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/SMS_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/SMS_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<msg timestamp="20150630 11:57:15.438" level="INFO">${temp} = [2015-06-30 09:56:59,888][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSig1], SID [3], AdditionalInfo [queue://TNZ_USSDSMS_RES];CorrelationId...</msg>
<status status="PASS" endtime="20150630 11:57:15.437" starttime="20150630 11:57:15.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rel_c}</arg>
<arg>0</arg>
<arg>msg=CG session failed - check SMS IN log</arg>
</arguments>
<msg timestamp="20150630 11:57:15.442" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20150630 11:57:15.445" level="FAIL">CG session failed - check SMS IN log: 1 != 0</msg>
<status status="FAIL" endtime="20150630 11:57:15.446" starttime="20150630 11:57:15.439"></status>
</kw>
<status status="FAIL" endtime="20150630 11:57:15.448" starttime="20150630 11:57:15.425"></status>
</kw>
<doc>Reset the test subscriber's monetary account balance to initial value.

Arguments:
subscriber
Returns:
Fails:

=========================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MFC_involved</tag>
<tag>MOC_involved</tag>
<tag>MTC_involved</tag>
<tag>SMS_involved</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20150630 11:57:15.450" starttime="20150630 11:56:56.372">CG session failed - check SMS IN log: 1 != 0</status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Disconnect From Database</arg>
</arguments>
<status status="PASS" endtime="20150630 11:57:15.480" starttime="20150630 11:57:15.478"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Cleaning up</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150630 11:57:15.483" level="INFO">Cleaning up</msg>
<status status="PASS" endtime="20150630 11:57:15.484" starttime="20150630 11:57:15.481"></status>
</kw>
<kw type="kw" name="OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>mv *ssh_tail*.log log/</arg>
</arguments>
<msg timestamp="20150630 11:57:15.495" level="INFO">Running command 'mv *ssh_tail*.log log/ 2&gt;&amp;1'</msg>
<status status="PASS" endtime="20150630 11:57:15.501" starttime="20150630 11:57:15.485"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150630 11:57:15.509" starttime="20150630 11:57:15.503"></status>
</kw>
<status status="PASS" endtime="20150630 11:57:15.512" starttime="20150630 11:57:15.472"></status>
</kw>
<doc>This suite tests the set of "standard" calls: MOC, MTC, MFC and SMS.
It uses standardised library keywords encapsulating Call Generator's functionality. Tests try to
check other components (at the moment IN, CRCE and XDR) for evidences of calls - in log files and in DB.

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20150630 11:57:15.513" starttime="20150630 11:53:17.079"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="4">Critical Tests</stat>
<stat pass="1" fail="4">All Tests</stat>
</total>
<tag>
<stat pass="1" info="" doc="" combined="" fail="4" links="">matko.sanseovic</stat>
<stat pass="1" info="" doc="" combined="" fail="4" links="">MFC_involved</stat>
<stat pass="1" info="" doc="" combined="" fail="4" links="">MOC_involved</stat>
<stat pass="1" info="" doc="" combined="" fail="4" links="">MTC_involved</stat>
<stat pass="1" info="" doc="" combined="" fail="4" links="">SMS_involved</stat>
<stat pass="1" info="" doc="" combined="" fail="4" links="">TNZ_supported</stat>
</tag>
<suite>
<stat pass="1" id="s1" fail="4" name="Regression-Robot-Suite">Regression-Robot-Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
