<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20150709 15:43:14.277">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/regression-robot-suite.txt" id="s1" name="Regression-Robot-Suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20150709 15:43:16.320" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20150709 15:43:16.326" level="INFO">${date} = Thu Jul  9 15:43:16 CEST 2015</msg>
<status status="PASS" endtime="20150709 15:43:16.325" starttime="20150709 15:43:16.307"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:43:16.331" level="INFO">Date and time: Thu Jul  9 15:43:16 CEST 2015</msg>
<status status="PASS" endtime="20150709 15:43:16.332" starttime="20150709 15:43:16.328"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:43:16.336" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20150709 15:43:16.338" starttime="20150709 15:43:16.334"></status>
</kw>
<kw type="kw" name="${in_version} = Check IN Version">
<doc>Checks the version of the running service</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:16.557" starttime="20150709 15:43:16.352"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
</arguments>
<msg timestamp="20150709 15:43:16.570" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:43:17.812" level="INFO">Read output: Last login: Thu Jul  9 13:32:13 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$[m</msg>
<msg timestamp="20150709 15:43:17.820" level="INFO">${output_login} = Last login: Thu Jul  9 13:32:13 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150709 15:43:17.816" starttime="20150709 15:43:16.563"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20150709 15:43:17.831" level="INFO">Last login: Thu Jul  9 13:32:13 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150709 15:43:17.833" starttime="20150709 15:43:17.825"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-corein-services status</arg>
</arguments>
<msg timestamp="20150709 15:43:17.842" level="INFO">Executing command 'sudo service inew-mvno-corein-services status'.</msg>
<msg timestamp="20150709 15:43:20.644" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:43:20.651" level="INFO">${output} =  inew-mvna-corein-router-mfc-3.0.1
I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 2349 
 inew-mvna-corein-router-moc-3.0.1
I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-1...</msg>
<status status="PASS" endtime="20150709 15:43:20.647" starttime="20150709 15:43:17.838"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20150709 15:43:20.664" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 11348 </msg>
<status status="PASS" endtime="20150709 15:43:20.663" starttime="20150709 15:43:20.656"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20150709 15:43:20.677" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20150709 15:43:20.675" starttime="20150709 15:43:20.669"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:43:20.693" starttime="20150709 15:43:20.682"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN version: ${version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:43:20.704" level="INFO">IN version:  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20150709 15:43:20.706" starttime="20150709 15:43:20.698"></status>
</kw>
<msg timestamp="20150709 15:43:20.713" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20150709 15:43:20.711" starttime="20150709 15:43:16.339"></status>
</kw>
<kw type="kw" name="${xdr_version} = Check XDR Version">
<doc>Checks the version of the running service</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:20.812" starttime="20150709 15:43:20.745"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20150709 15:43:20.824" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:43:22.134" level="INFO">Read output: Last login: Thu Jul  9 13:32:17 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$[m</msg>
<msg timestamp="20150709 15:43:22.145" level="INFO">${output_login} = Last login: Thu Jul  9 13:32:17 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150709 15:43:22.142" starttime="20150709 15:43:20.817"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20150709 15:43:22.155" level="INFO">Last login: Thu Jul  9 13:32:17 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150709 15:43:22.157" starttime="20150709 15:43:22.150"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-xdr status</arg>
</arguments>
<msg timestamp="20150709 15:43:22.166" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20150709 15:43:22.556" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:43:22.558" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 4192 </msg>
<status status="PASS" endtime="20150709 15:43:22.557" starttime="20150709 15:43:22.161"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20150709 15:43:22.567" level="INFO">${version_r} =  5.3.1.25016 is running PID: 4192 </msg>
<status status="PASS" endtime="20150709 15:43:22.566" starttime="20150709 15:43:22.560"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20150709 15:43:22.580" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20150709 15:43:22.579" starttime="20150709 15:43:22.573"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:43:22.591" starttime="20150709 15:43:22.585"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR version: ${version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:43:22.601" level="INFO">XDR version:  5.3.1.25016 </msg>
<status status="PASS" endtime="20150709 15:43:22.604" starttime="20150709 15:43:22.596"></status>
</kw>
<msg timestamp="20150709 15:43:22.610" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20150709 15:43:22.608" starttime="20150709 15:43:20.718"></status>
</kw>
<kw type="kw" name="${crce_version} = Check CRCE Version">
<doc>Checks the version of the running service</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${CRCE HOST}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:22.695" starttime="20150709 15:43:22.637"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
</arguments>
<msg timestamp="20150709 15:43:22.705" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:43:24.060" level="INFO">Read output: Last login: Thu Jul  9 13:32:19 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$[m</msg>
<msg timestamp="20150709 15:43:24.066" level="INFO">${output_login} = Last login: Thu Jul  9 13:32:19 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150709 15:43:24.063" starttime="20150709 15:43:22.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20150709 15:43:24.075" level="INFO">Last login: Thu Jul  9 13:32:19 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20150709 15:43:24.076" starttime="20150709 15:43:24.070"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-crce status</arg>
</arguments>
<msg timestamp="20150709 15:43:24.083" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20150709 15:43:24.296" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:43:24.300" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.14.26930
Negret Rating &amp; Charging Engine 5.3.14.26930 is running (PID:25709, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20150709 15:43:24.299" starttime="20150709 15:43:24.080"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20150709 15:43:24.312" level="INFO">${version_r} =  5.3.14.26930 is running (PID:25709, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20150709 15:43:24.311" starttime="20150709 15:43:24.306"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20150709 15:43:24.323" level="INFO">${version} =  5.3.14.26930 </msg>
<status status="PASS" endtime="20150709 15:43:24.321" starttime="20150709 15:43:24.316"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:43:24.334" starttime="20150709 15:43:24.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE version: ${version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:43:24.342" level="INFO">CRCE version:  5.3.14.26930 </msg>
<status status="PASS" endtime="20150709 15:43:24.344" starttime="20150709 15:43:24.337"></status>
</kw>
<msg timestamp="20150709 15:43:24.350" level="INFO">${crce_version} =  5.3.14.26930 </msg>
<status status="PASS" endtime="20150709 15:43:24.348" starttime="20150709 15:43:22.614"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20150709 15:43:24.359" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20150709 15:43:24.358" starttime="20150709 15:43:24.354"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20150709 15:43:24.408" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20150709 15:43:24.409" starttime="20150709 15:43:24.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20150709 15:43:24.417" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20150709 15:43:24.419" starttime="20150709 15:43:24.413"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20150709 15:43:24.427" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20150709 15:43:24.428" starttime="20150709 15:43:24.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20150709 15:43:24.436" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20150709 15:43:24.437" starttime="20150709 15:43:24.431"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20150709 15:43:24.445" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20150709 15:43:24.446" starttime="20150709 15:43:24.440"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20150709 15:43:24.450" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20150709 15:43:24.451" starttime="20150709 15:43:24.448"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20150709 15:43:24.454" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20150709 15:43:24.455" starttime="20150709 15:43:24.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20150709 15:43:24.458" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20150709 15:43:24.459" starttime="20150709 15:43:24.456"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20150709 15:43:24.463" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20150709 15:43:24.463" starttime="20150709 15:43:24.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20150709 15:43:24.467" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20150709 15:43:24.468" starttime="20150709 15:43:24.465"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20150709 15:43:24.486" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:43:24.487" starttime="20150709 15:43:24.483"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:24.488" starttime="20150709 15:43:24.480"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20150709 15:43:24.494" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:43:24.495" starttime="20150709 15:43:24.492"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:24.496" starttime="20150709 15:43:24.490"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20150709 15:43:24.573" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:43:24.575" starttime="20150709 15:43:24.566"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:24.584" starttime="20150709 15:43:24.498"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:24.587" starttime="20150709 15:43:24.470"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20150709 15:43:24.614" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20150709 15:43:24.616" starttime="20150709 15:43:24.597"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:24.624" starttime="20150709 15:43:24.619"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:24.633" starttime="20150709 15:43:24.627"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:24.641" starttime="20150709 15:43:24.636"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:24.649" starttime="20150709 15:43:24.645"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:24.656" starttime="20150709 15:43:24.652"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:24.665" starttime="20150709 15:43:24.659"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:24.673" starttime="20150709 15:43:24.668"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:24.681" starttime="20150709 15:43:24.676"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:24.690" starttime="20150709 15:43:24.684"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:24.699" starttime="20150709 15:43:24.693"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:24.707" starttime="20150709 15:43:24.702"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:24.714" starttime="20150709 15:43:24.709"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:43:24.725" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20150709 15:43:43.002" level="INFO">15:43:24,954 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/ext] for external libraries
15:43:24,954 INFO  [DefaultSoapUICore] Creating new settings at [/home/msanseovic/soapui-settings.xml]
15:43:26,969 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
15:43:26,989 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.113.125]
15:43:26,989 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
15:43:26,990 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
15:43:26,990 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [1]
15:43:26,990 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [530052041010000]
15:43:26,990 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [642041010000]
15:43:26,990 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
15:43:26,990 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
15:43:26,991 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
15:43:26,991 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
15:43:26,991 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
15:43:26,991 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
15:43:27,001 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
15:43:27,008 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
15:43:27,465 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
15:43:27,601 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
15:43:27,912 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
15:43:27,912 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
15:43:32,693 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
15:43:32,701 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
15:43:32,893 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
15:43:32,893 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
15:43:32,893 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
15:43:32,894 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
15:43:32,987 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
15:43:33,275 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
15:43:33,303 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
15:43:33,305 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
15:43:33,307 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
15:43:33,307 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
15:43:36,982 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
15:43:36,982 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
15:43:36,991 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
15:43:36,991 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
15:43:36,991 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
15:43:36,991 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
15:43:37,066 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
15:43:37,072 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
15:43:37,123 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
15:43:37,127 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
15:43:37,129 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
15:43:37,129 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
15:43:37,237 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
15:43:37,238 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
15:43:37,244 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
15:43:37,244 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
15:43:37,244 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
15:43:37,244 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
15:43:37,317 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
15:43:37,328 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
15:43:37,372 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
15:43:37,375 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
15:43:37,377 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
15:43:37,378 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
15:43:39,387 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
15:43:39,387 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
15:43:39,396 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
15:43:39,396 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
15:43:39,396 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
15:43:39,396 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
15:43:39,471 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
15:43:39,476 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
15:43:39,521 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
15:43:39,525 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
15:43:39,527 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
15:43:39,527 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
15:43:40,350 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
15:43:40,351 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
15:43:40,366 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
15:43:40,366 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
15:43:40,366 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
15:43:40,366 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
15:43:40,435 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
15:43:40,457 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
15:43:40,504 INFO  [SoapUITestCaseRunner] running step [setBalance]
15:43:40,507 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
15:43:40,509 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
15:43:40,509 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
15:43:42,787 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
15:43:42,787 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
15:43:42,800 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
15:43:42,800 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
15:43:42,800 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
15:43:42,800 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
15:43:42,870 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
15:43:42,881 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
15:43:42,925 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
15:43:42,965 INFO  [SoapUITestCaseRunner] running step [finish_successful]
15:43:42,998 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
15:43:42,999 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 15951ms, status: FINISHED
15:43:42,999 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 15951ms</msg>
<status status="PASS" endtime="20150709 15:43:43.005" starttime="20150709 15:43:24.722"></status>
</kw>
<msg timestamp="20150709 15:43:43.009" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150709 15:43:43.010" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20150709 15:43:43.008" starttime="20150709 15:43:24.717"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20150709 15:43:43.030" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20150709 15:43:43.029" starttime="20150709 15:43:43.026"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150709 15:43:43.035" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20150709 15:43:43.034" starttime="20150709 15:43:43.032"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150709 15:43:43.039" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20150709 15:43:43.039" starttime="20150709 15:43:43.036"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20150709 15:43:43.047" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20150709 15:43:43.054" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20150709 15:43:43.055" starttime="20150709 15:43:43.044"></status>
</kw>
<msg timestamp="20150709 15:43:43.056" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150709 15:43:43.057" level="INFO">${return_log_entry} = 2015-07-09 15:43:42,998 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150709 15:43:43.056" starttime="20150709 15:43:43.041"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:43.074" starttime="20150709 15:43:43.072"></status>
</kw>
<msg timestamp="20150709 15:43:43.076" level="INFO">${return_log_entry} = 2015-07-09 15:43:42,998 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150709 15:43:43.076" starttime="20150709 15:43:43.059"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:43.086" starttime="20150709 15:43:43.084"></status>
</kw>
<msg timestamp="20150709 15:43:43.088" level="INFO">${return_log_entry} = 2015-07-09 15:43:42,998 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150709 15:43:43.087" starttime="20150709 15:43:43.078"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:43.098" starttime="20150709 15:43:43.096"></status>
</kw>
<msg timestamp="20150709 15:43:43.100" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150709 15:43:43.099" starttime="20150709 15:43:43.090"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:43.112" starttime="20150709 15:43:43.110"></status>
</kw>
<msg timestamp="20150709 15:43:43.114" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150709 15:43:43.113" starttime="20150709 15:43:43.101"></status>
</kw>
<msg timestamp="20150709 15:43:43.116" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150709 15:43:43.116" starttime="20150709 15:43:43.013"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:43.131" starttime="20150709 15:43:43.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:43.135" starttime="20150709 15:43:43.133"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:43.138" starttime="20150709 15:43:43.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20150709 15:43:43.154" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20150709 15:43:43.155" starttime="20150709 15:43:43.147"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:43.156" starttime="20150709 15:43:43.145"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:43.156" starttime="20150709 15:43:43.139"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:43.158" starttime="20150709 15:43:43.118"></status>
</kw>
<msg timestamp="20150709 15:43:43.160" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20150709 15:43:43.159" starttime="20150709 15:43:24.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20150709 15:43:43.164" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150709 15:43:43.165" starttime="20150709 15:43:43.162"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:43:43.168" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20150709 15:43:43.169" starttime="20150709 15:43:43.166"></status>
</kw>
<kw type="kw" name="${week} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date +%V</arg>
</arguments>
<msg timestamp="20150709 15:43:43.177" level="INFO">Running command 'date +%V 2&gt;&amp;1'</msg>
<msg timestamp="20150709 15:43:43.184" level="INFO">${week} = 28</msg>
<status status="PASS" endtime="20150709 15:43:43.183" starttime="20150709 15:43:43.171"></status>
</kw>
<kw type="kw" name="${year} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date +%Y</arg>
</arguments>
<msg timestamp="20150709 15:43:43.198" level="INFO">Running command 'date +%Y 2&gt;&amp;1'</msg>
<msg timestamp="20150709 15:43:43.204" level="INFO">${year} = 2015</msg>
<status status="PASS" endtime="20150709 15:43:43.202" starttime="20150709 15:43:43.188"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${YYYYwWW}</arg>
<arg>${year}w${week}</arg>
</arguments>
<msg timestamp="20150709 15:43:43.252" level="INFO">${YYYYwWW} = 2015w28</msg>
<status status="PASS" endtime="20150709 15:43:43.253" starttime="20150709 15:43:43.207"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:43.256" starttime="20150709 15:43:16.295"></status>
</kw>
<test id="s1-t1" name="Run MOC Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Connect with XDR and start the log monitoring</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:43.291" starttime="20150709 15:43:43.287"></status>
</kw>
<kw type="kw" name="${ssh_connection_xdr} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:43.354" starttime="20150709 15:43:43.352"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:43.417" starttime="20150709 15:43:43.361"></status>
</kw>
<msg timestamp="20150709 15:43:43.423" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150709 15:43:43.421" starttime="20150709 15:43:43.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:43:43.450" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:43:43.945" level="INFO">Read output: Last login: Thu Jul  9 13:43:21 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:43:43.955" starttime="20150709 15:43:43.444"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:43.957" starttime="20150709 15:43:43.426"></status>
</kw>
<msg timestamp="20150709 15:43:43.965" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20150709 15:43:43.961" starttime="20150709 15:43:43.338"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:43.997" starttime="20150709 15:43:43.992"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:43:44.006" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20150709 15:43:44.011" starttime="20150709 15:43:44.000"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:44.014" starttime="20150709 15:43:43.970"></status>
</kw>
<msg timestamp="20150709 15:43:44.020" level="INFO">${ssh_connection_xdr} = 4</msg>
<status status="PASS" endtime="20150709 15:43:44.018" starttime="20150709 15:43:43.324"></status>
</kw>
<kw type="kw" name="${ssh_connection_in} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN MOC LOG FILE PATH}${IN_LOG_FILE_NAME}</arg>
<arg>host=${IN-APP HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:44.093" starttime="20150709 15:43:44.091"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:44.159" starttime="20150709 15:43:44.100"></status>
</kw>
<msg timestamp="20150709 15:43:44.162" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150709 15:43:44.161" starttime="20150709 15:43:44.094"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:43:44.171" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:43:44.751" level="INFO">Read output: Last login: Thu Jul  9 13:43:16 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:43:44.753" starttime="20150709 15:43:44.169"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:44.754" starttime="20150709 15:43:44.163"></status>
</kw>
<msg timestamp="20150709 15:43:44.757" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20150709 15:43:44.756" starttime="20150709 15:43:44.079"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:44.771" starttime="20150709 15:43:44.769"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:43:44.775" level="INFO">Starting command 'tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20150709 15:43:44.779" starttime="20150709 15:43:44.772"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:44.780" starttime="20150709 15:43:44.759"></status>
</kw>
<msg timestamp="20150709 15:43:44.782" level="INFO">${ssh_connection_in} = 5</msg>
<status status="PASS" endtime="20150709 15:43:44.781" starttime="20150709 15:43:44.055"></status>
</kw>
<kw type="kw" name="${ssh_connection_crce} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE LOG FILE PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:44.825" starttime="20150709 15:43:44.822"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:44.893" starttime="20150709 15:43:44.832"></status>
</kw>
<msg timestamp="20150709 15:43:44.895" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20150709 15:43:44.894" starttime="20150709 15:43:44.826"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:43:44.904" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:43:45.592" level="INFO">Read output: Last login: Thu Jul  9 13:43:23 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:43:45.601" starttime="20150709 15:43:44.902"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:45.608" starttime="20150709 15:43:44.897"></status>
</kw>
<msg timestamp="20150709 15:43:45.612" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20150709 15:43:45.611" starttime="20150709 15:43:44.810"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:45.627" starttime="20150709 15:43:45.625"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:43:45.631" level="INFO">Starting command 'tail -0f /var/log/inew/crce/5.3.14/negret-0.log &gt; tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20150709 15:43:45.637" starttime="20150709 15:43:45.628"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:45.639" starttime="20150709 15:43:45.616"></status>
</kw>
<msg timestamp="20150709 15:43:45.645" level="INFO">${ssh_connection_crce} = 6</msg>
<status status="PASS" endtime="20150709 15:43:45.642" starttime="20150709 15:43:44.796"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MOC *******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:45.651" starttime="20150709 15:43:45.648"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:43:45.658" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20150709 15:43:45.660" starttime="20150709 15:43:45.654"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20150709 15:43:45.739" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20150709 15:43:45.738" starttime="20150709 15:43:45.733"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20150709 15:43:45.748" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20150709 15:43:45.747" starttime="20150709 15:43:45.742"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20150709 15:43:45.757" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20150709 15:43:45.755" starttime="20150709 15:43:45.751"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20150709 15:43:45.765" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20150709 15:43:45.764" starttime="20150709 15:43:45.760"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:45.772" starttime="20150709 15:43:45.768"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20150709 15:43:45.783" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:43:45.785" starttime="20150709 15:43:45.774"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:45.791" starttime="20150709 15:43:45.787"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20150709 15:43:45.800" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:43:45.802" starttime="20150709 15:43:45.793"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150709 15:43:45.813" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:43:45.814" starttime="20150709 15:43:45.804"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:45.820" starttime="20150709 15:43:45.817"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150709 15:43:45.826" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:43:45.826" starttime="20150709 15:43:45.823"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20150709 15:43:45.832" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:43:45.833" starttime="20150709 15:43:45.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:45.836" starttime="20150709 15:43:45.834"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150709 15:43:45.845" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150709 15:43:53.023" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:43:53.020" starttime="20150709 15:43:45.837"></status>
</kw>
<msg timestamp="20150709 15:43:53.030" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:43:53.027" starttime="20150709 15:43:45.702"></status>
</kw>
<msg timestamp="20150709 15:43:53.035" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:43:53.033" starttime="20150709 15:43:45.667"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150709 15:43:58.045" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150709 15:43:58.048" starttime="20150709 15:43:53.038"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:43:58.056" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20150709 15:43:58.058" starttime="20150709 15:43:58.052"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_in}</arg>
<arg>MOC_${TAILED_IN_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.107" starttime="20150709 15:43:58.102"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:43:58.119" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:43:58.118" starttime="20150709 15:43:58.110"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:43:58.130" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:43:58.132" starttime="20150709 15:43:58.122"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.158" starttime="20150709 15:43:58.153"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:43:58.164" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:43:58.218" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:43:58.222" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:43:58.220" starttime="20150709 15:43:58.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.229" starttime="20150709 15:43:58.224"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.235" starttime="20150709 15:43:58.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.242" starttime="20150709 15:43:58.238"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:43:58.252" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:43:58.384" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:43:58.388" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20150709 15:43:58.390" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:43:58.387" starttime="20150709 15:43:58.245"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.402" starttime="20150709 15:43:58.393"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.408" starttime="20150709 15:43:58.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.415" starttime="20150709 15:43:58.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.422" starttime="20150709 15:43:58.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.429" starttime="20150709 15:43:58.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.436" starttime="20150709 15:43:58.431"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.444" starttime="20150709 15:43:58.438"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.452" starttime="20150709 15:43:58.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.458" starttime="20150709 15:43:58.454"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.464" starttime="20150709 15:43:58.460"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.471" starttime="20150709 15:43:58.467"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:58.473" starttime="20150709 15:43:58.135"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:43:58.480" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20150709 15:43:58.485" starttime="20150709 15:43:58.475"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:43:58.491" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20150709 15:43:58.581" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:43:58.582" level="INFO">${stdout_string} = [2015-07-09 13:43:47,245][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [21], AdditionalInfo [];CorrelationId: 507730], Dela...</msg>
<status status="PASS" endtime="20150709 15:43:58.582" starttime="20150709 15:43:58.488"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:43:58.586" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20150709 15:43:58.664" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:43:58.666" starttime="20150709 15:43:58.584"></status>
</kw>
<msg timestamp="20150709 15:43:58.668" level="INFO">${tailed_text} = [2015-07-09 13:43:47,245][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [21], AdditionalInfo [];CorrelationId: 507730], Dela...</msg>
<status status="PASS" endtime="20150709 15:43:58.667" starttime="20150709 15:43:58.085"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150709 15:43:58.678" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:43:58.679" starttime="20150709 15:43:58.675"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:58.680" starttime="20150709 15:43:58.669"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.691" starttime="20150709 15:43:58.689"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.695" starttime="20150709 15:43:58.692"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:58.696" starttime="20150709 15:43:58.681"></status>
</kw>
<msg timestamp="20150709 15:43:58.698" level="INFO">${tailed_text} = [2015-07-09 13:43:47,245][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [21], AdditionalInfo [];CorrelationId: 507730], Dela...</msg>
<status status="PASS" endtime="20150709 15:43:58.698" starttime="20150709 15:43:58.064"></status>
</kw>
<kw type="kw" name="Check MOC IN log">
<doc>Checks the tailed log file of MOC call created on IN.</doc>
<arguments>
<arg>MOC_${TAILED_IN_LOG_FILE}</arg>
<arg>${rc}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150709 15:43:58.710" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<msg timestamp="20150709 15:43:58.713" level="INFO">${temp} = [2015-07-09 13:43:47,245][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [21], AdditionalInfo [];CorrelationId: 507730], Dela...</msg>
<status status="PASS" endtime="20150709 15:43:58.713" starttime="20150709 15:43:58.708"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rel_c}</arg>
<arg>0</arg>
<arg>msg=CG session failed - check MOC IN log</arg>
</arguments>
<msg timestamp="20150709 15:43:58.718" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150709 15:43:58.719" starttime="20150709 15:43:58.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>TrafficType: Originating</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.722" starttime="20150709 15:43:58.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Imsi: ${TESTSUBCRIBERS IMSI RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.726" starttime="20150709 15:43:58.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>UsedTime: 1000</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.729" starttime="20150709 15:43:58.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.732" starttime="20150709 15:43:58.730"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:58.733" starttime="20150709 15:43:58.700"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:43:58.735" level="INFO">IN OK...</msg>
<status status="PASS" endtime="20150709 15:43:58.736" starttime="20150709 15:43:58.734"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_xdr}</arg>
<arg>MOC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.758" starttime="20150709 15:43:58.756"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:43:58.763" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:43:58.763" starttime="20150709 15:43:58.759"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:43:58.769" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:43:58.770" starttime="20150709 15:43:58.765"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.782" starttime="20150709 15:43:58.779"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:43:58.784" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:43:58.812" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:43:58.814" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:43:58.813" starttime="20150709 15:43:58.783"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.817" starttime="20150709 15:43:58.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.819" starttime="20150709 15:43:58.818"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.822" starttime="20150709 15:43:58.820"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:43:58.830" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:43:58.893" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:43:58.896" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:43:58.897" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:43:58.894" starttime="20150709 15:43:58.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.907" starttime="20150709 15:43:58.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.910" starttime="20150709 15:43:58.908"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.914" starttime="20150709 15:43:58.911"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.917" starttime="20150709 15:43:58.915"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.921" starttime="20150709 15:43:58.918"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.924" starttime="20150709 15:43:58.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.928" starttime="20150709 15:43:58.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.932" starttime="20150709 15:43:58.929"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.936" starttime="20150709 15:43:58.933"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.939" starttime="20150709 15:43:58.937"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:58.942" starttime="20150709 15:43:58.940"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:58.943" starttime="20150709 15:43:58.771"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:43:58.948" level="INFO">Starting command 'cat tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20150709 15:43:58.952" starttime="20150709 15:43:58.945"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:43:58.958" level="INFO">Reading output of command 'cat tmpfilemonitor4.log'.</msg>
<msg timestamp="20150709 15:43:58.981" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:43:58.984" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:43:58.983" starttime="20150709 15:43:58.955"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:43:58.991" level="INFO">Executing command 'rm tmpfilemonitor4.log'.</msg>
<msg timestamp="20150709 15:43:59.063" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:43:59.066" starttime="20150709 15:43:58.987"></status>
</kw>
<msg timestamp="20150709 15:43:59.072" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:43:59.070" starttime="20150709 15:43:58.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150709 15:43:59.082" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:43:59.083" starttime="20150709 15:43:59.079"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:59.084" starttime="20150709 15:43:59.074"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:59.094" starttime="20150709 15:43:59.092"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:43:59.097" starttime="20150709 15:43:59.096"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:59.099" starttime="20150709 15:43:59.085"></status>
</kw>
<msg timestamp="20150709 15:43:59.102" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:43:59.101" starttime="20150709 15:43:58.738"></status>
</kw>
<kw type="kw" name="Check MOC XDR log">
<doc>Checks the tailed log file of MOC call created on XDR.</doc>
<arguments>
<arg>MOC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150709 15:43:59.112" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<msg timestamp="20150709 15:43:59.114" level="INFO">${temp} = </msg>
<status status="PASS" endtime="20150709 15:43:59.113" starttime="20150709 15:43:59.110"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${temp}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:59.116" starttime="20150709 15:43:59.115"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:59.119" starttime="20150709 15:43:59.117"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:59.122" starttime="20150709 15:43:59.120"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<msg timestamp="20150709 15:43:59.150" level="FAIL">'' does not contain '642041010000'</msg>
<status status="FAIL" endtime="20150709 15:43:59.152" starttime="20150709 15:43:59.123"></status>
</kw>
<status status="FAIL" endtime="20150709 15:43:59.155" starttime="20150709 15:43:59.103"></status>
</kw>
<doc>Test will make a MOC call, duration 1s.
Logs from XDR, IN and CRCE are collected and analysed as well as XDR DB. Before the call subscriber's
balance is set, and after the call balance is checked for correct charging.

Arguments:
none
Returns:
none
Fails:

=================================================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MFC_involved</tag>
<tag>MOC_involved</tag>
<tag>MTC_involved</tag>
<tag>SMS_involved</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20150709 15:43:59.158" starttime="20150709 15:43:43.261">'' does not contain '642041010000'</status>
</test>
<test id="s1-t2" name="Run Long MOC Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Connect with XDR, IN, CRCE and start the log monitoring</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:59.180" starttime="20150709 15:43:59.178"></status>
</kw>
<kw type="kw" name="${ssh_connection_xdr} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:59.218" starttime="20150709 15:43:59.216"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:59.284" starttime="20150709 15:43:59.227"></status>
</kw>
<msg timestamp="20150709 15:43:59.288" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20150709 15:43:59.287" starttime="20150709 15:43:59.219"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:43:59.307" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:43:59.745" level="INFO">Read output: Last login: Thu Jul  9 13:43:43 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:43:59.746" starttime="20150709 15:43:59.302"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:59.747" starttime="20150709 15:43:59.291"></status>
</kw>
<msg timestamp="20150709 15:43:59.749" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20150709 15:43:59.749" starttime="20150709 15:43:59.207"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:59.760" starttime="20150709 15:43:59.758"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:43:59.763" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20150709 15:43:59.767" starttime="20150709 15:43:59.761"></status>
</kw>
<status status="PASS" endtime="20150709 15:43:59.768" starttime="20150709 15:43:59.751"></status>
</kw>
<msg timestamp="20150709 15:43:59.770" level="INFO">${ssh_connection_xdr} = 7</msg>
<status status="PASS" endtime="20150709 15:43:59.769" starttime="20150709 15:43:59.193"></status>
</kw>
<kw type="kw" name="${ssh_connection_in} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN MOC LOG FILE PATH}${IN_LOG_FILE_NAME}</arg>
<arg>host=${IN-APP HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:59.803" starttime="20150709 15:43:59.801"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:43:59.865" starttime="20150709 15:43:59.809"></status>
</kw>
<msg timestamp="20150709 15:43:59.868" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20150709 15:43:59.867" starttime="20150709 15:43:59.804"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:43:59.887" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:44:00.454" level="INFO">Read output: Last login: Thu Jul  9 13:43:44 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:44:00.457" starttime="20150709 15:43:59.882"></status>
</kw>
<status status="PASS" endtime="20150709 15:44:00.461" starttime="20150709 15:43:59.870"></status>
</kw>
<msg timestamp="20150709 15:44:00.467" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20150709 15:44:00.465" starttime="20150709 15:43:59.793"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:44:00.492" starttime="20150709 15:44:00.488"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:44:00.499" level="INFO">Starting command 'tail -0f /var/log/inew/core-in/log-mem/inew-in-moc-00.log &gt; tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20150709 15:44:00.506" starttime="20150709 15:44:00.495"></status>
</kw>
<status status="PASS" endtime="20150709 15:44:00.508" starttime="20150709 15:44:00.472"></status>
</kw>
<msg timestamp="20150709 15:44:00.513" level="INFO">${ssh_connection_in} = 8</msg>
<status status="PASS" endtime="20150709 15:44:00.511" starttime="20150709 15:43:59.782"></status>
</kw>
<kw type="kw" name="${ssh_connection_crce} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE LOG FILE PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:44:00.578" starttime="20150709 15:44:00.577"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:44:00.640" starttime="20150709 15:44:00.585"></status>
</kw>
<msg timestamp="20150709 15:44:00.643" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20150709 15:44:00.642" starttime="20150709 15:44:00.579"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:44:00.662" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:44:01.370" level="INFO">Read output: Last login: Thu Jul  9 13:43:45 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:44:01.371" starttime="20150709 15:44:00.658"></status>
</kw>
<status status="PASS" endtime="20150709 15:44:01.373" starttime="20150709 15:44:00.646"></status>
</kw>
<msg timestamp="20150709 15:44:01.377" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20150709 15:44:01.376" starttime="20150709 15:44:00.563"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:44:01.387" starttime="20150709 15:44:01.385"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:44:01.390" level="INFO">Starting command 'tail -0f /var/log/inew/crce/5.3.14/negret-0.log &gt; tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20150709 15:44:01.394" starttime="20150709 15:44:01.388"></status>
</kw>
<status status="PASS" endtime="20150709 15:44:01.395" starttime="20150709 15:44:01.379"></status>
</kw>
<msg timestamp="20150709 15:44:01.397" level="INFO">${ssh_connection_crce} = 9</msg>
<status status="PASS" endtime="20150709 15:44:01.396" starttime="20150709 15:44:00.540"></status>
</kw>
<kw type="kw" name="Reset Subscriber Balance">
<doc>Reset the test subscriber's monetary account balance to initial value.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:44:01.500" starttime="20150709 15:44:01.413"></status>
</kw>
<status status="PASS" endtime="20150709 15:44:01.503" starttime="20150709 15:44:01.405"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>update acc_subscriber_accounts set balance=10000000 where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<status status="PASS" endtime="20150709 15:44:02.150" starttime="20150709 15:44:01.505"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:44:02.159" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150709 15:44:02.160" starttime="20150709 15:44:02.155"></status>
</kw>
<status status="PASS" endtime="20150709 15:44:02.162" starttime="20150709 15:44:01.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MOC *******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:44:02.168" starttime="20150709 15:44:02.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the Long MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:44:02.174" level="INFO">Running the Long MOC call...</msg>
<status status="PASS" endtime="20150709 15:44:02.176" starttime="20150709 15:44:02.171"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 136s">
<doc>Runs a standard MOC 136s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc136s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20150709 15:44:02.234" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv</msg>
<status status="PASS" endtime="20150709 15:44:02.233" starttime="20150709 15:44:02.229"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20150709 15:44:02.241" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv</msg>
<status status="PASS" endtime="20150709 15:44:02.240" starttime="20150709 15:44:02.236"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20150709 15:44:02.248" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini</msg>
<status status="PASS" endtime="20150709 15:44:02.247" starttime="20150709 15:44:02.243"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20150709 15:44:02.256" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc136s.cgs</msg>
<status status="PASS" endtime="20150709 15:44:02.255" starttime="20150709 15:44:02.251"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:44:02.261" starttime="20150709 15:44:02.258"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20150709 15:44:02.270" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:44:02.272" starttime="20150709 15:44:02.263"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:44:02.277" starttime="20150709 15:44:02.274"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20150709 15:44:02.285" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:44:02.287" starttime="20150709 15:44:02.279"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150709 15:44:02.296" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:44:02.297" starttime="20150709 15:44:02.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:44:02.302" starttime="20150709 15:44:02.299"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150709 15:44:02.310" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:44:02.312" starttime="20150709 15:44:02.304"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20150709 15:44:02.322" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:44:02.323" starttime="20150709 15:44:02.314"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:44:02.325" starttime="20150709 15:44:02.324"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150709 15:44:02.334" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc136s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150709 15:45:11.606" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20150709 15:45:11.601" starttime="20150709 15:44:02.326"></status>
</kw>
<msg timestamp="20150709 15:45:11.614" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20150709 15:45:11.612" starttime="20150709 15:44:02.209"></status>
</kw>
<msg timestamp="20150709 15:45:11.619" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20150709 15:45:11.617" starttime="20150709 15:44:02.182"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150709 15:45:16.626" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150709 15:45:16.629" starttime="20150709 15:45:11.622"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:45:16.637" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20150709 15:45:16.639" starttime="20150709 15:45:16.633"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_in}</arg>
<arg>LongMOC_${TAILED_IN_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:16.675" starttime="20150709 15:45:16.670"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:45:16.687" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:45:16.686" starttime="20150709 15:45:16.677"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:45:16.696" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:45:16.698" starttime="20150709 15:45:16.689"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:16.716" starttime="20150709 15:45:16.711"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:45:16.721" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:45:16.840" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:45:16.843" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:45:16.842" starttime="20150709 15:45:16.718"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:16.849" starttime="20150709 15:45:16.845"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:16.855" starttime="20150709 15:45:16.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:16.861" starttime="20150709 15:45:16.857"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:45:16.869" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:45:16.931" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:45:16.934" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20150709 15:45:16.935" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:45:16.933" starttime="20150709 15:45:16.863"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:16.946" starttime="20150709 15:45:16.938"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:16.952" starttime="20150709 15:45:16.949"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:16.958" starttime="20150709 15:45:16.954"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:16.964" starttime="20150709 15:45:16.960"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:16.970" starttime="20150709 15:45:16.966"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:16.977" starttime="20150709 15:45:16.972"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:16.984" starttime="20150709 15:45:16.978"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:16.990" starttime="20150709 15:45:16.986"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:16.996" starttime="20150709 15:45:16.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:17.002" starttime="20150709 15:45:16.998"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:17.009" starttime="20150709 15:45:17.005"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:17.011" starttime="20150709 15:45:16.701"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:17.018" level="INFO">Starting command 'cat tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20150709 15:45:17.023" starttime="20150709 15:45:17.014"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:45:17.028" level="INFO">Reading output of command 'cat tmpfilemonitor8.log'.</msg>
<msg timestamp="20150709 15:45:17.081" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:45:17.084" level="INFO">${stdout_string} = [2015-07-09 13:44:03,797][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [21], AdditionalInfo [];CorrelationId: 507740], Dela...</msg>
<status status="PASS" endtime="20150709 15:45:17.083" starttime="20150709 15:45:17.026"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:17.091" level="INFO">Executing command 'rm tmpfilemonitor8.log'.</msg>
<msg timestamp="20150709 15:45:17.167" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:45:17.169" starttime="20150709 15:45:17.087"></status>
</kw>
<msg timestamp="20150709 15:45:17.175" level="INFO">${tailed_text} = [2015-07-09 13:44:03,797][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [21], AdditionalInfo [];CorrelationId: 507740], Dela...</msg>
<status status="PASS" endtime="20150709 15:45:17.173" starttime="20150709 15:45:16.660"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150709 15:45:17.195" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:45:17.196" starttime="20150709 15:45:17.188"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:17.198" starttime="20150709 15:45:17.178"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:17.216" starttime="20150709 15:45:17.211"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:45:17.221" starttime="20150709 15:45:17.218"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:17.225" starttime="20150709 15:45:17.201"></status>
</kw>
<msg timestamp="20150709 15:45:17.230" level="INFO">${tailed_text} = [2015-07-09 13:44:03,797][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [21], AdditionalInfo [];CorrelationId: 507740], Dela...</msg>
<status status="PASS" endtime="20150709 15:45:17.228" starttime="20150709 15:45:16.644"></status>
</kw>
<kw type="kw" name="Check Long MOC IN log">
<doc>Checks the tailed log file of multi-slice (long) MOC call created on IN.</doc>
<arguments>
<arg>LongMOC_${TAILED_IN_LOG_FILE}</arg>
<arg>${rc}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150709 15:45:17.249" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/LongMOC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<msg timestamp="20150709 15:45:17.252" level="INFO">${temp} = [2015-07-09 13:44:03,797][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [21], AdditionalInfo [];CorrelationId: 507740], Dela...</msg>
<status status="PASS" endtime="20150709 15:45:17.251" starttime="20150709 15:45:17.245"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rel_c}</arg>
<arg>0</arg>
<arg>msg=CG session failed - check MOC IN log</arg>
</arguments>
<msg timestamp="20150709 15:45:17.259" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20150709 15:45:17.264" level="FAIL">CG session failed - check MOC IN log: 1 != 0</msg>
<status status="FAIL" endtime="20150709 15:45:17.266" starttime="20150709 15:45:17.254"></status>
</kw>
<status status="FAIL" endtime="20150709 15:45:17.268" starttime="20150709 15:45:17.234"></status>
</kw>
<doc>Longer MOC call; duration is 136s. The goal is to have call duration longer than 1 slice (60secs)
Logs from XDR, IN and CRCE are collected and analysed as well as XDR DB
Arguments:
subscriber
Returns:
Fails:

==</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MFC_involved</tag>
<tag>MOC_involved</tag>
<tag>MTC_involved</tag>
<tag>SMS_involved</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20150709 15:45:17.271" starttime="20150709 15:43:59.166">CG session failed - check MOC IN log: 1 != 0</status>
</test>
<test id="s1-t3" name="Run MTC Call">
<kw type="kw" name="${ssh_connection_xdr} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:17.336" starttime="20150709 15:45:17.334"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:17.403" starttime="20150709 15:45:17.342"></status>
</kw>
<msg timestamp="20150709 15:45:17.407" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20150709 15:45:17.405" starttime="20150709 15:45:17.337"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:45:17.425" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:45:17.916" level="INFO">Read output: Last login: Thu Jul  9 13:43:59 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:45:17.918" starttime="20150709 15:45:17.421"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:17.918" starttime="20150709 15:45:17.409"></status>
</kw>
<msg timestamp="20150709 15:45:17.922" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20150709 15:45:17.921" starttime="20150709 15:45:17.328"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:17.931" starttime="20150709 15:45:17.929"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:17.933" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20150709 15:45:17.937" starttime="20150709 15:45:17.932"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:17.938" starttime="20150709 15:45:17.924"></status>
</kw>
<msg timestamp="20150709 15:45:17.940" level="INFO">${ssh_connection_xdr} = 10</msg>
<status status="PASS" endtime="20150709 15:45:17.939" starttime="20150709 15:45:17.316"></status>
</kw>
<kw type="kw" name="${ssh_connection_in} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN_MTC_LOG_FILE_PATH}${IN_LOG_FILE_NAME}</arg>
<arg>host=${IN-APP HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:17.968" starttime="20150709 15:45:17.966"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:18.035" starttime="20150709 15:45:17.974"></status>
</kw>
<msg timestamp="20150709 15:45:18.041" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20150709 15:45:18.038" starttime="20150709 15:45:17.969"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:45:18.058" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:45:18.495" level="INFO">Read output: Last login: Thu Jul  9 13:44:00 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:45:18.497" starttime="20150709 15:45:18.053"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:18.499" starttime="20150709 15:45:18.043"></status>
</kw>
<msg timestamp="20150709 15:45:18.506" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20150709 15:45:18.504" starttime="20150709 15:45:17.960"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:18.526" starttime="20150709 15:45:18.522"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:18.533" level="INFO">Starting command 'tail -0f /var/log/inew/core-in/log-mem/inew-in-mtc-00.log &gt; tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20150709 15:45:18.537" starttime="20150709 15:45:18.528"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:18.539" starttime="20150709 15:45:18.512"></status>
</kw>
<msg timestamp="20150709 15:45:18.544" level="INFO">${ssh_connection_in} = 11</msg>
<status status="PASS" endtime="20150709 15:45:18.541" starttime="20150709 15:45:17.951"></status>
</kw>
<kw type="kw" name="${ssh_connection_crce} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE LOG FILE PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:18.586" starttime="20150709 15:45:18.585"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:18.648" starttime="20150709 15:45:18.593"></status>
</kw>
<msg timestamp="20150709 15:45:18.652" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20150709 15:45:18.651" starttime="20150709 15:45:18.587"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:45:18.669" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:45:19.108" level="INFO">Read output: Last login: Thu Jul  9 13:44:01 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:45:19.111" starttime="20150709 15:45:18.665"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:19.114" starttime="20150709 15:45:18.654"></status>
</kw>
<msg timestamp="20150709 15:45:19.120" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20150709 15:45:19.118" starttime="20150709 15:45:18.579"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:19.140" starttime="20150709 15:45:19.136"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:19.146" level="INFO">Starting command 'tail -0f /var/log/inew/crce/5.3.14/negret-0.log &gt; tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20150709 15:45:19.151" starttime="20150709 15:45:19.142"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:19.153" starttime="20150709 15:45:19.125"></status>
</kw>
<msg timestamp="20150709 15:45:19.158" level="INFO">${ssh_connection_crce} = 12</msg>
<status status="PASS" endtime="20150709 15:45:19.156" starttime="20150709 15:45:18.567"></status>
</kw>
<kw type="kw" name="Reset Subscriber Balance">
<doc>Reset the test subscriber's monetary account balance to initial value.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:19.271" starttime="20150709 15:45:19.186"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:19.272" starttime="20150709 15:45:19.172"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>update acc_subscriber_accounts set balance=10000000 where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:20.285" starttime="20150709 15:45:19.273"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:45:20.293" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150709 15:45:20.294" starttime="20150709 15:45:20.289"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:20.296" starttime="20150709 15:45:19.161"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:45:20.303" level="INFO">Running the MTC call...</msg>
<status status="PASS" endtime="20150709 15:45:20.305" starttime="20150709 15:45:20.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MTC *******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:20.310" starttime="20150709 15:45:20.307"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC 1s">
<doc>Runs a standard (i.e. non-roaming) MTC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MTC REQ QUEUE}</arg>
<arg>${AMQ-SIG MTC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20150709 15:45:20.364" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv</msg>
<status status="PASS" endtime="20150709 15:45:20.363" starttime="20150709 15:45:20.359"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20150709 15:45:20.371" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv</msg>
<status status="PASS" endtime="20150709 15:45:20.370" starttime="20150709 15:45:20.366"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20150709 15:45:20.378" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini</msg>
<status status="PASS" endtime="20150709 15:45:20.377" starttime="20150709 15:45:20.373"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20150709 15:45:20.385" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs</msg>
<status status="PASS" endtime="20150709 15:45:20.384" starttime="20150709 15:45:20.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:20.390" starttime="20150709 15:45:20.387"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150709 15:45:20.400" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:45:20.401" starttime="20150709 15:45:20.392"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:20.406" starttime="20150709 15:45:20.403"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20150709 15:45:20.414" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:45:20.416" starttime="20150709 15:45:20.408"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20150709 15:45:20.425" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:45:20.426" starttime="20150709 15:45:20.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:20.431" starttime="20150709 15:45:20.428"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150709 15:45:20.438" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:45:20.440" starttime="20150709 15:45:20.433"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20150709 15:45:20.448" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:45:20.449" starttime="20150709 15:45:20.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:20.451" starttime="20150709 15:45:20.450"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150709 15:45:20.463" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150709 15:45:27.643" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:45:27.636" starttime="20150709 15:45:20.452"></status>
</kw>
<msg timestamp="20150709 15:45:27.648" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:45:27.646" starttime="20150709 15:45:20.339"></status>
</kw>
<msg timestamp="20150709 15:45:27.653" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:45:27.651" starttime="20150709 15:45:20.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150709 15:45:32.659" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150709 15:45:32.662" starttime="20150709 15:45:27.655"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:45:32.668" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20150709 15:45:32.670" starttime="20150709 15:45:32.665"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_in}</arg>
<arg>MTC_${TAILED_IN_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.711" starttime="20150709 15:45:32.707"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:45:32.723" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:45:32.721" starttime="20150709 15:45:32.713"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:45:32.731" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:45:32.732" starttime="20150709 15:45:32.725"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.749" starttime="20150709 15:45:32.745"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:45:32.754" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:45:32.806" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:45:32.809" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:45:32.808" starttime="20150709 15:45:32.751"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.814" starttime="20150709 15:45:32.811"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.820" starttime="20150709 15:45:32.816"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.826" starttime="20150709 15:45:32.822"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:45:32.833" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:45:32.903" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:45:32.906" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20150709 15:45:32.907" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:45:32.905" starttime="20150709 15:45:32.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.919" starttime="20150709 15:45:32.910"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.924" starttime="20150709 15:45:32.921"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.930" starttime="20150709 15:45:32.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.935" starttime="20150709 15:45:32.931"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.941" starttime="20150709 15:45:32.937"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.947" starttime="20150709 15:45:32.943"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.954" starttime="20150709 15:45:32.949"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.960" starttime="20150709 15:45:32.955"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.965" starttime="20150709 15:45:32.961"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.970" starttime="20150709 15:45:32.967"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:32.975" starttime="20150709 15:45:32.972"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:32.977" starttime="20150709 15:45:32.735"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:32.983" level="INFO">Starting command 'cat tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20150709 15:45:32.988" starttime="20150709 15:45:32.979"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:45:32.992" level="INFO">Reading output of command 'cat tmpfilemonitor11.log'.</msg>
<msg timestamp="20150709 15:45:33.045" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:45:33.049" level="INFO">${stdout_string} = [2015-07-09 13:45:21,867][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [21], AdditionalInfo [];CorrelationId: 507750], Dela...</msg>
<status status="PASS" endtime="20150709 15:45:33.047" starttime="20150709 15:45:32.990"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:33.055" level="INFO">Executing command 'rm tmpfilemonitor11.log'.</msg>
<msg timestamp="20150709 15:45:33.127" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:45:33.129" starttime="20150709 15:45:33.051"></status>
</kw>
<msg timestamp="20150709 15:45:33.133" level="INFO">${tailed_text} = [2015-07-09 13:45:21,867][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [21], AdditionalInfo [];CorrelationId: 507750], Dela...</msg>
<status status="PASS" endtime="20150709 15:45:33.131" starttime="20150709 15:45:32.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150709 15:45:33.153" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:45:33.154" starttime="20150709 15:45:33.146"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:33.156" starttime="20150709 15:45:33.136"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.173" starttime="20150709 15:45:33.169"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.178" starttime="20150709 15:45:33.175"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:33.182" starttime="20150709 15:45:33.159"></status>
</kw>
<msg timestamp="20150709 15:45:33.186" level="INFO">${tailed_text} = [2015-07-09 13:45:21,867][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [21], AdditionalInfo [];CorrelationId: 507750], Dela...</msg>
<status status="PASS" endtime="20150709 15:45:33.184" starttime="20150709 15:45:32.681"></status>
</kw>
<kw type="kw" name="Check MTC IN log">
<doc>Checks the tailed IN log file created during MTC test case</doc>
<arguments>
<arg>MTC_${TAILED_IN_LOG_FILE}</arg>
<arg>${rc}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150709 15:45:33.204" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<msg timestamp="20150709 15:45:33.208" level="INFO">${temp} = [2015-07-09 13:45:21,867][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [21], AdditionalInfo [];CorrelationId: 507750], Dela...</msg>
<status status="PASS" endtime="20150709 15:45:33.207" starttime="20150709 15:45:33.201"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rel_c}</arg>
<arg>0</arg>
<arg>msg=CG session failed - check MTC IN log</arg>
</arguments>
<msg timestamp="20150709 15:45:33.214" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150709 15:45:33.216" starttime="20150709 15:45:33.210"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Imsi: ${TESTSUBCRIBERS IMSI RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.222" starttime="20150709 15:45:33.218"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>UsedTime: 36000</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.228" starttime="20150709 15:45:33.224"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>TrafficType: Terminating</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.234" starttime="20150709 15:45:33.230"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.240" starttime="20150709 15:45:33.236"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:33.242" starttime="20150709 15:45:33.190"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:45:33.247" level="INFO">IN OK...</msg>
<status status="PASS" endtime="20150709 15:45:33.249" starttime="20150709 15:45:33.244"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_xdr}</arg>
<arg>MTC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.278" starttime="20150709 15:45:33.274"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:45:33.289" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:45:33.287" starttime="20150709 15:45:33.280"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:45:33.297" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:45:33.299" starttime="20150709 15:45:33.291"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.315" starttime="20150709 15:45:33.311"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:45:33.320" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:45:33.497" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:45:33.500" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:45:33.498" starttime="20150709 15:45:33.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.505" starttime="20150709 15:45:33.502"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.510" starttime="20150709 15:45:33.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.516" starttime="20150709 15:45:33.512"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:45:33.523" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:45:33.581" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:45:33.584" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:45:33.585" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:45:33.583" starttime="20150709 15:45:33.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.596" starttime="20150709 15:45:33.587"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.601" starttime="20150709 15:45:33.598"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.606" starttime="20150709 15:45:33.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.612" starttime="20150709 15:45:33.608"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.618" starttime="20150709 15:45:33.614"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.623" starttime="20150709 15:45:33.619"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.630" starttime="20150709 15:45:33.625"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.636" starttime="20150709 15:45:33.632"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.641" starttime="20150709 15:45:33.638"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.647" starttime="20150709 15:45:33.643"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.652" starttime="20150709 15:45:33.648"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:33.654" starttime="20150709 15:45:33.301"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:33.659" level="INFO">Starting command 'cat tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20150709 15:45:33.665" starttime="20150709 15:45:33.656"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:45:33.669" level="INFO">Reading output of command 'cat tmpfilemonitor10.log'.</msg>
<msg timestamp="20150709 15:45:33.702" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:45:33.705" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:45:33.703" starttime="20150709 15:45:33.667"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:33.710" level="INFO">Executing command 'rm tmpfilemonitor10.log'.</msg>
<msg timestamp="20150709 15:45:33.847" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:45:33.849" starttime="20150709 15:45:33.707"></status>
</kw>
<msg timestamp="20150709 15:45:33.852" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:45:33.851" starttime="20150709 15:45:33.265"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150709 15:45:33.869" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:45:33.871" starttime="20150709 15:45:33.863"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:33.873" starttime="20150709 15:45:33.854"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.889" starttime="20150709 15:45:33.885"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.894" starttime="20150709 15:45:33.891"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:33.898" starttime="20150709 15:45:33.875"></status>
</kw>
<msg timestamp="20150709 15:45:33.902" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:45:33.900" starttime="20150709 15:45:33.253"></status>
</kw>
<kw type="kw" name="Check MTC XDR log">
<doc>Checks the tailed log file created on XDR during MTC call.</doc>
<arguments>
<arg>MTC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150709 15:45:33.918" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MTC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<msg timestamp="20150709 15:45:33.921" level="INFO">${temp} = </msg>
<status status="PASS" endtime="20150709 15:45:33.920" starttime="20150709 15:45:33.915"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${temp}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.926" starttime="20150709 15:45:33.923"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.932" starttime="20150709 15:45:33.928"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:33.938" starttime="20150709 15:45:33.934"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<msg timestamp="20150709 15:45:33.946" level="FAIL">'' does not contain '642041010000'</msg>
<status status="FAIL" endtime="20150709 15:45:33.948" starttime="20150709 15:45:33.939"></status>
</kw>
<status status="FAIL" endtime="20150709 15:45:33.950" starttime="20150709 15:45:33.905"></status>
</kw>
<doc>Reset the test subscriber's monetary account balance to initial value.

Arguments:
subscriber
Returns:
Fails:

==</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MFC_involved</tag>
<tag>MOC_involved</tag>
<tag>MTC_involved</tag>
<tag>SMS_involved</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20150709 15:45:33.953" starttime="20150709 15:45:17.278">'' does not contain '642041010000'</status>
</test>
<test id="s1-t4" name="Run MFC Call">
<kw type="kw" name="${ssh_connection_xdr} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:34.030" starttime="20150709 15:45:34.026"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:34.176" starttime="20150709 15:45:34.042"></status>
</kw>
<msg timestamp="20150709 15:45:34.179" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20150709 15:45:34.178" starttime="20150709 15:45:34.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:45:34.196" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:45:34.649" level="INFO">Read output: Last login: Thu Jul  9 13:45:17 2015 from 10.105.80.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:45:34.650" starttime="20150709 15:45:34.192"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:34.651" starttime="20150709 15:45:34.181"></status>
</kw>
<msg timestamp="20150709 15:45:34.653" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20150709 15:45:34.653" starttime="20150709 15:45:34.012"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:34.662" starttime="20150709 15:45:34.661"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:34.665" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20150709 15:45:34.671" starttime="20150709 15:45:34.663"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:34.673" starttime="20150709 15:45:34.655"></status>
</kw>
<msg timestamp="20150709 15:45:34.678" level="INFO">${ssh_connection_xdr} = 13</msg>
<status status="PASS" endtime="20150709 15:45:34.676" starttime="20150709 15:45:33.994"></status>
</kw>
<kw type="kw" name="${ssh_connection_in} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN_MFC_LOG_FILE_PATH}${IN_LOG_FILE_NAME}</arg>
<arg>host=${IN-APP HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:34.739" starttime="20150709 15:45:34.735"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:34.811" starttime="20150709 15:45:34.753"></status>
</kw>
<msg timestamp="20150709 15:45:34.814" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20150709 15:45:34.813" starttime="20150709 15:45:34.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:45:34.832" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:45:35.281" level="INFO">Read output: Last login: Thu Jul  9 13:45:18 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:45:35.283" starttime="20150709 15:45:34.828"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:35.284" starttime="20150709 15:45:34.816"></status>
</kw>
<msg timestamp="20150709 15:45:35.287" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20150709 15:45:35.286" starttime="20150709 15:45:34.719"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:35.295" starttime="20150709 15:45:35.293"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:35.297" level="INFO">Starting command 'tail -0f /var/log/inew/core-in/log-mem/inew-in-mfc-00.log &gt; tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20150709 15:45:35.301" starttime="20150709 15:45:35.295"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:35.301" starttime="20150709 15:45:35.288"></status>
</kw>
<msg timestamp="20150709 15:45:35.303" level="INFO">${ssh_connection_in} = 14</msg>
<status status="PASS" endtime="20150709 15:45:35.302" starttime="20150709 15:45:34.701"></status>
</kw>
<kw type="kw" name="${ssh_connection_crce} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE LOG FILE PATH}</arg>
<arg>host=${CRCE HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:35.371" starttime="20150709 15:45:35.367"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:35.442" starttime="20150709 15:45:35.383"></status>
</kw>
<msg timestamp="20150709 15:45:35.445" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20150709 15:45:35.444" starttime="20150709 15:45:35.373"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150709 15:45:35.463" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20150709 15:45:35.928" level="INFO">Read output: Last login: Thu Jul  9 13:45:18 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20150709 15:45:35.930" starttime="20150709 15:45:35.459"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:35.932" starttime="20150709 15:45:35.448"></status>
</kw>
<msg timestamp="20150709 15:45:35.936" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20150709 15:45:35.935" starttime="20150709 15:45:35.354"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:35.950" starttime="20150709 15:45:35.948"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:35.953" level="INFO">Starting command 'tail -0f /var/log/inew/crce/5.3.14/negret-0.log &gt; tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20150709 15:45:35.956" starttime="20150709 15:45:35.951"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:35.957" starttime="20150709 15:45:35.939"></status>
</kw>
<msg timestamp="20150709 15:45:35.958" level="INFO">${ssh_connection_crce} = 15</msg>
<status status="PASS" endtime="20150709 15:45:35.958" starttime="20150709 15:45:35.336"></status>
</kw>
<kw type="kw" name="Reset Subscriber Balance">
<doc>Reset the test subscriber's monetary account balance to initial value.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="dblib_support-resource.DBLIB Connect to PostgresDB">
<doc>this helper shields testsuite developers from the necessity to know driver and connection string details.</doc>
<arguments>
<arg>${CRCE DB HOST}</arg>
<arg>${CRCE DB PORT}</arg>
<arg>${CRCE DB NAME}</arg>
<arg>${CRCE DB USER}</arg>
<arg>${CRCE DB PWD}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${host}:${port}/${dbName}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:35.988" starttime="20150709 15:45:35.970"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:35.988" starttime="20150709 15:45:35.964"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>update acc_subscriber_accounts set balance=10000000 where category=1 and subscriber_id in (select id from profiler_subscriber_profiles where msisdn='${subscriber}');</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:36.814" starttime="20150709 15:45:35.989"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:45:36.821" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150709 15:45:36.822" starttime="20150709 15:45:36.818"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:36.824" starttime="20150709 15:45:35.960"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MFC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:45:36.830" level="INFO">Running the MFC call...</msg>
<status status="PASS" endtime="20150709 15:45:36.832" starttime="20150709 15:45:36.827"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MFC *******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:36.837" starttime="20150709 15:45:36.834"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MFC 1s">
<doc>Runs a standard MFC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${FINAL_DESTINATION_MFC}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MFC REQ QUEUE}</arg>
<arg>${AMQ-SIG MFC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MFC CGS">
<doc>Runs a standard MFC session (meaning a session that needs only mscAddress, mfcAPartyMsisdn and mfcCPartyMsisdn paramters) for the passed cgs file</doc>
<arguments>
<arg>mfc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${rd_imsi}</arg>
<arg>${rd_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mfc_req}</arg>
<arg>${queue_mfc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20150709 15:45:36.887" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv</msg>
<status status="PASS" endtime="20150709 15:45:36.885" starttime="20150709 15:45:36.882"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20150709 15:45:36.893" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv</msg>
<status status="PASS" endtime="20150709 15:45:36.892" starttime="20150709 15:45:36.889"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20150709 15:45:36.900" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini</msg>
<status status="PASS" endtime="20150709 15:45:36.899" starttime="20150709 15:45:36.896"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20150709 15:45:36.907" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs</msg>
<status status="PASS" endtime="20150709 15:45:36.906" starttime="20150709 15:45:36.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:36.911" starttime="20150709 15:45:36.909"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${rd_imsi};${rd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150709 15:45:36.920" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:45:36.921" starttime="20150709 15:45:36.913"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:36.926" starttime="20150709 15:45:36.923"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;gmscAddress;mfcAPartyMsisdn;mfcCPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20150709 15:45:36.937" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:45:36.939" starttime="20150709 15:45:36.932"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${msc_address};${cg_msisdn};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150709 15:45:36.948" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:45:36.948" starttime="20150709 15:45:36.941"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:36.950" starttime="20150709 15:45:36.949"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150709 15:45:36.953" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:45:36.954" starttime="20150709 15:45:36.951"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MFC;${queue_mfc_req};${queue_mfc_res};6;1;1</arg>
</arguments>
<msg timestamp="20150709 15:45:36.958" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:45:36.959" starttime="20150709 15:45:36.955"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:36.961" starttime="20150709 15:45:36.960"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150709 15:45:36.970" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150709 15:45:44.318" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:45:44.315" starttime="20150709 15:45:36.962"></status>
</kw>
<msg timestamp="20150709 15:45:44.324" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:45:44.321" starttime="20150709 15:45:36.864"></status>
</kw>
<msg timestamp="20150709 15:45:44.329" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:45:44.327" starttime="20150709 15:45:36.842"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150709 15:45:49.336" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150709 15:45:49.339" starttime="20150709 15:45:44.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:45:49.346" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20150709 15:45:49.347" starttime="20150709 15:45:49.343"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_in}</arg>
<arg>MFC_${TAILED_IN_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.376" starttime="20150709 15:45:49.372"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:45:49.386" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:45:49.385" starttime="20150709 15:45:49.378"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:45:49.394" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:45:49.396" starttime="20150709 15:45:49.388"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.411" starttime="20150709 15:45:49.408"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:45:49.416" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:45:49.474" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:45:49.477" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:45:49.476" starttime="20150709 15:45:49.413"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.483" starttime="20150709 15:45:49.479"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.488" starttime="20150709 15:45:49.485"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.493" starttime="20150709 15:45:49.490"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:45:49.500" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:45:49.565" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:45:49.568" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20150709 15:45:49.569" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:45:49.566" starttime="20150709 15:45:49.495"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.580" starttime="20150709 15:45:49.571"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.585" starttime="20150709 15:45:49.582"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.591" starttime="20150709 15:45:49.587"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.596" starttime="20150709 15:45:49.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.602" starttime="20150709 15:45:49.598"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.607" starttime="20150709 15:45:49.604"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.614" starttime="20150709 15:45:49.609"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.619" starttime="20150709 15:45:49.615"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.624" starttime="20150709 15:45:49.621"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.630" starttime="20150709 15:45:49.626"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.636" starttime="20150709 15:45:49.633"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:49.638" starttime="20150709 15:45:49.398"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:49.644" level="INFO">Starting command 'cat tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20150709 15:45:49.649" starttime="20150709 15:45:49.640"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:45:49.653" level="INFO">Reading output of command 'cat tmpfilemonitor14.log'.</msg>
<msg timestamp="20150709 15:45:49.707" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:45:49.711" level="INFO">${stdout_string} = [2015-07-09 13:45:38,579][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [22], AdditionalInfo [];CorrelationId: 507760], Dela...</msg>
<status status="PASS" endtime="20150709 15:45:49.709" starttime="20150709 15:45:49.651"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:49.717" level="INFO">Executing command 'rm tmpfilemonitor14.log'.</msg>
<msg timestamp="20150709 15:45:49.784" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:45:49.786" starttime="20150709 15:45:49.713"></status>
</kw>
<msg timestamp="20150709 15:45:49.790" level="INFO">${tailed_text} = [2015-07-09 13:45:38,579][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [22], AdditionalInfo [];CorrelationId: 507760], Dela...</msg>
<status status="PASS" endtime="20150709 15:45:49.789" starttime="20150709 15:45:49.363"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150709 15:45:49.808" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:45:49.810" starttime="20150709 15:45:49.802"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:49.812" starttime="20150709 15:45:49.792"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.827" starttime="20150709 15:45:49.823"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.832" starttime="20150709 15:45:49.829"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:49.836" starttime="20150709 15:45:49.814"></status>
</kw>
<msg timestamp="20150709 15:45:49.839" level="INFO">${tailed_text} = [2015-07-09 13:45:38,579][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [22], AdditionalInfo [];CorrelationId: 507760], Dela...</msg>
<status status="PASS" endtime="20150709 15:45:49.838" starttime="20150709 15:45:49.352"></status>
</kw>
<kw type="kw" name="Check MFC IN log">
<doc>Checks the tailed log file created during MTC test case</doc>
<arguments>
<arg>MFC_${TAILED_IN_LOG_FILE}</arg>
<arg>${rc}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150709 15:45:49.856" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-in.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-in.log&lt;/a&gt;'</msg>
<msg timestamp="20150709 15:45:49.860" level="INFO">${temp} = [2015-07-09 13:45:38,579][DEBUG][IPROT_TRACING                                     ][][][][][] [-&gt;|][CMD [ConnectorMetaData: CN [iSigInbound1], SID [22], AdditionalInfo [];CorrelationId: 507760], Dela...</msg>
<status status="PASS" endtime="20150709 15:45:49.859" starttime="20150709 15:45:49.853"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rel_c}</arg>
<arg>0</arg>
<arg>msg=CG session failed - check MFC IN log</arg>
</arguments>
<msg timestamp="20150709 15:45:49.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150709 15:45:49.867" starttime="20150709 15:45:49.862"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Imsi: ${TESTSUBCRIBERS IMSI RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.873" starttime="20150709 15:45:49.869"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>UsedTime: 1000</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.879" starttime="20150709 15:45:49.875"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>TrafficType: Forwarding</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.884" starttime="20150709 15:45:49.881"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.890" starttime="20150709 15:45:49.886"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:49.892" starttime="20150709 15:45:49.843"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN OK...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:45:49.897" level="INFO">IN OK...</msg>
<status status="PASS" endtime="20150709 15:45:49.898" starttime="20150709 15:45:49.894"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG session failed</arg>
</arguments>
<msg timestamp="20150709 15:45:49.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150709 15:45:49.906" starttime="20150709 15:45:49.901"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_xdr}</arg>
<arg>MFC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.933" starttime="20150709 15:45:49.929"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150709 15:45:49.943" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150709 15:45:49.942" starttime="20150709 15:45:49.935"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150709 15:45:49.969" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150709 15:45:49.970" starttime="20150709 15:45:49.945"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:49.978" starttime="20150709 15:45:49.976"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150709 15:45:49.980" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150709 15:45:50.020" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:45:50.024" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150709 15:45:50.022" starttime="20150709 15:45:49.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.029" starttime="20150709 15:45:50.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.034" starttime="20150709 15:45:50.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.039" starttime="20150709 15:45:50.036"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20150709 15:45:50.046" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20150709 15:45:50.100" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:45:50.102" level="INFO">${stderr} = </msg>
<msg timestamp="20150709 15:45:50.104" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150709 15:45:50.101" starttime="20150709 15:45:50.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.115" starttime="20150709 15:45:50.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.120" starttime="20150709 15:45:50.117"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.125" starttime="20150709 15:45:50.122"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.131" starttime="20150709 15:45:50.127"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.136" starttime="20150709 15:45:50.133"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.141" starttime="20150709 15:45:50.138"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.148" starttime="20150709 15:45:50.143"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.153" starttime="20150709 15:45:50.149"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.158" starttime="20150709 15:45:50.155"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.163" starttime="20150709 15:45:50.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.169" starttime="20150709 15:45:50.165"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:50.170" starttime="20150709 15:45:49.972"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:50.177" level="INFO">Starting command 'cat tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20150709 15:45:50.182" starttime="20150709 15:45:50.173"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150709 15:45:50.186" level="INFO">Reading output of command 'cat tmpfilemonitor13.log'.</msg>
<msg timestamp="20150709 15:45:50.212" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150709 15:45:50.215" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20150709 15:45:50.213" starttime="20150709 15:45:50.184"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150709 15:45:50.221" level="INFO">Executing command 'rm tmpfilemonitor13.log'.</msg>
<msg timestamp="20150709 15:45:50.301" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150709 15:45:50.302" starttime="20150709 15:45:50.217"></status>
</kw>
<msg timestamp="20150709 15:45:50.307" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:45:50.305" starttime="20150709 15:45:49.921"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150709 15:45:50.323" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150709 15:45:50.324" starttime="20150709 15:45:50.318"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:50.324" starttime="20150709 15:45:50.309"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.331" starttime="20150709 15:45:50.329"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.336" starttime="20150709 15:45:50.332"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:50.338" starttime="20150709 15:45:50.325"></status>
</kw>
<msg timestamp="20150709 15:45:50.340" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20150709 15:45:50.339" starttime="20150709 15:45:49.910"></status>
</kw>
<kw type="kw" name="Check MFC XDR log">
<doc>Checks the tailed log file of MFC call created on XDR.</doc>
<arguments>
<arg>MFC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150709 15:45:50.348" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MFC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<msg timestamp="20150709 15:45:50.349" level="INFO">${temp} = </msg>
<status status="PASS" endtime="20150709 15:45:50.349" starttime="20150709 15:45:50.346"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.352" starttime="20150709 15:45:50.350"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<msg timestamp="20150709 15:45:50.355" level="FAIL">'' does not contain '642041010000'</msg>
<status status="FAIL" endtime="20150709 15:45:50.356" starttime="20150709 15:45:50.352"></status>
</kw>
<status status="FAIL" endtime="20150709 15:45:50.357" starttime="20150709 15:45:50.342"></status>
</kw>
<doc>Reset the test subscriber's monetary account balance to initial value.

Arguments:
subscriber
Returns:
Fails:

==</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MFC_involved</tag>
<tag>MOC_involved</tag>
<tag>MTC_involved</tag>
<tag>SMS_involved</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20150709 15:45:50.358" starttime="20150709 15:45:33.959">'' does not contain '642041010000'</status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Disconnect From Database</arg>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.373" starttime="20150709 15:45:50.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Cleaning up</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20150709 15:45:50.375" level="INFO">Cleaning up</msg>
<status status="PASS" endtime="20150709 15:45:50.376" starttime="20150709 15:45:50.374"></status>
</kw>
<kw type="kw" name="OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>mv *ssh_tail*.log log/</arg>
</arguments>
<msg timestamp="20150709 15:45:50.384" level="INFO">Running command 'mv *ssh_tail*.log log/ 2&gt;&amp;1'</msg>
<status status="PASS" endtime="20150709 15:45:50.389" starttime="20150709 15:45:50.377"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150709 15:45:50.402" starttime="20150709 15:45:50.391"></status>
</kw>
<status status="PASS" endtime="20150709 15:45:50.404" starttime="20150709 15:45:50.368"></status>
</kw>
<doc>This suite tests the set of "standard" calls: MOC, MTC, MFC and SMS.
It uses standardised library keywords encapsulating Call Generator's functionality. Tests try to
check other components (at the moment IN, CRCE and XDR) for evidences of calls - in log files and in DB.

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20150709 15:45:50.406" starttime="20150709 15:43:14.287"></status>
</suite>
<statistics>
<total>
<stat pass="0" fail="4">Critical Tests</stat>
<stat pass="0" fail="4">All Tests</stat>
</total>
<tag>
<stat pass="0" info="" doc="" combined="" fail="4" links="">matko.sanseovic</stat>
<stat pass="0" info="" doc="" combined="" fail="4" links="">MFC_involved</stat>
<stat pass="0" info="" doc="" combined="" fail="4" links="">MOC_involved</stat>
<stat pass="0" info="" doc="" combined="" fail="4" links="">MTC_involved</stat>
<stat pass="0" info="" doc="" combined="" fail="4" links="">SMS_involved</stat>
<stat pass="0" info="" doc="" combined="" fail="4" links="">TNZ_supported</stat>
</tag>
<suite>
<stat pass="0" id="s1" fail="4" name="Regression-Robot-Suite">Regression-Robot-Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
