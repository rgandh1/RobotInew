<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.7.6 (Jython 2.5.3 on java1.7.0_45)" generated="20150515 11:17:55.444">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/regression-robot-suite.txt" id="s1" name="Regression-Robot-Suite">
<kw type="setup" timeout="" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Setup is running ...</arg>
</arguments>
<msg timestamp="20150515 11:18:00.648" level="INFO">Setup is running ...</msg>
<status status="PASS" endtime="20150515 11:18:00.649" starttime="20150515 11:18:00.644"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:00.651" starttime="20150515 11:18:00.624"></status>
</kw>
<test id="s1-t1" timeout="" name="Run MOC Call">
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscriber *******</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:00.679" starttime="20150515 11:18:00.676"></status>
</kw>
<kw type="kw" timeout="" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20150515 11:18:00.687" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20150515 11:18:00.686" starttime="20150515 11:18:00.682"></status>
</kw>
<kw type="kw" timeout="" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20150515 11:18:00.734" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20150515 11:18:00.735" starttime="20150515 11:18:00.730"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20150515 11:18:00.741" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20150515 11:18:00.742" starttime="20150515 11:18:00.737"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20150515 11:18:00.749" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20150515 11:18:00.750" starttime="20150515 11:18:00.744"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20150515 11:18:00.756" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20150515 11:18:00.757" starttime="20150515 11:18:00.752"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20150515 11:18:00.763" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20150515 11:18:00.764" starttime="20150515 11:18:00.759"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20150515 11:18:00.774" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20150515 11:18:00.776" starttime="20150515 11:18:00.767"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20150515 11:18:00.785" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20150515 11:18:00.787" starttime="20150515 11:18:00.779"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20150515 11:18:00.798" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20150515 11:18:00.799" starttime="20150515 11:18:00.790"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20150515 11:18:00.809" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20150515 11:18:00.811" starttime="20150515 11:18:00.803"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20150515 11:18:00.820" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20150515 11:18:00.822" starttime="20150515 11:18:00.814"></status>
</kw>
<kw type="kw" timeout="" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20150515 11:18:00.875" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:00.878" starttime="20150515 11:18:00.867"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:00.880" starttime="20150515 11:18:00.860"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20150515 11:18:00.899" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:00.902" starttime="20150515 11:18:00.891"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:00.904" starttime="20150515 11:18:00.884"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20150515 11:18:00.924" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:00.927" starttime="20150515 11:18:00.914"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:00.929" starttime="20150515 11:18:00.908"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:00.931" starttime="20150515 11:18:00.829"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20150515 11:18:02.041" level="INFO">soapUI 4.5.1 TestCase Runner</msg>
<status status="PASS" endtime="20150515 11:18:02.043" starttime="20150515 11:18:00.934"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:02.054" starttime="20150515 11:18:02.048"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:02.060" starttime="20150515 11:18:02.056"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:02.066" starttime="20150515 11:18:02.062"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:02.070" starttime="20150515 11:18:02.068"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:02.074" starttime="20150515 11:18:02.072"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:02.080" starttime="20150515 11:18:02.076"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:02.086" starttime="20150515 11:18:02.082"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:02.092" starttime="20150515 11:18:02.088"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:02.097" starttime="20150515 11:18:02.094"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:02.103" starttime="20150515 11:18:02.099"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:02.109" starttime="20150515 11:18:02.105"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:02.117" starttime="20150515 11:18:02.111"></status>
</kw>
<kw type="kw" timeout="" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20150515 11:18:02.126" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20150515 11:18:11.071" level="INFO">11:18:02,529 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/./ext] for external libraries
11:18:02,531 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
11:18:04,527 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
11:18:05,917 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.113.125]
11:18:05,918 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
11:18:05,918 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
11:18:05,919 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [1]
11:18:05,919 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [530052041010000]
11:18:05,919 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [642041010000]
11:18:05,920 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
11:18:05,920 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
11:18:05,921 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
11:18:05,921 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
11:18:05,944 INFO  [SoapUITestCaseRunner] Running soapUI tests in project [Robotframework_CRCE-Bridge]
11:18:05,944 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
11:18:05,960 INFO  [SoapUITestCaseRunner] Running soapUI testcase [createTestSubscribers]
11:18:05,962 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
11:18:06,901 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
11:18:07,032 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
11:18:07,657 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:18:07,658 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
11:18:07,859 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:18:07,867 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:18:08,074 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:18:08,075 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:18:08,075 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:18:08,075 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
11:18:08,237 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
11:18:08,883 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
11:18:08,933 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
11:18:08,936 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:18:08,938 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:18:08,938 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
11:18:09,421 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:18:09,421 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:18:09,426 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:18:09,426 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:18:09,426 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:18:09,427 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
11:18:09,513 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
11:18:09,518 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
11:18:09,564 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
11:18:09,567 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:18:09,568 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:18:09,568 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
11:18:09,583 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:18:09,583 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:18:09,587 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:18:09,587 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:18:09,588 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:18:09,588 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
11:18:09,673 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
11:18:09,682 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
11:18:09,724 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
11:18:09,727 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:18:09,728 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:18:09,729 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
11:18:10,093 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:18:10,093 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:18:10,097 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:18:10,098 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:18:10,098 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:18:10,098 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
11:18:10,182 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
11:18:10,188 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
11:18:10,228 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
11:18:10,230 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:18:10,232 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:18:10,232 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
11:18:10,407 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:18:10,407 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:18:10,417 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:18:10,418 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:18:10,418 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:18:10,418 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
11:18:10,503 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
11:18:10,519 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
11:18:10,562 INFO  [SoapUITestCaseRunner] running step [setBalance]
11:18:10,565 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:18:10,566 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:18:10,566 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
11:18:10,776 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:18:10,777 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:18:10,786 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:18:10,786 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:18:10,786 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:18:10,786 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
11:18:10,871 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
11:18:10,878 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
11:18:10,919 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
11:18:10,980 INFO  [SoapUITestCaseRunner] running step [finish_successful]
11:18:11,057 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
11:18:11,058 INFO  [SoapUITestCaseRunner] Finished running soapUI testcase [createTestSubscribers], time taken: 5056ms, status: FINISHED
11:18:11,058 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 5056ms</msg>
<status status="PASS" endtime="20150515 11:18:11.085" starttime="20150515 11:18:02.124"></status>
</kw>
<msg timestamp="20150515 11:18:11.089" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150515 11:18:11.090" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20150515 11:18:11.087" starttime="20150515 11:18:02.120"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" timeout="" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20150515 11:18:11.120" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20150515 11:18:11.119" starttime="20150515 11:18:11.115"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150515 11:18:11.126" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20150515 11:18:11.125" starttime="20150515 11:18:11.122"></status>
</kw>
<kw type="kw" timeout="" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150515 11:18:11.132" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20150515 11:18:11.131" starttime="20150515 11:18:11.128"></status>
</kw>
<kw type="kw" timeout="" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20150515 11:18:11.286" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20150515 11:18:11.304" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20150515 11:18:11.305" starttime="20150515 11:18:11.280"></status>
</kw>
<msg timestamp="20150515 11:18:11.307" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150515 11:18:11.307" level="INFO">${return_log_entry} = 2015-05-15 11:18:11,057 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150515 11:18:11.306" starttime="20150515 11:18:11.273"></status>
</kw>
<kw type="kw" timeout="" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:11.336" starttime="20150515 11:18:11.332"></status>
</kw>
<msg timestamp="20150515 11:18:11.338" level="INFO">${return_log_entry} = 2015-05-15 11:18:11,057 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150515 11:18:11.337" starttime="20150515 11:18:11.310"></status>
</kw>
<kw type="kw" timeout="" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:11.355" starttime="20150515 11:18:11.351"></status>
</kw>
<msg timestamp="20150515 11:18:11.357" level="INFO">${return_log_entry} = 2015-05-15 11:18:11,057 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150515 11:18:11.356" starttime="20150515 11:18:11.340"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" timeout="" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:11.375" starttime="20150515 11:18:11.370"></status>
</kw>
<msg timestamp="20150515 11:18:11.377" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150515 11:18:11.376" starttime="20150515 11:18:11.359"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:11.400" starttime="20150515 11:18:11.396"></status>
</kw>
<msg timestamp="20150515 11:18:11.402" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150515 11:18:11.401" starttime="20150515 11:18:11.379"></status>
</kw>
<msg timestamp="20150515 11:18:11.404" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150515 11:18:11.403" starttime="20150515 11:18:11.094"></status>
</kw>
<kw type="kw" timeout="" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:11.428" starttime="20150515 11:18:11.425"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:11.432" starttime="20150515 11:18:11.429"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:11.437" starttime="20150515 11:18:11.434"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20150515 11:18:11.465" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20150515 11:18:11.466" starttime="20150515 11:18:11.454"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:11.467" starttime="20150515 11:18:11.450"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:11.468" starttime="20150515 11:18:11.439"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:11.469" starttime="20150515 11:18:11.407"></status>
</kw>
<msg timestamp="20150515 11:18:11.472" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20150515 11:18:11.471" starttime="20150515 11:18:00.692"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20150515 11:18:11.478" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150515 11:18:11.479" starttime="20150515 11:18:11.475"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Connect with XDR and start the log monitoring</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:11.484" starttime="20150515 11:18:11.481"></status>
</kw>
<kw type="kw" timeout="" name="${ssh_connection_xdr} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" timeout="" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" timeout="" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:11.543" starttime="20150515 11:18:11.540"></status>
</kw>
<kw type="kw" timeout="" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" timeout="" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:11.693" starttime="20150515 11:18:11.555"></status>
</kw>
<msg timestamp="20150515 11:18:11.695" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20150515 11:18:11.695" starttime="20150515 11:18:11.545"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" timeout="" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150515 11:18:11.712" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150515 11:18:12.145" level="INFO">Read output: Last login: Fri May 15 11:17:09 2015 from 10.189.251.54
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150515 11:18:12.147" starttime="20150515 11:18:11.708"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:12.149" starttime="20150515 11:18:11.697"></status>
</kw>
<msg timestamp="20150515 11:18:12.153" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20150515 11:18:12.151" starttime="20150515 11:18:11.516"></status>
</kw>
<kw type="kw" timeout="" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" timeout="" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:12.175" starttime="20150515 11:18:12.171"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>walter.heincz: 2015-02-18 added sudo due to troubles with Matko testCase but did not verify yet with existing e2e testcases</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:12.179" starttime="20150515 11:18:12.177"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>matko.sanseovic: 2015-02-26 change reverted</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:12.183" starttime="20150515 11:18:12.181"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Start Command</arg>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:12.187" starttime="20150515 11:18:12.184"></status>
</kw>
<kw type="kw" timeout="" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150515 11:18:12.193" level="INFO">Starting command 'tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log'.</msg>
<status status="PASS" endtime="20150515 11:18:12.200" starttime="20150515 11:18:12.189"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:12.201" starttime="20150515 11:18:12.156"></status>
</kw>
<msg timestamp="20150515 11:18:12.205" level="INFO">${ssh_connection_xdr} = 1</msg>
<status status="PASS" endtime="20150515 11:18:12.203" starttime="20150515 11:18:11.491"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR ssh connection: ${ssh_connection_xdr}</arg>
</arguments>
<msg timestamp="20150515 11:18:12.212" level="INFO">XDR ssh connection: 1</msg>
<status status="PASS" endtime="20150515 11:18:12.212" starttime="20150515 11:18:12.208"></status>
</kw>
<kw type="kw" timeout="" name="${ssh_connection_etl} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${ETL_LOG_FILE_PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" timeout="" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" timeout="" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:12.264" starttime="20150515 11:18:12.261"></status>
</kw>
<kw type="kw" timeout="" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" timeout="" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:12.343" starttime="20150515 11:18:12.276"></status>
</kw>
<msg timestamp="20150515 11:18:12.346" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20150515 11:18:12.345" starttime="20150515 11:18:12.266"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" timeout="" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20150515 11:18:12.371" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20150515 11:18:12.759" level="INFO">Read output: Last login: Fri May 15 11:18:11 2015 from 10.189.251.54
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20150515 11:18:12.760" starttime="20150515 11:18:12.366"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:12.762" starttime="20150515 11:18:12.349"></status>
</kw>
<msg timestamp="20150515 11:18:12.766" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20150515 11:18:12.764" starttime="20150515 11:18:12.242"></status>
</kw>
<kw type="kw" timeout="" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" timeout="" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:12.786" starttime="20150515 11:18:12.783"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>walter.heincz: 2015-02-18 added sudo due to troubles with Matko testCase but did not verify yet with existing e2e testcases</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:12.790" starttime="20150515 11:18:12.788"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>matko.sanseovic: 2015-02-26 change reverted</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:12.794" starttime="20150515 11:18:12.792"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Start Command</arg>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:12.798" starttime="20150515 11:18:12.795"></status>
</kw>
<kw type="kw" timeout="" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150515 11:18:12.804" level="INFO">Starting command 'tail -f /var/log/inew/etl/5.3.1/inew-mvno-etl.log &gt; tmpfilemonitor2.log'.</msg>
<status status="PASS" endtime="20150515 11:18:12.808" starttime="20150515 11:18:12.799"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:12.809" starttime="20150515 11:18:12.769"></status>
</kw>
<msg timestamp="20150515 11:18:12.812" level="INFO">${ssh_connection_etl} = 2</msg>
<status status="PASS" endtime="20150515 11:18:12.811" starttime="20150515 11:18:12.219"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>ETL ssh connection: ${ssh_connection_etl}</arg>
</arguments>
<msg timestamp="20150515 11:18:12.817" level="INFO">ETL ssh connection: 2</msg>
<status status="PASS" endtime="20150515 11:18:12.818" starttime="20150515 11:18:12.813"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Check DB *******</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:12.822" starttime="20150515 11:18:12.820"></status>
</kw>
<kw type="kw" timeout="" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${XDR DB HOST}:${XDR DB PORT}/${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:12.925" starttime="20150515 11:18:12.824"></status>
</kw>
<kw type="kw" timeout="" name="${rows_count_before} = CountDBTableRows">
<doc></doc>
<arguments>
<arg>crce_cdr_2015w20</arg>
</arguments>
<kw type="kw" timeout="" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table};</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${selectStatement}</arg>
</arguments>
<msg timestamp="20150515 11:18:12.956" level="INFO">select * from crce_cdr_2015w20;</msg>
<status status="PASS" endtime="20150515 11:18:12.957" starttime="20150515 11:18:12.953"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:12.960" starttime="20150515 11:18:12.958"></status>
</kw>
<kw type="kw" timeout="" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:13.039" starttime="20150515 11:18:12.963"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:13.044" starttime="20150515 11:18:13.042"></status>
</kw>
<kw type="kw" timeout="" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150515 11:18:13.053" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150515 11:18:13.056" level="INFO">${queryResultSetLines} = 1002822|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-05-11 09:48:24.109+00|2015-05-11 09:48:20+00|5023300000|1|1|27497208|642041010000|PREPAID|OK|null|ACTIVE|null|1|NONE|1.2|FinalCommit|BasicSession|53005204...</msg>
<status status="PASS" endtime="20150515 11:18:13.055" starttime="20150515 11:18:13.048"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:13.060" starttime="20150515 11:18:13.058"></status>
</kw>
<kw type="kw" timeout="" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150515 11:18:13.065" level="INFO">30 lines returned</msg>
<msg timestamp="20150515 11:18:13.068" level="INFO">@{queryResultSet} = [ 1002822|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-05-11 09:48:24.109+00|2015-05-11 09:48:20+00|5023300000|1|1|27497208|642041010000|PREPAID|OK|null|ACTIVE|null|1|NONE|1.2|FinalCommit|BasicSession|530052...</msg>
<status status="PASS" endtime="20150515 11:18:13.066" starttime="20150515 11:18:13.061"></status>
</kw>
<msg timestamp="20150515 11:18:13.073" level="INFO">@{queryRows} = [ 1002822|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-05-11 09:48:24.109+00|2015-05-11 09:48:20+00|5023300000|1|1|27497208|642041010000|PREPAID|OK|null|ACTIVE|null|1|NONE|1.2|FinalCommit|BasicSession|530052...</msg>
<status status="PASS" endtime="20150515 11:18:13.070" starttime="20150515 11:18:12.940"></status>
</kw>
<kw type="kw" timeout="" name="${number_of_rows} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150515 11:18:13.079" level="INFO">Length is 30</msg>
<msg timestamp="20150515 11:18:13.080" level="INFO">${number_of_rows} = 30</msg>
<status status="PASS" endtime="20150515 11:18:13.079" starttime="20150515 11:18:13.075"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${number_of_rows}</arg>
</arguments>
<msg timestamp="20150515 11:18:13.085" level="INFO">30</msg>
<status status="PASS" endtime="20150515 11:18:13.085" starttime="20150515 11:18:13.082"></status>
</kw>
<msg timestamp="20150515 11:18:13.089" level="INFO">${rows_count_before} = 30</msg>
<status status="PASS" endtime="20150515 11:18:13.087" starttime="20150515 11:18:12.927"></status>
</kw>
<kw type="kw" timeout="" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150515 11:18:13.093" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150515 11:18:13.094" starttime="20150515 11:18:13.091"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MOC *******</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:13.098" starttime="20150515 11:18:13.096"></status>
</kw>
<kw type="kw" timeout="" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" timeout="" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" timeout="" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20150515 11:18:13.161" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20150515 11:18:13.160" starttime="20150515 11:18:13.156"></status>
</kw>
<kw type="kw" timeout="" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20150515 11:18:13.167" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20150515 11:18:13.166" starttime="20150515 11:18:13.163"></status>
</kw>
<kw type="kw" timeout="" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20150515 11:18:13.173" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20150515 11:18:13.172" starttime="20150515 11:18:13.169"></status>
</kw>
<kw type="kw" timeout="" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20150515 11:18:13.181" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20150515 11:18:13.180" starttime="20150515 11:18:13.175"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:13.187" starttime="20150515 11:18:13.184"></status>
</kw>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20150515 11:18:13.195" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:13.196" starttime="20150515 11:18:13.188"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:13.200" starttime="20150515 11:18:13.198"></status>
</kw>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20150515 11:18:13.207" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:13.208" starttime="20150515 11:18:13.202"></status>
</kw>
<kw type="kw" timeout="" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20150515 11:18:13.217" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:13.218" starttime="20150515 11:18:13.210"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:13.221" starttime="20150515 11:18:13.219"></status>
</kw>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20150515 11:18:13.228" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:13.230" starttime="20150515 11:18:13.223"></status>
</kw>
<kw type="kw" timeout="" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20150515 11:18:13.239" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:13.240" starttime="20150515 11:18:13.231"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:13.244" starttime="20150515 11:18:13.242"></status>
</kw>
<kw type="kw" timeout="" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20150515 11:18:13.282" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-5.2.2.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20150515 11:18:19.198" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150515 11:18:19.196" starttime="20150515 11:18:13.246"></status>
</kw>
<msg timestamp="20150515 11:18:19.202" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150515 11:18:19.200" starttime="20150515 11:18:13.128"></status>
</kw>
<msg timestamp="20150515 11:18:19.207" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20150515 11:18:19.204" starttime="20150515 11:18:13.102"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG session failed</arg>
</arguments>
<msg timestamp="20150515 11:18:19.217" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150515 11:18:19.219" starttime="20150515 11:18:19.211"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20150515 11:18:24.227" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20150515 11:18:24.229" starttime="20150515 11:18:19.222"></status>
</kw>
<kw type="kw" timeout="" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_xdr}</arg>
<arg>MOC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" timeout="" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" timeout="" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:24.268" starttime="20150515 11:18:24.265"></status>
</kw>
<kw type="kw" timeout="" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150515 11:18:24.278" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150515 11:18:24.277" starttime="20150515 11:18:24.270"></status>
</kw>
<kw type="kw" timeout="" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150515 11:18:24.287" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150515 11:18:24.288" starttime="20150515 11:18:24.280"></status>
</kw>
<kw type="kw" timeout="" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" timeout="" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:24.309" starttime="20150515 11:18:24.305"></status>
</kw>
<kw type="kw" timeout="" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150515 11:18:24.316" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150515 11:18:24.363" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150515 11:18:24.364" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150515 11:18:24.364" starttime="20150515 11:18:24.312"></status>
</kw>
<kw type="kw" timeout="" name="${SEPARATOR} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(63))</arg>
</arguments>
<msg timestamp="20150515 11:18:24.375" level="INFO">${SEPARATOR} = ?</msg>
<status status="PASS" endtime="20150515 11:18:24.374" starttime="20150515 11:18:24.366"></status>
</kw>
<kw type="kw" timeout="" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<msg timestamp="20150515 11:18:24.382" level="INFO">Executing command 'sudo ps U qa_automation --no-heading | grep tail | grep -v grep'.</msg>
<msg timestamp="20150515 11:18:24.475" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150515 11:18:24.477" level="INFO">${processes_string} = 11940 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log
11955 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log
11990 ?        S...</msg>
<status status="PASS" endtime="20150515 11:18:24.476" starttime="20150515 11:18:24.377"></status>
</kw>
<kw type="kw" timeout="" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150515 11:18:24.486" level="INFO">@{processes_list} = [ 11940 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log | 11955 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log | 11990 ?   ...</msg>
<status status="PASS" endtime="20150515 11:18:24.485" starttime="20150515 11:18:24.479"></status>
</kw>
<kw type="for" timeout="" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" timeout="" name="${process} = 11940 ?        Ss     0:00 bash -c tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log &gt; tmpfilemonitor1.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" timeout="" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SEPARATOR}</arg>
</arguments>
<msg timestamp="20150515 11:18:24.502" level="INFO">${pid} = 11940 </msg>
<status status="PASS" endtime="20150515 11:18:24.501" starttime="20150515 11:18:24.494"></status>
</kw>
<kw type="kw" timeout="" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150515 11:18:24.510" level="INFO">Executing command 'sudo kill -9 11940 '.</msg>
<msg timestamp="20150515 11:18:24.570" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150515 11:18:24.571" starttime="20150515 11:18:24.505"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:24.572" starttime="20150515 11:18:24.491"></status>
</kw>
<kw type="foritem" timeout="" name="${process} = 11955 ?        S      0:00 tail -f /var/log/inew/xdr/5.3.0/inew-mvno-xdr.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" timeout="" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SEPARATOR}</arg>
</arguments>
<msg timestamp="20150515 11:18:24.580" level="INFO">${pid} = 11955 </msg>
<status status="PASS" endtime="20150515 11:18:24.579" starttime="20150515 11:18:24.575"></status>
</kw>
<kw type="kw" timeout="" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150515 11:18:24.585" level="INFO">Executing command 'sudo kill -9 11955 '.</msg>
<msg timestamp="20150515 11:18:24.670" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150515 11:18:24.671" starttime="20150515 11:18:24.581"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:24.672" starttime="20150515 11:18:24.573"></status>
</kw>
<kw type="foritem" timeout="" name="${process} = 11990 ?        Ss     0:00 bash -c tail -f /var/log/inew/etl/5.3.1/inew-mvno-etl.log &gt; tmpfilemonitor2.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" timeout="" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SEPARATOR}</arg>
</arguments>
<msg timestamp="20150515 11:18:24.679" level="INFO">${pid} = 11990 </msg>
<status status="PASS" endtime="20150515 11:18:24.679" starttime="20150515 11:18:24.674"></status>
</kw>
<kw type="kw" timeout="" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150515 11:18:24.685" level="INFO">Executing command 'sudo kill -9 11990 '.</msg>
<msg timestamp="20150515 11:18:24.772" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150515 11:18:24.773" starttime="20150515 11:18:24.681"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:24.774" starttime="20150515 11:18:24.673"></status>
</kw>
<kw type="foritem" timeout="" name="${process} = 12005 ?        S      0:00 tail -f /var/log/inew/etl/5.3.1/inew-mvno-etl.log">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" timeout="" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SEPARATOR}</arg>
</arguments>
<msg timestamp="20150515 11:18:24.781" level="INFO">${pid} = 12005 </msg>
<status status="PASS" endtime="20150515 11:18:24.780" starttime="20150515 11:18:24.776"></status>
</kw>
<kw type="kw" timeout="" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150515 11:18:24.786" level="INFO">Executing command 'sudo kill -9 12005 '.</msg>
<msg timestamp="20150515 11:18:24.871" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150515 11:18:24.872" starttime="20150515 11:18:24.782"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:24.873" starttime="20150515 11:18:24.774"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:24.873" starttime="20150515 11:18:24.488"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:24.874" starttime="20150515 11:18:24.290"></status>
</kw>
<kw type="kw" timeout="" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150515 11:18:24.879" level="INFO">Starting command 'cat tmpfilemonitor1.log'.</msg>
<status status="PASS" endtime="20150515 11:18:24.913" starttime="20150515 11:18:24.875"></status>
</kw>
<kw type="kw" timeout="" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150515 11:18:24.917" level="INFO">Reading output of command 'cat tmpfilemonitor1.log'.</msg>
<msg timestamp="20150515 11:18:24.964" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150515 11:18:24.967" level="INFO">${stdout_string} = 	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:255)
	at org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:559)
	at org.postgresql.jdbc2.Abstr...</msg>
<status status="PASS" endtime="20150515 11:18:24.966" starttime="20150515 11:18:24.915"></status>
</kw>
<kw type="kw" timeout="" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150515 11:18:24.976" level="INFO">Executing command 'rm tmpfilemonitor1.log'.</msg>
<msg timestamp="20150515 11:18:25.047" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150515 11:18:25.049" starttime="20150515 11:18:24.970"></status>
</kw>
<msg timestamp="20150515 11:18:25.053" level="INFO">${tailed_text} = 	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:255)
	at org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:559)
	at org.postgresql.jdbc2.Abstr...</msg>
<status status="PASS" endtime="20150515 11:18:25.051" starttime="20150515 11:18:24.250"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.070" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:25.071" starttime="20150515 11:18:25.064"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:25.072" starttime="20150515 11:18:25.055"></status>
</kw>
<kw type="kw" timeout="" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" timeout="" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.091" starttime="20150515 11:18:25.087"></status>
</kw>
<kw type="kw" timeout="" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.096" starttime="20150515 11:18:25.092"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:25.098" starttime="20150515 11:18:25.074"></status>
</kw>
<msg timestamp="20150515 11:18:25.102" level="INFO">${tailed_text} = 	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:255)
	at org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:559)
	at org.postgresql.jdbc2.Abstr...</msg>
<status status="PASS" endtime="20150515 11:18:25.100" starttime="20150515 11:18:24.234"></status>
</kw>
<kw type="kw" timeout="" name="Check XDR log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>MOC_${TAILED_XDR_LOG_FILE}</arg>
</arguments>
<kw type="kw" timeout="" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.121" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-xdr.log&lt;/a&gt;'</msg>
<msg timestamp="20150515 11:18:25.123" level="INFO">${temp} = 	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:255)
	at org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:559)
	at org.postgresql.jdbc2.Abstr...</msg>
<status status="PASS" endtime="20150515 11:18:25.123" starttime="20150515 11:18:25.118"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.128" level="INFO">	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:255)
	at org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:559)
	at org.postgresql.jdbc2.AbstractJdbc2Statement.executeWithFlags(AbstractJdbc2Statement.java:417)
	at org.postgresql.jdbc2.AbstractJdbc2Statement.executeUpdate(AbstractJdbc2Statement.java:363)
	at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeUpdate(NewProxyPreparedStatement.java:105)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:208)
	... 62 more

[2015-05-15 11:18:10,779][INFO ][Camel (ticket-router) thread #67 - JmsConsumer[inew-cs.crce.conf]][StandardTicketRoute                               ][  96] Received ticket [ticket=5.3|130|true|1|CRCE|CONF|crce01.tb13|2015-05-15T11:18:10.771+0000|2015-05-15T11:18:10.771+0000|ws-setBalance@crce01.tb1312952881912130988421|1|1|28877399|642041010000|PREPAID|ACTIVE||1|NONE|OK||1.3|setBalance||1||TestAutomation||English|530052041010000|ACTIVE|101001||10000000|||NZD||10000000|10000000|15730641|101001|PREPAID||||||2015-05-15T11:18:09.949+0000|2016-05-15T11:18:09.949+0000|OK|]
[2015-05-15 11:18:10,831][INFO ][Camel (ticket-router) thread #67 - JmsConsumer[inew-cs.crce.conf]][StandardTicketRoute                               ][ 447] Ticket successfully routed [ticket=5.3|130|true|1|CRCE|CONF|crce01.tb13|2015-05-15T11:18:10.771+0000|2015-05-15T11:18:10.771+0000|ws-setBalance@crce01.tb1312952881912130988421|1|1|28877399|642041010000|PREPAID|ACTIVE||1|NONE|OK||1.3|setBalance||1||TestAutomation||English|530052041010000|ACTIVE|101001||10000000|||NZD||10000000|10000000|15730641|101001|PREPAID||||||2015-05-15T11:18:09.949+0000|2016-05-15T11:18:09.949+0000|OK|, time=27ms]
[2015-05-15 11:18:17,285][INFO ][Camel (ticket-router) thread #108 - JmsConsumer[TNZ_MOC_TICKETS]][StandardTicketRoute                               ][  96] Received ticket [ticket=5.3|420|true|1||SDR|in-app01|2015-05-15T11:18:17.264+0000|2015-05-15T11:18:15.027+0000|5026700000||1|28877399|642041010000|PREPAID|ACTIVE||1||||5.3|com.inewcs.mvno.core.servicefeatures.common.tickets.MonitoringTicketWriterImpl|530052041010000||false|642041010000|642041010000|Originating||Voice|64278|64278|64278|||false|2015-05-15T11:18:17.023+0000|0|OK||]
[2015-05-15 11:18:17,341][INFO ][Camel (ticket-router) thread #108 - JmsConsumer[TNZ_MOC_TICKETS]][StandardTicketRoute                               ][ 447] Ticket successfully routed [ticket=5.3|420|true|1||SDR|in-app01|2015-05-15T11:18:17.264+0000|2015-05-15T11:18:15.027+0000|5026700000||1|28877399|642041010000|PREPAID|ACTIVE||1||||5.3|com.inewcs.mvno.core.servicefeatures.common.tickets.MonitoringTicketWriterImpl|530052041010000||false|642041010000|642041010000|Originating||Voice|64278|64278|64278|||false|2015-05-15T11:18:17.023+0000|0|OK||, time=28ms]
[2015-05-15 11:18:18,285][INFO ][Camel (ticket-router) thread #113 - JmsConsumer[TNZ_MOC_TICKETS]][StandardTicketRoute                               ][  96] Received ticket [ticket=5.3|421|true|1||SDR|in-app01|2015-05-15T11:18:18.276+0000|2015-05-15T11:18:15.027+0000|5026700000||1|28877399|642041010000|PREPAID|ACTIVE||1||||5.3|com.inewcs.mvno.core.servicefeatures.common.tickets.MonitoringTicketWriterImpl|530052041010000||false|642041010000|642041010000|Originating||Voice|64278|64278|64278|||false|2015-05-15T11:18:17.023+0000|1000|OK|OK|]
[2015-05-15 11:18:18,328][INFO ][Camel (ticket-router) thread #113 - JmsConsumer[TNZ_MOC_TICKETS]][StandardTicketRoute                               ][ 447] Ticket successfully routed [ticket=5.3|421|true|1||SDR|in-app01|2015-05-15T11:18:18.276+0000|2015-05-15T11:18:15.027+0000|5026700000||1|28877399|642041010000|PREPAID|ACTIVE||1||||5.3|com.inewcs.mvno.core.servicefeatures.common.tickets.MonitoringTicketWriterImpl|530052041010000||false|642041010000|642041010000|Originating||Voice|64278|64278|64278|||false|2015-05-15T11:18:17.023+0000|1000|OK|OK|, time=23ms]
[2015-05-15 11:18:18,508][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-05-15T11:18:18.497+0000|2015-05-15T11:18:15.000+0000|5026700000|1|1|28877399|642041010000|PREPAID|ACTIVE||1|NONE|OK||1.2|FinalCommit|BasicSession|1|530052041010000|642041010000|false|642041010000|(network) bumblebee|Local (on-net)|Originating||||Voice|false|64278|(network) TNZ #8|2015-05-15T11:18:17.000+0000|0|1000|60000|0|0|0001ABFF0E|false|101001|15730641|101001|20000|20000|NZD|9980000|PREPAID|OK||]
[2015-05-15 11:18:18,553][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-05-15T11:18:18.497+0000|2015-05-15T11:18:15.000+0000|5026700000|1|1|28877399|642041010000|PREPAID|ACTIVE||1|NONE|OK||1.2|FinalCommit|BasicSession|1|530052041010000|642041010000|false|642041010000|(network) bumblebee|Local (on-net)|Originating||||Voice|false|64278|(network) TNZ #8|2015-05-15T11:18:17.000+0000|0|1000|60000|0|0|0001ABFF0E|false|101001|15730641|101001|20000|20000|NZD|9980000|PREPAID|OK||, time=25ms]</msg>
<status status="PASS" endtime="20150515 11:18:25.133" starttime="20150515 11:18:25.125"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.138" starttime="20150515 11:18:25.135"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.142" starttime="20150515 11:18:25.139"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.148" starttime="20150515 11:18:25.144"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>Originating||Voice</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.153" starttime="20150515 11:18:25.150"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:25.154" starttime="20150515 11:18:25.104"></status>
</kw>
<kw type="kw" timeout="" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection_etl}</arg>
<arg>MOC_${TAILED_ETL_LOG_FILE}</arg>
</arguments>
<kw type="kw" timeout="" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" timeout="" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.205" starttime="20150515 11:18:25.200"></status>
</kw>
<kw type="kw" timeout="" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20150515 11:18:25.218" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20150515 11:18:25.216" starttime="20150515 11:18:25.207"></status>
</kw>
<kw type="kw" timeout="" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.227" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20150515 11:18:25.228" starttime="20150515 11:18:25.220"></status>
</kw>
<kw type="kw" timeout="" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" timeout="" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.247" starttime="20150515 11:18:25.244"></status>
</kw>
<kw type="kw" timeout="" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20150515 11:18:25.253" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20150515 11:18:25.300" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150515 11:18:25.302" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20150515 11:18:25.301" starttime="20150515 11:18:25.249"></status>
</kw>
<kw type="kw" timeout="" name="${SEPARATOR} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(63))</arg>
</arguments>
<msg timestamp="20150515 11:18:25.312" level="INFO">${SEPARATOR} = ?</msg>
<status status="PASS" endtime="20150515 11:18:25.311" starttime="20150515 11:18:25.304"></status>
</kw>
<kw type="kw" timeout="" name="${processes_string} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<msg timestamp="20150515 11:18:25.318" level="INFO">Executing command 'sudo ps U qa_automation --no-heading | grep tail | grep -v grep'.</msg>
<msg timestamp="20150515 11:18:25.417" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20150515 11:18:25.419" level="INFO">${processes_string} = </msg>
<status status="PASS" endtime="20150515 11:18:25.419" starttime="20150515 11:18:25.314"></status>
</kw>
<kw type="kw" timeout="" name="@{processes_list} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.426" level="INFO">@{processes_list} = [  ]</msg>
<status status="PASS" endtime="20150515 11:18:25.425" starttime="20150515 11:18:25.421"></status>
</kw>
<kw type="for" timeout="" name="${process} IN [ @{processes_list} ]">
<doc></doc>
<arguments>
</arguments>
<kw type="foritem" timeout="" name="${process} = ">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" timeout="" name="${pid} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${process}</arg>
<arg>${SEPARATOR}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.436" level="INFO">${pid} = </msg>
<status status="PASS" endtime="20150515 11:18:25.435" starttime="20150515 11:18:25.430"></status>
</kw>
<kw type="kw" timeout="" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo kill -9 ${pid}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.441" level="INFO">Executing command 'sudo kill -9 '.</msg>
<msg timestamp="20150515 11:18:25.516" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20150515 11:18:25.519" starttime="20150515 11:18:25.438"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:25.519" starttime="20150515 11:18:25.428"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:25.520" starttime="20150515 11:18:25.427"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:25.521" starttime="20150515 11:18:25.230"></status>
</kw>
<kw type="kw" timeout="" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150515 11:18:25.526" level="INFO">Starting command 'cat tmpfilemonitor2.log'.</msg>
<status status="PASS" endtime="20150515 11:18:25.559" starttime="20150515 11:18:25.522"></status>
</kw>
<kw type="kw" timeout="" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20150515 11:18:25.563" level="INFO">Reading output of command 'cat tmpfilemonitor2.log'.</msg>
<msg timestamp="20150515 11:18:25.632" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20150515 11:18:25.635" level="INFO">${stdout_string} = [2015-05-15 11:18:10,149][INFO ][Camel (camel-1) thread #5 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][DimSubscriberDao                                  ][ 349] Updated dim_subscriber [rowsCo...</msg>
<status status="PASS" endtime="20150515 11:18:25.634" starttime="20150515 11:18:25.561"></status>
</kw>
<kw type="kw" timeout="" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20150515 11:18:25.643" level="INFO">Executing command 'rm tmpfilemonitor2.log'.</msg>
<msg timestamp="20150515 11:18:25.700" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20150515 11:18:25.701" starttime="20150515 11:18:25.638"></status>
</kw>
<msg timestamp="20150515 11:18:25.704" level="INFO">${tailed_text} = [2015-05-15 11:18:10,149][INFO ][Camel (camel-1) thread #5 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][DimSubscriberDao                                  ][ 349] Updated dim_subscriber [rowsCo...</msg>
<status status="PASS" endtime="20150515 11:18:25.703" starttime="20150515 11:18:25.180"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.720" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-etl.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-etl.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:25.721" starttime="20150515 11:18:25.715"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:25.722" starttime="20150515 11:18:25.705"></status>
</kw>
<kw type="kw" timeout="" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" timeout="" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.740" starttime="20150515 11:18:25.737"></status>
</kw>
<kw type="kw" timeout="" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.745" starttime="20150515 11:18:25.742"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:25.747" starttime="20150515 11:18:25.724"></status>
</kw>
<msg timestamp="20150515 11:18:25.749" level="INFO">${tailed_text} = [2015-05-15 11:18:10,149][INFO ][Camel (camel-1) thread #5 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][DimSubscriberDao                                  ][ 349] Updated dim_subscriber [rowsCo...</msg>
<status status="PASS" endtime="20150515 11:18:25.749" starttime="20150515 11:18:25.158"></status>
</kw>
<kw type="kw" timeout="" name="Check ETL log">
<doc>Checks the tailed log file created on ETL.</doc>
<arguments>
<arg>MOC_${TAILED_ETL_LOG_FILE}</arg>
</arguments>
<kw type="kw" timeout="" name="${temp} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${log_file}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.768" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-etl.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/MOC_ssh_tail_log-etl.log&lt;/a&gt;'</msg>
<msg timestamp="20150515 11:18:25.771" level="INFO">${temp} = [2015-05-15 11:18:10,149][INFO ][Camel (camel-1) thread #5 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][DimSubscriberDao                                  ][ 349] Updated dim_subscriber [rowsCo...</msg>
<status status="PASS" endtime="20150515 11:18:25.770" starttime="20150515 11:18:25.765"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.775" level="INFO">[2015-05-15 11:18:10,149][INFO ][Camel (camel-1) thread #5 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][DimSubscriberDao                                  ][ 349] Updated dim_subscriber [rowsCount=1, set={current_state=ACTIVE, activation_date=Fri May 15 23:18:10 UTC 2015}, where={subscriber_profile_id=28877399}]
[2015-05-15 11:18:10,241][INFO ][Camel (camel-1) thread #5 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][SubscriberLifecycleFactDao                        ][ 113] Inserted to fact_subscriber_lifecycle [id=51219823, record=SubscriberLifecycleFactRecord [id=51219823, sessionCreationTimestamp=Fri May 15 11:18:10 UTC 2015, sessionId=activateSubscriber@crce01.tb1312952881221247460420, subscriberId=516842, dateId=20150515, timeId=1398, lifecycleEventId=16, mvnoId=1, newImsi=null, newMsisdn=null]]
[2015-05-15 11:18:10,825][INFO ][Camel (camel-1) thread #1 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketCleaner                               ][  96] Cleaning ticket [ticket=5.3|130|true|1|CRCE|CONF|crce01.tb13|2015-05-15T11:18:10.771+0000|2015-05-15T11:18:10.771+0000|ws-setBalance@crce01.tb1312952881912130988421|1|1|28877399|642041010000|PREPAID|ACTIVE||1|NONE|OK||1.3|setBalance||1||TestAutomation||English|530052041010000|ACTIVE|101001||10000000|||NZD||10000000|10000000|15730641|101001|PREPAID||||||2015-05-15T11:18:09.949+0000|2016-05-15T11:18:09.949+0000|OK|]
[2015-05-15 11:18:10,826][INFO ][Camel (camel-1) thread #1 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketCleaner                               ][  96] Cleaned ticket [ticket=5.3|130|true|1|CRCE|CONF|crce01.tb13|2015-05-15T11:18:10.771+0000|2015-05-15T11:18:10.771+0000|ws-setBalance@crce01.tb1312952881912130988421|1|1|28877399|642041010000|PREPAID|ACTIVE||1|NONE|OK||1.3|setBalance||1||TestAutomation||English|530052041010000|ACTIVE|101001||10000000|||NZD||10000000|10000000|15730641|101001|PREPAID||||||2015-05-15T11:18:09.949+0000|2016-05-15T11:18:09.949+0000|OK|]
[2015-05-15 11:18:10,826][INFO ][Camel (camel-1) thread #1 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketHandler                               ][  96] Processing ticket [rawTicket=5.3|130|true|1|CRCE|CONF|crce01.tb13|2015-05-15T11:18:10.771+0000|2015-05-15T11:18:10.771+0000|ws-setBalance@crce01.tb1312952881912130988421|1|1|28877399|642041010000|PREPAID|ACTIVE||1|NONE|OK||1.3|setBalance||1||TestAutomation||English|530052041010000|ACTIVE|101001||10000000|||NZD||10000000|10000000|15730641|101001|PREPAID||||||2015-05-15T11:18:09.949+0000|2016-05-15T11:18:09.949+0000|OK|]
[2015-05-15 11:18:10,828][INFO ][Camel (camel-1) thread #1 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketHandler                               ][  96] Unmarshalled ticket [unmarshalledTicket=header::[version=5.3, ticketType=CONF, ticketTypeId=130, node=crce01.tb13, application=CRCE, ticketCreationTimestamp=2015-05-15T11:18:10.771+0000, sessionCreationTimestamp=2015-05-15T11:18:10.771+0000, sessionId=ws-setBalance@crce01.tb1312952881912130988421, transactionId=1, sequenceId=1, provider=1, subscriberId=28877399, subscriberAddress=642041010000, subscriberType=PREPAID, subscriberState=ACTIVE, additionalStateInformation=null, subscriberLanguage=1, groupId=null, notificationChannel=NONE, isSuccess=true, errorCode=OK], body::[recordVersion=1.3, operation=setBalance, feature=null, sequenceTotal=1, transparentData=null, charginResult=OK, subscriberImsi=530052041010000, subscriberLanguage=English, subscriberActivationDate=2015-05-15T11:18:09.949+0000, subscriberExpiryDate=2016-05-15T11:18:09.949+0000, tariffId=101001, nextTariffId=null, accountId=15730641, accountReferenceId=101001, accountType=PREPAID, accountStatus=ACTIVE, accountCurrency=NZD, accountLimit=null, accountClosingBalance=10000000, addAmount=null, setBalance=10000000, transactionFee=10000000, oldValue=null, newValue=null, bundleCode=null, billingPeriodStartDate=null, billingPeriodEndDate=null, fnfAction=null, fnfNumber=null, serviceType=TestAutomation, customerCareUser=null]]
[2015-05-15 11:18:10,829][INFO ][Camel (camel-1) thread #1 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][confirmationTicketHandler                         ][  96] Processing ticket [rawTicket=header::[version=5.3, ticketType=CONF, ticketTypeId=130, node=crce01.tb13, application=CRCE, ticketCreationTimestamp=2015-05-15T11:18:10.771+0000, sessionCreationTimestamp=2015-05-15T11:18:10.771+0000, sessionId=ws-setBalance@crce01.tb1312952881912130988421, transactionId=1, sequenceId=1, provider=1, subscriberId=28877399, subscriberAddress=642041010000, subscriberType=PREPAID, subscriberState=ACTIVE, additionalStateInformation=null, subscriberLanguage=1, groupId=null, notificationChannel=NONE, isSuccess=true, errorCode=OK], body::[recordVersion=1.3, operation=setBalance, feature=null, sequenceTotal=1, transparentData=null, charginResult=OK, subscriberImsi=530052041010000, subscriberLanguage=English, subscriberActivationDate=2015-05-15T11:18:09.949+0000, subscriberExpiryDate=2016-05-15T11:18:09.949+0000, tariffId=101001, nextTariffId=null, accountId=15730641, accountReferenceId=101001, accountType=PREPAID, accountStatus=ACTIVE, accountCurrency=NZD, accountLimit=null, accountClosingBalance=10000000, addAmount=null, setBalance=10000000, transactionFee=10000000, oldValue=null, newValue=null, bundleCode=null, billingPeriodStartDate=null, billingPeriodEndDate=null, fnfAction=null, fnfNumber=null, serviceType=TestAutomation, customerCareUser=null]]
[2015-05-15 11:18:10,830][INFO ][Camel (camel-1) thread #1 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][confirmationTicketHandler                         ][  96] Processing ticket [rawTicket=header::[version=5.3, ticketType=CONF, ticketTypeId=130, node=crce01.tb13, application=CRCE, ticketCreationTimestamp=2015-05-15T11:18:10.771+0000, sessionCreationTimestamp=2015-05-15T11:18:10.771+0000, sessionId=ws-setBalance@crce01.tb1312952881912130988421, transactionId=1, sequenceId=1, provider=1, subscriberId=28877399, subscriberAddress=642041010000, subscriberType=PREPAID, subscriberState=ACTIVE, additionalStateInformation=null, subscriberLanguage=1, groupId=null, notificationChannel=NONE, isSuccess=true, errorCode=OK], body::[recordVersion=1.3, operation=setBalance, feature=null, sequenceTotal=1, transparentData=null, charginResult=OK, subscriberImsi=530052041010000, subscriberLanguage=English, subscriberActivationDate=2015-05-15T11:18:09.949+0000, subscriberExpiryDate=2016-05-15T11:18:09.949+0000, tariffId=101001, nextTariffId=null, accountId=15730641, accountReferenceId=101001, accountType=PREPAID, accountStatus=ACTIVE, accountCurrency=NZD, accountLimit=null, accountClosingBalance=10000000, addAmount=null, setBalance=10000000, transactionFee=10000000, oldValue=null, newValue=null, bundleCode=null, billingPeriodStartDate=null, billingPeriodEndDate=null, fnfAction=null, fnfNumber=null, serviceType=TestAutomation, customerCareUser=null]]
[2015-05-15 11:18:11,058][INFO ][Camel (camel-1) thread #1 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][PersonalDetailsLookup                             ][  61] Getting personal details from ProfileService [profileId=28877399, lookupTimeInMillis=226]
[2015-05-15 11:18:11,059][WARN ][Camel (camel-1) thread #1 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][DimSubscriberUpdater                              ][  80] Profile service lookup failed with: CRM_ERROR - No such customer: null
[2015-05-15 11:18:17,333][INFO ][Camel (camel-1) thread #7 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketCleaner                               ][  96] Cleaning ticket [ticket=5.3|420|true|1||SDR|in-app01|2015-05-15T11:18:17.264+0000|2015-05-15T11:18:15.027+0000|5026700000||1|28877399|642041010000|PREPAID|ACTIVE||1||||5.3|com.inewcs.mvno.core.servicefeatures.common.tickets.MonitoringTicketWriterImpl|530052041010000||false|642041010000|642041010000|Originating||Voice|64278|64278|64278|||false|2015-05-15T11:18:17.023+0000|0|OK||]
[2015-05-15 11:18:17,334][INFO ][Camel (camel-1) thread #7 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketCleaner                               ][  96] Cleaned ticket [ticket=5.3|420|true|1||SDR|in-app01|2015-05-15T11:18:17.264+0000|2015-05-15T11:18:15.027+0000|5026700000||1|28877399|642041010000|PREPAID|ACTIVE||1||||5.3|com.inewcs.mvno.core.servicefeatures.common.tickets.MonitoringTicketWriterImpl|530052041010000||false|642041010000|642041010000|Originating||Voice|64278|64278|64278|||false|2015-05-15T11:18:17.023+0000|0|OK||]
[2015-05-15 11:18:17,335][INFO ][Camel (camel-1) thread #7 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketHandler                               ][  96] Processing ticket [rawTicket=5.3|420|true|1||SDR|in-app01|2015-05-15T11:18:17.264+0000|2015-05-15T11:18:15.027+0000|5026700000||1|28877399|642041010000|PREPAID|ACTIVE||1||||5.3|com.inewcs.mvno.core.servicefeatures.common.tickets.MonitoringTicketWriterImpl|530052041010000||false|642041010000|642041010000|Originating||Voice|64278|64278|64278|||false|2015-05-15T11:18:17.023+0000|0|OK||]
[2015-05-15 11:18:17,336][INFO ][Camel (camel-1) thread #7 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketHandler                               ][  96] Unmarshalled ticket [unmarshalledTicket=header::[version=5.3, ticketType=SDR, ticketTypeId=420, node=in-app01, application=null, ticketCreationTimestamp=2015-05-15T11:18:17.264+0000, sessionCreationTimestamp=2015-05-15T11:18:15.027+0000, sessionId=5026700000, transactionId=null, sequenceId=1, provider=1, subscriberId=28877399, subscriberAddress=642041010000, subscriberType=PREPAID, subscriberState=ACTIVE, additionalStateInformation=null, subscriberLanguage=1, groupId=null, notificationChannel=null, isSuccess=true, errorCode=null], body::[recordVersion=5.3, featureIdentifier=com.inewcs.mvno.core.servicefeatures.common.tickets.MonitoringTicketWriterImpl, subscriberImsi=530052041010000, subscriberAddress=null, isCallerIdSuppressed=false, dialedDigits=642041010000, calledPartyAddress=642041010000, trafficType=Originating, messageType=null, bearerType=Voice, mscAddress=64278, vlrAddress=64278, subscriberLocation=64278, subscriberLocationNumber=null, subscriberLocationDetailedId=null, isRoaming=false, answerTimestamp=2015-05-15T11:18:17.023+0000, callDuration=0, resultCode=OK, chargingResult=null, transparentData=null]]
[2015-05-15 11:18:18,324][INFO ][Camel (camel-1) thread #4 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketCleaner                               ][  96] Cleaning ticket [ticket=5.3|421|true|1||SDR|in-app01|2015-05-15T11:18:18.276+0000|2015-05-15T11:18:15.027+0000|5026700000||1|28877399|642041010000|PREPAID|ACTIVE||1||||5.3|com.inewcs.mvno.core.servicefeatures.common.tickets.MonitoringTicketWriterImpl|530052041010000||false|642041010000|642041010000|Originating||Voice|64278|64278|64278|||false|2015-05-15T11:18:17.023+0000|1000|OK|OK|]
[2015-05-15 11:18:18,325][INFO ][Camel (camel-1) thread #4 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketCleaner                               ][  96] Cleaned ticket [ticket=5.3|421|true|1||SDR|in-app01|2015-05-15T11:18:18.276+0000|2015-05-15T11:18:15.027+0000|5026700000||1|28877399|642041010000|PREPAID|ACTIVE||1||||5.3|com.inewcs.mvno.core.servicefeatures.common.tickets.MonitoringTicketWriterImpl|530052041010000||false|642041010000|642041010000|Originating||Voice|64278|64278|64278|||false|2015-05-15T11:18:17.023+0000|1000|OK|OK|]
[2015-05-15 11:18:18,326][INFO ][Camel (camel-1) thread #4 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketHandler                               ][  96] Processing ticket [rawTicket=5.3|421|true|1||SDR|in-app01|2015-05-15T11:18:18.276+0000|2015-05-15T11:18:15.027+0000|5026700000||1|28877399|642041010000|PREPAID|ACTIVE||1||||5.3|com.inewcs.mvno.core.servicefeatures.common.tickets.MonitoringTicketWriterImpl|530052041010000||false|642041010000|642041010000|Originating||Voice|64278|64278|64278|||false|2015-05-15T11:18:17.023+0000|1000|OK|OK|]
[2015-05-15 11:18:18,327][INFO ][Camel (camel-1) thread #4 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketHandler                               ][  96] Unmarshalled ticket [unmarshalledTicket=header::[version=5.3, ticketType=SDR, ticketTypeId=421, node=in-app01, application=null, ticketCreationTimestamp=2015-05-15T11:18:18.276+0000, sessionCreationTimestamp=2015-05-15T11:18:15.027+0000, sessionId=5026700000, transactionId=null, sequenceId=1, provider=1, subscriberId=28877399, subscriberAddress=642041010000, subscriberType=PREPAID, subscriberState=ACTIVE, additionalStateInformation=null, subscriberLanguage=1, groupId=null, notificationChannel=null, isSuccess=true, errorCode=null], body::[recordVersion=5.3, featureIdentifier=com.inewcs.mvno.core.servicefeatures.common.tickets.MonitoringTicketWriterImpl, subscriberImsi=530052041010000, subscriberAddress=null, isCallerIdSuppressed=false, dialedDigits=642041010000, calledPartyAddress=642041010000, trafficType=Originating, messageType=null, bearerType=Voice, mscAddress=64278, vlrAddress=64278, subscriberLocation=64278, subscriberLocationNumber=null, subscriberLocationDetailedId=null, isRoaming=false, answerTimestamp=2015-05-15T11:18:17.023+0000, callDuration=1000, resultCode=OK, chargingResult=OK, transparentData=null]]
[2015-05-15 11:18:18,548][INFO ][Camel (camel-1) thread #9 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketCleaner                               ][  96] Cleaning ticket [ticket=5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-05-15T11:18:18.497+0000|2015-05-15T11:18:15.000+0000|5026700000|1|1|28877399|642041010000|PREPAID|ACTIVE||1|NONE|OK||1.2|FinalCommit|BasicSession|1|530052041010000|642041010000|false|642041010000|(network) bumblebee|Local (on-net)|Originating||||Voice|false|64278|(network) TNZ #8|2015-05-15T11:18:17.000+0000|0|1000|60000|0|0|0001ABFF0E|false|101001|15730641|101001|20000|20000|NZD|9980000|PREPAID|OK||]
[2015-05-15 11:18:18,550][INFO ][Camel (camel-1) thread #9 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketCleaner                               ][  96] Cleaned ticket [ticket=5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-05-15T11:18:18.497+0000|2015-05-15T11:18:15.000+0000|5026700000|1|1|28877399|642041010000|PREPAID|ACTIVE||1|NONE|OK||1.2|FinalCommit|BasicSession|1|530052041010000|642041010000|false|642041010000|(network) bumblebee|Local (on-net)|Originating||||Voice|false|64278|(network) TNZ #8|2015-05-15T11:18:17.000+0000|0|1000|60000|0|0|0001ABFF0E|false|101001|15730641|101001|20000|20000|NZD|9980000|PREPAID|OK||]
[2015-05-15 11:18:18,550][INFO ][Camel (camel-1) thread #9 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketHandler                               ][  96] Processing ticket [rawTicket=5.3|101|true|1|CRCE|CDR|crce01.tb13|2015-05-15T11:18:18.497+0000|2015-05-15T11:18:15.000+0000|5026700000|1|1|28877399|642041010000|PREPAID|ACTIVE||1|NONE|OK||1.2|FinalCommit|BasicSession|1|530052041010000|642041010000|false|642041010000|(network) bumblebee|Local (on-net)|Originating||||Voice|false|64278|(network) TNZ #8|2015-05-15T11:18:17.000+0000|0|1000|60000|0|0|0001ABFF0E|false|101001|15730641|101001|20000|20000|NZD|9980000|PREPAID|OK||]
[2015-05-15 11:18:18,552][INFO ][Camel (camel-1) thread #9 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][commonTicketHandler                               ][  96] Unmarshalled ticket [unmarshalledTicket=header::[version=5.3, ticketType=CDR, ticketTypeId=101, node=crce01.tb13, application=CRCE, ticketCreationTimestamp=2015-05-15T11:18:18.497+0000, sessionCreationTimestamp=2015-05-15T11:18:15.000+0000, sessionId=5026700000, transactionId=1, sequenceId=1, provider=1, subscriberId=28877399, subscriberAddress=642041010000, subscriberType=PREPAID, subscriberState=ACTIVE, additionalStateInformation=null, subscriberLanguage=1, groupId=null, notificationChannel=NONE, isSuccess=true, errorCode=OK], body::[recordVersion=1.2, operation=FinalCommit, feature=BasicSession, sequenceTotal=1, transparentData=null, charginResult=OK, referenceNumber=0001ABFF0E, trafficType=Originating, bearerType=Voice, messageType=null, subscriberImsi=530052041010000, subscriberAddress=642041010000, calledPartyAddress=642041010000, isCallerIdSuppressed=false, subscriberLocation=64278, locationNetwork=(network) TNZ #8, isRoaming=false, destinationNetwork=(network) bumblebee, destinationZone=Local (on-net), answerTimestamp=2015-05-15T11:18:17.000+0000, callDuration=1000, chargedDuration=60000, numberOfSegments=0, apn=null, transferredUnits=0, ratingGroupId=null, additionalRatingInformation=null, tariffId=101001, accountId=15730641, accountReferenceId=101001, accountType=PREPAID, accountCurrency=NZD, isChargeFreeAction=false, chargeAmount=20000, accountDifference=20000, accountClosingBalance=9980000, maximumCallCost=0]]
[2015-05-15 11:18:18,552][INFO ][Camel (camel-1) thread #9 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][callChargeTicketHandler                           ][  96] Processing ticket [rawTicket=header::[version=5.3, ticketType=CDR, ticketTypeId=101, node=crce01.tb13, application=CRCE, ticketCreationTimestamp=2015-05-15T11:18:18.497+0000, sessionCreationTimestamp=2015-05-15T11:18:15.000+0000, sessionId=5026700000, transactionId=1, sequenceId=1, provider=1, subscriberId=28877399, subscriberAddress=642041010000, subscriberType=PREPAID, subscriberState=ACTIVE, additionalStateInformation=null, subscriberLanguage=1, groupId=null, notificationChannel=NONE, isSuccess=true, errorCode=OK], body::[recordVersion=1.2, operation=FinalCommit, feature=BasicSession, sequenceTotal=1, transparentData=null, charginResult=OK, referenceNumber=0001ABFF0E, trafficType=Originating, bearerType=Voice, messageType=null, subscriberImsi=530052041010000, subscriberAddress=642041010000, calledPartyAddress=642041010000, isCallerIdSuppressed=false, subscriberLocation=64278, locationNetwork=(network) TNZ #8, isRoaming=false, destinationNetwork=(network) bumblebee, destinationZone=Local (on-net), answerTimestamp=2015-05-15T11:18:17.000+0000, callDuration=1000, chargedDuration=60000, numberOfSegments=0, apn=null, transferredUnits=0, ratingGroupId=null, additionalRatingInformation=null, tariffId=101001, accountId=15730641, accountReferenceId=101001, accountType=PREPAID, accountCurrency=NZD, isChargeFreeAction=false, chargeAmount=20000, accountDifference=20000, accountClosingBalance=9980000, maximumCallCost=0]]
[2015-05-15 11:18:18,746][INFO ][Camel (camel-1) thread #9 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][PersonalDetailsLookup                             ][  61] Getting personal details from ProfileService [profileId=28877399, lookupTimeInMillis=191]
[2015-05-15 11:18:18,748][WARN ][Camel (camel-1) thread #9 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][DimSubscriberUpdater                              ][  80] Profile service lookup failed with: CRM_ERROR - No such customer: null
[2015-05-15 11:18:18,790][INFO ][Camel (camel-1) thread #9 - JmsConsumer[Consumer.ETL.VirtualTopic.XdrTickets]][CdrFactDao                                        ][ 113] Inserted to fact_cdr [id=51219824, record=CdrFactRecord [id=51219824, sessionCreationTimestamp=Fri May 15 11:18:15 UTC 2015, sessionId=5026700000#1, cost=20000, monetaryCharge=20000, charge=20000, chargeCurrency=NZD, duration=1000, chargedDuration=60000, transferredData=0, chargedData=20000, smsCount=0, timeId=1398, subscriberId=516842, accountId=5818, trafficTypeId=1, mvnoId=1, tariffId=3245, locationZoneId=3756, dateId=20150515, chargeModeId=0, destinationZoneId=5812, ratingGroup=0, first=true, bPartyMsisdn=642041010000accountSourceBundleId=-2, accountSourceTariffId=3245, accountSourceCampaignId=-2]]</msg>
<status status="PASS" endtime="20150515 11:18:25.792" starttime="20150515 11:18:25.772"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.796" starttime="20150515 11:18:25.793"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Contain</arg>
<arg>${temp}</arg>
<arg>Exception</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.800" starttime="20150515 11:18:25.797"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>subscriberImsi=${TESTSUBCRIBERS IMSI RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.806" starttime="20150515 11:18:25.801"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${temp}</arg>
<arg>callDuration=1000</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.811" starttime="20150515 11:18:25.808"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:25.812" starttime="20150515 11:18:25.752"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>AnalyseDBTable</arg>
<arg>crce_cdr</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.816" starttime="20150515 11:18:25.813"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>**** Check XDR DB ****</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.819" starttime="20150515 11:18:25.818"></status>
</kw>
<kw type="kw" timeout="" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${XDR DB HOST}:${XDR DB PORT}/${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.835" starttime="20150515 11:18:25.821"></status>
</kw>
<kw type="kw" timeout="" name="${rows_count_after} = CountDBTableRows">
<doc></doc>
<arguments>
<arg>crce_cdr_2015w20</arg>
</arguments>
<kw type="kw" timeout="" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table};</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${selectStatement}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.866" level="INFO">select * from crce_cdr_2015w20;</msg>
<status status="PASS" endtime="20150515 11:18:25.866" starttime="20150515 11:18:25.863"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.870" starttime="20150515 11:18:25.868"></status>
</kw>
<kw type="kw" timeout="" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.903" starttime="20150515 11:18:25.872"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.909" starttime="20150515 11:18:25.905"></status>
</kw>
<kw type="kw" timeout="" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.914" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150515 11:18:25.916" level="INFO">${queryResultSetLines} = 1002822|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-05-11 09:48:24.109+00|2015-05-11 09:48:20+00|5023300000|1|1|27497208|642041010000|PREPAID|OK|null|ACTIVE|null|1|NONE|1.2|FinalCommit|BasicSession|53005204...</msg>
<status status="PASS" endtime="20150515 11:18:25.916" starttime="20150515 11:18:25.911"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.920" starttime="20150515 11:18:25.918"></status>
</kw>
<kw type="kw" timeout="" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.925" level="INFO">31 lines returned</msg>
<msg timestamp="20150515 11:18:25.928" level="INFO">@{queryResultSet} = [ 1002822|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-05-11 09:48:24.109+00|2015-05-11 09:48:20+00|5023300000|1|1|27497208|642041010000|PREPAID|OK|null|ACTIVE|null|1|NONE|1.2|FinalCommit|BasicSession|530052...</msg>
<status status="PASS" endtime="20150515 11:18:25.926" starttime="20150515 11:18:25.922"></status>
</kw>
<msg timestamp="20150515 11:18:25.931" level="INFO">@{queryRows} = [ 1002822|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-05-11 09:48:24.109+00|2015-05-11 09:48:20+00|5023300000|1|1|27497208|642041010000|PREPAID|OK|null|ACTIVE|null|1|NONE|1.2|FinalCommit|BasicSession|530052...</msg>
<status status="PASS" endtime="20150515 11:18:25.929" starttime="20150515 11:18:25.850"></status>
</kw>
<kw type="kw" timeout="" name="${number_of_rows} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.936" level="INFO">Length is 31</msg>
<msg timestamp="20150515 11:18:25.938" level="INFO">${number_of_rows} = 31</msg>
<status status="PASS" endtime="20150515 11:18:25.937" starttime="20150515 11:18:25.933"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${number_of_rows}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.942" level="INFO">31</msg>
<status status="PASS" endtime="20150515 11:18:25.943" starttime="20150515 11:18:25.939"></status>
</kw>
<msg timestamp="20150515 11:18:25.945" level="INFO">${rows_count_after} = 31</msg>
<status status="PASS" endtime="20150515 11:18:25.944" starttime="20150515 11:18:25.837"></status>
</kw>
<kw type="kw" timeout="" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150515 11:18:25.950" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150515 11:18:25.950" starttime="20150515 11:18:25.947"></status>
</kw>
<kw type="kw" timeout="" name="${result} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rows_count_after}-${rows_count_before}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.971" level="INFO">${result} = 1</msg>
<status status="PASS" endtime="20150515 11:18:25.970" starttime="20150515 11:18:25.952"></status>
</kw>
<kw type="kw" timeout="" name="${result_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20150515 11:18:25.976" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20150515 11:18:25.977" level="INFO">${result_s} = 1</msg>
<status status="PASS" endtime="20150515 11:18:25.976" starttime="20150515 11:18:25.973"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${result_s}</arg>
<arg>1</arg>
<arg>msg=CRCE CDR table difference is wrong....</arg>
</arguments>
<msg timestamp="20150515 11:18:25.982" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20150515 11:18:25.983" starttime="20150515 11:18:25.979"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>**** Check DWH DB ****</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:25.988" starttime="20150515 11:18:25.985"></status>
</kw>
<kw type="kw" timeout="" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${XDR DB HOST}:5438/dwh</arg>
<arg>dwh</arg>
<arg>dwh</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.006" starttime="20150515 11:18:25.991"></status>
</kw>
<kw type="kw" timeout="" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists.</doc>
<arguments>
<arg>fact_cdr</arg>
</arguments>
<kw type="kw" timeout="" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select b_party_msisdn, duration from ${table} where id in (select max(id) from ${table});</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${selectStatement}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.042" level="INFO">select b_party_msisdn, duration from fact_cdr where id in (select max(id) from fact_cdr);</msg>
<status status="PASS" endtime="20150515 11:18:26.043" starttime="20150515 11:18:26.039"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.046" starttime="20150515 11:18:26.044"></status>
</kw>
<kw type="kw" timeout="" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.058" starttime="20150515 11:18:26.048"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.062" starttime="20150515 11:18:26.060"></status>
</kw>
<kw type="kw" timeout="" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.068" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20150515 11:18:26.070" level="INFO">${queryResultSetLines} = 642041010000|1000|
</msg>
<status status="PASS" endtime="20150515 11:18:26.069" starttime="20150515 11:18:26.064"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.073" starttime="20150515 11:18:26.071"></status>
</kw>
<kw type="kw" timeout="" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.078" level="INFO">1 lines returned</msg>
<msg timestamp="20150515 11:18:26.079" level="INFO">@{queryResultSet} = [ 642041010000|1000| ]</msg>
<status status="PASS" endtime="20150515 11:18:26.079" starttime="20150515 11:18:26.075"></status>
</kw>
<msg timestamp="20150515 11:18:26.082" level="INFO">@{queryRows} = [ 642041010000|1000| ]</msg>
<status status="PASS" endtime="20150515 11:18:26.081" starttime="20150515 11:18:26.026"></status>
</kw>
<kw type="kw" timeout="" name="@{fields} = String.Split String">
<doc>Splits the `string` using `separator` as a delimiter string.</doc>
<arguments>
<arg>@{queryRows}[0]</arg>
<arg>|</arg>
</arguments>
<msg timestamp="20150515 11:18:26.087" level="INFO">@{fields} = [ 642041010000 | 1000 |  ]</msg>
<status status="PASS" endtime="20150515 11:18:26.086" starttime="20150515 11:18:26.083"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>Latest Ticket id: @{fields}[0]</arg>
<arg>WARN</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.091" starttime="20150515 11:18:26.089"></status>
</kw>
<kw type="kw" timeout="" name="${b_party} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[0]</arg>
</arguments>
<msg timestamp="20150515 11:18:26.096" level="INFO">${b_party} = 642041010000</msg>
<status status="PASS" endtime="20150515 11:18:26.095" starttime="20150515 11:18:26.092"></status>
</kw>
<kw type="kw" timeout="" name="${duration} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{fields}[1]</arg>
</arguments>
<msg timestamp="20150515 11:18:26.101" level="INFO">${duration} = 1000</msg>
<status status="PASS" endtime="20150515 11:18:26.100" starttime="20150515 11:18:26.097"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>B Party: ${b_party}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.105" level="INFO">B Party: 642041010000</msg>
<status status="PASS" endtime="20150515 11:18:26.106" starttime="20150515 11:18:26.102"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Duration: ${duration}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.110" level="INFO">Duration: 1000</msg>
<status status="PASS" endtime="20150515 11:18:26.111" starttime="20150515 11:18:26.107"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:26.112" starttime="20150515 11:18:26.013"></status>
</kw>
<kw type="kw" timeout="" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150515 11:18:26.116" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20150515 11:18:26.116" starttime="20150515 11:18:26.114"></status>
</kw>
<doc>=========================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20150515 11:18:26.118" starttime="20150515 11:18:00.652"></status>
</test>
<test id="s1-t2" timeout="" name="Run MTC Call">
<kw type="kw" timeout="" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20150515 11:18:26.139" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20150515 11:18:26.139" starttime="20150515 11:18:26.136"></status>
</kw>
<kw type="kw" timeout="" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.167" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20150515 11:18:26.168" starttime="20150515 11:18:26.164"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.172" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20150515 11:18:26.173" starttime="20150515 11:18:26.169"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.178" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20150515 11:18:26.178" starttime="20150515 11:18:26.174"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.183" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20150515 11:18:26.183" starttime="20150515 11:18:26.180"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.188" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20150515 11:18:26.188" starttime="20150515 11:18:26.185"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.193" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20150515 11:18:26.194" starttime="20150515 11:18:26.190"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.198" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20150515 11:18:26.198" starttime="20150515 11:18:26.195"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.203" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20150515 11:18:26.203" starttime="20150515 11:18:26.200"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.208" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20150515 11:18:26.208" starttime="20150515 11:18:26.205"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.213" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20150515 11:18:26.213" starttime="20150515 11:18:26.210"></status>
</kw>
<kw type="kw" timeout="" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.234" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:26.235" starttime="20150515 11:18:26.230"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:26.236" starttime="20150515 11:18:26.228"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.244" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:26.245" starttime="20150515 11:18:26.240"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:26.246" starttime="20150515 11:18:26.238"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.254" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:26.255" starttime="20150515 11:18:26.250"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:26.256" starttime="20150515 11:18:26.248"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:26.257" starttime="20150515 11:18:26.217"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20150515 11:18:26.264" level="INFO">soapUI 4.5.1 TestCase Runner</msg>
<status status="PASS" endtime="20150515 11:18:26.264" starttime="20150515 11:18:26.258"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.269" starttime="20150515 11:18:26.266"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.274" starttime="20150515 11:18:26.271"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.279" starttime="20150515 11:18:26.276"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.283" starttime="20150515 11:18:26.281"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.287" starttime="20150515 11:18:26.284"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.293" starttime="20150515 11:18:26.288"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.298" starttime="20150515 11:18:26.295"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.304" starttime="20150515 11:18:26.300"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.309" starttime="20150515 11:18:26.306"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.314" starttime="20150515 11:18:26.311"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.319" starttime="20150515 11:18:26.316"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:26.324" starttime="20150515 11:18:26.321"></status>
</kw>
<kw type="kw" timeout="" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20150515 11:18:26.330" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20150515 11:18:29.252" level="INFO">11:18:29,247 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150515 11:18:29.254" starttime="20150515 11:18:26.328"></status>
</kw>
<msg timestamp="20150515 11:18:29.258" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150515 11:18:29.258" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20150515 11:18:29.256" starttime="20150515 11:18:26.326"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" timeout="" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20150515 11:18:29.278" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20150515 11:18:29.277" starttime="20150515 11:18:29.274"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.283" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20150515 11:18:29.282" starttime="20150515 11:18:29.280"></status>
</kw>
<kw type="kw" timeout="" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.288" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20150515 11:18:29.287" starttime="20150515 11:18:29.285"></status>
</kw>
<kw type="kw" timeout="" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.297" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20150515 11:18:29.298" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20150515 11:18:29.299" starttime="20150515 11:18:29.293"></status>
</kw>
<msg timestamp="20150515 11:18:29.301" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150515 11:18:29.301" level="INFO">${return_log_entry} = 2015-05-15 11:18:29,247 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150515 11:18:29.300" starttime="20150515 11:18:29.290"></status>
</kw>
<kw type="kw" timeout="" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.317" starttime="20150515 11:18:29.314"></status>
</kw>
<msg timestamp="20150515 11:18:29.319" level="INFO">${return_log_entry} = 2015-05-15 11:18:29,247 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150515 11:18:29.318" starttime="20150515 11:18:29.303"></status>
</kw>
<kw type="kw" timeout="" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.333" starttime="20150515 11:18:29.330"></status>
</kw>
<msg timestamp="20150515 11:18:29.335" level="INFO">${return_log_entry} = 2015-05-15 11:18:29,247 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150515 11:18:29.334" starttime="20150515 11:18:29.320"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" timeout="" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.351" starttime="20150515 11:18:29.347"></status>
</kw>
<msg timestamp="20150515 11:18:29.352" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150515 11:18:29.352" starttime="20150515 11:18:29.337"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.372" starttime="20150515 11:18:29.369"></status>
</kw>
<msg timestamp="20150515 11:18:29.374" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150515 11:18:29.373" starttime="20150515 11:18:29.354"></status>
</kw>
<msg timestamp="20150515 11:18:29.376" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150515 11:18:29.376" starttime="20150515 11:18:29.262"></status>
</kw>
<kw type="kw" timeout="" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.393" starttime="20150515 11:18:29.390"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.396" starttime="20150515 11:18:29.394"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.400" starttime="20150515 11:18:29.398"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20150515 11:18:29.418" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20150515 11:18:29.419" starttime="20150515 11:18:29.414"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:29.420" starttime="20150515 11:18:29.411"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:29.421" starttime="20150515 11:18:29.401"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:29.422" starttime="20150515 11:18:29.378"></status>
</kw>
<msg timestamp="20150515 11:18:29.425" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20150515 11:18:29.423" starttime="20150515 11:18:26.143"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.429" starttime="20150515 11:18:29.427"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MTC *******</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.433" starttime="20150515 11:18:29.431"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${rc}=</arg>
<arg>CG Run MTC 1s</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MTC REQ QUEUE}</arg>
<arg>${AMQ-SIG MTC RES QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.439" starttime="20150515 11:18:29.434"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should be equal as Integers</arg>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG session failed</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.443" starttime="20150515 11:18:29.440"></status>
</kw>
<doc>=========================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20150515 11:18:29.444" starttime="20150515 11:18:26.122"></status>
</test>
<test id="s1-t3" timeout="" name="Run MFC Call">
<kw type="kw" timeout="" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20150515 11:18:29.471" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20150515 11:18:29.470" starttime="20150515 11:18:29.467"></status>
</kw>
<kw type="kw" timeout="" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.512" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20150515 11:18:29.513" starttime="20150515 11:18:29.506"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.520" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20150515 11:18:29.521" starttime="20150515 11:18:29.515"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.527" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20150515 11:18:29.528" starttime="20150515 11:18:29.523"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.534" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20150515 11:18:29.535" starttime="20150515 11:18:29.530"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.541" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20150515 11:18:29.542" starttime="20150515 11:18:29.537"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.548" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20150515 11:18:29.549" starttime="20150515 11:18:29.544"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.555" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20150515 11:18:29.556" starttime="20150515 11:18:29.551"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.562" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20150515 11:18:29.563" starttime="20150515 11:18:29.558"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.569" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20150515 11:18:29.569" starttime="20150515 11:18:29.565"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.575" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20150515 11:18:29.576" starttime="20150515 11:18:29.571"></status>
</kw>
<kw type="kw" timeout="" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.605" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:29.607" starttime="20150515 11:18:29.600"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:29.608" starttime="20150515 11:18:29.596"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.619" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:29.621" starttime="20150515 11:18:29.614"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:29.622" starttime="20150515 11:18:29.610"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.633" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:29.635" starttime="20150515 11:18:29.628"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:29.636" starttime="20150515 11:18:29.624"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:29.637" starttime="20150515 11:18:29.582"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20150515 11:18:29.646" level="INFO">soapUI 4.5.1 TestCase Runner</msg>
<status status="PASS" endtime="20150515 11:18:29.647" starttime="20150515 11:18:29.639"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.654" starttime="20150515 11:18:29.649"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.660" starttime="20150515 11:18:29.656"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.668" starttime="20150515 11:18:29.663"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.673" starttime="20150515 11:18:29.670"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.678" starttime="20150515 11:18:29.675"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.684" starttime="20150515 11:18:29.680"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.691" starttime="20150515 11:18:29.687"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.698" starttime="20150515 11:18:29.694"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.705" starttime="20150515 11:18:29.701"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.712" starttime="20150515 11:18:29.707"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.719" starttime="20150515 11:18:29.714"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:29.724" starttime="20150515 11:18:29.721"></status>
</kw>
<kw type="kw" timeout="" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20150515 11:18:29.730" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20150515 11:18:32.475" level="INFO">11:18:32,473 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150515 11:18:32.478" starttime="20150515 11:18:29.728"></status>
</kw>
<msg timestamp="20150515 11:18:32.481" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150515 11:18:32.482" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20150515 11:18:32.480" starttime="20150515 11:18:29.726"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" timeout="" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20150515 11:18:32.499" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20150515 11:18:32.499" starttime="20150515 11:18:32.495"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.504" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20150515 11:18:32.504" starttime="20150515 11:18:32.501"></status>
</kw>
<kw type="kw" timeout="" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.509" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20150515 11:18:32.508" starttime="20150515 11:18:32.506"></status>
</kw>
<kw type="kw" timeout="" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.517" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20150515 11:18:32.519" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20150515 11:18:32.519" starttime="20150515 11:18:32.513"></status>
</kw>
<msg timestamp="20150515 11:18:32.521" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150515 11:18:32.521" level="INFO">${return_log_entry} = 2015-05-15 11:18:32,473 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150515 11:18:32.520" starttime="20150515 11:18:32.511"></status>
</kw>
<kw type="kw" timeout="" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.535" starttime="20150515 11:18:32.532"></status>
</kw>
<msg timestamp="20150515 11:18:32.536" level="INFO">${return_log_entry} = 2015-05-15 11:18:32,473 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150515 11:18:32.536" starttime="20150515 11:18:32.523"></status>
</kw>
<kw type="kw" timeout="" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.550" starttime="20150515 11:18:32.547"></status>
</kw>
<msg timestamp="20150515 11:18:32.552" level="INFO">${return_log_entry} = 2015-05-15 11:18:32,473 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150515 11:18:32.551" starttime="20150515 11:18:32.538"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" timeout="" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.567" starttime="20150515 11:18:32.563"></status>
</kw>
<msg timestamp="20150515 11:18:32.568" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150515 11:18:32.568" starttime="20150515 11:18:32.553"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.588" starttime="20150515 11:18:32.585"></status>
</kw>
<msg timestamp="20150515 11:18:32.590" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150515 11:18:32.589" starttime="20150515 11:18:32.570"></status>
</kw>
<msg timestamp="20150515 11:18:32.592" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150515 11:18:32.591" starttime="20150515 11:18:32.484"></status>
</kw>
<kw type="kw" timeout="" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.607" starttime="20150515 11:18:32.605"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.611" starttime="20150515 11:18:32.608"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.614" starttime="20150515 11:18:32.612"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20150515 11:18:32.631" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20150515 11:18:32.633" starttime="20150515 11:18:32.627"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:32.633" starttime="20150515 11:18:32.624"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:32.634" starttime="20150515 11:18:32.615"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:32.635" starttime="20150515 11:18:32.594"></status>
</kw>
<msg timestamp="20150515 11:18:32.638" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20150515 11:18:32.636" starttime="20150515 11:18:29.477"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.641" starttime="20150515 11:18:32.639"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run Auto-MFC *******</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.645" starttime="20150515 11:18:32.643"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${rc}=</arg>
<arg>CG Run MFC 1s</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>642042484199</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MFC REQ QUEUE}</arg>
<arg>${AMQ-SIG MFC RES QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.651" starttime="20150515 11:18:32.646"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should be equal as Integers</arg>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG session failed</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.655" starttime="20150515 11:18:32.652"></status>
</kw>
<doc>=========================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20150515 11:18:32.656" starttime="20150515 11:18:29.447"></status>
</test>
<test id="s1-t4" timeout="" name="Run SMS">
<kw type="kw" timeout="" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20150515 11:18:32.675" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20150515 11:18:32.674" starttime="20150515 11:18:32.672"></status>
</kw>
<kw type="kw" timeout="" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.701" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20150515 11:18:32.702" starttime="20150515 11:18:32.698"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.706" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20150515 11:18:32.707" starttime="20150515 11:18:32.703"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.711" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20150515 11:18:32.712" starttime="20150515 11:18:32.708"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.716" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20150515 11:18:32.716" starttime="20150515 11:18:32.713"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.721" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20150515 11:18:32.721" starttime="20150515 11:18:32.718"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.725" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20150515 11:18:32.726" starttime="20150515 11:18:32.722"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.730" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20150515 11:18:32.731" starttime="20150515 11:18:32.727"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.736" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20150515 11:18:32.737" starttime="20150515 11:18:32.732"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.743" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20150515 11:18:32.744" starttime="20150515 11:18:32.739"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.750" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20150515 11:18:32.751" starttime="20150515 11:18:32.746"></status>
</kw>
<kw type="kw" timeout="" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.781" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:32.782" starttime="20150515 11:18:32.775"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:32.784" starttime="20150515 11:18:32.771"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.795" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:32.796" starttime="20150515 11:18:32.790"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:32.798" starttime="20150515 11:18:32.786"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.809" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20150515 11:18:32.811" starttime="20150515 11:18:32.804"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:32.812" starttime="20150515 11:18:32.800"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:32.813" starttime="20150515 11:18:32.757"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20150515 11:18:32.822" level="INFO">soapUI 4.5.1 TestCase Runner</msg>
<status status="PASS" endtime="20150515 11:18:32.823" starttime="20150515 11:18:32.815"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.830" starttime="20150515 11:18:32.825"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.837" starttime="20150515 11:18:32.832"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.845" starttime="20150515 11:18:32.839"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.850" starttime="20150515 11:18:32.847"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.855" starttime="20150515 11:18:32.852"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.862" starttime="20150515 11:18:32.857"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.869" starttime="20150515 11:18:32.864"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.876" starttime="20150515 11:18:32.871"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.883" starttime="20150515 11:18:32.878"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.890" starttime="20150515 11:18:32.885"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.897" starttime="20150515 11:18:32.892"></status>
</kw>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:32.904" starttime="20150515 11:18:32.899"></status>
</kw>
<kw type="kw" timeout="" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" timeout="" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20150515 11:18:32.913" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20150515 11:18:36.727" level="INFO">11:18:36,723 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150515 11:18:36.728" starttime="20150515 11:18:32.910"></status>
</kw>
<msg timestamp="20150515 11:18:36.732" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150515 11:18:36.733" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20150515 11:18:36.730" starttime="20150515 11:18:32.906"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" timeout="" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20150515 11:18:36.750" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20150515 11:18:36.749" starttime="20150515 11:18:36.746"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150515 11:18:36.754" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20150515 11:18:36.754" starttime="20150515 11:18:36.751"></status>
</kw>
<kw type="kw" timeout="" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20150515 11:18:36.759" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20150515 11:18:36.758" starttime="20150515 11:18:36.756"></status>
</kw>
<kw type="kw" timeout="" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20150515 11:18:36.767" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20150515 11:18:36.769" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20150515 11:18:36.769" starttime="20150515 11:18:36.763"></status>
</kw>
<msg timestamp="20150515 11:18:36.771" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20150515 11:18:36.772" level="INFO">${return_log_entry} = 2015-05-15 11:18:36,723 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150515 11:18:36.770" starttime="20150515 11:18:36.761"></status>
</kw>
<kw type="kw" timeout="" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:36.785" starttime="20150515 11:18:36.782"></status>
</kw>
<msg timestamp="20150515 11:18:36.786" level="INFO">${return_log_entry} = 2015-05-15 11:18:36,723 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150515 11:18:36.786" starttime="20150515 11:18:36.773"></status>
</kw>
<kw type="kw" timeout="" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:36.800" starttime="20150515 11:18:36.797"></status>
</kw>
<msg timestamp="20150515 11:18:36.801" level="INFO">${return_log_entry} = 2015-05-15 11:18:36,723 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20150515 11:18:36.801" starttime="20150515 11:18:36.788"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" timeout="" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:36.816" starttime="20150515 11:18:36.812"></status>
</kw>
<msg timestamp="20150515 11:18:36.818" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150515 11:18:36.817" starttime="20150515 11:18:36.803"></status>
</kw>
<kw type="kw" timeout="" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:36.837" starttime="20150515 11:18:36.834"></status>
</kw>
<msg timestamp="20150515 11:18:36.839" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150515 11:18:36.838" starttime="20150515 11:18:36.819"></status>
</kw>
<msg timestamp="20150515 11:18:36.841" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20150515 11:18:36.840" starttime="20150515 11:18:36.735"></status>
</kw>
<kw type="kw" timeout="" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:36.855" starttime="20150515 11:18:36.853"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:36.859" starttime="20150515 11:18:36.857"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:36.862" starttime="20150515 11:18:36.860"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" timeout="" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" timeout="" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20150515 11:18:36.879" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/standard_regression_testsuite/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20150515 11:18:36.881" starttime="20150515 11:18:36.875"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:36.881" starttime="20150515 11:18:36.873"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:36.882" starttime="20150515 11:18:36.863"></status>
</kw>
<status status="PASS" endtime="20150515 11:18:36.883" starttime="20150515 11:18:36.842"></status>
</kw>
<msg timestamp="20150515 11:18:36.885" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20150515 11:18:36.884" starttime="20150515 11:18:32.679"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:36.889" starttime="20150515 11:18:36.887"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Send SMS *******</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:36.892" starttime="20150515 11:18:36.890"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${rc}=</arg>
<arg>CG Send SMS</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG SMS REQ QUEUE}</arg>
<arg>${AMQ-SIG SMS RES QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:36.898" starttime="20150515 11:18:36.894"></status>
</kw>
<kw type="kw" timeout="" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should be equal as Integers</arg>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG session failed</arg>
</arguments>
<status status="PASS" endtime="20150515 11:18:36.902" starttime="20150515 11:18:36.900"></status>
</kw>
<doc>=========================================================</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20150515 11:18:36.903" starttime="20150515 11:18:32.659"></status>
</test>
<kw type="teardown" timeout="" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" timeout="" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20150515 11:18:36.940" level="FAIL">PSQLException: This connection has been closed.</msg>
<status status="FAIL" endtime="20150515 11:18:36.941" starttime="20150515 11:18:36.916"></status>
</kw>
<status status="FAIL" endtime="20150515 11:18:36.943" starttime="20150515 11:18:36.907">PSQLException: This connection has been closed.</status>
</kw>
<doc>This suite tests the set of "standard" calls (MOC, MTC, MFC and SMS)

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20150515 11:18:36.944" starttime="20150515 11:17:55.450">Suite teardown failed:
PSQLException: This connection has been closed.</status>
</suite>
<statistics>
<total>
<stat pass="0" fail="4">Critical Tests</stat>
<stat pass="0" fail="4">All Tests</stat>
</total>
<tag>
<stat pass="0" info="" doc="" combined="" fail="4" links="">matko.sanseovic</stat>
<stat pass="0" info="" doc="" combined="" fail="4" links="">TNZ_supported</stat>
</tag>
<suite>
<stat pass="0" id="s1" fail="4" name="Regression-Robot-Suite">Regression-Robot-Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
