<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20151106 11:48:07.487">
<suite source="/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/VMCO/ussd-robot-suite.txt" id="s1" name="Ussd-Robot-Suite">
<kw type="setup" name="Setup Suite">
<doc>Log the time and target system, copy the tool to the target system and create the test subscribers</doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20151106 11:48:09.579" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20151106 11:48:09.583" level="INFO">${time} = Fri Nov  6 11:48:09 CET 2015</msg>
<status status="PASS" endtime="20151106 11:48:09.582" starttime="20151106 11:48:09.565"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:09.590" level="INFO">Date and time: Fri Nov  6 11:48:09 CET 2015</msg>
<status status="PASS" endtime="20151106 11:48:09.591" starttime="20151106 11:48:09.586"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD test on Virgin Mobile Columbia TB</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:09.596" level="INFO">USSD test on Virgin Mobile Columbia TB</msg>
<status status="PASS" endtime="20151106 11:48:09.598" starttime="20151106 11:48:09.594"></status>
</kw>
<kw type="kw" name="${conn_id} = SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${USSD HOST}</arg>
</arguments>
<msg timestamp="20151106 11:48:09.871" level="INFO">${conn_id} = 1</msg>
<status status="PASS" endtime="20151106 11:48:09.870" starttime="20151106 11:48:09.600"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${conn_id}</arg>
</arguments>
<msg timestamp="20151106 11:48:09.877" level="INFO">${conn_id} = 1</msg>
<status status="PASS" endtime="20151106 11:48:09.878" starttime="20151106 11:48:09.874"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USSD USER}</arg>
<arg>${USSD PWD}</arg>
</arguments>
<msg timestamp="20151106 11:48:09.884" level="INFO">Logging into '10.105.170.167:22' as 'qa_automation'.</msg>
<msg timestamp="20151106 11:48:11.144" level="INFO">Read output: Last login: Fri Nov  6 10:43:03 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@ussd-app.tb07 ~]$[m</msg>
<msg timestamp="20151106 11:48:11.152" level="INFO">${output_login} = Last login: Fri Nov  6 10:43:03 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@ussd-app.tb07 ~]$[m </msg>
<status status="PASS" endtime="20151106 11:48:11.148" starttime="20151106 11:48:09.881"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20151106 11:48:11.163" level="INFO">Last login: Fri Nov  6 10:43:03 2015 from 10.105.80.196
id: cannot find name for group ID 20007
[1m[qa_automation@ussd-app.tb07 ~]$[m </msg>
<status status="PASS" endtime="20151106 11:48:11.165" starttime="20151106 11:48:11.157"></status>
</kw>
<kw type="kw" name="SSHLibrary.Put File">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>${USSD_PY_TOOL}</arg>
<arg>${USSD HOME}/ussd/</arg>
</arguments>
<msg timestamp="20151106 11:48:11.296" level="INFO">'/opt/robot/robotworkspace/robot_testsuites/ussd/tool/USSDtest.py' -&gt; '/home/qa_automation//ussd//USSDtest.py'</msg>
<status status="PASS" endtime="20151106 11:48:11.299" starttime="20151106 11:48:11.170"></status>
</kw>
<kw type="kw" name="SSHLibrary.File Should Exist">
<doc>Fails if the given `path` does NOT point to an existing file.</doc>
<arguments>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:11.313" starttime="20151106 11:48:11.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ussd_tool}</arg>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<msg timestamp="20151106 11:48:11.391" level="INFO">${ussd_tool} = /home/qa_automation/ussd/USSDtest.py</msg>
<status status="PASS" endtime="20151106 11:48:11.393" starttime="20151106 11:48:11.317"></status>
</kw>
<kw type="kw" name="Create Subscriber">
<doc>Suite will create two subscribers that will attempt different USSD scenarios</doc>
<arguments>
</arguments>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20151106 11:48:11.434" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20151106 11:48:11.432" starttime="20151106 11:48:11.427"></status>
</kw>
<kw type="kw" name="${TESTSUBCRIBERS DEFAULT LANGUAGEID} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20151106 11:48:11.445" level="INFO">${TESTSUBCRIBERS DEFAULT LANGUAGEID} = 5</msg>
<status status="PASS" endtime="20151106 11:48:11.443" starttime="20151106 11:48:11.439"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20151106 11:48:11.474" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20151106 11:48:11.475" starttime="20151106 11:48:11.472"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20151106 11:48:11.479" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20151106 11:48:11.480" starttime="20151106 11:48:11.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20151106 11:48:11.485" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20151106 11:48:11.486" starttime="20151106 11:48:11.482"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20151106 11:48:11.490" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20151106 11:48:11.491" starttime="20151106 11:48:11.487"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20151106 11:48:11.495" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20151106 11:48:11.496" starttime="20151106 11:48:11.492"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20151106 11:48:11.501" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20151106 11:48:11.502" starttime="20151106 11:48:11.498"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20151106 11:48:11.506" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20151106 11:48:11.507" starttime="20151106 11:48:11.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20151106 11:48:11.510" level="INFO">msg=languageid=5</msg>
<status status="PASS" endtime="20151106 11:48:11.511" starttime="20151106 11:48:11.508"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20151106 11:48:11.515" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20151106 11:48:11.516" starttime="20151106 11:48:11.513"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20151106 11:48:11.520" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20151106 11:48:11.521" starttime="20151106 11:48:11.518"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20151106 11:48:11.541" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151106 11:48:11.542" starttime="20151106 11:48:11.538"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:11.543" starttime="20151106 11:48:11.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20151106 11:48:11.550" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151106 11:48:11.551" starttime="20151106 11:48:11.547"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:11.552" starttime="20151106 11:48:11.545"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20151106 11:48:11.558" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20151106 11:48:11.559" starttime="20151106 11:48:11.556"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:11.560" starttime="20151106 11:48:11.553"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:11.562" starttime="20151106 11:48:11.524"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20151106 11:48:11.567" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20151106 11:48:11.568" starttime="20151106 11:48:11.563"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:11.572" starttime="20151106 11:48:11.569"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:11.576" starttime="20151106 11:48:11.573"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:11.580" starttime="20151106 11:48:11.577"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:11.583" starttime="20151106 11:48:11.581"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:11.586" starttime="20151106 11:48:11.584"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:11.590" starttime="20151106 11:48:11.588"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:11.594" starttime="20151106 11:48:11.591"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:11.597" starttime="20151106 11:48:11.595"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:11.601" starttime="20151106 11:48:11.599"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:11.605" starttime="20151106 11:48:11.603"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:11.609" starttime="20151106 11:48:11.606"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:11.612" starttime="20151106 11:48:11.610"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20151106 11:48:11.618" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=5', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20151106 11:48:20.612" level="INFO">11:48:12,198 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/VMCO/ext] for external libraries
11:48:12,198 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
11:48:14,327 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
11:48:14,347 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.170.125]
11:48:14,348 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
11:48:14,348 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
11:48:14,348 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [2]
11:48:14,348 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [732123710001000]
11:48:14,348 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [573190001000]
11:48:14,348 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
11:48:14,348 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [5]
11:48:14,349 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101002]
11:48:14,349 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
11:48:14,349 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
11:48:14,349 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
11:48:14,358 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
11:48:14,364 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
11:48:14,831 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
11:48:14,901 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
11:48:15,097 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:48:15,098 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
11:48:15,125 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:48:15,133 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:48:15,317 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:48:15,318 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:48:15,318 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:48:15,318 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
11:48:15,384 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
11:48:15,780 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
11:48:15,808 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
11:48:15,810 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:48:15,811 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:48:15,812 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
11:48:16,719 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:48:16,720 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:48:16,728 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:48:16,728 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:48:16,732 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:48:16,733 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
11:48:16,807 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
11:48:16,813 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
11:48:16,865 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
11:48:16,870 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:48:16,872 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:48:16,872 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
11:48:16,891 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:48:16,891 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:48:16,898 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:48:16,898 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:48:16,898 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:48:16,899 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
11:48:16,970 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
11:48:16,981 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
11:48:17,028 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
11:48:17,032 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:48:17,034 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:48:17,034 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
11:48:17,382 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:48:17,383 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:48:17,390 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:48:17,390 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:48:17,390 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:48:17,391 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
11:48:17,487 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
11:48:17,494 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
11:48:17,537 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
11:48:17,540 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:48:17,542 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:48:17,542 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
11:48:17,957 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:48:17,958 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:48:17,973 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:48:17,973 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:48:17,973 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:48:17,973 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
11:48:18,043 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
11:48:18,070 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
11:48:18,094 INFO  [SoapUITestCaseRunner] running step [setBalance]
11:48:18,096 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:48:18,098 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:48:18,098 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
11:48:18,504 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:48:18,505 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:48:18,518 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:48:18,518 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:48:18,518 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:48:18,519 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
11:48:18,588 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
11:48:18,598 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
11:48:18,643 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
11:48:18,702 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
11:48:18,705 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
11:48:18,706 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:48:18,708 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:48:18,708 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
11:48:18,721 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:48:18,721 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:48:18,739 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:48:18,739 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:48:18,739 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:48:18,739 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
11:48:18,740 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
11:48:18,766 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
11:48:18,767 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
11:48:18,770 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:48:18,772 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:48:18,772 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
11:48:19,434 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:48:19,435 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:48:19,441 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:48:19,442 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:48:19,442 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:48:19,442 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
11:48:19,442 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
11:48:19,449 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
11:48:19,450 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
11:48:19,453 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:48:19,455 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:48:19,455 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
11:48:19,470 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:48:19,470 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:48:19,476 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:48:19,476 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:48:19,476 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:48:19,477 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
11:48:19,477 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
11:48:19,488 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
11:48:19,489 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
11:48:19,491 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:48:19,493 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:48:19,493 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
11:48:19,786 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:48:19,786 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:48:19,792 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:48:19,793 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:48:19,793 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:48:19,793 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
11:48:19,794 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
11:48:19,799 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
11:48:19,800 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
11:48:19,802 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:48:19,804 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:48:19,804 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
11:48:20,107 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:48:20,107 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:48:20,120 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:48:20,121 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:48:20,121 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:48:20,121 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
11:48:20,122 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
11:48:20,143 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
11:48:20,144 INFO  [SoapUITestCaseRunner] running step [setBalance]
11:48:20,147 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
11:48:20,149 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
11:48:20,149 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
11:48:20,500 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
11:48:20,500 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
11:48:20,513 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
11:48:20,513 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
11:48:20,514 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
11:48:20,514 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
11:48:20,514 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
11:48:20,524 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
11:48:20,525 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
11:48:20,527 INFO  [SoapUITestCaseRunner] running step [finish_successful]
11:48:20,599 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
11:48:20,601 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 6175ms, status: FINISHED
11:48:20,601 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 6175ms</msg>
<status status="PASS" endtime="20151106 11:48:20.621" starttime="20151106 11:48:11.616"></status>
</kw>
<msg timestamp="20151106 11:48:20.630" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151106 11:48:20.633" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20151106 11:48:20.626" starttime="20151106 11:48:11.614"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20151106 11:48:20.683" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20151106 11:48:20.682" starttime="20151106 11:48:20.674"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151106 11:48:20.694" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20151106 11:48:20.692" starttime="20151106 11:48:20.687"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20151106 11:48:20.701" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20151106 11:48:20.700" starttime="20151106 11:48:20.697"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20151106 11:48:20.709" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20151106 11:48:20.715" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20151106 11:48:20.716" starttime="20151106 11:48:20.705"></status>
</kw>
<msg timestamp="20151106 11:48:20.718" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20151106 11:48:20.718" level="INFO">${return_log_entry} = 2015-11-06 11:48:20,599 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151106 11:48:20.717" starttime="20151106 11:48:20.702"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:20.735" starttime="20151106 11:48:20.732"></status>
</kw>
<msg timestamp="20151106 11:48:20.737" level="INFO">${return_log_entry} = 2015-11-06 11:48:20,599 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151106 11:48:20.736" starttime="20151106 11:48:20.720"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:20.747" starttime="20151106 11:48:20.745"></status>
</kw>
<msg timestamp="20151106 11:48:20.749" level="INFO">${return_log_entry} = 2015-11-06 11:48:20,599 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20151106 11:48:20.748" starttime="20151106 11:48:20.739"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:20.760" starttime="20151106 11:48:20.757"></status>
</kw>
<msg timestamp="20151106 11:48:20.761" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151106 11:48:20.761" starttime="20151106 11:48:20.751"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:20.774" starttime="20151106 11:48:20.772"></status>
</kw>
<msg timestamp="20151106 11:48:20.776" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151106 11:48:20.775" starttime="20151106 11:48:20.763"></status>
</kw>
<msg timestamp="20151106 11:48:20.779" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20151106 11:48:20.778" starttime="20151106 11:48:20.643"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:20.794" starttime="20151106 11:48:20.791"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:20.797" starttime="20151106 11:48:20.795"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:20.801" starttime="20151106 11:48:20.798"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20151106 11:48:20.817" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/VMCO/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/robot_testsuites/experimental/matko.sanseovic/ussd/VMCO/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20151106 11:48:20.818" starttime="20151106 11:48:20.810"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:20.819" starttime="20151106 11:48:20.808"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:20.820" starttime="20151106 11:48:20.802"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:20.821" starttime="20151106 11:48:20.781"></status>
</kw>
<msg timestamp="20151106 11:48:20.824" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20151106 11:48:20.823" starttime="20151106 11:48:11.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20151106 11:48:20.828" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20151106 11:48:20.828" starttime="20151106 11:48:20.825"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:20.832" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20151106 11:48:20.833" starttime="20151106 11:48:20.830"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:20.834" starttime="20151106 11:48:11.398"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:20.835" starttime="20151106 11:48:09.548"></status>
</kw>
<test id="s1-t1" name="Test USSD Start">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for further evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20151106 11:48:20.869" level="INFO">/home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190</msg>
<status status="PASS" endtime="20151106 11:48:20.870" starttime="20151106 11:48:20.857"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:21.431" level="INFO">=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:21.438" level="INFO">${output} = =====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:21.435" starttime="20151106 11:48:20.871"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20151106 11:48:21.448" level="INFO">USSD Start: =====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:21.449" starttime="20151106 11:48:21.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20151106 11:48:23.456" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20151106 11:48:23.459" starttime="20151106 11:48:21.451"></status>
</kw>
<msg timestamp="20151106 11:48:23.466" level="INFO">${output} = =====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:23.464" starttime="20151106 11:48:20.848"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Ey pilas, el menu cambio</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.474" starttime="20151106 11:48:23.469"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.502" starttime="20151106 11:48:23.497"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20151106 11:48:23.508" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20151106 11:48:23.557" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151106 11:48:23.560" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20151106 11:48:23.559" starttime="20151106 11:48:23.505"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.567" starttime="20151106 11:48:23.563"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.574" starttime="20151106 11:48:23.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.580" starttime="20151106 11:48:23.576"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20151106 11:48:23.589" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20151106 11:48:23.640" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151106 11:48:23.643" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20151106 11:48:23.645" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151106 11:48:23.642" starttime="20151106 11:48:23.583"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.659" starttime="20151106 11:48:23.648"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.665" starttime="20151106 11:48:23.662"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.672" starttime="20151106 11:48:23.668"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.679" starttime="20151106 11:48:23.675"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.686" starttime="20151106 11:48:23.682"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.693" starttime="20151106 11:48:23.688"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.702" starttime="20151106 11:48:23.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.709" starttime="20151106 11:48:23.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.716" starttime="20151106 11:48:23.712"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.722" starttime="20151106 11:48:23.718"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:23.729" starttime="20151106 11:48:23.724"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:23.731" starttime="20151106 11:48:23.479"></status>
</kw>
<doc>Simple test that checks if USSD can be started
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>USSD_only</tag>
<tag>VMCO_specific</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151106 11:48:23.734" starttime="20151106 11:48:20.837"></status>
</test>
<test id="s1-t2" name="Test USSD Check Balance">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for further evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20151106 11:48:23.787" level="INFO">Killed</msg>
<status status="PASS" endtime="20151106 11:48:23.789" starttime="20151106 11:48:23.779"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:24.351" level="INFO">[1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:24.358" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20151106 11:48:24.355" starttime="20151106 11:48:23.792"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20151106 11:48:24.366" level="INFO">USSD Start: [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:24.368" starttime="20151106 11:48:24.361"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20151106 11:48:26.376" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20151106 11:48:26.380" starttime="20151106 11:48:24.370"></status>
</kw>
<msg timestamp="20151106 11:48:26.386" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20151106 11:48:26.384" starttime="20151106 11:48:23.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for checking balance</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:26.394" level="INFO">Pressing 1 for checking balance</msg>
<status status="PASS" endtime="20151106 11:48:26.395" starttime="20151106 11:48:26.390"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20151106 11:48:26.404" level="INFO">1</msg>
<status status="PASS" endtime="20151106 11:48:26.406" starttime="20151106 11:48:26.398"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:28.132" level="INFO">=====================
Saldo: $100.000 05/01/16
Datos: ilimitado

Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:28.136" level="INFO">${output} = =====================
Saldo: $100.000 05/01/16
Datos: ilimitado

Marca * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:28.135" starttime="20151106 11:48:26.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Saldo: $100.00</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.141" starttime="20151106 11:48:28.138"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.157" starttime="20151106 11:48:28.154"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20151106 11:48:28.160" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20151106 11:48:28.203" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151106 11:48:28.205" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20151106 11:48:28.204" starttime="20151106 11:48:28.158"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.210" starttime="20151106 11:48:28.207"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.214" starttime="20151106 11:48:28.212"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.219" starttime="20151106 11:48:28.216"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20151106 11:48:28.226" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20151106 11:48:28.278" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151106 11:48:28.280" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20151106 11:48:28.281" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151106 11:48:28.279" starttime="20151106 11:48:28.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.291" starttime="20151106 11:48:28.283"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.295" starttime="20151106 11:48:28.293"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.300" starttime="20151106 11:48:28.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.305" starttime="20151106 11:48:28.302"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.310" starttime="20151106 11:48:28.307"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.315" starttime="20151106 11:48:28.311"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.321" starttime="20151106 11:48:28.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.328" starttime="20151106 11:48:28.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.334" starttime="20151106 11:48:28.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.340" starttime="20151106 11:48:28.336"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:28.346" starttime="20151106 11:48:28.342"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:28.348" starttime="20151106 11:48:28.144"></status>
</kw>
<doc>Basic test for balance check. Expected value is set at subscriber creation
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>USSD_only</tag>
<tag>VMCO_specific</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151106 11:48:28.351" starttime="20151106 11:48:23.739"></status>
</test>
<test id="s1-t3" name="Test USSD Subscription Check">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for further evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20151106 11:48:28.407" level="INFO">Killed</msg>
<status status="PASS" endtime="20151106 11:48:28.409" starttime="20151106 11:48:28.400"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:28.961" level="INFO">[1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:28.963" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20151106 11:48:28.963" starttime="20151106 11:48:28.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20151106 11:48:28.967" level="INFO">USSD Start: [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:28.968" starttime="20151106 11:48:28.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20151106 11:48:30.972" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20151106 11:48:30.974" starttime="20151106 11:48:28.969"></status>
</kw>
<msg timestamp="20151106 11:48:30.981" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20151106 11:48:30.979" starttime="20151106 11:48:28.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for setup check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:30.988" level="INFO">Pressing 2 for setup check</msg>
<status status="PASS" endtime="20151106 11:48:30.989" starttime="20151106 11:48:30.984"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20151106 11:48:30.998" level="INFO">2</msg>
<status status="PASS" endtime="20151106 11:48:31.000" starttime="20151106 11:48:30.992"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:31.018" level="INFO">=====================
Que quisieras hacer?
1 Revisar tus productos activos
2 Comprar o administrar tus productos
Marca: * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:31.021" level="INFO">${output} = =====================
Que quisieras hacer?
1 Revisar tus productos activos
2 Comprar o administrar tus productos
Marca: * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:31.020" starttime="20151106 11:48:31.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for subscription check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:31.028" level="INFO">Pressing 1 for subscription check</msg>
<status status="PASS" endtime="20151106 11:48:31.030" starttime="20151106 11:48:31.025"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20151106 11:48:31.038" level="INFO">1</msg>
<status status="PASS" endtime="20151106 11:48:31.040" starttime="20151106 11:48:31.033"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:31.110" level="INFO">=====================
Actualmente tienes tarifa plana. Hay muchas mas formas de ahorrar! 
Marca: * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:31.114" level="INFO">${output} = =====================
Actualmente tienes tarifa plana. Hay muchas mas formas de ahorrar! 
Marca: * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:31.113" starttime="20151106 11:48:31.042"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Actualmente tienes tarifa plana</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.122" starttime="20151106 11:48:31.117"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.148" starttime="20151106 11:48:31.144"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20151106 11:48:31.154" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20151106 11:48:31.202" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151106 11:48:31.205" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20151106 11:48:31.203" starttime="20151106 11:48:31.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.211" starttime="20151106 11:48:31.207"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.217" starttime="20151106 11:48:31.213"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.223" starttime="20151106 11:48:31.220"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20151106 11:48:31.232" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20151106 11:48:31.286" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151106 11:48:31.291" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20151106 11:48:31.293" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151106 11:48:31.290" starttime="20151106 11:48:31.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.306" starttime="20151106 11:48:31.296"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.312" starttime="20151106 11:48:31.308"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.318" starttime="20151106 11:48:31.314"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.324" starttime="20151106 11:48:31.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.330" starttime="20151106 11:48:31.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.336" starttime="20151106 11:48:31.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.344" starttime="20151106 11:48:31.339"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.350" starttime="20151106 11:48:31.346"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.356" starttime="20151106 11:48:31.353"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.362" starttime="20151106 11:48:31.358"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:31.368" starttime="20151106 11:48:31.364"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:31.369" starttime="20151106 11:48:31.127"></status>
</kw>
<doc>Check the subscriptions of test subscriber. Since there is no active subscription per default, subscriber is on default (basic) tariff
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>USSD_only</tag>
<tag>VMCO_specific</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151106 11:48:31.372" starttime="20151106 11:48:28.357"></status>
</test>
<test id="s1-t4" name="Test Buying">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for further evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20151106 11:48:31.423" level="INFO">Killed</msg>
<status status="PASS" endtime="20151106 11:48:31.424" starttime="20151106 11:48:31.415"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:31.971" level="INFO">[1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:31.974" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20151106 11:48:31.973" starttime="20151106 11:48:31.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20151106 11:48:31.978" level="INFO">USSD Start: [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:31.979" starttime="20151106 11:48:31.976"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20151106 11:48:33.981" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20151106 11:48:33.984" starttime="20151106 11:48:31.980"></status>
</kw>
<msg timestamp="20151106 11:48:33.990" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20151106 11:48:33.988" starttime="20151106 11:48:31.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for buying menu</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:33.996" level="INFO">Pressing 2 for buying menu</msg>
<status status="PASS" endtime="20151106 11:48:33.997" starttime="20151106 11:48:33.993"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20151106 11:48:34.007" level="INFO">2</msg>
<status status="PASS" endtime="20151106 11:48:34.009" starttime="20151106 11:48:34.000"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:34.030" level="INFO">=====================
Que quisieras hacer?
1 Revisar tus productos activos
2 Comprar o administrar tus productos
Marca: * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:34.033" level="INFO">${output} = =====================
Que quisieras hacer?
1 Revisar tus productos activos
2 Comprar o administrar tus productos
Marca: * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:34.032" starttime="20151106 11:48:34.011"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for subscription check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:34.039" level="INFO">Pressing 2 for subscription check</msg>
<status status="PASS" endtime="20151106 11:48:34.040" starttime="20151106 11:48:34.036"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20151106 11:48:34.048" level="INFO">2</msg>
<status status="PASS" endtime="20151106 11:48:34.049" starttime="20151106 11:48:34.043"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:34.753" level="INFO">=====================
Porfis escoge
1. Comprar una Bolsa
Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:34.755" level="INFO">${output} = =====================
Porfis escoge
1. Comprar una Bolsa
Marca * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:34.755" starttime="20151106 11:48:34.052"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Porfis escoge</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:34.759" starttime="20151106 11:48:34.757"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for buying a bundle</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:34.761" level="INFO">Pressing 1 for buying a bundle</msg>
<status status="PASS" endtime="20151106 11:48:34.762" starttime="20151106 11:48:34.760"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20151106 11:48:34.767" level="INFO">1</msg>
<status status="PASS" endtime="20151106 11:48:34.768" starttime="20151106 11:48:34.763"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:35.112" level="INFO">=====================
Porfis escoge una de las siguientes opciones:
1. Voz
2. Datos
3. Mensajes de Texto
4. Splittest
Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:35.118" level="INFO">${output} = =====================
Porfis escoge una de las siguientes opciones:
1. Voz
2. Datos
3. Mensajes de Texto
4. Splittest
Marca * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:35.115" starttime="20151106 11:48:34.769"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Porfis escoge una de las siguientes opciones</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:35.125" starttime="20151106 11:48:35.120"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for Voz</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:35.130" level="INFO">Pressing 1 for Voz</msg>
<status status="PASS" endtime="20151106 11:48:35.132" starttime="20151106 11:48:35.127"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20151106 11:48:35.140" level="INFO">1</msg>
<status status="PASS" endtime="20151106 11:48:35.141" starttime="20151106 11:48:35.134"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:35.208" level="INFO">=====================
Escoge la Bolsa que quieres comprar:
1. Voz 56 10000 Pesos
2. Nigth Pass 10000 Pesos
3. Antiplan Single Prepagado 6 FI 100000 Pesos
Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:35.211" level="INFO">${output} = =====================
Escoge la Bolsa que quieres comprar:
1. Voz 56 10000 Pesos
2. Nigth Pass 10000 Pesos
3. Antiplan Single Prepagado 6 FI 100000 Pesos
Marca * para regresar, # para salir 
===...</msg>
<status status="PASS" endtime="20151106 11:48:35.210" starttime="20151106 11:48:35.144"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Escoge la Bolsa que quieres comprar</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:35.218" starttime="20151106 11:48:35.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for Voz 56 10000 Pesos</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:35.223" level="INFO">Pressing 1 for Voz 56 10000 Pesos</msg>
<status status="PASS" endtime="20151106 11:48:35.224" starttime="20151106 11:48:35.220"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20151106 11:48:35.232" level="INFO">1</msg>
<status status="PASS" endtime="20151106 11:48:35.233" starttime="20151106 11:48:35.227"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:35.705" level="INFO">=====================
La bolsa que quieres comprar es Voz 56 y vale 10000 Pesos. Escoge:
1. para confirmar
Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:35.709" level="INFO">${output} = =====================
La bolsa que quieres comprar es Voz 56 y vale 10000 Pesos. Escoge:
1. para confirmar
Marca * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:35.708" starttime="20151106 11:48:35.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>La bolsa que quieres comprar es Voz 56 y vale 10000 Pesos</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:35.716" starttime="20151106 11:48:35.712"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for confirmation</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:35.721" level="INFO">Pressing 1 for confirmation</msg>
<status status="PASS" endtime="20151106 11:48:35.723" starttime="20151106 11:48:35.718"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20151106 11:48:35.730" level="INFO">1</msg>
<status status="PASS" endtime="20151106 11:48:35.731" starttime="20151106 11:48:35.725"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:36.248" level="INFO">=====================
Felicitaciones. Compraste tu producto Voz 56. El costo fue 10000 Pesos
Escoge
1.Comprar otra Bolsa
0.Menu principal
Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:36.251" level="INFO">${output} = =====================
Felicitaciones. Compraste tu producto Voz 56. El costo fue 10000 Pesos
Escoge
1.Comprar otra Bolsa
0.Menu principal
Marca * para regresar, # para salir 
===================...</msg>
<status status="PASS" endtime="20151106 11:48:36.250" starttime="20151106 11:48:35.734"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Felicitaciones. Compraste tu producto Voz 56. El costo fue 10000 Pesos</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.254" starttime="20151106 11:48:36.252"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.266" starttime="20151106 11:48:36.264"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20151106 11:48:36.271" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20151106 11:48:36.317" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151106 11:48:36.320" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20151106 11:48:36.319" starttime="20151106 11:48:36.268"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.326" starttime="20151106 11:48:36.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.332" starttime="20151106 11:48:36.329"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.337" starttime="20151106 11:48:36.334"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20151106 11:48:36.345" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20151106 11:48:36.403" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151106 11:48:36.406" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20151106 11:48:36.407" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151106 11:48:36.405" starttime="20151106 11:48:36.339"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.419" starttime="20151106 11:48:36.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.424" starttime="20151106 11:48:36.421"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.430" starttime="20151106 11:48:36.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.436" starttime="20151106 11:48:36.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.442" starttime="20151106 11:48:36.438"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.448" starttime="20151106 11:48:36.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.455" starttime="20151106 11:48:36.450"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.461" starttime="20151106 11:48:36.457"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.467" starttime="20151106 11:48:36.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.472" starttime="20151106 11:48:36.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:36.478" starttime="20151106 11:48:36.474"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:36.479" starttime="20151106 11:48:36.256"></status>
</kw>
<doc>Test will attempt to start the subscription management USSD menu and make a data bundle purchase
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>USSD_only</tag>
<tag>VMCO_specific</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151106 11:48:36.482" starttime="20151106 11:48:31.377"></status>
</test>
<test id="s1-t5" name="Test What Is My Number">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for further evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20151106 11:48:36.531" level="INFO">Killed</msg>
<status status="PASS" endtime="20151106 11:48:36.533" starttime="20151106 11:48:36.524"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:37.097" level="INFO">[1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:37.100" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20151106 11:48:37.098" starttime="20151106 11:48:36.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20151106 11:48:37.104" level="INFO">USSD Start: [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:37.104" starttime="20151106 11:48:37.101"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20151106 11:48:39.108" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20151106 11:48:39.112" starttime="20151106 11:48:37.105"></status>
</kw>
<msg timestamp="20151106 11:48:39.122" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20151106 11:48:39.120" starttime="20151106 11:48:36.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for VAS menu item</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:39.128" level="INFO">Pressing 3 for VAS menu item</msg>
<status status="PASS" endtime="20151106 11:48:39.130" starttime="20151106 11:48:39.125"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20151106 11:48:39.138" level="INFO">3</msg>
<status status="PASS" endtime="20151106 11:48:39.140" starttime="20151106 11:48:39.132"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:39.160" level="INFO">=====================
Que quieres hacer?
1 Switch on/off tus datos
2 Pide un credito
4 Pide que te llamen
5 Conoce tu numero
Marca * para regresar, # para salir. 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:39.163" level="INFO">${output} = =====================
Que quieres hacer?
1 Switch on/off tus datos
2 Pide un credito
4 Pide que te llamen
5 Conoce tu numero
Marca * para regresar, # para salir. 
=====================
User in...</msg>
<status status="PASS" endtime="20151106 11:48:39.161" starttime="20151106 11:48:39.142"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 5 for what is my number service</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:39.169" level="INFO">Pressing 5 for what is my number service</msg>
<status status="PASS" endtime="20151106 11:48:39.170" starttime="20151106 11:48:39.165"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20151106 11:48:39.179" level="INFO">5</msg>
<status status="PASS" endtime="20151106 11:48:39.180" starttime="20151106 11:48:39.172"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:39.202" level="INFO">=====================
Tu numero Virgin es 3190001000
Marca * para regresar, # para salir. 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:39.205" level="INFO">${output} = =====================
Tu numero Virgin es 3190001000
Marca * para regresar, # para salir. 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:39.204" starttime="20151106 11:48:39.183"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>3190001000</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.212" starttime="20151106 11:48:39.208"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.236" starttime="20151106 11:48:39.232"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20151106 11:48:39.241" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20151106 11:48:39.286" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151106 11:48:39.289" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20151106 11:48:39.288" starttime="20151106 11:48:39.238"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.295" starttime="20151106 11:48:39.292"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.301" starttime="20151106 11:48:39.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.306" starttime="20151106 11:48:39.303"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20151106 11:48:39.314" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20151106 11:48:39.370" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151106 11:48:39.373" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20151106 11:48:39.374" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151106 11:48:39.372" starttime="20151106 11:48:39.308"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.386" starttime="20151106 11:48:39.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.391" starttime="20151106 11:48:39.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.396" starttime="20151106 11:48:39.393"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.402" starttime="20151106 11:48:39.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.408" starttime="20151106 11:48:39.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.413" starttime="20151106 11:48:39.410"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.420" starttime="20151106 11:48:39.415"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.426" starttime="20151106 11:48:39.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.431" starttime="20151106 11:48:39.428"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.436" starttime="20151106 11:48:39.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:39.441" starttime="20151106 11:48:39.438"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:39.443" starttime="20151106 11:48:39.216"></status>
</kw>
<doc>Test will start the USSD menu item that shows subscriber's MSISDN
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>USSD_only</tag>
<tag>VMCO_specific</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151106 11:48:39.446" starttime="20151106 11:48:36.487"></status>
</test>
<test id="s1-t6" name="Test Data Switch">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for further evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20151106 11:48:39.492" level="INFO">Killed</msg>
<status status="PASS" endtime="20151106 11:48:39.493" starttime="20151106 11:48:39.485"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:40.017" level="INFO">[1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:40.020" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20151106 11:48:40.019" starttime="20151106 11:48:39.495"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20151106 11:48:40.024" level="INFO">USSD Start: [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:40.024" starttime="20151106 11:48:40.022"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20151106 11:48:42.027" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20151106 11:48:42.030" starttime="20151106 11:48:40.025"></status>
</kw>
<msg timestamp="20151106 11:48:42.037" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20151106 11:48:42.035" starttime="20151106 11:48:39.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for VAS menu item</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:42.043" level="INFO">Pressing 3 for VAS menu item</msg>
<status status="PASS" endtime="20151106 11:48:42.044" starttime="20151106 11:48:42.039"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20151106 11:48:42.052" level="INFO">3</msg>
<status status="PASS" endtime="20151106 11:48:42.054" starttime="20151106 11:48:42.046"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:42.072" level="INFO">=====================
Que quieres hacer?
1 Switch on/off tus datos
2 Pide un credito
4 Pide que te llamen
5 Conoce tu numero
Marca * para regresar, # para salir. 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:42.074" level="INFO">${output} = =====================
Que quieres hacer?
1 Switch on/off tus datos
2 Pide un credito
4 Pide que te llamen
5 Conoce tu numero
Marca * para regresar, # para salir. 
=====================
User in...</msg>
<status status="PASS" endtime="20151106 11:48:42.073" starttime="20151106 11:48:42.056"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for data switch</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:42.080" level="INFO">Pressing 1 for data switch</msg>
<status status="PASS" endtime="20151106 11:48:42.081" starttime="20151106 11:48:42.077"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20151106 11:48:42.089" level="INFO">1</msg>
<status status="PASS" endtime="20151106 11:48:42.090" starttime="20151106 11:48:42.084"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:42.127" level="INFO">=====================
Tus datos tienen poder: estan ON, prendidos! Si quieres apagarlos para ahorrar marca 2 
Marca * para regresar # para salir 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:42.130" level="INFO">${output} = =====================
Tus datos tienen poder: estan ON, prendidos! Si quieres apagarlos para ahorrar marca 2 
Marca * para regresar # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:42.128" starttime="20151106 11:48:42.093"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Tus datos tienen poder: estan ON, prendidos!</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.136" starttime="20151106 11:48:42.132"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for data switch set to off</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:42.141" level="INFO">Pressing 2 for data switch set to off</msg>
<status status="PASS" endtime="20151106 11:48:42.143" starttime="20151106 11:48:42.138"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20151106 11:48:42.151" level="INFO">2</msg>
<status status="PASS" endtime="20151106 11:48:42.152" starttime="20151106 11:48:42.146"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:42.558" level="INFO">=====================
Bienvenido al ahorro! Tus datos estan OFF. Chevere que cuidemos tu platica, cierto? 
Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:42.561" level="INFO">${output} = =====================
Bienvenido al ahorro! Tus datos estan OFF. Chevere que cuidemos tu platica, cierto? 
Marca * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:42.560" starttime="20151106 11:48:42.155"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Bienvenido al ahorro! Tus datos estan OFF.</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.564" starttime="20151106 11:48:42.562"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.575" starttime="20151106 11:48:42.573"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20151106 11:48:42.577" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20151106 11:48:42.608" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151106 11:48:42.611" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20151106 11:48:42.610" starttime="20151106 11:48:42.576"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.616" starttime="20151106 11:48:42.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.621" starttime="20151106 11:48:42.618"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.627" starttime="20151106 11:48:42.623"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20151106 11:48:42.634" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20151106 11:48:42.680" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151106 11:48:42.683" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20151106 11:48:42.684" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151106 11:48:42.682" starttime="20151106 11:48:42.629"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.695" starttime="20151106 11:48:42.686"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.700" starttime="20151106 11:48:42.697"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.706" starttime="20151106 11:48:42.702"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.711" starttime="20151106 11:48:42.708"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.716" starttime="20151106 11:48:42.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.722" starttime="20151106 11:48:42.718"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.728" starttime="20151106 11:48:42.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.734" starttime="20151106 11:48:42.730"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.739" starttime="20151106 11:48:42.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.744" starttime="20151106 11:48:42.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:42.750" starttime="20151106 11:48:42.746"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:42.751" starttime="20151106 11:48:42.565"></status>
</kw>
<doc>Test will use the USSD menu to switch on the subscriber's data service
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>USSD_only</tag>
<tag>VMCO_specific</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151106 11:48:42.753" starttime="20151106 11:48:39.450"></status>
</test>
<test id="s1-t7" name="Test Call Me Back">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for further evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20151106 11:48:42.793" level="INFO">Killed</msg>
<status status="PASS" endtime="20151106 11:48:42.795" starttime="20151106 11:48:42.787"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:43.346" level="INFO">[1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:43.349" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20151106 11:48:43.348" starttime="20151106 11:48:42.796"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20151106 11:48:43.353" level="INFO">USSD Start: [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:43.353" starttime="20151106 11:48:43.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20151106 11:48:45.357" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20151106 11:48:45.360" starttime="20151106 11:48:43.354"></status>
</kw>
<msg timestamp="20151106 11:48:45.365" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20151106 11:48:45.363" starttime="20151106 11:48:42.773"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for VAS menu item</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:45.371" level="INFO">Pressing 3 for VAS menu item</msg>
<status status="PASS" endtime="20151106 11:48:45.372" starttime="20151106 11:48:45.368"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20151106 11:48:45.380" level="INFO">3</msg>
<status status="PASS" endtime="20151106 11:48:45.382" starttime="20151106 11:48:45.374"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:45.400" level="INFO">=====================
Que quieres hacer?
1 Switch on/off tus datos
2 Pide un credito
4 Pide que te llamen
5 Conoce tu numero
Marca * para regresar, # para salir. 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:45.402" level="INFO">${output} = =====================
Que quieres hacer?
1 Switch on/off tus datos
2 Pide un credito
4 Pide que te llamen
5 Conoce tu numero
Marca * para regresar, # para salir. 
=====================
User in...</msg>
<status status="PASS" endtime="20151106 11:48:45.401" starttime="20151106 11:48:45.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 4 for call me back service</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:45.408" level="INFO">Pressing 4 for call me back service</msg>
<status status="PASS" endtime="20151106 11:48:45.409" starttime="20151106 11:48:45.404"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20151106 11:48:45.416" level="INFO">4</msg>
<status status="PASS" endtime="20151106 11:48:45.417" starttime="20151106 11:48:45.411"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:45.451" level="INFO">=====================
Por favor ingresa el numero de celu del amigo que quieres que te
llame! 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:45.454" level="INFO">${output} = =====================
Por favor ingresa el numero de celu del amigo que quieres que te
llame! 
=====================
User input:</msg>
<status status="PASS" endtime="20151106 11:48:45.453" starttime="20151106 11:48:45.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Entering the mobile number</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20151106 11:48:45.459" level="INFO">Entering the mobile number</msg>
<status status="PASS" endtime="20151106 11:48:45.461" starttime="20151106 11:48:45.456"></status>
</kw>
<kw type="kw" name="${recipient} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20151106 11:48:45.474" level="INFO">${recipient} = 573190001001</msg>
<status status="PASS" endtime="20151106 11:48:45.472" starttime="20151106 11:48:45.463"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${recipient}</arg>
</arguments>
<msg timestamp="20151106 11:48:45.482" level="INFO">573190001001</msg>
<status status="PASS" endtime="20151106 11:48:45.483" starttime="20151106 11:48:45.476"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20151106 11:48:45.533" level="INFO">=====================
El mensaje fue enviado a tu amigo al celu 3190001001,
esperemos que te devuelva la llamada! Si no, marcale tu... 
Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20151106 11:48:45.535" level="INFO">${output} = =====================
El mensaje fue enviado a tu amigo al celu 3190001001,
esperemos que te devuelva la llamada! Si no, marcale tu... 
Marca * para regresar, # para salir 
=====================
...</msg>
<status status="PASS" endtime="20151106 11:48:45.534" starttime="20151106 11:48:45.486"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>El mensaje fue enviado a tu amigo</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.542" starttime="20151106 11:48:45.538"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.563" starttime="20151106 11:48:45.560"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20151106 11:48:45.568" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20151106 11:48:45.616" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151106 11:48:45.618" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20151106 11:48:45.617" starttime="20151106 11:48:45.565"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.624" starttime="20151106 11:48:45.620"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.629" starttime="20151106 11:48:45.626"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.634" starttime="20151106 11:48:45.631"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20151106 11:48:45.641" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20151106 11:48:45.699" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20151106 11:48:45.702" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20151106 11:48:45.703" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20151106 11:48:45.701" starttime="20151106 11:48:45.636"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.713" starttime="20151106 11:48:45.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.718" starttime="20151106 11:48:45.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.723" starttime="20151106 11:48:45.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.729" starttime="20151106 11:48:45.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.734" starttime="20151106 11:48:45.730"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.739" starttime="20151106 11:48:45.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.745" starttime="20151106 11:48:45.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.751" starttime="20151106 11:48:45.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.756" starttime="20151106 11:48:45.753"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.761" starttime="20151106 11:48:45.758"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.766" starttime="20151106 11:48:45.763"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:45.768" starttime="20151106 11:48:45.545"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>USSD_only</tag>
<tag>VMCO_specific</tag>
</tags>
<status status="PASS" critical="yes" endtime="20151106 11:48:45.770" starttime="20151106 11:48:42.757"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20151106 11:48:45.821" starttime="20151106 11:48:45.815"></status>
</kw>
<status status="PASS" endtime="20151106 11:48:45.824" starttime="20151106 11:48:45.802"></status>
</kw>
<doc>This suite uses USSDtest.py class to test the USSD interface. Various test cases (scenarios) will be checked. As USSD self care menus are different from customer to customer - so are these tests. The goal is to make a rough check of the main (and not all) functions - menu items.</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20151106 11:48:45.825" starttime="20151106 11:48:07.495"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="7" info="" doc="" combined="" fail="0" links="">matko.sanseovic</stat>
<stat pass="7" info="" doc="" combined="" fail="0" links="">USSD_only</stat>
<stat pass="7" info="" doc="" combined="" fail="0" links="">VMCO_specific</stat>
</tag>
<suite>
<stat pass="7" id="s1" fail="0" name="Ussd-Robot-Suite">Ussd-Robot-Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
